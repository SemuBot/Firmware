
L476RGG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011134  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  080112c8  080112c8  000122c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801188c  0801188c  00013370  2**0
                  CONTENTS
  4 .ARM          00000008  0801188c  0801188c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011894  08011894  00013370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011894  08011894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011898  08011898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000370  20000000  0801189c  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002044  20000370  08011c0c  00013370  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023b4  08011c0c  000133b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013370  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021895  00000000  00000000  000133a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ec9  00000000  00000000  00034c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00039b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cf  00000000  00000000  0003b628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c5af  00000000  00000000  0003caf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022819  00000000  00000000  000690a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb7dc  00000000  00000000  0008b8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018709b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088c4  00000000  00000000  001870e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018f9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000370 	.word	0x20000370
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080112ac 	.word	0x080112ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000374 	.word	0x20000374
 80001cc:	080112ac 	.word	0x080112ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <USART_Receive_CmdVel>:
#define BUFFER_SIZE 256

static char usart_buffer[BUFFER_SIZE];
static uint8_t rx_data;

void USART_Receive_CmdVel(UART_HandleTypeDef *huart, CmdVel *cmd_vel) {
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
    static uint16_t index = 0;

    if (rx_data == '\n' || index >= BUFFER_SIZE - 1) {
 8000fee:	4b2d      	ldr	r3, [pc, #180]	@ (80010a4 <USART_Receive_CmdVel+0xc0>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b0a      	cmp	r3, #10
 8000ff4:	d003      	beq.n	8000ffe <USART_Receive_CmdVel+0x1a>
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80010a8 <USART_Receive_CmdVel+0xc4>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ffc:	d93d      	bls.n	800107a <USART_Receive_CmdVel+0x96>
        usart_buffer[index] = '\0';
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80010a8 <USART_Receive_CmdVel+0xc4>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	4b29      	ldr	r3, [pc, #164]	@ (80010ac <USART_Receive_CmdVel+0xc8>)
 8001006:	2100      	movs	r1, #0
 8001008:	5499      	strb	r1, [r3, r2]
        index = 0;
 800100a:	4b27      	ldr	r3, [pc, #156]	@ (80010a8 <USART_Receive_CmdVel+0xc4>)
 800100c:	2200      	movs	r2, #0
 800100e:	801a      	strh	r2, [r3, #0]

        if (strstr(usart_buffer, "linear_x") && strstr(usart_buffer, "angular_z")) {
 8001010:	4927      	ldr	r1, [pc, #156]	@ (80010b0 <USART_Receive_CmdVel+0xcc>)
 8001012:	4826      	ldr	r0, [pc, #152]	@ (80010ac <USART_Receive_CmdVel+0xc8>)
 8001014:	f00c f90d 	bl	800d232 <strstr>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d01f      	beq.n	800105e <USART_Receive_CmdVel+0x7a>
 800101e:	4925      	ldr	r1, [pc, #148]	@ (80010b4 <USART_Receive_CmdVel+0xd0>)
 8001020:	4822      	ldr	r0, [pc, #136]	@ (80010ac <USART_Receive_CmdVel+0xc8>)
 8001022:	f00c f906 	bl	800d232 <strstr>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d018      	beq.n	800105e <USART_Receive_CmdVel+0x7a>
            sscanf(
 800102c:	683c      	ldr	r4, [r7, #0]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	1d1d      	adds	r5, r3, #4
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	3308      	adds	r3, #8
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	320c      	adds	r2, #12
 800103a:	6839      	ldr	r1, [r7, #0]
 800103c:	3110      	adds	r1, #16
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	3014      	adds	r0, #20
 8001042:	9003      	str	r0, [sp, #12]
 8001044:	9102      	str	r1, [sp, #8]
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	462b      	mov	r3, r5
 800104c:	4622      	mov	r2, r4
 800104e:	491a      	ldr	r1, [pc, #104]	@ (80010b8 <USART_Receive_CmdVel+0xd4>)
 8001050:	4816      	ldr	r0, [pc, #88]	@ (80010ac <USART_Receive_CmdVel+0xc8>)
 8001052:	f00c f877 	bl	800d144 <siscanf>
                &cmd_vel->angular_x,
                &cmd_vel->angular_y,
                &cmd_vel->angular_z
            );

            Process_CmdVel(cmd_vel);
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f000 f832 	bl	80010c0 <Process_CmdVel>
        if (strstr(usart_buffer, "linear_x") && strstr(usart_buffer, "angular_z")) {
 800105c:	e018      	b.n	8001090 <USART_Receive_CmdVel+0xac>

        } else {
            const char *error_msg = "Invalid cmd_vel format\n";
 800105e:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <USART_Receive_CmdVel+0xd8>)
 8001060:	60fb      	str	r3, [r7, #12]
            HAL_UART_Transmit(huart, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f7ff f904 	bl	8000270 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001070:	68f9      	ldr	r1, [r7, #12]
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f005 fcec 	bl	8006a50 <HAL_UART_Transmit>
        if (strstr(usart_buffer, "linear_x") && strstr(usart_buffer, "angular_z")) {
 8001078:	e00a      	b.n	8001090 <USART_Receive_CmdVel+0xac>
        }
    } else {
        usart_buffer[index++] = rx_data;
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <USART_Receive_CmdVel+0xc4>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	b291      	uxth	r1, r2
 8001082:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <USART_Receive_CmdVel+0xc4>)
 8001084:	8011      	strh	r1, [r2, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <USART_Receive_CmdVel+0xc0>)
 800108a:	7819      	ldrb	r1, [r3, #0]
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <USART_Receive_CmdVel+0xc8>)
 800108e:	5499      	strb	r1, [r3, r2]
    }

    HAL_UART_Receive_IT(huart, &rx_data, 1);
 8001090:	2201      	movs	r2, #1
 8001092:	4904      	ldr	r1, [pc, #16]	@ (80010a4 <USART_Receive_CmdVel+0xc0>)
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f005 fd65 	bl	8006b64 <HAL_UART_Receive_IT>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdb0      	pop	{r4, r5, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000048c 	.word	0x2000048c
 80010a8:	2000048e 	.word	0x2000048e
 80010ac:	2000038c 	.word	0x2000038c
 80010b0:	080112c8 	.word	0x080112c8
 80010b4:	080112d4 	.word	0x080112d4
 80010b8:	080112e0 	.word	0x080112e0
 80010bc:	08011330 	.word	0x08011330

080010c0 <Process_CmdVel>:

void Process_CmdVel(CmdVel *cmd_vel) {
 80010c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010c4:	b0b2      	sub	sp, #200	@ 0xc8
 80010c6:	af0c      	add	r7, sp, #48	@ 0x30
 80010c8:	6178      	str	r0, [r7, #20]
    char debug_msg[128];

    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80010ca:	2120      	movs	r1, #32
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d0:	f001 fc40 	bl	8002954 <HAL_GPIO_TogglePin>

    snprintf(
        debug_msg,
        sizeof(debug_msg),
        "Linear: [X: %.2f, Y: %.2f, Z: %.2f], Angular: [X: %.2f, Y: %.2f, Z: %.2f]\n",
        cmd_vel->linear_x,
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	681b      	ldr	r3, [r3, #0]
    snprintf(
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa35 	bl	8000548 <__aeabi_f2d>
 80010de:	4604      	mov	r4, r0
 80010e0:	460d      	mov	r5, r1
        cmd_vel->linear_y,
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	685b      	ldr	r3, [r3, #4]
    snprintf(
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa2e 	bl	8000548 <__aeabi_f2d>
 80010ec:	4680      	mov	r8, r0
 80010ee:	4689      	mov	r9, r1
        cmd_vel->linear_z,
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	689b      	ldr	r3, [r3, #8]
    snprintf(
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa27 	bl	8000548 <__aeabi_f2d>
 80010fa:	4682      	mov	sl, r0
 80010fc:	468b      	mov	fp, r1
        cmd_vel->angular_x,
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	68db      	ldr	r3, [r3, #12]
    snprintf(
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa20 	bl	8000548 <__aeabi_f2d>
 8001108:	e9c7 0102 	strd	r0, r1, [r7, #8]
        cmd_vel->angular_y,
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	691b      	ldr	r3, [r3, #16]
    snprintf(
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa19 	bl	8000548 <__aeabi_f2d>
 8001116:	e9c7 0100 	strd	r0, r1, [r7]
        cmd_vel->angular_z
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	695b      	ldr	r3, [r3, #20]
    snprintf(
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa12 	bl	8000548 <__aeabi_f2d>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	f107 0018 	add.w	r0, r7, #24
 800112c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001130:	ed97 7b00 	vldr	d7, [r7]
 8001134:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001138:	ed97 7b02 	vldr	d7, [r7, #8]
 800113c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001140:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001144:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001148:	e9cd 4500 	strd	r4, r5, [sp]
 800114c:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <Process_CmdVel+0xbc>)
 800114e:	2180      	movs	r1, #128	@ 0x80
 8001150:	f00b ffa4 	bl	800d09c <sniprintf>
    );

    HAL_UART_Transmit(&huart2, (uint8_t *)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f889 	bl	8000270 <strlen>
 800115e:	4603      	mov	r3, r0
 8001160:	b29a      	uxth	r2, r3
 8001162:	f107 0118 	add.w	r1, r7, #24
 8001166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800116a:	4805      	ldr	r0, [pc, #20]	@ (8001180 <Process_CmdVel+0xc0>)
 800116c:	f005 fc70 	bl	8006a50 <HAL_UART_Transmit>
}
 8001170:	bf00      	nop
 8001172:	3798      	adds	r7, #152	@ 0x98
 8001174:	46bd      	mov	sp, r7
 8001176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800117a:	bf00      	nop
 800117c:	08011348 	.word	0x08011348
 8001180:	200005f8 	.word	0x200005f8

08001184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	4b37      	ldr	r3, [pc, #220]	@ (8001278 <MX_GPIO_Init+0xf4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a36      	ldr	r2, [pc, #216]	@ (8001278 <MX_GPIO_Init+0xf4>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b34      	ldr	r3, [pc, #208]	@ (8001278 <MX_GPIO_Init+0xf4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	4b31      	ldr	r3, [pc, #196]	@ (8001278 <MX_GPIO_Init+0xf4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a30      	ldr	r2, [pc, #192]	@ (8001278 <MX_GPIO_Init+0xf4>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b2e      	ldr	r3, [pc, #184]	@ (8001278 <MX_GPIO_Init+0xf4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001278 <MX_GPIO_Init+0xf4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001278 <MX_GPIO_Init+0xf4>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d6:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <MX_GPIO_Init+0xf4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <MX_GPIO_Init+0xf4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a24      	ldr	r2, [pc, #144]	@ (8001278 <MX_GPIO_Init+0xf4>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <MX_GPIO_Init+0xf4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CS_ENC_1_Pin|CS_ENC_2_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001200:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001204:	f001 fb8e 	bl	8002924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_ENC_3_Pin|MOTOR3_DIR_Pin|MOTOR2_DIR_Pin|MOTOR1_DIR_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800120e:	481b      	ldr	r0, [pc, #108]	@ (800127c <MX_GPIO_Init+0xf8>)
 8001210:	f001 fb88 	bl	8002924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001214:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4814      	ldr	r0, [pc, #80]	@ (800127c <MX_GPIO_Init+0xf8>)
 800122c:	f001 f9d0 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|CS_ENC_1_Pin|CS_ENC_2_Pin;
 8001230:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124c:	f001 f9c0 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_ENC_3_Pin|MOTOR3_DIR_Pin|MOTOR2_DIR_Pin|MOTOR1_DIR_Pin;
 8001250:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_GPIO_Init+0xf8>)
 800126a:	f001 f9b1 	bl	80025d0 <HAL_GPIO_Init>

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	@ 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	48000800 	.word	0x48000800

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001286:	f000 ff73 	bl	8002170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128a:	f000 f841 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128e:	f7ff ff79 	bl	8001184 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001292:	f000 fc83 	bl	8001b9c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001296:	f000 fead 	bl	8001ff4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800129a:	f00a f99b 	bl	800b5d4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800129e:	f000 fd0d 	bl	8001cbc <MX_TIM3_Init>
  MX_TIM4_Init();
 80012a2:	f000 fd65 	bl	8001d70 <MX_TIM4_Init>
  MX_SPI2_Init();
 80012a6:	f000 fa27 	bl	80016f8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80012aa:	2201      	movs	r2, #1
 80012ac:	4912      	ldr	r1, [pc, #72]	@ (80012f8 <main+0x78>)
 80012ae:	4813      	ldr	r0, [pc, #76]	@ (80012fc <main+0x7c>)
 80012b0:	f005 fc58 	bl	8006b64 <HAL_UART_Receive_IT>

  timer_init();
 80012b4:	f000 fc58 	bl	8001b68 <timer_init>
  SPI_init();
 80012b8:	f000 fac6 	bl	8001848 <SPI_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	float linear_x = cmd_vel_data.linear_x;
 80012bc:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <main+0x80>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
	float linear_y = cmd_vel_data.linear_y;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <main+0x80>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	60bb      	str	r3, [r7, #8]
	float omega = cmd_vel_data.angular_z;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <main+0x80>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	607b      	str	r3, [r7, #4]

	calculate_motor_duty_cycles(linear_x, linear_y, omega, &motor1, &motor2, &motor3);
 80012ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <main+0x84>)
 80012d0:	490d      	ldr	r1, [pc, #52]	@ (8001308 <main+0x88>)
 80012d2:	480e      	ldr	r0, [pc, #56]	@ (800130c <main+0x8c>)
 80012d4:	ed97 1a01 	vldr	s2, [r7, #4]
 80012d8:	edd7 0a02 	vldr	s1, [r7, #8]
 80012dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80012e0:	f000 f92c 	bl	800153c <calculate_motor_duty_cycles>

	HAL_Delay(10); // Small delay for control loop timing
 80012e4:	200a      	movs	r0, #10
 80012e6:	f000 ffbf 	bl	8002268 <HAL_Delay>
	//HAL_Delay(2000);
	//motor.duty_cycle = -20.0;
	//motor_update(&motor);
	  HAL_Delay(2000);
 80012ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012ee:	f000 ffbb 	bl	8002268 <HAL_Delay>
  {
 80012f2:	bf00      	nop
 80012f4:	e7e2      	b.n	80012bc <main+0x3c>
 80012f6:	bf00      	nop
 80012f8:	200004a8 	.word	0x200004a8
 80012fc:	200005f8 	.word	0x200005f8
 8001300:	20000490 	.word	0x20000490
 8001304:	20000050 	.word	0x20000050
 8001308:	20000028 	.word	0x20000028
 800130c:	20000000 	.word	0x20000000

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b096      	sub	sp, #88	@ 0x58
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2244      	movs	r2, #68	@ 0x44
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f00b ff7f 	bl	800d222 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001332:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001336:	f002 fcdb 	bl	8003cf0 <HAL_PWREx_ControlVoltageScaling>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001340:	f000 f864 	bl	800140c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001344:	f002 fcb6 	bl	8003cb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001348:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <SystemClock_Config+0xc0>)
 800134a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800134e:	4a20      	ldr	r2, [pc, #128]	@ (80013d0 <SystemClock_Config+0xc0>)
 8001350:	f023 0318 	bic.w	r3, r3, #24
 8001354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001358:	2314      	movs	r3, #20
 800135a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800135c:	2301      	movs	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001368:	2360      	movs	r3, #96	@ 0x60
 800136a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136c:	2302      	movs	r3, #2
 800136e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001370:	2301      	movs	r3, #1
 8001372:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001374:	2301      	movs	r3, #1
 8001376:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001378:	2324      	movs	r3, #36	@ 0x24
 800137a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800137c:	2307      	movs	r3, #7
 800137e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001380:	2302      	movs	r3, #2
 8001382:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fd15 	bl	8003dbc <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001398:	f000 f838 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2303      	movs	r3, #3
 80013a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	2104      	movs	r1, #4
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 f8dd 	bl	8004574 <HAL_RCC_ClockConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013c0:	f000 f824 	bl	800140c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013c4:	f003 fde4 	bl	8004f90 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013c8:	bf00      	nop
 80013ca:	3758      	adds	r7, #88	@ 0x58
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000

080013d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a07      	ldr	r2, [pc, #28]	@ (8001400 <HAL_UART_RxCpltCallback+0x2c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d108      	bne.n	80013f8 <HAL_UART_RxCpltCallback+0x24>
        USART_Receive_CmdVel(huart, &cmd_vel_data);
 80013e6:	4907      	ldr	r1, [pc, #28]	@ (8001404 <HAL_UART_RxCpltCallback+0x30>)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fdfb 	bl	8000fe4 <USART_Receive_CmdVel>
        HAL_UART_Receive_IT(huart, &rx_data, 1);
 80013ee:	2201      	movs	r2, #1
 80013f0:	4905      	ldr	r1, [pc, #20]	@ (8001408 <HAL_UART_RxCpltCallback+0x34>)
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f005 fbb6 	bl	8006b64 <HAL_UART_Receive_IT>
    }
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40004400 	.word	0x40004400
 8001404:	20000490 	.word	0x20000490
 8001408:	200004a8 	.word	0x200004a8

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <Error_Handler+0x8>

08001418 <motor_update>:
}



void motor_update(motor_st *motor_data)
{
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b094      	sub	sp, #80	@ 0x50
 800141c:	af02      	add	r7, sp, #8
 800141e:	6078      	str	r0, [r7, #4]
    uint16_t scaled_duty_cycle;
    uint16_t arr_value = __HAL_TIM_GET_AUTORELOAD(motor_data->pwm_timer);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001428:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

    // Check if the motor is enabled
    if (motor_data->duty_cycle >= 0)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	f7ff fb63 	bl	8000b04 <__aeabi_dcmpge>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00b      	beq.n	800145c <motor_update+0x44>
    {
        motor_enable(motor_data);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f93b 	bl	80016c0 <motor_enable>
        HAL_GPIO_WritePin(motor_data->dir_port, motor_data->dir_pin, GPIO_PIN_SET);    }
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	889b      	ldrh	r3, [r3, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	4619      	mov	r1, r3
 8001456:	f001 fa65 	bl	8002924 <HAL_GPIO_WritePin>
 800145a:	e01b      	b.n	8001494 <motor_update+0x7c>
    else if (motor_data->duty_cycle < 0)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	f7ff fb37 	bl	8000adc <__aeabi_dcmplt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00b      	beq.n	800148c <motor_update+0x74>
    {
        HAL_GPIO_WritePin(motor_data->dir_port, motor_data->dir_pin, GPIO_PIN_RESET);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	889b      	ldrh	r3, [r3, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	f001 fa50 	bl	8002924 <HAL_GPIO_WritePin>
        motor_enable(motor_data);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f91b 	bl	80016c0 <motor_enable>
 800148a:	e003      	b.n	8001494 <motor_update+0x7c>
    }
    else
    {
        motor_disable(motor_data);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f925 	bl	80016dc <motor_disable>
 8001492:	e049      	b.n	8001528 <motor_update+0x110>
        return;
    }

    // Scale the duty cycle based on the motor's duty cycle
    scaled_duty_cycle = (uint16_t)((fabs(motor_data->duty_cycle) / 100.0f) * arr_value);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800149a:	4614      	mov	r4, r2
 800149c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b22      	ldr	r3, [pc, #136]	@ (8001530 <motor_update+0x118>)
 80014a6:	4620      	mov	r0, r4
 80014a8:	4629      	mov	r1, r5
 80014aa:	f7ff f9cf 	bl	800084c <__aeabi_ddiv>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4614      	mov	r4, r2
 80014b4:	461d      	mov	r5, r3
 80014b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f832 	bl	8000524 <__aeabi_i2d>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7ff f896 	bl	80005f8 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb68 	bl	8000ba8 <__aeabi_d2uiz>
 80014d8:	4603      	mov	r3, r0
 80014da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if (scaled_duty_cycle > arr_value)
 80014de:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80014e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d903      	bls.n	80014f2 <motor_update+0xda>
    {
        scaled_duty_cycle = arr_value;
 80014ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80014ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    }

    __HAL_TIM_SET_COMPARE(motor_data->pwm_timer, TIM_CHANNEL_1, scaled_duty_cycle);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80014fc:	635a      	str	r2, [r3, #52]	@ 0x34
    char duty_cycle_str[50];
    int len = snprintf(duty_cycle_str, sizeof(duty_cycle_str), "Duty Cycle: %.2f\n", motor_data->duty_cycle);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001504:	f107 000c 	add.w	r0, r7, #12
 8001508:	e9cd 2300 	strd	r2, r3, [sp]
 800150c:	4a09      	ldr	r2, [pc, #36]	@ (8001534 <motor_update+0x11c>)
 800150e:	2132      	movs	r1, #50	@ 0x32
 8001510:	f00b fdc4 	bl	800d09c <sniprintf>
 8001514:	6438      	str	r0, [r7, #64]	@ 0x40
    HAL_UART_Transmit(&huart2, (uint8_t *)duty_cycle_str, len, HAL_MAX_DELAY);
 8001516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001518:	b29a      	uxth	r2, r3
 800151a:	f107 010c 	add.w	r1, r7, #12
 800151e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001522:	4805      	ldr	r0, [pc, #20]	@ (8001538 <motor_update+0x120>)
 8001524:	f005 fa94 	bl	8006a50 <HAL_UART_Transmit>
}
 8001528:	3748      	adds	r7, #72	@ 0x48
 800152a:	46bd      	mov	sp, r7
 800152c:	bdb0      	pop	{r4, r5, r7, pc}
 800152e:	bf00      	nop
 8001530:	40590000 	.word	0x40590000
 8001534:	08011394 	.word	0x08011394
 8001538:	200005f8 	.word	0x200005f8

0800153c <calculate_motor_duty_cycles>:



void calculate_motor_duty_cycles(float linear_x, float linear_y, float omega, motor_st *motor1, motor_st *motor2, motor_st *motor3) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	ed87 0a05 	vstr	s0, [r7, #20]
 8001546:	edc7 0a04 	vstr	s1, [r7, #16]
 800154a:	ed87 1a03 	vstr	s2, [r7, #12]
 800154e:	60b8      	str	r0, [r7, #8]
 8001550:	6079      	str	r1, [r7, #4]
 8001552:	603a      	str	r2, [r7, #0]

    float duty_cycle_1 = (linear_x * cosf(MOTOR1_ANGLE) + linear_y * sinf(MOTOR1_ANGLE) + (omega * ROBOT_RADIUS)) * PWM_SCALING_FACTOR;
 8001554:	edd7 7a05 	vldr	s15, [r7, #20]
 8001558:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80016a0 <calculate_motor_duty_cycles+0x164>
 800155c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001560:	edd7 7a04 	vldr	s15, [r7, #16]
 8001564:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80016a4 <calculate_motor_duty_cycles+0x168>
 8001568:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800156c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001570:	edd7 7a03 	vldr	s15, [r7, #12]
 8001574:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 80016a8 <calculate_motor_duty_cycles+0x16c>
 8001578:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800157c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001580:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80016ac <calculate_motor_duty_cycles+0x170>
 8001584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001588:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float duty_cycle_2 = (linear_x * cosf(MOTOR2_ANGLE) + linear_y * sinf(MOTOR2_ANGLE) + (omega * ROBOT_RADIUS)) * PWM_SCALING_FACTOR;
 800158c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001590:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80016b0 <calculate_motor_duty_cycles+0x174>
 8001594:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001598:	edd7 7a04 	vldr	s15, [r7, #16]
 800159c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80016b4 <calculate_motor_duty_cycles+0x178>
 80015a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ac:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80016a8 <calculate_motor_duty_cycles+0x16c>
 80015b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b8:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80016ac <calculate_motor_duty_cycles+0x170>
 80015bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c0:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_cycle_3 = (linear_x * cosf(MOTOR3_ANGLE) + linear_y * sinf(MOTOR3_ANGLE) + (omega * ROBOT_RADIUS)) * PWM_SCALING_FACTOR;
 80015c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c8:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80016b8 <calculate_motor_duty_cycles+0x17c>
 80015cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015dc:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80016a8 <calculate_motor_duty_cycles+0x16c>
 80015e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80016ac <calculate_motor_duty_cycles+0x170>
 80015ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f0:	edc7 7a07 	vstr	s15, [r7, #28]

    duty_cycle_1 = fmaxf(-100.0f, fminf(100.0f, duty_cycle_1));
 80015f4:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80016ac <calculate_motor_duty_cycles+0x170>
 80015f8:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80015fc:	f00f fe1d 	bl	801123a <fminf>
 8001600:	eef0 7a40 	vmov.f32	s15, s0
 8001604:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80016bc <calculate_motor_duty_cycles+0x180>
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	f00f fdf8 	bl	8011200 <fmaxf>
 8001610:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    duty_cycle_2 = fmaxf(-100.0f, fminf(100.0f, duty_cycle_2));
 8001614:	eddf 0a25 	vldr	s1, [pc, #148]	@ 80016ac <calculate_motor_duty_cycles+0x170>
 8001618:	ed97 0a08 	vldr	s0, [r7, #32]
 800161c:	f00f fe0d 	bl	801123a <fminf>
 8001620:	eef0 7a40 	vmov.f32	s15, s0
 8001624:	eddf 0a25 	vldr	s1, [pc, #148]	@ 80016bc <calculate_motor_duty_cycles+0x180>
 8001628:	eeb0 0a67 	vmov.f32	s0, s15
 800162c:	f00f fde8 	bl	8011200 <fmaxf>
 8001630:	ed87 0a08 	vstr	s0, [r7, #32]
    duty_cycle_3 = fmaxf(-100.0f, fminf(100.0f, duty_cycle_3));
 8001634:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80016ac <calculate_motor_duty_cycles+0x170>
 8001638:	ed97 0a07 	vldr	s0, [r7, #28]
 800163c:	f00f fdfd 	bl	801123a <fminf>
 8001640:	eef0 7a40 	vmov.f32	s15, s0
 8001644:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80016bc <calculate_motor_duty_cycles+0x180>
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	f00f fdd8 	bl	8011200 <fmaxf>
 8001650:	ed87 0a07 	vstr	s0, [r7, #28]

    motor1->duty_cycle = duty_cycle_1;
 8001654:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001656:	f7fe ff77 	bl	8000548 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	e9c1 2306 	strd	r2, r3, [r1, #24]
    motor2->duty_cycle = duty_cycle_2;
 8001664:	6a38      	ldr	r0, [r7, #32]
 8001666:	f7fe ff6f 	bl	8000548 <__aeabi_f2d>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	e9c1 2306 	strd	r2, r3, [r1, #24]
    motor3->duty_cycle = duty_cycle_3;
 8001674:	69f8      	ldr	r0, [r7, #28]
 8001676:	f7fe ff67 	bl	8000548 <__aeabi_f2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	6839      	ldr	r1, [r7, #0]
 8001680:	e9c1 2306 	strd	r2, r3, [r1, #24]

    motor_update(motor1);
 8001684:	68b8      	ldr	r0, [r7, #8]
 8001686:	f7ff fec7 	bl	8001418 <motor_update>
    motor_update(motor2);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fec4 	bl	8001418 <motor_update>
    motor_update(motor3);
 8001690:	6838      	ldr	r0, [r7, #0]
 8001692:	f7ff fec1 	bl	8001418 <motor_update>
}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	@ 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	befffffd 	.word	0xbefffffd
 80016a4:	bf5db3d8 	.word	0xbf5db3d8
 80016a8:	3d4ccccd 	.word	0x3d4ccccd
 80016ac:	42c80000 	.word	0x42c80000
 80016b0:	bf000001 	.word	0xbf000001
 80016b4:	3f5db3d7 	.word	0x3f5db3d7
 80016b8:	00000000 	.word	0x00000000
 80016bc:	c2c80000 	.word	0xc2c80000

080016c0 <motor_enable>:


void motor_enable(motor_st *motor_data){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(motor_data->pwm_timer, TIM_CHANNEL_1);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 f8c0 	bl	8005854 <HAL_TIM_PWM_Start>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <motor_disable>:


void motor_disable(motor_st *motor_data){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Stop(motor_data->pwm_timer, TIM_CHANNEL_1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 f9b8 	bl	8005a60 <HAL_TIM_PWM_Stop>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <MX_SPI2_Init+0x74>)
 80016fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001770 <MX_SPI2_Init+0x78>)
 8001700:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001702:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <MX_SPI2_Init+0x74>)
 8001704:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001708:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800170a:	4b18      	ldr	r3, [pc, #96]	@ (800176c <MX_SPI2_Init+0x74>)
 800170c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001710:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001712:	4b16      	ldr	r3, [pc, #88]	@ (800176c <MX_SPI2_Init+0x74>)
 8001714:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001718:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800171a:	4b14      	ldr	r3, [pc, #80]	@ (800176c <MX_SPI2_Init+0x74>)
 800171c:	2202      	movs	r2, #2
 800171e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <MX_SPI2_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <MX_SPI2_Init+0x74>)
 8001728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800172c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <MX_SPI2_Init+0x74>)
 8001730:	2230      	movs	r2, #48	@ 0x30
 8001732:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001734:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <MX_SPI2_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_SPI2_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <MX_SPI2_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_SPI2_Init+0x74>)
 8001748:	2207      	movs	r2, #7
 800174a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800174c:	4b07      	ldr	r3, [pc, #28]	@ (800176c <MX_SPI2_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_SPI2_Init+0x74>)
 8001754:	2208      	movs	r2, #8
 8001756:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	@ (800176c <MX_SPI2_Init+0x74>)
 800175a:	f003 fdfb 	bl	8005354 <HAL_SPI_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001764:	f7ff fe52 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200004ac 	.word	0x200004ac
 8001770:	40003800 	.word	0x40003800

08001774 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	@ 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a29      	ldr	r2, [pc, #164]	@ (8001838 <HAL_SPI_MspInit+0xc4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d14c      	bne.n	8001830 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001796:	4b29      	ldr	r3, [pc, #164]	@ (800183c <HAL_SPI_MspInit+0xc8>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	4a28      	ldr	r2, [pc, #160]	@ (800183c <HAL_SPI_MspInit+0xc8>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017a2:	4b26      	ldr	r3, [pc, #152]	@ (800183c <HAL_SPI_MspInit+0xc8>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ae:	4b23      	ldr	r3, [pc, #140]	@ (800183c <HAL_SPI_MspInit+0xc8>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b2:	4a22      	ldr	r2, [pc, #136]	@ (800183c <HAL_SPI_MspInit+0xc8>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ba:	4b20      	ldr	r3, [pc, #128]	@ (800183c <HAL_SPI_MspInit+0xc8>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <HAL_SPI_MspInit+0xc8>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ca:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <HAL_SPI_MspInit+0xc8>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d2:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <HAL_SPI_MspInit+0xc8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017de:	2304      	movs	r3, #4
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ee:	2305      	movs	r3, #5
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4811      	ldr	r0, [pc, #68]	@ (8001840 <HAL_SPI_MspInit+0xcc>)
 80017fa:	f000 fee9 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001810:	2305      	movs	r3, #5
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	480a      	ldr	r0, [pc, #40]	@ (8001844 <HAL_SPI_MspInit+0xd0>)
 800181c:	f000 fed8 	bl	80025d0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2024      	movs	r0, #36	@ 0x24
 8001826:	f000 fe1e 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800182a:	2024      	movs	r0, #36	@ 0x24
 800182c:	f000 fe37 	bl	800249e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	@ 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40003800 	.word	0x40003800
 800183c:	40021000 	.word	0x40021000
 8001840:	48000800 	.word	0x48000800
 8001844:	48000400 	.word	0x48000400

08001848 <SPI_init>:
    .enc_2 = {.cs_pin = CS_ENC_2_Pin, .cs_port = CS_ENC_2_GPIO_Port}, // Encoder 2
    .enc_3 = {.cs_pin = CS_ENC_3_Pin, .cs_port = CS_ENC_3_GPIO_Port} // Encoder 3
};


void SPI_init(){
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(encoders.enc_1.cs_port, encoders.enc_1.cs_pin, GPIO_PIN_SET);
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <SPI_init+0x38>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a0b      	ldr	r2, [pc, #44]	@ (8001880 <SPI_init+0x38>)
 8001852:	8891      	ldrh	r1, [r2, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	4618      	mov	r0, r3
 8001858:	f001 f864 	bl	8002924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(encoders.enc_2.cs_port, encoders.enc_2.cs_pin, GPIO_PIN_SET);
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <SPI_init+0x38>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <SPI_init+0x38>)
 8001862:	8a11      	ldrh	r1, [r2, #16]
 8001864:	2201      	movs	r2, #1
 8001866:	4618      	mov	r0, r3
 8001868:	f001 f85c 	bl	8002924 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(encoders.enc_3.cs_port, encoders.enc_3.cs_pin, GPIO_PIN_SET);
 800186c:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <SPI_init+0x38>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4a03      	ldr	r2, [pc, #12]	@ (8001880 <SPI_init+0x38>)
 8001872:	8b91      	ldrh	r1, [r2, #28]
 8001874:	2201      	movs	r2, #1
 8001876:	4618      	mov	r0, r3
 8001878:	f001 f854 	bl	8002924 <HAL_GPIO_WritePin>
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000078 	.word	0x20000078

08001884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <HAL_MspInit+0x44>)
 800188c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188e:	4a0e      	ldr	r2, [pc, #56]	@ (80018c8 <HAL_MspInit+0x44>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6613      	str	r3, [r2, #96]	@ 0x60
 8001896:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <HAL_MspInit+0x44>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <HAL_MspInit+0x44>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a6:	4a08      	ldr	r2, [pc, #32]	@ (80018c8 <HAL_MspInit+0x44>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_MspInit+0x44>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <NMI_Handler+0x4>

080018d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <MemManage_Handler+0x4>

080018e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001922:	f000 fc81 	bl	8002228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001932:	f004 f92b 	bl	8005b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000514 	.word	0x20000514

08001940 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001946:	f004 f921 	bl	8005b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000514 	.word	0x20000514

08001954 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800195a:	f004 f917 	bl	8005b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000514 	.word	0x20000514

08001968 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <TIM1_CC_IRQHandler+0x10>)
 800196e:	f004 f90d 	bl	8005b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000514 	.word	0x20000514

0800197c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <SPI2_IRQHandler+0x10>)
 8001982:	f003 fd8b 	bl	800549c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200004ac 	.word	0x200004ac

08001990 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <USART2_IRQHandler+0x10>)
 8001996:	f005 f931 	bl	8006bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200005f8 	.word	0x200005f8

080019a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <OTG_FS_IRQHandler+0x10>)
 80019aa:	f001 f92b 	bl	8002c04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20001b64 	.word	0x20001b64

080019b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return 1;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_kill>:

int _kill(int pid, int sig)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019d2:	f00b fc8f 	bl	800d2f4 <__errno>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2216      	movs	r2, #22
 80019da:	601a      	str	r2, [r3, #0]
  return -1;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_exit>:

void _exit (int status)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ffe7 	bl	80019c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019fa:	bf00      	nop
 80019fc:	e7fd      	b.n	80019fa <_exit+0x12>

080019fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e00a      	b.n	8001a26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a10:	f3af 8000 	nop.w
 8001a14:	4601      	mov	r1, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	60ba      	str	r2, [r7, #8]
 8001a1c:	b2ca      	uxtb	r2, r1
 8001a1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	dbf0      	blt.n	8001a10 <_read+0x12>
  }

  return len;
 8001a2e:	687b      	ldr	r3, [r7, #4]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e009      	b.n	8001a5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	60ba      	str	r2, [r7, #8]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dbf1      	blt.n	8001a4a <_write+0x12>
  }
  return len;
 8001a66:	687b      	ldr	r3, [r7, #4]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_close>:

int _close(int file)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a98:	605a      	str	r2, [r3, #4]
  return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_isatty>:

int _isatty(int file)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	@ (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f00b fbf4 	bl	800d2f4 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20018000 	.word	0x20018000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	20000510 	.word	0x20000510
 8001b40:	200023b8 	.word	0x200023b8

08001b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <timer_init>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void timer_init(void){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  MX_TIM1_Init();
 8001b6c:	f000 f816 	bl	8001b9c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b70:	f000 f8a4 	bl	8001cbc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b74:	f000 f8fc 	bl	8001d70 <MX_TIM4_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8001b78:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <timer_init+0x28>)
 8001b7a:	f003 fda3 	bl	80056c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <timer_init+0x2c>)
 8001b80:	f003 fda0 	bl	80056c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001b84:	4804      	ldr	r0, [pc, #16]	@ (8001b98 <timer_init+0x30>)
 8001b86:	f003 fd9d 	bl	80056c4 <HAL_TIM_Base_Start_IT>
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000514 	.word	0x20000514
 8001b94:	20000560 	.word	0x20000560
 8001b98:	200005ac 	.word	0x200005ac

08001b9c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b096      	sub	sp, #88	@ 0x58
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]
 8001bbe:	615a      	str	r2, [r3, #20]
 8001bc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	222c      	movs	r2, #44	@ 0x2c
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f00b fb2a 	bl	800d222 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bce:	4b39      	ldr	r3, [pc, #228]	@ (8001cb4 <MX_TIM1_Init+0x118>)
 8001bd0:	4a39      	ldr	r2, [pc, #228]	@ (8001cb8 <MX_TIM1_Init+0x11c>)
 8001bd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001bd4:	4b37      	ldr	r3, [pc, #220]	@ (8001cb4 <MX_TIM1_Init+0x118>)
 8001bd6:	2247      	movs	r2, #71	@ 0x47
 8001bd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bda:	4b36      	ldr	r3, [pc, #216]	@ (8001cb4 <MX_TIM1_Init+0x118>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001be0:	4b34      	ldr	r3, [pc, #208]	@ (8001cb4 <MX_TIM1_Init+0x118>)
 8001be2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001be6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be8:	4b32      	ldr	r3, [pc, #200]	@ (8001cb4 <MX_TIM1_Init+0x118>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bee:	4b31      	ldr	r3, [pc, #196]	@ (8001cb4 <MX_TIM1_Init+0x118>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb4 <MX_TIM1_Init+0x118>)
 8001bf6:	2280      	movs	r2, #128	@ 0x80
 8001bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bfa:	482e      	ldr	r0, [pc, #184]	@ (8001cb4 <MX_TIM1_Init+0x118>)
 8001bfc:	f003 fdd2 	bl	80057a4 <HAL_TIM_PWM_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c06:	f7ff fc01 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c16:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4825      	ldr	r0, [pc, #148]	@ (8001cb4 <MX_TIM1_Init+0x118>)
 8001c1e:	f004 fda5 	bl	800676c <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c28:	f7ff fbf0 	bl	800140c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2c:	2360      	movs	r3, #96	@ 0x60
 8001c2e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c34:	2300      	movs	r3, #0
 8001c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4818      	ldr	r0, [pc, #96]	@ (8001cb4 <MX_TIM1_Init+0x118>)
 8001c52:	f004 f8a3 	bl	8005d9c <HAL_TIM_PWM_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c5c:	f7ff fbd6 	bl	800140c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4807      	ldr	r0, [pc, #28]	@ (8001cb4 <MX_TIM1_Init+0x118>)
 8001c96:	f004 fdf1 	bl	800687c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001ca0:	f7ff fbb4 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ca4:	4803      	ldr	r0, [pc, #12]	@ (8001cb4 <MX_TIM1_Init+0x118>)
 8001ca6:	f000 f923 	bl	8001ef0 <HAL_TIM_MspPostInit>

}
 8001caa:	bf00      	nop
 8001cac:	3758      	adds	r7, #88	@ 0x58
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000514 	.word	0x20000514
 8001cb8:	40012c00 	.word	0x40012c00

08001cbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cce:	463b      	mov	r3, r7
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
 8001cdc:	615a      	str	r2, [r3, #20]
 8001cde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ce0:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <MX_TIM3_Init+0xac>)
 8001ce2:	4a22      	ldr	r2, [pc, #136]	@ (8001d6c <MX_TIM3_Init+0xb0>)
 8001ce4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001ce6:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <MX_TIM3_Init+0xac>)
 8001ce8:	2247      	movs	r2, #71	@ 0x47
 8001cea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <MX_TIM3_Init+0xac>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <MX_TIM3_Init+0xac>)
 8001cf4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cf8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <MX_TIM3_Init+0xac>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d00:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <MX_TIM3_Init+0xac>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d06:	4818      	ldr	r0, [pc, #96]	@ (8001d68 <MX_TIM3_Init+0xac>)
 8001d08:	f003 fd4c 	bl	80057a4 <HAL_TIM_PWM_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001d12:	f7ff fb7b 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	4619      	mov	r1, r3
 8001d24:	4810      	ldr	r0, [pc, #64]	@ (8001d68 <MX_TIM3_Init+0xac>)
 8001d26:	f004 fd21 	bl	800676c <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001d30:	f7ff fb6c 	bl	800140c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d34:	2360      	movs	r3, #96	@ 0x60
 8001d36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d44:	463b      	mov	r3, r7
 8001d46:	2200      	movs	r2, #0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4807      	ldr	r0, [pc, #28]	@ (8001d68 <MX_TIM3_Init+0xac>)
 8001d4c:	f004 f826 	bl	8005d9c <HAL_TIM_PWM_ConfigChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001d56:	f7ff fb59 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d5a:	4803      	ldr	r0, [pc, #12]	@ (8001d68 <MX_TIM3_Init+0xac>)
 8001d5c:	f000 f8c8 	bl	8001ef0 <HAL_TIM_MspPostInit>

}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000560 	.word	0x20000560
 8001d6c:	40000400 	.word	0x40000400

08001d70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	@ 0x28
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d82:	463b      	mov	r3, r7
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
 8001d90:	615a      	str	r2, [r3, #20]
 8001d92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d94:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <MX_TIM4_Init+0xac>)
 8001d96:	4a22      	ldr	r2, [pc, #136]	@ (8001e20 <MX_TIM4_Init+0xb0>)
 8001d98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 77;
 8001d9a:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <MX_TIM4_Init+0xac>)
 8001d9c:	224d      	movs	r2, #77	@ 0x4d
 8001d9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <MX_TIM4_Init+0xac>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001da6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <MX_TIM4_Init+0xac>)
 8001da8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <MX_TIM4_Init+0xac>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <MX_TIM4_Init+0xac>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dba:	4818      	ldr	r0, [pc, #96]	@ (8001e1c <MX_TIM4_Init+0xac>)
 8001dbc:	f003 fcf2 	bl	80057a4 <HAL_TIM_PWM_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001dc6:	f7ff fb21 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4810      	ldr	r0, [pc, #64]	@ (8001e1c <MX_TIM4_Init+0xac>)
 8001dda:	f004 fcc7 	bl	800676c <HAL_TIMEx_MasterConfigSynchronization>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001de4:	f7ff fb12 	bl	800140c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de8:	2360      	movs	r3, #96	@ 0x60
 8001dea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df8:	463b      	mov	r3, r7
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4807      	ldr	r0, [pc, #28]	@ (8001e1c <MX_TIM4_Init+0xac>)
 8001e00:	f003 ffcc 	bl	8005d9c <HAL_TIM_PWM_ConfigChannel>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001e0a:	f7ff faff 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e0e:	4803      	ldr	r0, [pc, #12]	@ (8001e1c <MX_TIM4_Init+0xac>)
 8001e10:	f000 f86e 	bl	8001ef0 <HAL_TIM_MspPostInit>

}
 8001e14:	bf00      	nop
 8001e16:	3728      	adds	r7, #40	@ 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200005ac 	.word	0x200005ac
 8001e20:	40000800 	.word	0x40000800

08001e24 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee0 <HAL_TIM_PWM_MspInit+0xbc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12c      	bne.n	8001e90 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e40:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e42:	4b28      	ldr	r3, [pc, #160]	@ (8001ee4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2018      	movs	r0, #24
 8001e54:	f000 fb07 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e58:	2018      	movs	r0, #24
 8001e5a:	f000 fb20 	bl	800249e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2019      	movs	r0, #25
 8001e64:	f000 faff 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e68:	2019      	movs	r0, #25
 8001e6a:	f000 fb18 	bl	800249e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	201a      	movs	r0, #26
 8001e74:	f000 faf7 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001e78:	201a      	movs	r0, #26
 8001e7a:	f000 fb10 	bl	800249e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	201b      	movs	r0, #27
 8001e84:	f000 faef 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e88:	201b      	movs	r0, #27
 8001e8a:	f000 fb08 	bl	800249e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e8e:	e022      	b.n	8001ed6 <HAL_TIM_PWM_MspInit+0xb2>
  else if(tim_pwmHandle->Instance==TIM3)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a14      	ldr	r2, [pc, #80]	@ (8001ee8 <HAL_TIM_PWM_MspInit+0xc4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d10c      	bne.n	8001eb4 <HAL_TIM_PWM_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ee4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
}
 8001eb2:	e010      	b.n	8001ed6 <HAL_TIM_PWM_MspInit+0xb2>
  else if(tim_pwmHandle->Instance==TIM4)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001eec <HAL_TIM_PWM_MspInit+0xc8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_TIM_PWM_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	4a08      	ldr	r2, [pc, #32]	@ (8001ee4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40012c00 	.word	0x40012c00
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800

08001ef0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a34      	ldr	r2, [pc, #208]	@ (8001fe0 <HAL_TIM_MspPostInit+0xf0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d11e      	bne.n	8001f50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	4b34      	ldr	r3, [pc, #208]	@ (8001fe4 <HAL_TIM_MspPostInit+0xf4>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f16:	4a33      	ldr	r2, [pc, #204]	@ (8001fe4 <HAL_TIM_MspPostInit+0xf4>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f1e:	4b31      	ldr	r3, [pc, #196]	@ (8001fe4 <HAL_TIM_MspPostInit+0xf4>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin;
 8001f2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR1_PWM_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f4a:	f000 fb41 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f4e:	e043      	b.n	8001fd8 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM3)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a24      	ldr	r2, [pc, #144]	@ (8001fe8 <HAL_TIM_MspPostInit+0xf8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d11d      	bne.n	8001f96 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <HAL_TIM_MspPostInit+0xf4>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5e:	4a21      	ldr	r2, [pc, #132]	@ (8001fe4 <HAL_TIM_MspPostInit+0xf4>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f66:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <HAL_TIM_MspPostInit+0xf4>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR2_PWM_Pin;
 8001f72:	2340      	movs	r3, #64	@ 0x40
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f82:	2302      	movs	r3, #2
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR2_PWM_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f90:	f000 fb1e 	bl	80025d0 <HAL_GPIO_Init>
}
 8001f94:	e020      	b.n	8001fd8 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM4)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a14      	ldr	r2, [pc, #80]	@ (8001fec <HAL_TIM_MspPostInit+0xfc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa0:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_TIM_MspPostInit+0xf4>)
 8001fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <HAL_TIM_MspPostInit+0xf4>)
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fac:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <HAL_TIM_MspPostInit+0xf4>)
 8001fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR3_PWM_Pin;
 8001fb8:	2340      	movs	r3, #64	@ 0x40
 8001fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4807      	ldr	r0, [pc, #28]	@ (8001ff0 <HAL_TIM_MspPostInit+0x100>)
 8001fd4:	f000 fafc 	bl	80025d0 <HAL_GPIO_Init>
}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	@ 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40012c00 	.word	0x40012c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40000400 	.word	0x40000400
 8001fec:	40000800 	.word	0x40000800
 8001ff0:	48000400 	.word	0x48000400

08001ff4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ff8:	4b14      	ldr	r3, [pc, #80]	@ (800204c <MX_USART2_UART_Init+0x58>)
 8001ffa:	4a15      	ldr	r2, [pc, #84]	@ (8002050 <MX_USART2_UART_Init+0x5c>)
 8001ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	@ (800204c <MX_USART2_UART_Init+0x58>)
 8002000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002006:	4b11      	ldr	r3, [pc, #68]	@ (800204c <MX_USART2_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800200c:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <MX_USART2_UART_Init+0x58>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002012:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <MX_USART2_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <MX_USART2_UART_Init+0x58>)
 800201a:	220c      	movs	r2, #12
 800201c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201e:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <MX_USART2_UART_Init+0x58>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002024:	4b09      	ldr	r3, [pc, #36]	@ (800204c <MX_USART2_UART_Init+0x58>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800202a:	4b08      	ldr	r3, [pc, #32]	@ (800204c <MX_USART2_UART_Init+0x58>)
 800202c:	2200      	movs	r2, #0
 800202e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002030:	4b06      	ldr	r3, [pc, #24]	@ (800204c <MX_USART2_UART_Init+0x58>)
 8002032:	2200      	movs	r2, #0
 8002034:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002036:	4805      	ldr	r0, [pc, #20]	@ (800204c <MX_USART2_UART_Init+0x58>)
 8002038:	f004 fcbc 	bl	80069b4 <HAL_UART_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002042:	f7ff f9e3 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200005f8 	.word	0x200005f8
 8002050:	40004400 	.word	0x40004400

08002054 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0ac      	sub	sp, #176	@ 0xb0
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2288      	movs	r2, #136	@ 0x88
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f00b f8d4 	bl	800d222 <memset>
  if(uartHandle->Instance==USART2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a25      	ldr	r2, [pc, #148]	@ (8002114 <HAL_UART_MspInit+0xc0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d143      	bne.n	800210c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002084:	2302      	movs	r3, #2
 8002086:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002088:	2300      	movs	r3, #0
 800208a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fc93 	bl	80049bc <HAL_RCCEx_PeriphCLKConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800209c:	f7ff f9b6 	bl	800140c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_UART_MspInit+0xc4>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <HAL_UART_MspInit+0xc4>)
 80020a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <HAL_UART_MspInit+0xc4>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b8:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <HAL_UART_MspInit+0xc4>)
 80020ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020bc:	4a16      	ldr	r2, [pc, #88]	@ (8002118 <HAL_UART_MspInit+0xc4>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <HAL_UART_MspInit+0xc4>)
 80020c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020d0:	230c      	movs	r3, #12
 80020d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e8:	2307      	movs	r3, #7
 80020ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020f2:	4619      	mov	r1, r3
 80020f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020f8:	f000 fa6a 	bl	80025d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2100      	movs	r1, #0
 8002100:	2026      	movs	r0, #38	@ 0x26
 8002102:	f000 f9b0 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002106:	2026      	movs	r0, #38	@ 0x26
 8002108:	f000 f9c9 	bl	800249e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800210c:	bf00      	nop
 800210e:	37b0      	adds	r7, #176	@ 0xb0
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40004400 	.word	0x40004400
 8002118:	40021000 	.word	0x40021000

0800211c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800211c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002154 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002120:	f7ff fd10 	bl	8001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002124:	480c      	ldr	r0, [pc, #48]	@ (8002158 <LoopForever+0x6>)
  ldr r1, =_edata
 8002126:	490d      	ldr	r1, [pc, #52]	@ (800215c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002128:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <LoopForever+0xe>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800212c:	e002      	b.n	8002134 <LoopCopyDataInit>

0800212e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002132:	3304      	adds	r3, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002138:	d3f9      	bcc.n	800212e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213a:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <LoopForever+0x12>)
  ldr r4, =_ebss
 800213c:	4c0a      	ldr	r4, [pc, #40]	@ (8002168 <LoopForever+0x16>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002140:	e001      	b.n	8002146 <LoopFillZerobss>

08002142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002144:	3204      	adds	r2, #4

08002146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002148:	d3fb      	bcc.n	8002142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800214a:	f00b f8d9 	bl	800d300 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800214e:	f7ff f897 	bl	8001280 <main>

08002152 <LoopForever>:

LoopForever:
    b LoopForever
 8002152:	e7fe      	b.n	8002152 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002154:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800215c:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8002160:	0801189c 	.word	0x0801189c
  ldr r2, =_sbss
 8002164:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8002168:	200023b4 	.word	0x200023b4

0800216c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC1_2_IRQHandler>
	...

08002170 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800217a:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <HAL_Init+0x3c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a0b      	ldr	r2, [pc, #44]	@ (80021ac <HAL_Init+0x3c>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002184:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002186:	2003      	movs	r0, #3
 8002188:	f000 f962 	bl	8002450 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800218c:	2000      	movs	r0, #0
 800218e:	f000 f80f 	bl	80021b0 <HAL_InitTick>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	71fb      	strb	r3, [r7, #7]
 800219c:	e001      	b.n	80021a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800219e:	f7ff fb71 	bl	8001884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021a2:	79fb      	ldrb	r3, [r7, #7]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40022000 	.word	0x40022000

080021b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021bc:	4b17      	ldr	r3, [pc, #92]	@ (800221c <HAL_InitTick+0x6c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d023      	beq.n	800220c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021c4:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <HAL_InitTick+0x70>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <HAL_InitTick+0x6c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f96d 	bl	80024ba <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10f      	bne.n	8002206 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d809      	bhi.n	8002200 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021f4:	f000 f937 	bl	8002466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <HAL_InitTick+0x74>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e007      	b.n	8002210 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	e004      	b.n	8002210 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e001      	b.n	8002210 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200000a4 	.word	0x200000a4
 8002220:	2000009c 	.word	0x2000009c
 8002224:	200000a0 	.word	0x200000a0

08002228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_IncTick+0x20>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_IncTick+0x24>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4413      	add	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	@ (800224c <HAL_IncTick+0x24>)
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	200000a4 	.word	0x200000a4
 800224c:	20000680 	.word	0x20000680

08002250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return uwTick;
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_GetTick+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000680 	.word	0x20000680

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ffee 	bl	8002250 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_Delay+0x44>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffde 	bl	8002250 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200000a4 	.word	0x200000a4

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db0b      	blt.n	800233e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4907      	ldr	r1, [pc, #28]	@ (800234c <__NVIC_EnableIRQ+0x38>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2001      	movs	r0, #1
 8002336:	fa00 f202 	lsl.w	r2, r0, r2
 800233a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	@ (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	@ (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	@ 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800241c:	d301      	bcc.n	8002422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241e:	2301      	movs	r3, #1
 8002420:	e00f      	b.n	8002442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002422:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <SysTick_Config+0x40>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242a:	210f      	movs	r1, #15
 800242c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002430:	f7ff ff8e 	bl	8002350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <SysTick_Config+0x40>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <SysTick_Config+0x40>)
 800243c:	2207      	movs	r2, #7
 800243e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	e000e010 	.word	0xe000e010

08002450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff29 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002478:	f7ff ff3e 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 800247c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f7ff ff8e 	bl	80023a4 <NVIC_EncodePriority>
 8002488:	4602      	mov	r2, r0
 800248a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff5d 	bl	8002350 <__NVIC_SetPriority>
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff31 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffa2 	bl	800240c <SysTick_Config>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d008      	beq.n	80024fc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2204      	movs	r2, #4
 80024ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e022      	b.n	8002542 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 020e 	bic.w	r2, r2, #14
 800250a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002520:	f003 021c 	and.w	r2, r3, #28
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f202 	lsl.w	r2, r1, r2
 800252e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002540:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d005      	beq.n	8002572 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2204      	movs	r2, #4
 800256a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e029      	b.n	80025c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 020e 	bic.w	r2, r2, #14
 8002580:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f003 021c 	and.w	r2, r3, #28
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	2101      	movs	r1, #1
 80025a0:	fa01 f202 	lsl.w	r2, r1, r2
 80025a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
    }
  }
  return status;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025de:	e17f      	b.n	80028e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	4013      	ands	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8171 	beq.w	80028da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d005      	beq.n	8002610 <HAL_GPIO_Init+0x40>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d130      	bne.n	8002672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002646:	2201      	movs	r2, #1
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0201 	and.w	r2, r3, #1
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b03      	cmp	r3, #3
 800267c:	d118      	bne.n	80026b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002684:	2201      	movs	r2, #1
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	08db      	lsrs	r3, r3, #3
 800269a:	f003 0201 	and.w	r2, r3, #1
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d017      	beq.n	80026ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d123      	bne.n	8002740 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	08da      	lsrs	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3208      	adds	r2, #8
 8002700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	220f      	movs	r2, #15
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	08da      	lsrs	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3208      	adds	r2, #8
 800273a:	6939      	ldr	r1, [r7, #16]
 800273c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0203 	and.w	r2, r3, #3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80ac 	beq.w	80028da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002782:	4b5f      	ldr	r3, [pc, #380]	@ (8002900 <HAL_GPIO_Init+0x330>)
 8002784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002786:	4a5e      	ldr	r2, [pc, #376]	@ (8002900 <HAL_GPIO_Init+0x330>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6613      	str	r3, [r2, #96]	@ 0x60
 800278e:	4b5c      	ldr	r3, [pc, #368]	@ (8002900 <HAL_GPIO_Init+0x330>)
 8002790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800279a:	4a5a      	ldr	r2, [pc, #360]	@ (8002904 <HAL_GPIO_Init+0x334>)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	3302      	adds	r3, #2
 80027a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027c4:	d025      	beq.n	8002812 <HAL_GPIO_Init+0x242>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002908 <HAL_GPIO_Init+0x338>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01f      	beq.n	800280e <HAL_GPIO_Init+0x23e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4e      	ldr	r2, [pc, #312]	@ (800290c <HAL_GPIO_Init+0x33c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x23a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002910 <HAL_GPIO_Init+0x340>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x236>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002914 <HAL_GPIO_Init+0x344>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x232>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002918 <HAL_GPIO_Init+0x348>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x22e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4a      	ldr	r2, [pc, #296]	@ (800291c <HAL_GPIO_Init+0x34c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x22a>
 80027f6:	2306      	movs	r3, #6
 80027f8:	e00c      	b.n	8002814 <HAL_GPIO_Init+0x244>
 80027fa:	2307      	movs	r3, #7
 80027fc:	e00a      	b.n	8002814 <HAL_GPIO_Init+0x244>
 80027fe:	2305      	movs	r3, #5
 8002800:	e008      	b.n	8002814 <HAL_GPIO_Init+0x244>
 8002802:	2304      	movs	r3, #4
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x244>
 8002806:	2303      	movs	r3, #3
 8002808:	e004      	b.n	8002814 <HAL_GPIO_Init+0x244>
 800280a:	2302      	movs	r3, #2
 800280c:	e002      	b.n	8002814 <HAL_GPIO_Init+0x244>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_GPIO_Init+0x244>
 8002812:	2300      	movs	r3, #0
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	f002 0203 	and.w	r2, r2, #3
 800281a:	0092      	lsls	r2, r2, #2
 800281c:	4093      	lsls	r3, r2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002824:	4937      	ldr	r1, [pc, #220]	@ (8002904 <HAL_GPIO_Init+0x334>)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3302      	adds	r3, #2
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002832:	4b3b      	ldr	r3, [pc, #236]	@ (8002920 <HAL_GPIO_Init+0x350>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002856:	4a32      	ldr	r2, [pc, #200]	@ (8002920 <HAL_GPIO_Init+0x350>)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800285c:	4b30      	ldr	r3, [pc, #192]	@ (8002920 <HAL_GPIO_Init+0x350>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	43db      	mvns	r3, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002880:	4a27      	ldr	r2, [pc, #156]	@ (8002920 <HAL_GPIO_Init+0x350>)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002886:	4b26      	ldr	r3, [pc, #152]	@ (8002920 <HAL_GPIO_Init+0x350>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002920 <HAL_GPIO_Init+0x350>)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <HAL_GPIO_Init+0x350>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028d4:	4a12      	ldr	r2, [pc, #72]	@ (8002920 <HAL_GPIO_Init+0x350>)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3301      	adds	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f47f ae78 	bne.w	80025e0 <HAL_GPIO_Init+0x10>
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	40010000 	.word	0x40010000
 8002908:	48000400 	.word	0x48000400
 800290c:	48000800 	.word	0x48000800
 8002910:	48000c00 	.word	0x48000c00
 8002914:	48001000 	.word	0x48001000
 8002918:	48001400 	.word	0x48001400
 800291c:	48001800 	.word	0x48001800
 8002920:	40010400 	.word	0x40010400

08002924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	807b      	strh	r3, [r7, #2]
 8002930:	4613      	mov	r3, r2
 8002932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002934:	787b      	ldrb	r3, [r7, #1]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002940:	e002      	b.n	8002948 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002942:	887a      	ldrh	r2, [r7, #2]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4013      	ands	r3, r2
 800296c:	041a      	lsls	r2, r3, #16
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43d9      	mvns	r1, r3
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	400b      	ands	r3, r1
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	619a      	str	r2, [r3, #24]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af02      	add	r7, sp, #8
 800298e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e101      	b.n	8002b9e <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f009 f802 	bl	800b9b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2203      	movs	r2, #3
 80029b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f005 fcb9 	bl	800833e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7c1a      	ldrb	r2, [r3, #16]
 80029d4:	f88d 2000 	strb.w	r2, [sp]
 80029d8:	3304      	adds	r3, #4
 80029da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029dc:	f005 fbd4 	bl	8008188 <USB_CoreInit>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d005      	beq.n	80029f2 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2202      	movs	r2, #2
 80029ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0d5      	b.n	8002b9e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f005 fcb1 	bl	8008360 <USB_SetCurrentMode>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0c6      	b.n	8002b9e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
 8002a14:	e04a      	b.n	8002aac <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3315      	adds	r3, #21
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a2a:	7bfa      	ldrb	r2, [r7, #15]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3314      	adds	r3, #20
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	b298      	uxth	r0, r3
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	332e      	adds	r3, #46	@ 0x2e
 8002a52:	4602      	mov	r2, r0
 8002a54:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3318      	adds	r3, #24
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	331c      	adds	r3, #28
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3320      	adds	r3, #32
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3324      	adds	r3, #36	@ 0x24
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	791b      	ldrb	r3, [r3, #4]
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d3af      	bcc.n	8002a16 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
 8002aba:	e044      	b.n	8002b46 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	3301      	adds	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	791b      	ldrb	r3, [r3, #4]
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d3b5      	bcc.n	8002abc <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7c1a      	ldrb	r2, [r3, #16]
 8002b58:	f88d 2000 	strb.w	r2, [sp]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b60:	f005 fc4a 	bl	80083f8 <USB_DevInit>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e013      	b.n	8002b9e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7b1b      	ldrb	r3, [r3, #12]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d102      	bne.n	8002b92 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f001 f86d 	bl	8003c6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f006 fc01 	bl	800939e <USB_DevDisconnect>

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_PCD_Start+0x1c>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e01c      	b.n	8002bfc <HAL_PCD_Start+0x56>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	7b5b      	ldrb	r3, [r3, #13]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f005 fb9a 	bl	800831c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f006 fbb5 	bl	800935c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b08d      	sub	sp, #52	@ 0x34
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f006 fc73 	bl	8009506 <USB_GetMode>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 8481 	bne.w	800352a <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f006 fbd7 	bl	80093e0 <USB_ReadInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8477 	beq.w	8003528 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f006 fbc4 	bl	80093e0 <USB_ReadInterrupts>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d107      	bne.n	8002c72 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f002 0202 	and.w	r2, r2, #2
 8002c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f006 fbb2 	bl	80093e0 <USB_ReadInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d161      	bne.n	8002d4a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699a      	ldr	r2, [r3, #24]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0210 	bic.w	r2, r2, #16
 8002c94:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	f003 020f 	and.w	r2, r3, #15
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	0c5b      	lsrs	r3, r3, #17
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d124      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d035      	beq.n	8002d3a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	6a38      	ldr	r0, [r7, #32]
 8002ce2:	f006 f9e9 	bl	80090b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cf2:	441a      	add	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d04:	441a      	add	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	615a      	str	r2, [r3, #20]
 8002d0a:	e016      	b.n	8002d3a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	0c5b      	lsrs	r3, r3, #17
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d110      	bne.n	8002d3a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d1e:	2208      	movs	r2, #8
 8002d20:	4619      	mov	r1, r3
 8002d22:	6a38      	ldr	r0, [r7, #32]
 8002d24:	f006 f9c8 	bl	80090b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d34:	441a      	add	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0210 	orr.w	r2, r2, #16
 8002d48:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f006 fb46 	bl	80093e0 <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d5a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002d5e:	f040 80a7 	bne.w	8002eb0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f006 fb4b 	bl	8009406 <USB_ReadDevAllOutEpInterrupt>
 8002d70:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002d72:	e099      	b.n	8002ea8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 808e 	beq.w	8002e9c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f006 fb6f 	bl	800946e <USB_ReadDevOutEPInterrupt>
 8002d90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00c      	beq.n	8002db6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da8:	461a      	mov	r2, r3
 8002daa:	2301      	movs	r3, #1
 8002dac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002dae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fe81 	bl	8003ab8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00c      	beq.n	8002dda <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2308      	movs	r3, #8
 8002dd0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002dd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 febd 	bl	8003b54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df0:	461a      	mov	r2, r3
 8002df2:	2310      	movs	r3, #16
 8002df4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d030      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e08:	2b80      	cmp	r3, #128	@ 0x80
 8002e0a:	d109      	bne.n	8002e20 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e1e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	3304      	adds	r3, #4
 8002e34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	78db      	ldrb	r3, [r3, #3]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d108      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2200      	movs	r2, #0
 8002e42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f008 ff08 	bl	800bc60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2302      	movs	r3, #2
 8002e60:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e94:	461a      	mov	r2, r3
 8002e96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e9a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f47f af62 	bne.w	8002d74 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f006 fa93 	bl	80093e0 <USB_ReadInterrupts>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ec0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ec4:	f040 80a4 	bne.w	8003010 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f006 fab4 	bl	800943a <USB_ReadDevAllInEpInterrupt>
 8002ed2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002ed8:	e096      	b.n	8003008 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 808b 	beq.w	8002ffc <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f006 fada 	bl	80094aa <USB_ReadDevInEPInterrupt>
 8002ef6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d020      	beq.n	8002f44 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	2201      	movs	r2, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69f9      	ldr	r1, [r7, #28]
 8002f1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f22:	4013      	ands	r3, r2
 8002f24:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f32:	461a      	mov	r2, r3
 8002f34:	2301      	movs	r3, #1
 8002f36:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f008 fdf9 	bl	800bb36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f76:	461a      	mov	r2, r3
 8002f78:	2310      	movs	r3, #16
 8002f7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f92:	461a      	mov	r2, r3
 8002f94:	2340      	movs	r3, #64	@ 0x40
 8002f96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d023      	beq.n	8002fea <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002fa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fa4:	6a38      	ldr	r0, [r7, #32]
 8002fa6:	f005 fb6f 	bl	8008688 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	3310      	adds	r3, #16
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	78db      	ldrb	r3, [r3, #3]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d108      	bne.n	8002fd8 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f008 fe56 	bl	800bc84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ff4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fcd6 	bl	80039a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	3301      	adds	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	f47f af65 	bne.w	8002eda <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f006 f9e3 	bl	80093e0 <USB_ReadInterrupts>
 800301a:	4603      	mov	r3, r0
 800301c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003024:	d122      	bne.n	800306c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003040:	2b01      	cmp	r3, #1
 8003042:	d108      	bne.n	8003056 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800304c:	2100      	movs	r1, #0
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f009 f88a 	bl	800c168 <HAL_PCDEx_LPM_Callback>
 8003054:	e002      	b.n	800305c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f008 fdda 	bl	800bc10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800306a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f006 f9b5 	bl	80093e0 <USB_ReadInterrupts>
 8003076:	4603      	mov	r3, r0
 8003078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800307c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003080:	d112      	bne.n	80030a8 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d102      	bne.n	8003098 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f008 fd96 	bl	800bbc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80030a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f006 f997 	bl	80093e0 <USB_ReadInterrupts>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030bc:	d121      	bne.n	8003102 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80030cc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d111      	bne.n	80030fc <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80030f2:	2101      	movs	r1, #1
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f009 f837 	bl	800c168 <HAL_PCDEx_LPM_Callback>
 80030fa:	e002      	b.n	8003102 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f008 fd61 	bl	800bbc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f006 f96a 	bl	80093e0 <USB_ReadInterrupts>
 800310c:	4603      	mov	r3, r0
 800310e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003116:	f040 80b6 	bne.w	8003286 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2110      	movs	r1, #16
 8003134:	4618      	mov	r0, r3
 8003136:	f005 faa7 	bl	8008688 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313a:	2300      	movs	r3, #0
 800313c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800313e:	e046      	b.n	80031ce <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800314c:	461a      	mov	r2, r3
 800314e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003152:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003164:	0151      	lsls	r1, r2, #5
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	440a      	add	r2, r1
 800316a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800316e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003172:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003180:	461a      	mov	r2, r3
 8003182:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003186:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003198:	0151      	lsls	r1, r2, #5
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	440a      	add	r2, r1
 800319e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80031a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80031a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031b8:	0151      	lsls	r1, r2, #5
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	440a      	add	r2, r1
 80031be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80031c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80031c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ca:	3301      	adds	r3, #1
 80031cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	791b      	ldrb	r3, [r3, #4]
 80031d2:	461a      	mov	r2, r3
 80031d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d3b2      	bcc.n	8003140 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031e8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80031ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7bdb      	ldrb	r3, [r3, #15]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d016      	beq.n	8003224 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003206:	f043 030b 	orr.w	r3, r3, #11
 800320a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800321c:	f043 030b 	orr.w	r3, r3, #11
 8003220:	6453      	str	r3, [r2, #68]	@ 0x44
 8003222:	e015      	b.n	8003250 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003232:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003236:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800323a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800324a:	f043 030b 	orr.w	r3, r3, #11
 800324e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800325e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003262:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f006 f979 	bl	8009568 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003284:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f006 f8a8 	bl	80093e0 <USB_ReadInterrupts>
 8003290:	4603      	mov	r3, r0
 8003292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800329a:	d123      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f006 f93e 	bl	8009522 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f005 fa65 	bl	800877a <USB_GetDevSpeed>
 80032b0:	4603      	mov	r3, r0
 80032b2:	461a      	mov	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681c      	ldr	r4, [r3, #0]
 80032bc:	f001 fae6 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80032c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032c6:	461a      	mov	r2, r3
 80032c8:	4620      	mov	r0, r4
 80032ca:	f004 ff8b 	bl	80081e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f008 fc59 	bl	800bb86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80032e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f006 f879 	bl	80093e0 <USB_ReadInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d10a      	bne.n	800330e <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f008 fc36 	bl	800bb6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f002 0208 	and.w	r2, r2, #8
 800330c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f006 f864 	bl	80093e0 <USB_ReadInterrupts>
 8003318:	4603      	mov	r3, r0
 800331a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331e:	2b80      	cmp	r3, #128	@ 0x80
 8003320:	d123      	bne.n	800336a <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800332e:	2301      	movs	r3, #1
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24
 8003332:	e014      	b.n	800335e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d105      	bne.n	8003358 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800334c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334e:	b2db      	uxtb	r3, r3
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 faf7 	bl	8003946 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335a:	3301      	adds	r3, #1
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	791b      	ldrb	r3, [r3, #4]
 8003362:	461a      	mov	r2, r3
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003366:	4293      	cmp	r3, r2
 8003368:	d3e4      	bcc.n	8003334 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f006 f836 	bl	80093e0 <USB_ReadInterrupts>
 8003374:	4603      	mov	r3, r0
 8003376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800337a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800337e:	d13c      	bne.n	80033fa <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003380:	2301      	movs	r3, #1
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
 8003384:	e02b      	b.n	80033de <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	3318      	adds	r3, #24
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d115      	bne.n	80033d8 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80033ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da12      	bge.n	80033d8 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3317      	adds	r3, #23
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fab7 	bl	8003946 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	3301      	adds	r3, #1
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	791b      	ldrb	r3, [r3, #4]
 80033e2:	461a      	mov	r2, r3
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d3cd      	bcc.n	8003386 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80033f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f005 ffee 	bl	80093e0 <USB_ReadInterrupts>
 8003404:	4603      	mov	r3, r0
 8003406:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800340a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800340e:	d156      	bne.n	80034be <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003410:	2301      	movs	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24
 8003414:	e045      	b.n	80034a2 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d12e      	bne.n	800349c <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800343e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003440:	2b00      	cmp	r3, #0
 8003442:	da2b      	bge.n	800349c <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003450:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003454:	429a      	cmp	r2, r3
 8003456:	d121      	bne.n	800349c <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003494:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003498:	6053      	str	r3, [r2, #4]
            break;
 800349a:	e008      	b.n	80034ae <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	3301      	adds	r3, #1
 80034a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	791b      	ldrb	r3, [r3, #4]
 80034a6:	461a      	mov	r2, r3
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d3b3      	bcc.n	8003416 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80034bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f005 ff8c 	bl	80093e0 <USB_ReadInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80034ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d2:	d10a      	bne.n	80034ea <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f008 fbe7 	bl	800bca8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80034e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f005 ff76 	bl	80093e0 <USB_ReadInterrupts>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d115      	bne.n	800352a <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f008 fbd7 	bl	800bcc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	e000      	b.n	800352a <HAL_PCD_IRQHandler+0x926>
      return;
 8003528:	bf00      	nop
    }
  }
}
 800352a:	3734      	adds	r7, #52	@ 0x34
 800352c:	46bd      	mov	sp, r7
 800352e:	bd90      	pop	{r4, r7, pc}

08003530 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_PCD_SetAddress+0x1a>
 8003546:	2302      	movs	r3, #2
 8003548:	e012      	b.n	8003570 <HAL_PCD_SetAddress+0x40>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f005 fed5 	bl	8009310 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	461a      	mov	r2, r3
 8003586:	4603      	mov	r3, r0
 8003588:	70fb      	strb	r3, [r7, #3]
 800358a:	460b      	mov	r3, r1
 800358c:	803b      	strh	r3, [r7, #0]
 800358e:	4613      	mov	r3, r2
 8003590:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800359a:	2b00      	cmp	r3, #0
 800359c:	da0f      	bge.n	80035be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	f003 020f 	and.w	r2, r3, #15
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	3310      	adds	r3, #16
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	3304      	adds	r3, #4
 80035b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	705a      	strb	r2, [r3, #1]
 80035bc:	e00f      	b.n	80035de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	f003 020f 	and.w	r2, r3, #15
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	3304      	adds	r3, #4
 80035d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035de:	78fb      	ldrb	r3, [r7, #3]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80035ea:	883b      	ldrh	r3, [r7, #0]
 80035ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	78ba      	ldrb	r2, [r7, #2]
 80035f8:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	785b      	ldrb	r3, [r3, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d004      	beq.n	800360c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800360c:	78bb      	ldrb	r3, [r7, #2]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d102      	bne.n	8003618 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_PCD_EP_Open+0xae>
 8003622:	2302      	movs	r3, #2
 8003624:	e00e      	b.n	8003644 <HAL_PCD_EP_Open+0xcc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68f9      	ldr	r1, [r7, #12]
 8003634:	4618      	mov	r0, r3
 8003636:	f005 f8bf 	bl	80087b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003642:	7afb      	ldrb	r3, [r7, #11]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800365c:	2b00      	cmp	r3, #0
 800365e:	da0f      	bge.n	8003680 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	f003 020f 	and.w	r2, r3, #15
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	3310      	adds	r3, #16
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	3304      	adds	r3, #4
 8003676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	705a      	strb	r2, [r3, #1]
 800367e:	e00f      	b.n	80036a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	f003 020f 	and.w	r2, r3, #15
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	3304      	adds	r3, #4
 8003698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d101      	bne.n	80036ba <HAL_PCD_EP_Close+0x6e>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e00e      	b.n	80036d8 <HAL_PCD_EP_Close+0x8c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68f9      	ldr	r1, [r7, #12]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f005 f8fd 	bl	80088c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036f0:	7afb      	ldrb	r3, [r7, #11]
 80036f2:	f003 020f 	and.w	r2, r3, #15
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2200      	movs	r2, #0
 800371a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2200      	movs	r2, #0
 8003720:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003722:	7afb      	ldrb	r3, [r7, #11]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	b2da      	uxtb	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6979      	ldr	r1, [r7, #20]
 8003734:	4618      	mov	r0, r3
 8003736:	f005 f9a3 	bl	8008a80 <USB_EPStartXfer>

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	f003 020f 	and.w	r2, r3, #15
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	460b      	mov	r3, r1
 8003782:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003784:	7afb      	ldrb	r3, [r7, #11]
 8003786:	f003 020f 	and.w	r2, r3, #15
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	3310      	adds	r3, #16
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	3304      	adds	r3, #4
 800379a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2200      	movs	r2, #0
 80037ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2201      	movs	r2, #1
 80037b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037b4:	7afb      	ldrb	r3, [r7, #11]
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6979      	ldr	r1, [r7, #20]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f005 f95a 	bl	8008a80 <USB_EPStartXfer>

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	460b      	mov	r3, r1
 80037e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	7912      	ldrb	r2, [r2, #4]
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e04e      	b.n	8003892 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	da0f      	bge.n	800381c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	f003 020f 	and.w	r2, r3, #15
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	3310      	adds	r3, #16
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4413      	add	r3, r2
 8003810:	3304      	adds	r3, #4
 8003812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	705a      	strb	r2, [r3, #1]
 800381a:	e00d      	b.n	8003838 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	3304      	adds	r3, #4
 8003830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_PCD_EP_SetStall+0x82>
 8003854:	2302      	movs	r3, #2
 8003856:	e01c      	b.n	8003892 <HAL_PCD_EP_SetStall+0xbc>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68f9      	ldr	r1, [r7, #12]
 8003866:	4618      	mov	r0, r3
 8003868:	f005 fc7e 	bl	8009168 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f005 fe70 	bl	8009568 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	7912      	ldrb	r2, [r2, #4]
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e042      	b.n	800393e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	da0f      	bge.n	80038e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	3310      	adds	r3, #16
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4413      	add	r3, r2
 80038d4:	3304      	adds	r3, #4
 80038d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	705a      	strb	r2, [r3, #1]
 80038de:	e00f      	b.n	8003900 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	f003 020f 	and.w	r2, r3, #15
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	3304      	adds	r3, #4
 80038f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_PCD_EP_ClrStall+0x86>
 800391c:	2302      	movs	r3, #2
 800391e:	e00e      	b.n	800393e <HAL_PCD_EP_ClrStall+0xa4>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68f9      	ldr	r1, [r7, #12]
 800392e:	4618      	mov	r0, r3
 8003930:	f005 fc88 	bl	8009244 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003956:	2b00      	cmp	r3, #0
 8003958:	da0c      	bge.n	8003974 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	f003 020f 	and.w	r2, r3, #15
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	3310      	adds	r3, #16
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	3304      	adds	r3, #4
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e00c      	b.n	800398e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f003 020f 	and.w	r2, r3, #15
 800397a:	4613      	mov	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	3304      	adds	r3, #4
 800398c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	4618      	mov	r0, r3
 8003996:	f005 faab 	bl	8008ef0 <USB_EPStopXfer>
 800399a:	4603      	mov	r3, r0
 800399c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800399e:	7afb      	ldrb	r3, [r7, #11]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	3310      	adds	r3, #16
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	4413      	add	r3, r2
 80039cc:	3304      	adds	r3, #4
 80039ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d901      	bls.n	80039e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e067      	b.n	8003ab0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d902      	bls.n	80039fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	3303      	adds	r3, #3
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a04:	e026      	b.n	8003a54 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d902      	bls.n	8003a22 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3303      	adds	r3, #3
 8003a26:	089b      	lsrs	r3, r3, #2
 8003a28:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	68d9      	ldr	r1, [r3, #12]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	6978      	ldr	r0, [r7, #20]
 8003a38:	f005 fb04 	bl	8009044 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	441a      	add	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	441a      	add	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d809      	bhi.n	8003a7e <PCD_WriteEmptyTxFifo+0xd6>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d203      	bcs.n	8003a7e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1c3      	bne.n	8003a06 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d811      	bhi.n	8003aae <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	2201      	movs	r2, #1
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	6939      	ldr	r1, [r7, #16]
 8003aa6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003aaa:	4013      	ands	r3, r2
 8003aac:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3720      	adds	r7, #32
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	333c      	adds	r3, #60	@ 0x3c
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4a19      	ldr	r2, [pc, #100]	@ (8003b50 <PCD_EP_OutXfrComplete_int+0x98>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d124      	bne.n	8003b38 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b04:	461a      	mov	r2, r3
 8003b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b0a:	6093      	str	r3, [r2, #8]
 8003b0c:	e01a      	b.n	8003b44 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b24:	461a      	mov	r2, r3
 8003b26:	2320      	movs	r3, #32
 8003b28:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	4619      	mov	r1, r3
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f007 ffe5 	bl	800bb00 <HAL_PCD_DataOutStageCallback>
 8003b36:	e005      	b.n	8003b44 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f007 ffde 	bl	800bb00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	4f54310a 	.word	0x4f54310a

08003b54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	333c      	adds	r3, #60	@ 0x3c
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb8 <PCD_EP_OutSetupPacket_int+0x64>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d90e      	bls.n	8003ba8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d009      	beq.n	8003ba8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ba6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f007 ff97 	bl	800badc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	4f54300a 	.word	0x4f54300a

08003bbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d107      	bne.n	8003bea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bda:	883b      	ldrh	r3, [r7, #0]
 8003bdc:	0419      	lsls	r1, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003be8:	e028      	b.n	8003c3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]
 8003bfc:	e00d      	b.n	8003c1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	3340      	adds	r3, #64	@ 0x40
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4413      	add	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	3301      	adds	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
 8003c1a:	7bfa      	ldrb	r2, [r7, #15]
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d3ec      	bcc.n	8003bfe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c24:	883b      	ldrh	r3, [r7, #0]
 8003c26:	0418      	lsls	r0, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6819      	ldr	r1, [r3, #0]
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	4302      	orrs	r2, r0
 8003c34:	3340      	adds	r3, #64	@ 0x40
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	f043 0303 	orr.w	r3, r3, #3
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb8:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a04      	ldr	r2, [pc, #16]	@ (8003cd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc2:	6013      	str	r3, [r2, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40007000 	.word	0x40007000

08003cd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cd8:	4b04      	ldr	r3, [pc, #16]	@ (8003cec <HAL_PWREx_GetVoltageRange+0x18>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40007000 	.word	0x40007000

08003cf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cfe:	d130      	bne.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d00:	4b23      	ldr	r3, [pc, #140]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d0c:	d038      	beq.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d0e:	4b20      	ldr	r3, [pc, #128]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d16:	4a1e      	ldr	r2, [pc, #120]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2232      	movs	r2, #50	@ 0x32
 8003d24:	fb02 f303 	mul.w	r3, r2, r3
 8003d28:	4a1b      	ldr	r2, [pc, #108]	@ (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	0c9b      	lsrs	r3, r3, #18
 8003d30:	3301      	adds	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d34:	e002      	b.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d3c:	4b14      	ldr	r3, [pc, #80]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d48:	d102      	bne.n	8003d50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f2      	bne.n	8003d36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d50:	4b0f      	ldr	r3, [pc, #60]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5c:	d110      	bne.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e00f      	b.n	8003d82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d62:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6e:	d007      	beq.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d70:	4b07      	ldr	r3, [pc, #28]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d78:	4a05      	ldr	r2, [pc, #20]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40007000 	.word	0x40007000
 8003d94:	2000009c 	.word	0x2000009c
 8003d98:	431bde83 	.word	0x431bde83

08003d9c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003da0:	4b05      	ldr	r3, [pc, #20]	@ (8003db8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4a04      	ldr	r2, [pc, #16]	@ (8003db8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003da6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003daa:	6053      	str	r3, [r2, #4]
}
 8003dac:	bf00      	nop
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40007000 	.word	0x40007000

08003dbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e3ca      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dce:	4b97      	ldr	r3, [pc, #604]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd8:	4b94      	ldr	r3, [pc, #592]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80e4 	beq.w	8003fb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <HAL_RCC_OscConfig+0x4a>
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b0c      	cmp	r3, #12
 8003dfa:	f040 808b 	bne.w	8003f14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	f040 8087 	bne.w	8003f14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e06:	4b89      	ldr	r3, [pc, #548]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <HAL_RCC_OscConfig+0x62>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e3a2      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	4b82      	ldr	r3, [pc, #520]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <HAL_RCC_OscConfig+0x7c>
 8003e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e36:	e005      	b.n	8003e44 <HAL_RCC_OscConfig+0x88>
 8003e38:	4b7c      	ldr	r3, [pc, #496]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d223      	bcs.n	8003e90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fd55 	bl	80048fc <RCC_SetFlashLatencyFromMSIRange>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e383      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e5c:	4b73      	ldr	r3, [pc, #460]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a72      	ldr	r2, [pc, #456]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e62:	f043 0308 	orr.w	r3, r3, #8
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b70      	ldr	r3, [pc, #448]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	496d      	ldr	r1, [pc, #436]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e7a:	4b6c      	ldr	r3, [pc, #432]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	4968      	ldr	r1, [pc, #416]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
 8003e8e:	e025      	b.n	8003edc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e90:	4b66      	ldr	r3, [pc, #408]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a65      	ldr	r2, [pc, #404]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e96:	f043 0308 	orr.w	r3, r3, #8
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	4b63      	ldr	r3, [pc, #396]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4960      	ldr	r1, [pc, #384]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eae:	4b5f      	ldr	r3, [pc, #380]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	495b      	ldr	r1, [pc, #364]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d109      	bne.n	8003edc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fd15 	bl	80048fc <RCC_SetFlashLatencyFromMSIRange>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e343      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003edc:	f000 fc4a 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b52      	ldr	r3, [pc, #328]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	4950      	ldr	r1, [pc, #320]	@ (8004030 <HAL_RCC_OscConfig+0x274>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef8:	4a4e      	ldr	r2, [pc, #312]	@ (8004034 <HAL_RCC_OscConfig+0x278>)
 8003efa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003efc:	4b4e      	ldr	r3, [pc, #312]	@ (8004038 <HAL_RCC_OscConfig+0x27c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe f955 	bl	80021b0 <HAL_InitTick>
 8003f06:	4603      	mov	r3, r0
 8003f08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d052      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	e327      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d032      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f1c:	4b43      	ldr	r3, [pc, #268]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a42      	ldr	r2, [pc, #264]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f28:	f7fe f992 	bl	8002250 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f30:	f7fe f98e 	bl	8002250 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e310      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f42:	4b3a      	ldr	r3, [pc, #232]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f4e:	4b37      	ldr	r3, [pc, #220]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a36      	ldr	r2, [pc, #216]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	4b34      	ldr	r3, [pc, #208]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	4931      	ldr	r1, [pc, #196]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	492c      	ldr	r1, [pc, #176]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]
 8003f80:	e01a      	b.n	8003fb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f82:	4b2a      	ldr	r3, [pc, #168]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a29      	ldr	r2, [pc, #164]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f8e:	f7fe f95f 	bl	8002250 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f96:	f7fe f95b 	bl	8002250 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e2dd      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fa8:	4b20      	ldr	r3, [pc, #128]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f0      	bne.n	8003f96 <HAL_RCC_OscConfig+0x1da>
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d074      	beq.n	80040ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x21a>
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b0c      	cmp	r3, #12
 8003fce:	d10e      	bne.n	8003fee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd6:	4b15      	ldr	r3, [pc, #84]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d064      	beq.n	80040ac <HAL_RCC_OscConfig+0x2f0>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d160      	bne.n	80040ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e2ba      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x24a>
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8003ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	e026      	b.n	8004054 <HAL_RCC_OscConfig+0x298>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800400e:	d115      	bne.n	800403c <HAL_RCC_OscConfig+0x280>
 8004010:	4b06      	ldr	r3, [pc, #24]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a05      	ldr	r2, [pc, #20]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8004016:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b03      	ldr	r3, [pc, #12]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a02      	ldr	r2, [pc, #8]	@ (800402c <HAL_RCC_OscConfig+0x270>)
 8004022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	e014      	b.n	8004054 <HAL_RCC_OscConfig+0x298>
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
 8004030:	080113fc 	.word	0x080113fc
 8004034:	2000009c 	.word	0x2000009c
 8004038:	200000a0 	.word	0x200000a0
 800403c:	4ba0      	ldr	r3, [pc, #640]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a9f      	ldr	r2, [pc, #636]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b9d      	ldr	r3, [pc, #628]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a9c      	ldr	r2, [pc, #624]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 800404e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d013      	beq.n	8004084 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe f8f8 	bl	8002250 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004064:	f7fe f8f4 	bl	8002250 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e276      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004076:	4b92      	ldr	r3, [pc, #584]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x2a8>
 8004082:	e014      	b.n	80040ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fe f8e4 	bl	8002250 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800408c:	f7fe f8e0 	bl	8002250 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	@ 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e262      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800409e:	4b88      	ldr	r3, [pc, #544]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x2d0>
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d060      	beq.n	800417c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d005      	beq.n	80040cc <HAL_RCC_OscConfig+0x310>
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b0c      	cmp	r3, #12
 80040c4:	d119      	bne.n	80040fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d116      	bne.n	80040fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040cc:	4b7c      	ldr	r3, [pc, #496]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_OscConfig+0x328>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e23f      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e4:	4b76      	ldr	r3, [pc, #472]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	4973      	ldr	r1, [pc, #460]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f8:	e040      	b.n	800417c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d023      	beq.n	800414a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004102:	4b6f      	ldr	r3, [pc, #444]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a6e      	ldr	r2, [pc, #440]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800410c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7fe f89f 	bl	8002250 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004116:	f7fe f89b 	bl	8002250 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e21d      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004128:	4b65      	ldr	r3, [pc, #404]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0f0      	beq.n	8004116 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004134:	4b62      	ldr	r3, [pc, #392]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	061b      	lsls	r3, r3, #24
 8004142:	495f      	ldr	r1, [pc, #380]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004144:	4313      	orrs	r3, r2
 8004146:	604b      	str	r3, [r1, #4]
 8004148:	e018      	b.n	800417c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800414a:	4b5d      	ldr	r3, [pc, #372]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a5c      	ldr	r2, [pc, #368]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004156:	f7fe f87b 	bl	8002250 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415e:	f7fe f877 	bl	8002250 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e1f9      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004170:	4b53      	ldr	r3, [pc, #332]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1f0      	bne.n	800415e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d03c      	beq.n	8004202 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01c      	beq.n	80041ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004190:	4b4b      	ldr	r3, [pc, #300]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004196:	4a4a      	ldr	r2, [pc, #296]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fe f856 	bl	8002250 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a8:	f7fe f852 	bl	8002250 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e1d4      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ba:	4b41      	ldr	r3, [pc, #260]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 80041bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ef      	beq.n	80041a8 <HAL_RCC_OscConfig+0x3ec>
 80041c8:	e01b      	b.n	8004202 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ca:	4b3d      	ldr	r3, [pc, #244]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 80041cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d0:	4a3b      	ldr	r2, [pc, #236]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 80041d2:	f023 0301 	bic.w	r3, r3, #1
 80041d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041da:	f7fe f839 	bl	8002250 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e2:	f7fe f835 	bl	8002250 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e1b7      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f4:	4b32      	ldr	r3, [pc, #200]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 80041f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1ef      	bne.n	80041e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80a6 	beq.w	800435c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004210:	2300      	movs	r3, #0
 8004212:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004214:	4b2a      	ldr	r3, [pc, #168]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10d      	bne.n	800423c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004220:	4b27      	ldr	r3, [pc, #156]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004224:	4a26      	ldr	r2, [pc, #152]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800422a:	6593      	str	r3, [r2, #88]	@ 0x58
 800422c:	4b24      	ldr	r3, [pc, #144]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004238:	2301      	movs	r3, #1
 800423a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423c:	4b21      	ldr	r3, [pc, #132]	@ (80042c4 <HAL_RCC_OscConfig+0x508>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d118      	bne.n	800427a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004248:	4b1e      	ldr	r3, [pc, #120]	@ (80042c4 <HAL_RCC_OscConfig+0x508>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <HAL_RCC_OscConfig+0x508>)
 800424e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004252:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004254:	f7fd fffc 	bl	8002250 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425c:	f7fd fff8 	bl	8002250 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e17a      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426e:	4b15      	ldr	r3, [pc, #84]	@ (80042c4 <HAL_RCC_OscConfig+0x508>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d108      	bne.n	8004294 <HAL_RCC_OscConfig+0x4d8>
 8004282:	4b0f      	ldr	r3, [pc, #60]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004288:	4a0d      	ldr	r2, [pc, #52]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004292:	e029      	b.n	80042e8 <HAL_RCC_OscConfig+0x52c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b05      	cmp	r3, #5
 800429a:	d115      	bne.n	80042c8 <HAL_RCC_OscConfig+0x50c>
 800429c:	4b08      	ldr	r3, [pc, #32]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a2:	4a07      	ldr	r2, [pc, #28]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 80042a4:	f043 0304 	orr.w	r3, r3, #4
 80042a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042ac:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b2:	4a03      	ldr	r2, [pc, #12]	@ (80042c0 <HAL_RCC_OscConfig+0x504>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042bc:	e014      	b.n	80042e8 <HAL_RCC_OscConfig+0x52c>
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40007000 	.word	0x40007000
 80042c8:	4b9c      	ldr	r3, [pc, #624]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ce:	4a9b      	ldr	r2, [pc, #620]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042d8:	4b98      	ldr	r3, [pc, #608]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042de:	4a97      	ldr	r2, [pc, #604]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 80042e0:	f023 0304 	bic.w	r3, r3, #4
 80042e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d016      	beq.n	800431e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fd ffae 	bl	8002250 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f6:	e00a      	b.n	800430e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f8:	f7fd ffaa 	bl	8002250 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004306:	4293      	cmp	r3, r2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e12a      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430e:	4b8b      	ldr	r3, [pc, #556]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ed      	beq.n	80042f8 <HAL_RCC_OscConfig+0x53c>
 800431c:	e015      	b.n	800434a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431e:	f7fd ff97 	bl	8002250 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004324:	e00a      	b.n	800433c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004326:	f7fd ff93 	bl	8002250 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004334:	4293      	cmp	r3, r2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e113      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800433c:	4b7f      	ldr	r3, [pc, #508]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1ed      	bne.n	8004326 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800434a:	7ffb      	ldrb	r3, [r7, #31]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004350:	4b7a      	ldr	r3, [pc, #488]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 8004352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004354:	4a79      	ldr	r2, [pc, #484]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 8004356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800435a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80fe 	beq.w	8004562 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436a:	2b02      	cmp	r3, #2
 800436c:	f040 80d0 	bne.w	8004510 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004370:	4b72      	ldr	r3, [pc, #456]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f003 0203 	and.w	r2, r3, #3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004380:	429a      	cmp	r2, r3
 8004382:	d130      	bne.n	80043e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	3b01      	subs	r3, #1
 8004390:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d127      	bne.n	80043e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d11f      	bne.n	80043e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043b0:	2a07      	cmp	r2, #7
 80043b2:	bf14      	ite	ne
 80043b4:	2201      	movne	r2, #1
 80043b6:	2200      	moveq	r2, #0
 80043b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d113      	bne.n	80043e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c8:	085b      	lsrs	r3, r3, #1
 80043ca:	3b01      	subs	r3, #1
 80043cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d109      	bne.n	80043e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	3b01      	subs	r3, #1
 80043e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d06e      	beq.n	80044c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b0c      	cmp	r3, #12
 80043ea:	d069      	beq.n	80044c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043ec:	4b53      	ldr	r3, [pc, #332]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043f8:	4b50      	ldr	r3, [pc, #320]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0ad      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004408:	4b4c      	ldr	r3, [pc, #304]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a4b      	ldr	r2, [pc, #300]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 800440e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004412:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004414:	f7fd ff1c 	bl	8002250 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441c:	f7fd ff18 	bl	8002250 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e09a      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800442e:	4b43      	ldr	r3, [pc, #268]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800443a:	4b40      	ldr	r3, [pc, #256]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	4b40      	ldr	r3, [pc, #256]	@ (8004540 <HAL_RCC_OscConfig+0x784>)
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800444a:	3a01      	subs	r2, #1
 800444c:	0112      	lsls	r2, r2, #4
 800444e:	4311      	orrs	r1, r2
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004454:	0212      	lsls	r2, r2, #8
 8004456:	4311      	orrs	r1, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800445c:	0852      	lsrs	r2, r2, #1
 800445e:	3a01      	subs	r2, #1
 8004460:	0552      	lsls	r2, r2, #21
 8004462:	4311      	orrs	r1, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004468:	0852      	lsrs	r2, r2, #1
 800446a:	3a01      	subs	r2, #1
 800446c:	0652      	lsls	r2, r2, #25
 800446e:	4311      	orrs	r1, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004474:	0912      	lsrs	r2, r2, #4
 8004476:	0452      	lsls	r2, r2, #17
 8004478:	430a      	orrs	r2, r1
 800447a:	4930      	ldr	r1, [pc, #192]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 800447c:	4313      	orrs	r3, r2
 800447e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004480:	4b2e      	ldr	r3, [pc, #184]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2d      	ldr	r2, [pc, #180]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 8004486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800448a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800448c:	4b2b      	ldr	r3, [pc, #172]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4a2a      	ldr	r2, [pc, #168]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 8004492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004496:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004498:	f7fd feda 	bl	8002250 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a0:	f7fd fed6 	bl	8002250 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e058      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b2:	4b22      	ldr	r3, [pc, #136]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044be:	e050      	b.n	8004562 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e04f      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c4:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d148      	bne.n	8004562 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044d0:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a19      	ldr	r2, [pc, #100]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 80044d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044dc:	4b17      	ldr	r3, [pc, #92]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a16      	ldr	r2, [pc, #88]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 80044e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044e8:	f7fd feb2 	bl	8002250 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fd feae 	bl	8002250 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e030      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004502:	4b0e      	ldr	r3, [pc, #56]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x734>
 800450e:	e028      	b.n	8004562 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d023      	beq.n	800455e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004516:	4b09      	ldr	r3, [pc, #36]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a08      	ldr	r2, [pc, #32]	@ (800453c <HAL_RCC_OscConfig+0x780>)
 800451c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7fd fe95 	bl	8002250 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004528:	e00c      	b.n	8004544 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452a:	f7fd fe91 	bl	8002250 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d905      	bls.n	8004544 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e013      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
 800453c:	40021000 	.word	0x40021000
 8004540:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004544:	4b09      	ldr	r3, [pc, #36]	@ (800456c <HAL_RCC_OscConfig+0x7b0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1ec      	bne.n	800452a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004550:	4b06      	ldr	r3, [pc, #24]	@ (800456c <HAL_RCC_OscConfig+0x7b0>)
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	4905      	ldr	r1, [pc, #20]	@ (800456c <HAL_RCC_OscConfig+0x7b0>)
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_RCC_OscConfig+0x7b4>)
 8004558:	4013      	ands	r3, r2
 800455a:	60cb      	str	r3, [r1, #12]
 800455c:	e001      	b.n	8004562 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40021000 	.word	0x40021000
 8004570:	feeefffc 	.word	0xfeeefffc

08004574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0e7      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004588:	4b75      	ldr	r3, [pc, #468]	@ (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d910      	bls.n	80045b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b72      	ldr	r3, [pc, #456]	@ (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 0207 	bic.w	r2, r3, #7
 800459e:	4970      	ldr	r1, [pc, #448]	@ (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0cf      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d010      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	4b66      	ldr	r3, [pc, #408]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d908      	bls.n	80045e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d4:	4b63      	ldr	r3, [pc, #396]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4960      	ldr	r1, [pc, #384]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d04c      	beq.n	800468c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fa:	4b5a      	ldr	r3, [pc, #360]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d121      	bne.n	800464a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e0a6      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d107      	bne.n	8004622 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004612:	4b54      	ldr	r3, [pc, #336]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d115      	bne.n	800464a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e09a      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d107      	bne.n	800463a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800462a:	4b4e      	ldr	r3, [pc, #312]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e08e      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800463a:	4b4a      	ldr	r3, [pc, #296]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e086      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800464a:	4b46      	ldr	r3, [pc, #280]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f023 0203 	bic.w	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4943      	ldr	r1, [pc, #268]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 8004658:	4313      	orrs	r3, r2
 800465a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800465c:	f7fd fdf8 	bl	8002250 <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004662:	e00a      	b.n	800467a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004664:	f7fd fdf4 	bl	8002250 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e06e      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467a:	4b3a      	ldr	r3, [pc, #232]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 020c 	and.w	r2, r3, #12
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	429a      	cmp	r2, r3
 800468a:	d1eb      	bne.n	8004664 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d010      	beq.n	80046ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	4b31      	ldr	r3, [pc, #196]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d208      	bcs.n	80046ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	492b      	ldr	r1, [pc, #172]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ba:	4b29      	ldr	r3, [pc, #164]	@ (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d210      	bcs.n	80046ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c8:	4b25      	ldr	r3, [pc, #148]	@ (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 0207 	bic.w	r2, r3, #7
 80046d0:	4923      	ldr	r1, [pc, #140]	@ (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d8:	4b21      	ldr	r3, [pc, #132]	@ (8004760 <HAL_RCC_ClockConfig+0x1ec>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d001      	beq.n	80046ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e036      	b.n	8004758 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	4918      	ldr	r1, [pc, #96]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 8004704:	4313      	orrs	r3, r2
 8004706:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004714:	4b13      	ldr	r3, [pc, #76]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4910      	ldr	r1, [pc, #64]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 8004724:	4313      	orrs	r3, r2
 8004726:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004728:	f000 f824 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 800472c:	4602      	mov	r2, r0
 800472e:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <HAL_RCC_ClockConfig+0x1f0>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	091b      	lsrs	r3, r3, #4
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	490b      	ldr	r1, [pc, #44]	@ (8004768 <HAL_RCC_ClockConfig+0x1f4>)
 800473a:	5ccb      	ldrb	r3, [r1, r3]
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
 8004744:	4a09      	ldr	r2, [pc, #36]	@ (800476c <HAL_RCC_ClockConfig+0x1f8>)
 8004746:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004748:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <HAL_RCC_ClockConfig+0x1fc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7fd fd2f 	bl	80021b0 <HAL_InitTick>
 8004752:	4603      	mov	r3, r0
 8004754:	72fb      	strb	r3, [r7, #11]

  return status;
 8004756:	7afb      	ldrb	r3, [r7, #11]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40022000 	.word	0x40022000
 8004764:	40021000 	.word	0x40021000
 8004768:	080113fc 	.word	0x080113fc
 800476c:	2000009c 	.word	0x2000009c
 8004770:	200000a0 	.word	0x200000a0

08004774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004774:	b480      	push	{r7}
 8004776:	b089      	sub	sp, #36	@ 0x24
 8004778:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004782:	4b3e      	ldr	r3, [pc, #248]	@ (800487c <HAL_RCC_GetSysClockFreq+0x108>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800478c:	4b3b      	ldr	r3, [pc, #236]	@ (800487c <HAL_RCC_GetSysClockFreq+0x108>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_GetSysClockFreq+0x34>
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b0c      	cmp	r3, #12
 80047a0:	d121      	bne.n	80047e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d11e      	bne.n	80047e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047a8:	4b34      	ldr	r3, [pc, #208]	@ (800487c <HAL_RCC_GetSysClockFreq+0x108>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d107      	bne.n	80047c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047b4:	4b31      	ldr	r3, [pc, #196]	@ (800487c <HAL_RCC_GetSysClockFreq+0x108>)
 80047b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	e005      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047c4:	4b2d      	ldr	r3, [pc, #180]	@ (800487c <HAL_RCC_GetSysClockFreq+0x108>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10d      	bne.n	80047fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d102      	bne.n	80047f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047ec:	4b25      	ldr	r3, [pc, #148]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x110>)
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	e004      	b.n	80047fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047f8:	4b23      	ldr	r3, [pc, #140]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x114>)
 80047fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d134      	bne.n	800486c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004802:	4b1e      	ldr	r3, [pc, #120]	@ (800487c <HAL_RCC_GetSysClockFreq+0x108>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b02      	cmp	r3, #2
 8004810:	d003      	beq.n	800481a <HAL_RCC_GetSysClockFreq+0xa6>
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d003      	beq.n	8004820 <HAL_RCC_GetSysClockFreq+0xac>
 8004818:	e005      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800481a:	4b1a      	ldr	r3, [pc, #104]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x110>)
 800481c:	617b      	str	r3, [r7, #20]
      break;
 800481e:	e005      	b.n	800482c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004820:	4b19      	ldr	r3, [pc, #100]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x114>)
 8004822:	617b      	str	r3, [r7, #20]
      break;
 8004824:	e002      	b.n	800482c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	617b      	str	r3, [r7, #20]
      break;
 800482a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800482c:	4b13      	ldr	r3, [pc, #76]	@ (800487c <HAL_RCC_GetSysClockFreq+0x108>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	3301      	adds	r3, #1
 8004838:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800483a:	4b10      	ldr	r3, [pc, #64]	@ (800487c <HAL_RCC_GetSysClockFreq+0x108>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	fb03 f202 	mul.w	r2, r3, r2
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004852:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <HAL_RCC_GetSysClockFreq+0x108>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	0e5b      	lsrs	r3, r3, #25
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	3301      	adds	r3, #1
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800486c:	69bb      	ldr	r3, [r7, #24]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3724      	adds	r7, #36	@ 0x24
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000
 8004880:	08011414 	.word	0x08011414
 8004884:	00f42400 	.word	0x00f42400
 8004888:	007a1200 	.word	0x007a1200

0800488c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b03      	ldr	r3, [pc, #12]	@ (80048a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	2000009c 	.word	0x2000009c

080048a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048a8:	f7ff fff0 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4b06      	ldr	r3, [pc, #24]	@ (80048c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	0a1b      	lsrs	r3, r3, #8
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	4904      	ldr	r1, [pc, #16]	@ (80048cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80048ba:	5ccb      	ldrb	r3, [r1, r3]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40021000 	.word	0x40021000
 80048cc:	0801140c 	.word	0x0801140c

080048d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048d4:	f7ff ffda 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048d8:	4602      	mov	r2, r0
 80048da:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	0adb      	lsrs	r3, r3, #11
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	4904      	ldr	r1, [pc, #16]	@ (80048f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048e6:	5ccb      	ldrb	r3, [r1, r3]
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40021000 	.word	0x40021000
 80048f8:	0801140c 	.word	0x0801140c

080048fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004908:	4b2a      	ldr	r3, [pc, #168]	@ (80049b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004914:	f7ff f9de 	bl	8003cd4 <HAL_PWREx_GetVoltageRange>
 8004918:	6178      	str	r0, [r7, #20]
 800491a:	e014      	b.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800491c:	4b25      	ldr	r3, [pc, #148]	@ (80049b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004920:	4a24      	ldr	r2, [pc, #144]	@ (80049b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004926:	6593      	str	r3, [r2, #88]	@ 0x58
 8004928:	4b22      	ldr	r3, [pc, #136]	@ (80049b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800492a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004934:	f7ff f9ce 	bl	8003cd4 <HAL_PWREx_GetVoltageRange>
 8004938:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800493a:	4b1e      	ldr	r3, [pc, #120]	@ (80049b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800493c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493e:	4a1d      	ldr	r2, [pc, #116]	@ (80049b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004940:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004944:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800494c:	d10b      	bne.n	8004966 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b80      	cmp	r3, #128	@ 0x80
 8004952:	d919      	bls.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2ba0      	cmp	r3, #160	@ 0xa0
 8004958:	d902      	bls.n	8004960 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800495a:	2302      	movs	r3, #2
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	e013      	b.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004960:	2301      	movs	r3, #1
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	e010      	b.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b80      	cmp	r3, #128	@ 0x80
 800496a:	d902      	bls.n	8004972 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800496c:	2303      	movs	r3, #3
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	e00a      	b.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b80      	cmp	r3, #128	@ 0x80
 8004976:	d102      	bne.n	800497e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004978:	2302      	movs	r3, #2
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	e004      	b.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b70      	cmp	r3, #112	@ 0x70
 8004982:	d101      	bne.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004984:	2301      	movs	r3, #1
 8004986:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004988:	4b0b      	ldr	r3, [pc, #44]	@ (80049b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f023 0207 	bic.w	r2, r3, #7
 8004990:	4909      	ldr	r1, [pc, #36]	@ (80049b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004998:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d001      	beq.n	80049aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40022000 	.word	0x40022000

080049bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049c4:	2300      	movs	r3, #0
 80049c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049c8:	2300      	movs	r3, #0
 80049ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d041      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049e0:	d02a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049e6:	d824      	bhi.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049ec:	d008      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049f2:	d81e      	bhi.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049fc:	d010      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049fe:	e018      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a00:	4b86      	ldr	r3, [pc, #536]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	4a85      	ldr	r2, [pc, #532]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a0c:	e015      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3304      	adds	r3, #4
 8004a12:	2100      	movs	r1, #0
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 facb 	bl	8004fb0 <RCCEx_PLLSAI1_Config>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a1e:	e00c      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3320      	adds	r3, #32
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fbb6 	bl	8005198 <RCCEx_PLLSAI2_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a30:	e003      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	74fb      	strb	r3, [r7, #19]
      break;
 8004a36:	e000      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a3a:	7cfb      	ldrb	r3, [r7, #19]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a40:	4b76      	ldr	r3, [pc, #472]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a4e:	4973      	ldr	r1, [pc, #460]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a56:	e001      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a58:	7cfb      	ldrb	r3, [r7, #19]
 8004a5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d041      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a70:	d02a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a76:	d824      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a7c:	d008      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a82:	d81e      	bhi.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a8c:	d010      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a8e:	e018      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a90:	4b62      	ldr	r3, [pc, #392]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4a61      	ldr	r2, [pc, #388]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a9c:	e015      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fa83 	bl	8004fb0 <RCCEx_PLLSAI1_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aae:	e00c      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3320      	adds	r3, #32
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fb6e 	bl	8005198 <RCCEx_PLLSAI2_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ac0:	e003      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ac6:	e000      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aca:	7cfb      	ldrb	r3, [r7, #19]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ad0:	4b52      	ldr	r3, [pc, #328]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ade:	494f      	ldr	r1, [pc, #316]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ae6:	e001      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae8:	7cfb      	ldrb	r3, [r7, #19]
 8004aea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80a0 	beq.w	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afa:	2300      	movs	r3, #0
 8004afc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004afe:	4b47      	ldr	r3, [pc, #284]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00d      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b14:	4b41      	ldr	r3, [pc, #260]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b18:	4a40      	ldr	r2, [pc, #256]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b20:	4b3e      	ldr	r3, [pc, #248]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b30:	4b3b      	ldr	r3, [pc, #236]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a3a      	ldr	r2, [pc, #232]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b3c:	f7fd fb88 	bl	8002250 <HAL_GetTick>
 8004b40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b42:	e009      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b44:	f7fd fb84 	bl	8002250 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d902      	bls.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	74fb      	strb	r3, [r7, #19]
        break;
 8004b56:	e005      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b58:	4b31      	ldr	r3, [pc, #196]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0ef      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d15c      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01f      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d019      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b88:	4b24      	ldr	r3, [pc, #144]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b94:	4b21      	ldr	r3, [pc, #132]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9a:	4a20      	ldr	r2, [pc, #128]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004baa:	4a1c      	ldr	r2, [pc, #112]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bb4:	4a19      	ldr	r2, [pc, #100]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d016      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fd fb43 	bl	8002250 <HAL_GetTick>
 8004bca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bcc:	e00b      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fd fb3f 	bl	8002250 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d902      	bls.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	74fb      	strb	r3, [r7, #19]
            break;
 8004be4:	e006      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ec      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bfa:	4b08      	ldr	r3, [pc, #32]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c0a:	4904      	ldr	r1, [pc, #16]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c12:	e009      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
 8004c16:	74bb      	strb	r3, [r7, #18]
 8004c18:	e006      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c24:	7cfb      	ldrb	r3, [r7, #19]
 8004c26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c28:	7c7b      	ldrb	r3, [r7, #17]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d105      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c2e:	4b9e      	ldr	r3, [pc, #632]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c32:	4a9d      	ldr	r2, [pc, #628]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c46:	4b98      	ldr	r3, [pc, #608]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4c:	f023 0203 	bic.w	r2, r3, #3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c54:	4994      	ldr	r1, [pc, #592]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c68:	4b8f      	ldr	r3, [pc, #572]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6e:	f023 020c 	bic.w	r2, r3, #12
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c76:	498c      	ldr	r1, [pc, #560]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c8a:	4b87      	ldr	r3, [pc, #540]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c98:	4983      	ldr	r1, [pc, #524]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cac:	4b7e      	ldr	r3, [pc, #504]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cba:	497b      	ldr	r1, [pc, #492]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0310 	and.w	r3, r3, #16
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cce:	4b76      	ldr	r3, [pc, #472]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cdc:	4972      	ldr	r1, [pc, #456]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cf0:	4b6d      	ldr	r3, [pc, #436]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cfe:	496a      	ldr	r1, [pc, #424]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d12:	4b65      	ldr	r3, [pc, #404]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d20:	4961      	ldr	r1, [pc, #388]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d34:	4b5c      	ldr	r3, [pc, #368]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d42:	4959      	ldr	r1, [pc, #356]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d56:	4b54      	ldr	r3, [pc, #336]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d64:	4950      	ldr	r1, [pc, #320]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d78:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d86:	4948      	ldr	r1, [pc, #288]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d9a:	4b43      	ldr	r3, [pc, #268]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da8:	493f      	ldr	r1, [pc, #252]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d028      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dca:	4937      	ldr	r1, [pc, #220]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dda:	d106      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ddc:	4b32      	ldr	r3, [pc, #200]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4a31      	ldr	r2, [pc, #196]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004de6:	60d3      	str	r3, [r2, #12]
 8004de8:	e011      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004df2:	d10c      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	2101      	movs	r1, #1
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f8d8 	bl	8004fb0 <RCCEx_PLLSAI1_Config>
 8004e00:	4603      	mov	r3, r0
 8004e02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e04:	7cfb      	ldrb	r3, [r7, #19]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e0a:	7cfb      	ldrb	r3, [r7, #19]
 8004e0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d028      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e1a:	4b23      	ldr	r3, [pc, #140]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e28:	491f      	ldr	r1, [pc, #124]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e38:	d106      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e44:	60d3      	str	r3, [r2, #12]
 8004e46:	e011      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	2101      	movs	r1, #1
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 f8a9 	bl	8004fb0 <RCCEx_PLLSAI1_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e62:	7cfb      	ldrb	r3, [r7, #19]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d02b      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e78:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e86:	4908      	ldr	r1, [pc, #32]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e96:	d109      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e98:	4b03      	ldr	r3, [pc, #12]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a02      	ldr	r2, [pc, #8]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ea2:	60d3      	str	r3, [r2, #12]
 8004ea4:	e014      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ea6:	bf00      	nop
 8004ea8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	2101      	movs	r1, #1
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 f877 	bl	8004fb0 <RCCEx_PLLSAI1_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ec6:	7cfb      	ldrb	r3, [r7, #19]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d02f      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004edc:	4b2b      	ldr	r3, [pc, #172]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eea:	4928      	ldr	r1, [pc, #160]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004efa:	d10d      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3304      	adds	r3, #4
 8004f00:	2102      	movs	r1, #2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f854 	bl	8004fb0 <RCCEx_PLLSAI1_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f0c:	7cfb      	ldrb	r3, [r7, #19]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d014      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f12:	7cfb      	ldrb	r3, [r7, #19]
 8004f14:	74bb      	strb	r3, [r7, #18]
 8004f16:	e011      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f20:	d10c      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3320      	adds	r3, #32
 8004f26:	2102      	movs	r1, #2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 f935 	bl	8005198 <RCCEx_PLLSAI2_Config>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f32:	7cfb      	ldrb	r3, [r7, #19]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f48:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f56:	490d      	ldr	r1, [pc, #52]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f6a:	4b08      	ldr	r3, [pc, #32]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f7a:	4904      	ldr	r1, [pc, #16]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f82:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000

08004f90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004f94:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a04      	ldr	r2, [pc, #16]	@ (8004fac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004f9a:	f043 0304 	orr.w	r3, r3, #4
 8004f9e:	6013      	str	r3, [r2, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40021000 	.word	0x40021000

08004fb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fbe:	4b75      	ldr	r3, [pc, #468]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d018      	beq.n	8004ffc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fca:	4b72      	ldr	r3, [pc, #456]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0203 	and.w	r2, r3, #3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d10d      	bne.n	8004ff6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
       ||
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d047      	beq.n	8005086 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
 8004ffa:	e044      	b.n	8005086 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b03      	cmp	r3, #3
 8005002:	d018      	beq.n	8005036 <RCCEx_PLLSAI1_Config+0x86>
 8005004:	2b03      	cmp	r3, #3
 8005006:	d825      	bhi.n	8005054 <RCCEx_PLLSAI1_Config+0xa4>
 8005008:	2b01      	cmp	r3, #1
 800500a:	d002      	beq.n	8005012 <RCCEx_PLLSAI1_Config+0x62>
 800500c:	2b02      	cmp	r3, #2
 800500e:	d009      	beq.n	8005024 <RCCEx_PLLSAI1_Config+0x74>
 8005010:	e020      	b.n	8005054 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005012:	4b60      	ldr	r3, [pc, #384]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d11d      	bne.n	800505a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005022:	e01a      	b.n	800505a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005024:	4b5b      	ldr	r3, [pc, #364]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502c:	2b00      	cmp	r3, #0
 800502e:	d116      	bne.n	800505e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005034:	e013      	b.n	800505e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005036:	4b57      	ldr	r3, [pc, #348]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10f      	bne.n	8005062 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005042:	4b54      	ldr	r3, [pc, #336]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005052:	e006      	b.n	8005062 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
      break;
 8005058:	e004      	b.n	8005064 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800505a:	bf00      	nop
 800505c:	e002      	b.n	8005064 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800505e:	bf00      	nop
 8005060:	e000      	b.n	8005064 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005062:	bf00      	nop
    }

    if(status == HAL_OK)
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10d      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800506a:	4b4a      	ldr	r3, [pc, #296]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6819      	ldr	r1, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	3b01      	subs	r3, #1
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	430b      	orrs	r3, r1
 8005080:	4944      	ldr	r1, [pc, #272]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005082:	4313      	orrs	r3, r2
 8005084:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d17d      	bne.n	8005188 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800508c:	4b41      	ldr	r3, [pc, #260]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a40      	ldr	r2, [pc, #256]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005092:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005098:	f7fd f8da 	bl	8002250 <HAL_GetTick>
 800509c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800509e:	e009      	b.n	80050b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050a0:	f7fd f8d6 	bl	8002250 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d902      	bls.n	80050b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	73fb      	strb	r3, [r7, #15]
        break;
 80050b2:	e005      	b.n	80050c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050b4:	4b37      	ldr	r3, [pc, #220]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1ef      	bne.n	80050a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d160      	bne.n	8005188 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d111      	bne.n	80050f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050cc:	4b31      	ldr	r3, [pc, #196]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80050d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6892      	ldr	r2, [r2, #8]
 80050dc:	0211      	lsls	r1, r2, #8
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	68d2      	ldr	r2, [r2, #12]
 80050e2:	0912      	lsrs	r2, r2, #4
 80050e4:	0452      	lsls	r2, r2, #17
 80050e6:	430a      	orrs	r2, r1
 80050e8:	492a      	ldr	r1, [pc, #168]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	610b      	str	r3, [r1, #16]
 80050ee:	e027      	b.n	8005140 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d112      	bne.n	800511c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050f6:	4b27      	ldr	r3, [pc, #156]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80050fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6892      	ldr	r2, [r2, #8]
 8005106:	0211      	lsls	r1, r2, #8
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6912      	ldr	r2, [r2, #16]
 800510c:	0852      	lsrs	r2, r2, #1
 800510e:	3a01      	subs	r2, #1
 8005110:	0552      	lsls	r2, r2, #21
 8005112:	430a      	orrs	r2, r1
 8005114:	491f      	ldr	r1, [pc, #124]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005116:	4313      	orrs	r3, r2
 8005118:	610b      	str	r3, [r1, #16]
 800511a:	e011      	b.n	8005140 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800511c:	4b1d      	ldr	r3, [pc, #116]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005124:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6892      	ldr	r2, [r2, #8]
 800512c:	0211      	lsls	r1, r2, #8
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6952      	ldr	r2, [r2, #20]
 8005132:	0852      	lsrs	r2, r2, #1
 8005134:	3a01      	subs	r2, #1
 8005136:	0652      	lsls	r2, r2, #25
 8005138:	430a      	orrs	r2, r1
 800513a:	4916      	ldr	r1, [pc, #88]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513c:	4313      	orrs	r3, r2
 800513e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005140:	4b14      	ldr	r3, [pc, #80]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a13      	ldr	r2, [pc, #76]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005146:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800514a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fd f880 	bl	8002250 <HAL_GetTick>
 8005150:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005152:	e009      	b.n	8005168 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005154:	f7fd f87c 	bl	8002250 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d902      	bls.n	8005168 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	73fb      	strb	r3, [r7, #15]
          break;
 8005166:	e005      	b.n	8005174 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005168:	4b0a      	ldr	r3, [pc, #40]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0ef      	beq.n	8005154 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800517a:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	4904      	ldr	r1, [pc, #16]	@ (8005194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005184:	4313      	orrs	r3, r2
 8005186:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005188:	7bfb      	ldrb	r3, [r7, #15]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40021000 	.word	0x40021000

08005198 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d018      	beq.n	80051e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051b2:	4b67      	ldr	r3, [pc, #412]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0203 	and.w	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d10d      	bne.n	80051de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
       ||
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d009      	beq.n	80051de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80051ca:	4b61      	ldr	r3, [pc, #388]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	091b      	lsrs	r3, r3, #4
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
       ||
 80051da:	429a      	cmp	r2, r3
 80051dc:	d047      	beq.n	800526e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
 80051e2:	e044      	b.n	800526e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d018      	beq.n	800521e <RCCEx_PLLSAI2_Config+0x86>
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d825      	bhi.n	800523c <RCCEx_PLLSAI2_Config+0xa4>
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d002      	beq.n	80051fa <RCCEx_PLLSAI2_Config+0x62>
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d009      	beq.n	800520c <RCCEx_PLLSAI2_Config+0x74>
 80051f8:	e020      	b.n	800523c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051fa:	4b55      	ldr	r3, [pc, #340]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d11d      	bne.n	8005242 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800520a:	e01a      	b.n	8005242 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800520c:	4b50      	ldr	r3, [pc, #320]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005214:	2b00      	cmp	r3, #0
 8005216:	d116      	bne.n	8005246 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800521c:	e013      	b.n	8005246 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800521e:	4b4c      	ldr	r3, [pc, #304]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10f      	bne.n	800524a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800522a:	4b49      	ldr	r3, [pc, #292]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d109      	bne.n	800524a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800523a:	e006      	b.n	800524a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
      break;
 8005240:	e004      	b.n	800524c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005242:	bf00      	nop
 8005244:	e002      	b.n	800524c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005246:	bf00      	nop
 8005248:	e000      	b.n	800524c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800524a:	bf00      	nop
    }

    if(status == HAL_OK)
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10d      	bne.n	800526e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005252:	4b3f      	ldr	r3, [pc, #252]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6819      	ldr	r1, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	3b01      	subs	r3, #1
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	430b      	orrs	r3, r1
 8005268:	4939      	ldr	r1, [pc, #228]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800526a:	4313      	orrs	r3, r2
 800526c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d167      	bne.n	8005344 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005274:	4b36      	ldr	r3, [pc, #216]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a35      	ldr	r2, [pc, #212]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800527a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800527e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005280:	f7fc ffe6 	bl	8002250 <HAL_GetTick>
 8005284:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005286:	e009      	b.n	800529c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005288:	f7fc ffe2 	bl	8002250 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d902      	bls.n	800529c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	73fb      	strb	r3, [r7, #15]
        break;
 800529a:	e005      	b.n	80052a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800529c:	4b2c      	ldr	r3, [pc, #176]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1ef      	bne.n	8005288 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d14a      	bne.n	8005344 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d111      	bne.n	80052d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052b4:	4b26      	ldr	r3, [pc, #152]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80052bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6892      	ldr	r2, [r2, #8]
 80052c4:	0211      	lsls	r1, r2, #8
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68d2      	ldr	r2, [r2, #12]
 80052ca:	0912      	lsrs	r2, r2, #4
 80052cc:	0452      	lsls	r2, r2, #17
 80052ce:	430a      	orrs	r2, r1
 80052d0:	491f      	ldr	r1, [pc, #124]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	614b      	str	r3, [r1, #20]
 80052d6:	e011      	b.n	80052fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80052e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6892      	ldr	r2, [r2, #8]
 80052e8:	0211      	lsls	r1, r2, #8
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6912      	ldr	r2, [r2, #16]
 80052ee:	0852      	lsrs	r2, r2, #1
 80052f0:	3a01      	subs	r2, #1
 80052f2:	0652      	lsls	r2, r2, #25
 80052f4:	430a      	orrs	r2, r1
 80052f6:	4916      	ldr	r1, [pc, #88]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052fc:	4b14      	ldr	r3, [pc, #80]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a13      	ldr	r2, [pc, #76]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005306:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005308:	f7fc ffa2 	bl	8002250 <HAL_GetTick>
 800530c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800530e:	e009      	b.n	8005324 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005310:	f7fc ff9e 	bl	8002250 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d902      	bls.n	8005324 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	73fb      	strb	r3, [r7, #15]
          break;
 8005322:	e005      	b.n	8005330 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005324:	4b0a      	ldr	r3, [pc, #40]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0ef      	beq.n	8005310 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005336:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	4904      	ldr	r1, [pc, #16]	@ (8005350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005340:	4313      	orrs	r3, r2
 8005342:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40021000 	.word	0x40021000

08005354 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e095      	b.n	8005492 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	d108      	bne.n	8005380 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005376:	d009      	beq.n	800538c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	61da      	str	r2, [r3, #28]
 800537e:	e005      	b.n	800538c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7fc f9e4 	bl	8001774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053cc:	d902      	bls.n	80053d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	e002      	b.n	80053da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80053e2:	d007      	beq.n	80053f4 <HAL_SPI_Init+0xa0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053ec:	d002      	beq.n	80053f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005436:	ea42 0103 	orr.w	r1, r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	0c1b      	lsrs	r3, r3, #16
 8005450:	f003 0204 	and.w	r2, r3, #4
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005458:	f003 0310 	and.w	r3, r3, #16
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005470:	ea42 0103 	orr.w	r1, r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10e      	bne.n	80054dc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d009      	beq.n	80054dc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
    return;
 80054da:	e0ce      	b.n	800567a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_SPI_IRQHandler+0x5e>
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4798      	blx	r3
    return;
 80054f8:	e0bf      	b.n	800567a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <HAL_SPI_IRQHandler+0x7e>
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d105      	bne.n	800551a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80b0 	beq.w	800567a <HAL_SPI_IRQHandler+0x1de>
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80aa 	beq.w	800567a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d023      	beq.n	8005578 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b03      	cmp	r3, #3
 800553a:	d011      	beq.n	8005560 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005540:	f043 0204 	orr.w	r2, r3, #4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	e00b      	b.n	8005578 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005560:	2300      	movs	r3, #0
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	693b      	ldr	r3, [r7, #16]
        return;
 8005576:	e080      	b.n	800567a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d014      	beq.n	80055ac <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005586:	f043 0201 	orr.w	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ba:	f043 0208 	orr.w	r2, r3, #8
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d04f      	beq.n	8005678 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055e6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d104      	bne.n	8005604 <HAL_SPI_IRQHandler+0x168>
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d034      	beq.n	800566e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0203 	bic.w	r2, r2, #3
 8005612:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005618:	2b00      	cmp	r3, #0
 800561a:	d011      	beq.n	8005640 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005620:	4a17      	ldr	r2, [pc, #92]	@ (8005680 <HAL_SPI_IRQHandler+0x1e4>)
 8005622:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005628:	4618      	mov	r0, r3
 800562a:	f7fc ff90 	bl	800254e <HAL_DMA_Abort_IT>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005638:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005644:	2b00      	cmp	r3, #0
 8005646:	d016      	beq.n	8005676 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564c:	4a0c      	ldr	r2, [pc, #48]	@ (8005680 <HAL_SPI_IRQHandler+0x1e4>)
 800564e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005654:	4618      	mov	r0, r3
 8005656:	f7fc ff7a 	bl	800254e <HAL_DMA_Abort_IT>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005664:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800566c:	e003      	b.n	8005676 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f808 	bl	8005684 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005674:	e000      	b.n	8005678 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005676:	bf00      	nop
    return;
 8005678:	bf00      	nop
  }
}
 800567a:	3720      	adds	r7, #32
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	08005699 	.word	0x08005699

08005684 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f7ff ffe5 	bl	8005684 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d001      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e04f      	b.n	800577c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a23      	ldr	r2, [pc, #140]	@ (8005788 <HAL_TIM_Base_Start_IT+0xc4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d01d      	beq.n	800573a <HAL_TIM_Base_Start_IT+0x76>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005706:	d018      	beq.n	800573a <HAL_TIM_Base_Start_IT+0x76>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1f      	ldr	r2, [pc, #124]	@ (800578c <HAL_TIM_Base_Start_IT+0xc8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <HAL_TIM_Base_Start_IT+0x76>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1e      	ldr	r2, [pc, #120]	@ (8005790 <HAL_TIM_Base_Start_IT+0xcc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00e      	beq.n	800573a <HAL_TIM_Base_Start_IT+0x76>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1c      	ldr	r2, [pc, #112]	@ (8005794 <HAL_TIM_Base_Start_IT+0xd0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d009      	beq.n	800573a <HAL_TIM_Base_Start_IT+0x76>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a1b      	ldr	r2, [pc, #108]	@ (8005798 <HAL_TIM_Base_Start_IT+0xd4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d004      	beq.n	800573a <HAL_TIM_Base_Start_IT+0x76>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a19      	ldr	r2, [pc, #100]	@ (800579c <HAL_TIM_Base_Start_IT+0xd8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d115      	bne.n	8005766 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	4b17      	ldr	r3, [pc, #92]	@ (80057a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005742:	4013      	ands	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b06      	cmp	r3, #6
 800574a:	d015      	beq.n	8005778 <HAL_TIM_Base_Start_IT+0xb4>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005752:	d011      	beq.n	8005778 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005764:	e008      	b.n	8005778 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0201 	orr.w	r2, r2, #1
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	e000      	b.n	800577a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005778:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	40012c00 	.word	0x40012c00
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40000c00 	.word	0x40000c00
 8005798:	40013400 	.word	0x40013400
 800579c:	40014000 	.word	0x40014000
 80057a0:	00010007 	.word	0x00010007

080057a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e049      	b.n	800584a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fc fb2a 	bl	8001e24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3304      	adds	r3, #4
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f000 fc20 	bl	8006028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d109      	bne.n	8005878 <HAL_TIM_PWM_Start+0x24>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	bf14      	ite	ne
 8005870:	2301      	movne	r3, #1
 8005872:	2300      	moveq	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	e03c      	b.n	80058f2 <HAL_TIM_PWM_Start+0x9e>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b04      	cmp	r3, #4
 800587c:	d109      	bne.n	8005892 <HAL_TIM_PWM_Start+0x3e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b01      	cmp	r3, #1
 8005888:	bf14      	ite	ne
 800588a:	2301      	movne	r3, #1
 800588c:	2300      	moveq	r3, #0
 800588e:	b2db      	uxtb	r3, r3
 8005890:	e02f      	b.n	80058f2 <HAL_TIM_PWM_Start+0x9e>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b08      	cmp	r3, #8
 8005896:	d109      	bne.n	80058ac <HAL_TIM_PWM_Start+0x58>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	bf14      	ite	ne
 80058a4:	2301      	movne	r3, #1
 80058a6:	2300      	moveq	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	e022      	b.n	80058f2 <HAL_TIM_PWM_Start+0x9e>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b0c      	cmp	r3, #12
 80058b0:	d109      	bne.n	80058c6 <HAL_TIM_PWM_Start+0x72>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	bf14      	ite	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	2300      	moveq	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	e015      	b.n	80058f2 <HAL_TIM_PWM_Start+0x9e>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d109      	bne.n	80058e0 <HAL_TIM_PWM_Start+0x8c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	e008      	b.n	80058f2 <HAL_TIM_PWM_Start+0x9e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	bf14      	ite	ne
 80058ec:	2301      	movne	r3, #1
 80058ee:	2300      	moveq	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e09c      	b.n	8005a34 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <HAL_TIM_PWM_Start+0xb6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005908:	e023      	b.n	8005952 <HAL_TIM_PWM_Start+0xfe>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b04      	cmp	r3, #4
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Start+0xc6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005918:	e01b      	b.n	8005952 <HAL_TIM_PWM_Start+0xfe>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b08      	cmp	r3, #8
 800591e:	d104      	bne.n	800592a <HAL_TIM_PWM_Start+0xd6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005928:	e013      	b.n	8005952 <HAL_TIM_PWM_Start+0xfe>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b0c      	cmp	r3, #12
 800592e:	d104      	bne.n	800593a <HAL_TIM_PWM_Start+0xe6>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005938:	e00b      	b.n	8005952 <HAL_TIM_PWM_Start+0xfe>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b10      	cmp	r3, #16
 800593e:	d104      	bne.n	800594a <HAL_TIM_PWM_Start+0xf6>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005948:	e003      	b.n	8005952 <HAL_TIM_PWM_Start+0xfe>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2202      	movs	r2, #2
 800594e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2201      	movs	r2, #1
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fee0 	bl	8006720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a35      	ldr	r2, [pc, #212]	@ (8005a3c <HAL_TIM_PWM_Start+0x1e8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d013      	beq.n	8005992 <HAL_TIM_PWM_Start+0x13e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a34      	ldr	r2, [pc, #208]	@ (8005a40 <HAL_TIM_PWM_Start+0x1ec>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00e      	beq.n	8005992 <HAL_TIM_PWM_Start+0x13e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a32      	ldr	r2, [pc, #200]	@ (8005a44 <HAL_TIM_PWM_Start+0x1f0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d009      	beq.n	8005992 <HAL_TIM_PWM_Start+0x13e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a31      	ldr	r2, [pc, #196]	@ (8005a48 <HAL_TIM_PWM_Start+0x1f4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <HAL_TIM_PWM_Start+0x13e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2f      	ldr	r2, [pc, #188]	@ (8005a4c <HAL_TIM_PWM_Start+0x1f8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d101      	bne.n	8005996 <HAL_TIM_PWM_Start+0x142>
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <HAL_TIM_PWM_Start+0x144>
 8005996:	2300      	movs	r3, #0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d007      	beq.n	80059ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a22      	ldr	r2, [pc, #136]	@ (8005a3c <HAL_TIM_PWM_Start+0x1e8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01d      	beq.n	80059f2 <HAL_TIM_PWM_Start+0x19e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059be:	d018      	beq.n	80059f2 <HAL_TIM_PWM_Start+0x19e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a22      	ldr	r2, [pc, #136]	@ (8005a50 <HAL_TIM_PWM_Start+0x1fc>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_TIM_PWM_Start+0x19e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a21      	ldr	r2, [pc, #132]	@ (8005a54 <HAL_TIM_PWM_Start+0x200>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <HAL_TIM_PWM_Start+0x19e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a58 <HAL_TIM_PWM_Start+0x204>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_TIM_PWM_Start+0x19e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a17      	ldr	r2, [pc, #92]	@ (8005a40 <HAL_TIM_PWM_Start+0x1ec>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_TIM_PWM_Start+0x19e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a15      	ldr	r2, [pc, #84]	@ (8005a44 <HAL_TIM_PWM_Start+0x1f0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d115      	bne.n	8005a1e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	4b18      	ldr	r3, [pc, #96]	@ (8005a5c <HAL_TIM_PWM_Start+0x208>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b06      	cmp	r3, #6
 8005a02:	d015      	beq.n	8005a30 <HAL_TIM_PWM_Start+0x1dc>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a0a:	d011      	beq.n	8005a30 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1c:	e008      	b.n	8005a30 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 0201 	orr.w	r2, r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	e000      	b.n	8005a32 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40013400 	.word	0x40013400
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	00010007 	.word	0x00010007

08005a60 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fe54 	bl	8006720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b78 <HAL_TIM_PWM_Stop+0x118>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <HAL_TIM_PWM_Stop+0x4a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a3d      	ldr	r2, [pc, #244]	@ (8005b7c <HAL_TIM_PWM_Stop+0x11c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_TIM_PWM_Stop+0x4a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a3b      	ldr	r2, [pc, #236]	@ (8005b80 <HAL_TIM_PWM_Stop+0x120>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <HAL_TIM_PWM_Stop+0x4a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a3a      	ldr	r2, [pc, #232]	@ (8005b84 <HAL_TIM_PWM_Stop+0x124>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_TIM_PWM_Stop+0x4a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a38      	ldr	r2, [pc, #224]	@ (8005b88 <HAL_TIM_PWM_Stop+0x128>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_PWM_Stop+0x4e>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <HAL_TIM_PWM_Stop+0x50>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d017      	beq.n	8005ae4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6a1a      	ldr	r2, [r3, #32]
 8005aba:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10f      	bne.n	8005ae4 <HAL_TIM_PWM_Stop+0x84>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6a1a      	ldr	r2, [r3, #32]
 8005aca:	f240 4344 	movw	r3, #1092	@ 0x444
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d107      	bne.n	8005ae4 <HAL_TIM_PWM_Stop+0x84>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ae2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a1a      	ldr	r2, [r3, #32]
 8005aea:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10f      	bne.n	8005b14 <HAL_TIM_PWM_Stop+0xb4>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6a1a      	ldr	r2, [r3, #32]
 8005afa:	f240 4344 	movw	r3, #1092	@ 0x444
 8005afe:	4013      	ands	r3, r2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d107      	bne.n	8005b14 <HAL_TIM_PWM_Stop+0xb4>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <HAL_TIM_PWM_Stop+0xc4>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b22:	e023      	b.n	8005b6c <HAL_TIM_PWM_Stop+0x10c>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d104      	bne.n	8005b34 <HAL_TIM_PWM_Stop+0xd4>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b32:	e01b      	b.n	8005b6c <HAL_TIM_PWM_Stop+0x10c>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d104      	bne.n	8005b44 <HAL_TIM_PWM_Stop+0xe4>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b42:	e013      	b.n	8005b6c <HAL_TIM_PWM_Stop+0x10c>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b0c      	cmp	r3, #12
 8005b48:	d104      	bne.n	8005b54 <HAL_TIM_PWM_Stop+0xf4>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b52:	e00b      	b.n	8005b6c <HAL_TIM_PWM_Stop+0x10c>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b10      	cmp	r3, #16
 8005b58:	d104      	bne.n	8005b64 <HAL_TIM_PWM_Stop+0x104>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b62:	e003      	b.n	8005b6c <HAL_TIM_PWM_Stop+0x10c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40012c00 	.word	0x40012c00
 8005b7c:	40013400 	.word	0x40013400
 8005b80:	40014000 	.word	0x40014000
 8005b84:	40014400 	.word	0x40014400
 8005b88:	40014800 	.word	0x40014800

08005b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d020      	beq.n	8005bf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01b      	beq.n	8005bf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f06f 0202 	mvn.w	r2, #2
 8005bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fa08 	bl	8005fec <HAL_TIM_IC_CaptureCallback>
 8005bdc:	e005      	b.n	8005bea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f9fa 	bl	8005fd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fa0b 	bl	8006000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d020      	beq.n	8005c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01b      	beq.n	8005c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0204 	mvn.w	r2, #4
 8005c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2202      	movs	r2, #2
 8005c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f9e2 	bl	8005fec <HAL_TIM_IC_CaptureCallback>
 8005c28:	e005      	b.n	8005c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f9d4 	bl	8005fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f9e5 	bl	8006000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d020      	beq.n	8005c88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01b      	beq.n	8005c88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0208 	mvn.w	r2, #8
 8005c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f9bc 	bl	8005fec <HAL_TIM_IC_CaptureCallback>
 8005c74:	e005      	b.n	8005c82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f9ae 	bl	8005fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f9bf 	bl	8006000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d020      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01b      	beq.n	8005cd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0210 	mvn.w	r2, #16
 8005ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2208      	movs	r2, #8
 8005caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f996 	bl	8005fec <HAL_TIM_IC_CaptureCallback>
 8005cc0:	e005      	b.n	8005cce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f988 	bl	8005fd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f999 	bl	8006000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00c      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0201 	mvn.w	r2, #1
 8005cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f966 	bl	8005fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d104      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00c      	beq.n	8005d26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fe33 	bl	800698c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00c      	beq.n	8005d4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fe2b 	bl	80069a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00c      	beq.n	8005d6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f953 	bl	8006014 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00c      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f06f 0220 	mvn.w	r2, #32
 8005d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fdf3 	bl	8006978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d92:	bf00      	nop
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e0ff      	b.n	8005fba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b14      	cmp	r3, #20
 8005dc6:	f200 80f0 	bhi.w	8005faa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005dca:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005e25 	.word	0x08005e25
 8005dd4:	08005fab 	.word	0x08005fab
 8005dd8:	08005fab 	.word	0x08005fab
 8005ddc:	08005fab 	.word	0x08005fab
 8005de0:	08005e65 	.word	0x08005e65
 8005de4:	08005fab 	.word	0x08005fab
 8005de8:	08005fab 	.word	0x08005fab
 8005dec:	08005fab 	.word	0x08005fab
 8005df0:	08005ea7 	.word	0x08005ea7
 8005df4:	08005fab 	.word	0x08005fab
 8005df8:	08005fab 	.word	0x08005fab
 8005dfc:	08005fab 	.word	0x08005fab
 8005e00:	08005ee7 	.word	0x08005ee7
 8005e04:	08005fab 	.word	0x08005fab
 8005e08:	08005fab 	.word	0x08005fab
 8005e0c:	08005fab 	.word	0x08005fab
 8005e10:	08005f29 	.word	0x08005f29
 8005e14:	08005fab 	.word	0x08005fab
 8005e18:	08005fab 	.word	0x08005fab
 8005e1c:	08005fab 	.word	0x08005fab
 8005e20:	08005f69 	.word	0x08005f69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 f9a2 	bl	8006174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0208 	orr.w	r2, r2, #8
 8005e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0204 	bic.w	r2, r2, #4
 8005e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6999      	ldr	r1, [r3, #24]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	619a      	str	r2, [r3, #24]
      break;
 8005e62:	e0a5      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68b9      	ldr	r1, [r7, #8]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fa12 	bl	8006294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6999      	ldr	r1, [r3, #24]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	021a      	lsls	r2, r3, #8
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	619a      	str	r2, [r3, #24]
      break;
 8005ea4:	e084      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fa7b 	bl	80063a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0208 	orr.w	r2, r2, #8
 8005ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0204 	bic.w	r2, r2, #4
 8005ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69d9      	ldr	r1, [r3, #28]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	61da      	str	r2, [r3, #28]
      break;
 8005ee4:	e064      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68b9      	ldr	r1, [r7, #8]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fae3 	bl	80064b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69da      	ldr	r2, [r3, #28]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69d9      	ldr	r1, [r3, #28]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	021a      	lsls	r2, r3, #8
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	61da      	str	r2, [r3, #28]
      break;
 8005f26:	e043      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68b9      	ldr	r1, [r7, #8]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fb2c 	bl	800658c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0208 	orr.w	r2, r2, #8
 8005f42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0204 	bic.w	r2, r2, #4
 8005f52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f66:	e023      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fb70 	bl	8006654 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	021a      	lsls	r2, r3, #8
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005fa8:	e002      	b.n	8005fb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	75fb      	strb	r3, [r7, #23]
      break;
 8005fae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop

08005fc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a46      	ldr	r2, [pc, #280]	@ (8006154 <TIM_Base_SetConfig+0x12c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d013      	beq.n	8006068 <TIM_Base_SetConfig+0x40>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006046:	d00f      	beq.n	8006068 <TIM_Base_SetConfig+0x40>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a43      	ldr	r2, [pc, #268]	@ (8006158 <TIM_Base_SetConfig+0x130>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00b      	beq.n	8006068 <TIM_Base_SetConfig+0x40>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a42      	ldr	r2, [pc, #264]	@ (800615c <TIM_Base_SetConfig+0x134>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d007      	beq.n	8006068 <TIM_Base_SetConfig+0x40>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a41      	ldr	r2, [pc, #260]	@ (8006160 <TIM_Base_SetConfig+0x138>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_Base_SetConfig+0x40>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a40      	ldr	r2, [pc, #256]	@ (8006164 <TIM_Base_SetConfig+0x13c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d108      	bne.n	800607a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800606e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a35      	ldr	r2, [pc, #212]	@ (8006154 <TIM_Base_SetConfig+0x12c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01f      	beq.n	80060c2 <TIM_Base_SetConfig+0x9a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006088:	d01b      	beq.n	80060c2 <TIM_Base_SetConfig+0x9a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a32      	ldr	r2, [pc, #200]	@ (8006158 <TIM_Base_SetConfig+0x130>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d017      	beq.n	80060c2 <TIM_Base_SetConfig+0x9a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a31      	ldr	r2, [pc, #196]	@ (800615c <TIM_Base_SetConfig+0x134>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d013      	beq.n	80060c2 <TIM_Base_SetConfig+0x9a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a30      	ldr	r2, [pc, #192]	@ (8006160 <TIM_Base_SetConfig+0x138>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00f      	beq.n	80060c2 <TIM_Base_SetConfig+0x9a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a2f      	ldr	r2, [pc, #188]	@ (8006164 <TIM_Base_SetConfig+0x13c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00b      	beq.n	80060c2 <TIM_Base_SetConfig+0x9a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006168 <TIM_Base_SetConfig+0x140>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d007      	beq.n	80060c2 <TIM_Base_SetConfig+0x9a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a2d      	ldr	r2, [pc, #180]	@ (800616c <TIM_Base_SetConfig+0x144>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d003      	beq.n	80060c2 <TIM_Base_SetConfig+0x9a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006170 <TIM_Base_SetConfig+0x148>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d108      	bne.n	80060d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a16      	ldr	r2, [pc, #88]	@ (8006154 <TIM_Base_SetConfig+0x12c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00f      	beq.n	8006120 <TIM_Base_SetConfig+0xf8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a18      	ldr	r2, [pc, #96]	@ (8006164 <TIM_Base_SetConfig+0x13c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00b      	beq.n	8006120 <TIM_Base_SetConfig+0xf8>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a17      	ldr	r2, [pc, #92]	@ (8006168 <TIM_Base_SetConfig+0x140>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d007      	beq.n	8006120 <TIM_Base_SetConfig+0xf8>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a16      	ldr	r2, [pc, #88]	@ (800616c <TIM_Base_SetConfig+0x144>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d003      	beq.n	8006120 <TIM_Base_SetConfig+0xf8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a15      	ldr	r2, [pc, #84]	@ (8006170 <TIM_Base_SetConfig+0x148>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d103      	bne.n	8006128 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b01      	cmp	r3, #1
 8006138:	d105      	bne.n	8006146 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f023 0201 	bic.w	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	611a      	str	r2, [r3, #16]
  }
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40012c00 	.word	0x40012c00
 8006158:	40000400 	.word	0x40000400
 800615c:	40000800 	.word	0x40000800
 8006160:	40000c00 	.word	0x40000c00
 8006164:	40013400 	.word	0x40013400
 8006168:	40014000 	.word	0x40014000
 800616c:	40014400 	.word	0x40014400
 8006170:	40014800 	.word	0x40014800

08006174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f023 0201 	bic.w	r2, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f023 0302 	bic.w	r3, r3, #2
 80061c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006280 <TIM_OC1_SetConfig+0x10c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00f      	beq.n	80061f4 <TIM_OC1_SetConfig+0x80>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a2b      	ldr	r2, [pc, #172]	@ (8006284 <TIM_OC1_SetConfig+0x110>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00b      	beq.n	80061f4 <TIM_OC1_SetConfig+0x80>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a2a      	ldr	r2, [pc, #168]	@ (8006288 <TIM_OC1_SetConfig+0x114>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d007      	beq.n	80061f4 <TIM_OC1_SetConfig+0x80>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a29      	ldr	r2, [pc, #164]	@ (800628c <TIM_OC1_SetConfig+0x118>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_OC1_SetConfig+0x80>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a28      	ldr	r2, [pc, #160]	@ (8006290 <TIM_OC1_SetConfig+0x11c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d10c      	bne.n	800620e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f023 0308 	bic.w	r3, r3, #8
 80061fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f023 0304 	bic.w	r3, r3, #4
 800620c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a1b      	ldr	r2, [pc, #108]	@ (8006280 <TIM_OC1_SetConfig+0x10c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00f      	beq.n	8006236 <TIM_OC1_SetConfig+0xc2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a1a      	ldr	r2, [pc, #104]	@ (8006284 <TIM_OC1_SetConfig+0x110>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00b      	beq.n	8006236 <TIM_OC1_SetConfig+0xc2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a19      	ldr	r2, [pc, #100]	@ (8006288 <TIM_OC1_SetConfig+0x114>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d007      	beq.n	8006236 <TIM_OC1_SetConfig+0xc2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a18      	ldr	r2, [pc, #96]	@ (800628c <TIM_OC1_SetConfig+0x118>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_OC1_SetConfig+0xc2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a17      	ldr	r2, [pc, #92]	@ (8006290 <TIM_OC1_SetConfig+0x11c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d111      	bne.n	800625a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800623c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40012c00 	.word	0x40012c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800

08006294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	f023 0210 	bic.w	r2, r3, #16
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0320 	bic.w	r3, r3, #32
 80062e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a28      	ldr	r2, [pc, #160]	@ (8006394 <TIM_OC2_SetConfig+0x100>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_OC2_SetConfig+0x6c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a27      	ldr	r2, [pc, #156]	@ (8006398 <TIM_OC2_SetConfig+0x104>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d10d      	bne.n	800631c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800631a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a1d      	ldr	r2, [pc, #116]	@ (8006394 <TIM_OC2_SetConfig+0x100>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00f      	beq.n	8006344 <TIM_OC2_SetConfig+0xb0>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a1c      	ldr	r2, [pc, #112]	@ (8006398 <TIM_OC2_SetConfig+0x104>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00b      	beq.n	8006344 <TIM_OC2_SetConfig+0xb0>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a1b      	ldr	r2, [pc, #108]	@ (800639c <TIM_OC2_SetConfig+0x108>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d007      	beq.n	8006344 <TIM_OC2_SetConfig+0xb0>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a1a      	ldr	r2, [pc, #104]	@ (80063a0 <TIM_OC2_SetConfig+0x10c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d003      	beq.n	8006344 <TIM_OC2_SetConfig+0xb0>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a19      	ldr	r2, [pc, #100]	@ (80063a4 <TIM_OC2_SetConfig+0x110>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d113      	bne.n	800636c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800634a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40013400 	.word	0x40013400
 800639c:	40014000 	.word	0x40014000
 80063a0:	40014400 	.word	0x40014400
 80063a4:	40014800 	.word	0x40014800

080063a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a27      	ldr	r2, [pc, #156]	@ (80064a4 <TIM_OC3_SetConfig+0xfc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <TIM_OC3_SetConfig+0x6a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a26      	ldr	r2, [pc, #152]	@ (80064a8 <TIM_OC3_SetConfig+0x100>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d10d      	bne.n	800642e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800642c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a1c      	ldr	r2, [pc, #112]	@ (80064a4 <TIM_OC3_SetConfig+0xfc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00f      	beq.n	8006456 <TIM_OC3_SetConfig+0xae>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a1b      	ldr	r2, [pc, #108]	@ (80064a8 <TIM_OC3_SetConfig+0x100>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00b      	beq.n	8006456 <TIM_OC3_SetConfig+0xae>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a1a      	ldr	r2, [pc, #104]	@ (80064ac <TIM_OC3_SetConfig+0x104>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d007      	beq.n	8006456 <TIM_OC3_SetConfig+0xae>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a19      	ldr	r2, [pc, #100]	@ (80064b0 <TIM_OC3_SetConfig+0x108>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d003      	beq.n	8006456 <TIM_OC3_SetConfig+0xae>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a18      	ldr	r2, [pc, #96]	@ (80064b4 <TIM_OC3_SetConfig+0x10c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d113      	bne.n	800647e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800645c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	621a      	str	r2, [r3, #32]
}
 8006498:	bf00      	nop
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40013400 	.word	0x40013400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40014400 	.word	0x40014400
 80064b4:	40014800 	.word	0x40014800

080064b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	031b      	lsls	r3, r3, #12
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a18      	ldr	r2, [pc, #96]	@ (8006578 <TIM_OC4_SetConfig+0xc0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00f      	beq.n	800653c <TIM_OC4_SetConfig+0x84>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a17      	ldr	r2, [pc, #92]	@ (800657c <TIM_OC4_SetConfig+0xc4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00b      	beq.n	800653c <TIM_OC4_SetConfig+0x84>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a16      	ldr	r2, [pc, #88]	@ (8006580 <TIM_OC4_SetConfig+0xc8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d007      	beq.n	800653c <TIM_OC4_SetConfig+0x84>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a15      	ldr	r2, [pc, #84]	@ (8006584 <TIM_OC4_SetConfig+0xcc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d003      	beq.n	800653c <TIM_OC4_SetConfig+0x84>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a14      	ldr	r2, [pc, #80]	@ (8006588 <TIM_OC4_SetConfig+0xd0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d109      	bne.n	8006550 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	019b      	lsls	r3, r3, #6
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	621a      	str	r2, [r3, #32]
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40012c00 	.word	0x40012c00
 800657c:	40013400 	.word	0x40013400
 8006580:	40014000 	.word	0x40014000
 8006584:	40014400 	.word	0x40014400
 8006588:	40014800 	.word	0x40014800

0800658c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80065d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	041b      	lsls	r3, r3, #16
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a17      	ldr	r2, [pc, #92]	@ (8006640 <TIM_OC5_SetConfig+0xb4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00f      	beq.n	8006606 <TIM_OC5_SetConfig+0x7a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a16      	ldr	r2, [pc, #88]	@ (8006644 <TIM_OC5_SetConfig+0xb8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00b      	beq.n	8006606 <TIM_OC5_SetConfig+0x7a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a15      	ldr	r2, [pc, #84]	@ (8006648 <TIM_OC5_SetConfig+0xbc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d007      	beq.n	8006606 <TIM_OC5_SetConfig+0x7a>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a14      	ldr	r2, [pc, #80]	@ (800664c <TIM_OC5_SetConfig+0xc0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_OC5_SetConfig+0x7a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a13      	ldr	r2, [pc, #76]	@ (8006650 <TIM_OC5_SetConfig+0xc4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d109      	bne.n	800661a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800660c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	621a      	str	r2, [r3, #32]
}
 8006634:	bf00      	nop
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	40012c00 	.word	0x40012c00
 8006644:	40013400 	.word	0x40013400
 8006648:	40014000 	.word	0x40014000
 800664c:	40014400 	.word	0x40014400
 8006650:	40014800 	.word	0x40014800

08006654 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4313      	orrs	r3, r2
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800669a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	051b      	lsls	r3, r3, #20
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a18      	ldr	r2, [pc, #96]	@ (800670c <TIM_OC6_SetConfig+0xb8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00f      	beq.n	80066d0 <TIM_OC6_SetConfig+0x7c>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a17      	ldr	r2, [pc, #92]	@ (8006710 <TIM_OC6_SetConfig+0xbc>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00b      	beq.n	80066d0 <TIM_OC6_SetConfig+0x7c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a16      	ldr	r2, [pc, #88]	@ (8006714 <TIM_OC6_SetConfig+0xc0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d007      	beq.n	80066d0 <TIM_OC6_SetConfig+0x7c>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a15      	ldr	r2, [pc, #84]	@ (8006718 <TIM_OC6_SetConfig+0xc4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_OC6_SetConfig+0x7c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a14      	ldr	r2, [pc, #80]	@ (800671c <TIM_OC6_SetConfig+0xc8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d109      	bne.n	80066e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	029b      	lsls	r3, r3, #10
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	621a      	str	r2, [r3, #32]
}
 80066fe:	bf00      	nop
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40013400 	.word	0x40013400
 8006714:	40014000 	.word	0x40014000
 8006718:	40014400 	.word	0x40014400
 800671c:	40014800 	.word	0x40014800

08006720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	2201      	movs	r2, #1
 8006734:	fa02 f303 	lsl.w	r3, r2, r3
 8006738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a1a      	ldr	r2, [r3, #32]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	43db      	mvns	r3, r3
 8006742:	401a      	ands	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a1a      	ldr	r2, [r3, #32]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	fa01 f303 	lsl.w	r3, r1, r3
 8006758:	431a      	orrs	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006780:	2302      	movs	r3, #2
 8006782:	e068      	b.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d004      	beq.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a2d      	ldr	r2, [pc, #180]	@ (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d108      	bne.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80067be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006864 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d01d      	beq.n	800682a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f6:	d018      	beq.n	800682a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1b      	ldr	r2, [pc, #108]	@ (800686c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a1a      	ldr	r2, [pc, #104]	@ (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d00e      	beq.n	800682a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a18      	ldr	r2, [pc, #96]	@ (8006874 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d009      	beq.n	800682a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a13      	ldr	r2, [pc, #76]	@ (8006868 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d004      	beq.n	800682a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a14      	ldr	r2, [pc, #80]	@ (8006878 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d10c      	bne.n	8006844 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006830:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	4313      	orrs	r3, r2
 800683a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40013400 	.word	0x40013400
 800686c:	40000400 	.word	0x40000400
 8006870:	40000800 	.word	0x40000800
 8006874:	40000c00 	.word	0x40000c00
 8006878:	40014000 	.word	0x40014000

0800687c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006894:	2302      	movs	r3, #2
 8006896:	e065      	b.n	8006964 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	041b      	lsls	r3, r3, #16
 800690e:	4313      	orrs	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a16      	ldr	r2, [pc, #88]	@ (8006970 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d004      	beq.n	8006926 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a14      	ldr	r2, [pc, #80]	@ (8006974 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d115      	bne.n	8006952 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006930:	051b      	lsls	r3, r3, #20
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	40012c00 	.word	0x40012c00
 8006974:	40013400 	.word	0x40013400

08006978 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e040      	b.n	8006a48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d106      	bne.n	80069dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fb fb3c 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2224      	movs	r2, #36	@ 0x24
 80069e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0201 	bic.w	r2, r2, #1
 80069f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fedc 	bl	80077b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fc21 	bl	8007248 <UART_SetConfig>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e01b      	b.n	8006a48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689a      	ldr	r2, [r3, #8]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f042 0201 	orr.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 ff5b 	bl	80078fc <UART_CheckIdleState>
 8006a46:	4603      	mov	r3, r0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08a      	sub	sp, #40	@ 0x28
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a64:	2b20      	cmp	r3, #32
 8006a66:	d177      	bne.n	8006b58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <HAL_UART_Transmit+0x24>
 8006a6e:	88fb      	ldrh	r3, [r7, #6]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e070      	b.n	8006b5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2221      	movs	r2, #33	@ 0x21
 8006a84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a86:	f7fb fbe3 	bl	8002250 <HAL_GetTick>
 8006a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aa4:	d108      	bne.n	8006ab8 <HAL_UART_Transmit+0x68>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	e003      	b.n	8006ac0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ac0:	e02f      	b.n	8006b22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2180      	movs	r1, #128	@ 0x80
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 ffbd 	bl	8007a4c <UART_WaitOnFlagUntilTimeout>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d004      	beq.n	8006ae2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e03b      	b.n	8006b5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10b      	bne.n	8006b00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	881a      	ldrh	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006af4:	b292      	uxth	r2, r2
 8006af6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	3302      	adds	r3, #2
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	e007      	b.n	8006b10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	781a      	ldrb	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1c9      	bne.n	8006ac2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2200      	movs	r2, #0
 8006b36:	2140      	movs	r1, #64	@ 0x40
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 ff87 	bl	8007a4c <UART_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d004      	beq.n	8006b4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e005      	b.n	8006b5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2220      	movs	r2, #32
 8006b52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e000      	b.n	8006b5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006b58:	2302      	movs	r3, #2
  }
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3720      	adds	r7, #32
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	@ 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d137      	bne.n	8006bec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <HAL_UART_Receive_IT+0x24>
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e030      	b.n	8006bee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a18      	ldr	r2, [pc, #96]	@ (8006bf8 <HAL_UART_Receive_IT+0x94>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d01f      	beq.n	8006bdc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d018      	beq.n	8006bdc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	623b      	str	r3, [r7, #32]
 8006bca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	69f9      	ldr	r1, [r7, #28]
 8006bce:	6a3a      	ldr	r2, [r7, #32]
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e6      	bne.n	8006baa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bdc:	88fb      	ldrh	r3, [r7, #6]
 8006bde:	461a      	mov	r2, r3
 8006be0:	68b9      	ldr	r1, [r7, #8]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 ffa0 	bl	8007b28 <UART_Start_Receive_IT>
 8006be8:	4603      	mov	r3, r0
 8006bea:	e000      	b.n	8006bee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bec:	2302      	movs	r3, #2
  }
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3728      	adds	r7, #40	@ 0x28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	40008000 	.word	0x40008000

08006bfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b0ba      	sub	sp, #232	@ 0xe8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c26:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006c30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d115      	bne.n	8006c64 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00f      	beq.n	8006c64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c48:	f003 0320 	and.w	r3, r3, #32
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d009      	beq.n	8006c64 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 82ca 	beq.w	80071ee <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
      }
      return;
 8006c62:	e2c4      	b.n	80071ee <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8117 	beq.w	8006e9c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006c7e:	4b85      	ldr	r3, [pc, #532]	@ (8006e94 <HAL_UART_IRQHandler+0x298>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 810a 	beq.w	8006e9c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d011      	beq.n	8006cb8 <HAL_UART_IRQHandler+0xbc>
 8006c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cae:	f043 0201 	orr.w	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d011      	beq.n	8006ce8 <HAL_UART_IRQHandler+0xec>
 8006cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cde:	f043 0204 	orr.w	r2, r3, #4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d011      	beq.n	8006d18 <HAL_UART_IRQHandler+0x11c>
 8006cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2204      	movs	r2, #4
 8006d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d0e:	f043 0202 	orr.w	r2, r3, #2
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d1c:	f003 0308 	and.w	r3, r3, #8
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d017      	beq.n	8006d54 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d28:	f003 0320 	and.w	r3, r3, #32
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d105      	bne.n	8006d3c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2208      	movs	r2, #8
 8006d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d4a:	f043 0208 	orr.w	r2, r3, #8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d012      	beq.n	8006d86 <HAL_UART_IRQHandler+0x18a>
 8006d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00c      	beq.n	8006d86 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d7c:	f043 0220 	orr.w	r2, r3, #32
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8230 	beq.w	80071f2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00d      	beq.n	8006dba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dce:	2b40      	cmp	r3, #64	@ 0x40
 8006dd0:	d005      	beq.n	8006dde <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d04f      	beq.n	8006e7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 ff68 	bl	8007cb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dee:	2b40      	cmp	r3, #64	@ 0x40
 8006df0:	d141      	bne.n	8006e76 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3308      	adds	r3, #8
 8006e1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1d9      	bne.n	8006df2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d013      	beq.n	8006e6e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e4a:	4a13      	ldr	r2, [pc, #76]	@ (8006e98 <HAL_UART_IRQHandler+0x29c>)
 8006e4c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fb fb7b 	bl	800254e <HAL_DMA_Abort_IT>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d017      	beq.n	8006e8e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6c:	e00f      	b.n	8006e8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f9d4 	bl	800721c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e74:	e00b      	b.n	8006e8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f9d0 	bl	800721c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7c:	e007      	b.n	8006e8e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f9cc 	bl	800721c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006e8c:	e1b1      	b.n	80071f2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8e:	bf00      	nop
    return;
 8006e90:	e1af      	b.n	80071f2 <HAL_UART_IRQHandler+0x5f6>
 8006e92:	bf00      	nop
 8006e94:	04000120 	.word	0x04000120
 8006e98:	08007d7d 	.word	0x08007d7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	f040 816a 	bne.w	800717a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eaa:	f003 0310 	and.w	r3, r3, #16
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 8163 	beq.w	800717a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 815c 	beq.w	800717a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2210      	movs	r2, #16
 8006ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed4:	2b40      	cmp	r3, #64	@ 0x40
 8006ed6:	f040 80d4 	bne.w	8007082 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ee6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 80ad 	beq.w	800704a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006efa:	429a      	cmp	r2, r3
 8006efc:	f080 80a5 	bcs.w	800704a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f040 8086 	bne.w	8007028 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1da      	bne.n	8006f1c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f78:	f023 0301 	bic.w	r3, r3, #1
 8006f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3308      	adds	r3, #8
 8006f86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e1      	bne.n	8006f66 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006fb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006fc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006fcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e3      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ff6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ff8:	f023 0310 	bic.w	r3, r3, #16
 8006ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	461a      	mov	r2, r3
 8007006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800700a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800700c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007010:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e4      	bne.n	8006fe8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007022:	4618      	mov	r0, r3
 8007024:	f7fb fa55 	bl	80024d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800703a:	b29b      	uxth	r3, r3
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	b29b      	uxth	r3, r3
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f8f4 	bl	8007230 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007048:	e0d5      	b.n	80071f6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007050:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007054:	429a      	cmp	r2, r3
 8007056:	f040 80ce 	bne.w	80071f6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b20      	cmp	r3, #32
 8007068:	f040 80c5 	bne.w	80071f6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f8d8 	bl	8007230 <HAL_UARTEx_RxEventCallback>
      return;
 8007080:	e0b9      	b.n	80071f6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800708e:	b29b      	uxth	r3, r3
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800709c:	b29b      	uxth	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 80ab 	beq.w	80071fa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80070a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80a6 	beq.w	80071fa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80070d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e4      	bne.n	80070ae <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	623b      	str	r3, [r7, #32]
   return(result);
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007108:	633a      	str	r2, [r7, #48]	@ 0x30
 800710a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800710e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007110:	e841 2300 	strex	r3, r2, [r1]
 8007114:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e3      	bne.n	80070e4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2220      	movs	r2, #32
 8007120:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	60fb      	str	r3, [r7, #12]
   return(result);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f023 0310 	bic.w	r3, r3, #16
 8007144:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007152:	61fb      	str	r3, [r7, #28]
 8007154:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	69b9      	ldr	r1, [r7, #24]
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	617b      	str	r3, [r7, #20]
   return(result);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e4      	bne.n	8007130 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800716c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f85c 	bl	8007230 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007178:	e03f      	b.n	80071fa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800717a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800717e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00e      	beq.n	80071a4 <HAL_UART_IRQHandler+0x5a8>
 8007186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800718a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d008      	beq.n	80071a4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800719a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 ffe9 	bl	8008174 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071a2:	e02d      	b.n	8007200 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80071a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00e      	beq.n	80071ce <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80071b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d008      	beq.n	80071ce <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d01c      	beq.n	80071fe <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	4798      	blx	r3
    }
    return;
 80071cc:	e017      	b.n	80071fe <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d012      	beq.n	8007200 <HAL_UART_IRQHandler+0x604>
 80071da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00c      	beq.n	8007200 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fdde 	bl	8007da8 <UART_EndTransmit_IT>
    return;
 80071ec:	e008      	b.n	8007200 <HAL_UART_IRQHandler+0x604>
      return;
 80071ee:	bf00      	nop
 80071f0:	e006      	b.n	8007200 <HAL_UART_IRQHandler+0x604>
    return;
 80071f2:	bf00      	nop
 80071f4:	e004      	b.n	8007200 <HAL_UART_IRQHandler+0x604>
      return;
 80071f6:	bf00      	nop
 80071f8:	e002      	b.n	8007200 <HAL_UART_IRQHandler+0x604>
      return;
 80071fa:	bf00      	nop
 80071fc:	e000      	b.n	8007200 <HAL_UART_IRQHandler+0x604>
    return;
 80071fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007200:	37e8      	adds	r7, #232	@ 0xe8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop

08007208 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800724c:	b08a      	sub	sp, #40	@ 0x28
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	431a      	orrs	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	431a      	orrs	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	4313      	orrs	r3, r2
 800726e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	4ba4      	ldr	r3, [pc, #656]	@ (8007508 <UART_SetConfig+0x2c0>)
 8007278:	4013      	ands	r3, r2
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007280:	430b      	orrs	r3, r1
 8007282:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a99      	ldr	r2, [pc, #612]	@ (800750c <UART_SetConfig+0x2c4>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072b0:	4313      	orrs	r3, r2
 80072b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c4:	430a      	orrs	r2, r1
 80072c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a90      	ldr	r2, [pc, #576]	@ (8007510 <UART_SetConfig+0x2c8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d126      	bne.n	8007320 <UART_SetConfig+0xd8>
 80072d2:	4b90      	ldr	r3, [pc, #576]	@ (8007514 <UART_SetConfig+0x2cc>)
 80072d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d81b      	bhi.n	8007318 <UART_SetConfig+0xd0>
 80072e0:	a201      	add	r2, pc, #4	@ (adr r2, 80072e8 <UART_SetConfig+0xa0>)
 80072e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e6:	bf00      	nop
 80072e8:	080072f9 	.word	0x080072f9
 80072ec:	08007309 	.word	0x08007309
 80072f0:	08007301 	.word	0x08007301
 80072f4:	08007311 	.word	0x08007311
 80072f8:	2301      	movs	r3, #1
 80072fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072fe:	e116      	b.n	800752e <UART_SetConfig+0x2e6>
 8007300:	2302      	movs	r3, #2
 8007302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007306:	e112      	b.n	800752e <UART_SetConfig+0x2e6>
 8007308:	2304      	movs	r3, #4
 800730a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800730e:	e10e      	b.n	800752e <UART_SetConfig+0x2e6>
 8007310:	2308      	movs	r3, #8
 8007312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007316:	e10a      	b.n	800752e <UART_SetConfig+0x2e6>
 8007318:	2310      	movs	r3, #16
 800731a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800731e:	e106      	b.n	800752e <UART_SetConfig+0x2e6>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a7c      	ldr	r2, [pc, #496]	@ (8007518 <UART_SetConfig+0x2d0>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d138      	bne.n	800739c <UART_SetConfig+0x154>
 800732a:	4b7a      	ldr	r3, [pc, #488]	@ (8007514 <UART_SetConfig+0x2cc>)
 800732c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007330:	f003 030c 	and.w	r3, r3, #12
 8007334:	2b0c      	cmp	r3, #12
 8007336:	d82d      	bhi.n	8007394 <UART_SetConfig+0x14c>
 8007338:	a201      	add	r2, pc, #4	@ (adr r2, 8007340 <UART_SetConfig+0xf8>)
 800733a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733e:	bf00      	nop
 8007340:	08007375 	.word	0x08007375
 8007344:	08007395 	.word	0x08007395
 8007348:	08007395 	.word	0x08007395
 800734c:	08007395 	.word	0x08007395
 8007350:	08007385 	.word	0x08007385
 8007354:	08007395 	.word	0x08007395
 8007358:	08007395 	.word	0x08007395
 800735c:	08007395 	.word	0x08007395
 8007360:	0800737d 	.word	0x0800737d
 8007364:	08007395 	.word	0x08007395
 8007368:	08007395 	.word	0x08007395
 800736c:	08007395 	.word	0x08007395
 8007370:	0800738d 	.word	0x0800738d
 8007374:	2300      	movs	r3, #0
 8007376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800737a:	e0d8      	b.n	800752e <UART_SetConfig+0x2e6>
 800737c:	2302      	movs	r3, #2
 800737e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007382:	e0d4      	b.n	800752e <UART_SetConfig+0x2e6>
 8007384:	2304      	movs	r3, #4
 8007386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800738a:	e0d0      	b.n	800752e <UART_SetConfig+0x2e6>
 800738c:	2308      	movs	r3, #8
 800738e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007392:	e0cc      	b.n	800752e <UART_SetConfig+0x2e6>
 8007394:	2310      	movs	r3, #16
 8007396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800739a:	e0c8      	b.n	800752e <UART_SetConfig+0x2e6>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a5e      	ldr	r2, [pc, #376]	@ (800751c <UART_SetConfig+0x2d4>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d125      	bne.n	80073f2 <UART_SetConfig+0x1aa>
 80073a6:	4b5b      	ldr	r3, [pc, #364]	@ (8007514 <UART_SetConfig+0x2cc>)
 80073a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80073b0:	2b30      	cmp	r3, #48	@ 0x30
 80073b2:	d016      	beq.n	80073e2 <UART_SetConfig+0x19a>
 80073b4:	2b30      	cmp	r3, #48	@ 0x30
 80073b6:	d818      	bhi.n	80073ea <UART_SetConfig+0x1a2>
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d00a      	beq.n	80073d2 <UART_SetConfig+0x18a>
 80073bc:	2b20      	cmp	r3, #32
 80073be:	d814      	bhi.n	80073ea <UART_SetConfig+0x1a2>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <UART_SetConfig+0x182>
 80073c4:	2b10      	cmp	r3, #16
 80073c6:	d008      	beq.n	80073da <UART_SetConfig+0x192>
 80073c8:	e00f      	b.n	80073ea <UART_SetConfig+0x1a2>
 80073ca:	2300      	movs	r3, #0
 80073cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073d0:	e0ad      	b.n	800752e <UART_SetConfig+0x2e6>
 80073d2:	2302      	movs	r3, #2
 80073d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073d8:	e0a9      	b.n	800752e <UART_SetConfig+0x2e6>
 80073da:	2304      	movs	r3, #4
 80073dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073e0:	e0a5      	b.n	800752e <UART_SetConfig+0x2e6>
 80073e2:	2308      	movs	r3, #8
 80073e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073e8:	e0a1      	b.n	800752e <UART_SetConfig+0x2e6>
 80073ea:	2310      	movs	r3, #16
 80073ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073f0:	e09d      	b.n	800752e <UART_SetConfig+0x2e6>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a4a      	ldr	r2, [pc, #296]	@ (8007520 <UART_SetConfig+0x2d8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d125      	bne.n	8007448 <UART_SetConfig+0x200>
 80073fc:	4b45      	ldr	r3, [pc, #276]	@ (8007514 <UART_SetConfig+0x2cc>)
 80073fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007402:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007406:	2bc0      	cmp	r3, #192	@ 0xc0
 8007408:	d016      	beq.n	8007438 <UART_SetConfig+0x1f0>
 800740a:	2bc0      	cmp	r3, #192	@ 0xc0
 800740c:	d818      	bhi.n	8007440 <UART_SetConfig+0x1f8>
 800740e:	2b80      	cmp	r3, #128	@ 0x80
 8007410:	d00a      	beq.n	8007428 <UART_SetConfig+0x1e0>
 8007412:	2b80      	cmp	r3, #128	@ 0x80
 8007414:	d814      	bhi.n	8007440 <UART_SetConfig+0x1f8>
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <UART_SetConfig+0x1d8>
 800741a:	2b40      	cmp	r3, #64	@ 0x40
 800741c:	d008      	beq.n	8007430 <UART_SetConfig+0x1e8>
 800741e:	e00f      	b.n	8007440 <UART_SetConfig+0x1f8>
 8007420:	2300      	movs	r3, #0
 8007422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007426:	e082      	b.n	800752e <UART_SetConfig+0x2e6>
 8007428:	2302      	movs	r3, #2
 800742a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800742e:	e07e      	b.n	800752e <UART_SetConfig+0x2e6>
 8007430:	2304      	movs	r3, #4
 8007432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007436:	e07a      	b.n	800752e <UART_SetConfig+0x2e6>
 8007438:	2308      	movs	r3, #8
 800743a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800743e:	e076      	b.n	800752e <UART_SetConfig+0x2e6>
 8007440:	2310      	movs	r3, #16
 8007442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007446:	e072      	b.n	800752e <UART_SetConfig+0x2e6>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a35      	ldr	r2, [pc, #212]	@ (8007524 <UART_SetConfig+0x2dc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d12a      	bne.n	80074a8 <UART_SetConfig+0x260>
 8007452:	4b30      	ldr	r3, [pc, #192]	@ (8007514 <UART_SetConfig+0x2cc>)
 8007454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007458:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800745c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007460:	d01a      	beq.n	8007498 <UART_SetConfig+0x250>
 8007462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007466:	d81b      	bhi.n	80074a0 <UART_SetConfig+0x258>
 8007468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800746c:	d00c      	beq.n	8007488 <UART_SetConfig+0x240>
 800746e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007472:	d815      	bhi.n	80074a0 <UART_SetConfig+0x258>
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <UART_SetConfig+0x238>
 8007478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800747c:	d008      	beq.n	8007490 <UART_SetConfig+0x248>
 800747e:	e00f      	b.n	80074a0 <UART_SetConfig+0x258>
 8007480:	2300      	movs	r3, #0
 8007482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007486:	e052      	b.n	800752e <UART_SetConfig+0x2e6>
 8007488:	2302      	movs	r3, #2
 800748a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800748e:	e04e      	b.n	800752e <UART_SetConfig+0x2e6>
 8007490:	2304      	movs	r3, #4
 8007492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007496:	e04a      	b.n	800752e <UART_SetConfig+0x2e6>
 8007498:	2308      	movs	r3, #8
 800749a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800749e:	e046      	b.n	800752e <UART_SetConfig+0x2e6>
 80074a0:	2310      	movs	r3, #16
 80074a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074a6:	e042      	b.n	800752e <UART_SetConfig+0x2e6>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a17      	ldr	r2, [pc, #92]	@ (800750c <UART_SetConfig+0x2c4>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d13a      	bne.n	8007528 <UART_SetConfig+0x2e0>
 80074b2:	4b18      	ldr	r3, [pc, #96]	@ (8007514 <UART_SetConfig+0x2cc>)
 80074b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80074bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074c0:	d01a      	beq.n	80074f8 <UART_SetConfig+0x2b0>
 80074c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074c6:	d81b      	bhi.n	8007500 <UART_SetConfig+0x2b8>
 80074c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074cc:	d00c      	beq.n	80074e8 <UART_SetConfig+0x2a0>
 80074ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074d2:	d815      	bhi.n	8007500 <UART_SetConfig+0x2b8>
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <UART_SetConfig+0x298>
 80074d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074dc:	d008      	beq.n	80074f0 <UART_SetConfig+0x2a8>
 80074de:	e00f      	b.n	8007500 <UART_SetConfig+0x2b8>
 80074e0:	2300      	movs	r3, #0
 80074e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e6:	e022      	b.n	800752e <UART_SetConfig+0x2e6>
 80074e8:	2302      	movs	r3, #2
 80074ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ee:	e01e      	b.n	800752e <UART_SetConfig+0x2e6>
 80074f0:	2304      	movs	r3, #4
 80074f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074f6:	e01a      	b.n	800752e <UART_SetConfig+0x2e6>
 80074f8:	2308      	movs	r3, #8
 80074fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074fe:	e016      	b.n	800752e <UART_SetConfig+0x2e6>
 8007500:	2310      	movs	r3, #16
 8007502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007506:	e012      	b.n	800752e <UART_SetConfig+0x2e6>
 8007508:	efff69f3 	.word	0xefff69f3
 800750c:	40008000 	.word	0x40008000
 8007510:	40013800 	.word	0x40013800
 8007514:	40021000 	.word	0x40021000
 8007518:	40004400 	.word	0x40004400
 800751c:	40004800 	.word	0x40004800
 8007520:	40004c00 	.word	0x40004c00
 8007524:	40005000 	.word	0x40005000
 8007528:	2310      	movs	r3, #16
 800752a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a9f      	ldr	r2, [pc, #636]	@ (80077b0 <UART_SetConfig+0x568>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d17a      	bne.n	800762e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007538:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800753c:	2b08      	cmp	r3, #8
 800753e:	d824      	bhi.n	800758a <UART_SetConfig+0x342>
 8007540:	a201      	add	r2, pc, #4	@ (adr r2, 8007548 <UART_SetConfig+0x300>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	0800756d 	.word	0x0800756d
 800754c:	0800758b 	.word	0x0800758b
 8007550:	08007575 	.word	0x08007575
 8007554:	0800758b 	.word	0x0800758b
 8007558:	0800757b 	.word	0x0800757b
 800755c:	0800758b 	.word	0x0800758b
 8007560:	0800758b 	.word	0x0800758b
 8007564:	0800758b 	.word	0x0800758b
 8007568:	08007583 	.word	0x08007583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800756c:	f7fd f99a 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 8007570:	61f8      	str	r0, [r7, #28]
        break;
 8007572:	e010      	b.n	8007596 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007574:	4b8f      	ldr	r3, [pc, #572]	@ (80077b4 <UART_SetConfig+0x56c>)
 8007576:	61fb      	str	r3, [r7, #28]
        break;
 8007578:	e00d      	b.n	8007596 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800757a:	f7fd f8fb 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 800757e:	61f8      	str	r0, [r7, #28]
        break;
 8007580:	e009      	b.n	8007596 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007586:	61fb      	str	r3, [r7, #28]
        break;
 8007588:	e005      	b.n	8007596 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007594:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80fb 	beq.w	8007794 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	4613      	mov	r3, r2
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	4413      	add	r3, r2
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d305      	bcc.n	80075ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d903      	bls.n	80075c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80075c0:	e0e8      	b.n	8007794 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	2200      	movs	r2, #0
 80075c6:	461c      	mov	r4, r3
 80075c8:	4615      	mov	r5, r2
 80075ca:	f04f 0200 	mov.w	r2, #0
 80075ce:	f04f 0300 	mov.w	r3, #0
 80075d2:	022b      	lsls	r3, r5, #8
 80075d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80075d8:	0222      	lsls	r2, r4, #8
 80075da:	68f9      	ldr	r1, [r7, #12]
 80075dc:	6849      	ldr	r1, [r1, #4]
 80075de:	0849      	lsrs	r1, r1, #1
 80075e0:	2000      	movs	r0, #0
 80075e2:	4688      	mov	r8, r1
 80075e4:	4681      	mov	r9, r0
 80075e6:	eb12 0a08 	adds.w	sl, r2, r8
 80075ea:	eb43 0b09 	adc.w	fp, r3, r9
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	603b      	str	r3, [r7, #0]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075fc:	4650      	mov	r0, sl
 80075fe:	4659      	mov	r1, fp
 8007600:	f7f9 fb42 	bl	8000c88 <__aeabi_uldivmod>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	4613      	mov	r3, r2
 800760a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007612:	d308      	bcc.n	8007626 <UART_SetConfig+0x3de>
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800761a:	d204      	bcs.n	8007626 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	60da      	str	r2, [r3, #12]
 8007624:	e0b6      	b.n	8007794 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800762c:	e0b2      	b.n	8007794 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007636:	d15e      	bne.n	80076f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007638:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800763c:	2b08      	cmp	r3, #8
 800763e:	d828      	bhi.n	8007692 <UART_SetConfig+0x44a>
 8007640:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <UART_SetConfig+0x400>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	0800766d 	.word	0x0800766d
 800764c:	08007675 	.word	0x08007675
 8007650:	0800767d 	.word	0x0800767d
 8007654:	08007693 	.word	0x08007693
 8007658:	08007683 	.word	0x08007683
 800765c:	08007693 	.word	0x08007693
 8007660:	08007693 	.word	0x08007693
 8007664:	08007693 	.word	0x08007693
 8007668:	0800768b 	.word	0x0800768b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800766c:	f7fd f91a 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 8007670:	61f8      	str	r0, [r7, #28]
        break;
 8007672:	e014      	b.n	800769e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007674:	f7fd f92c 	bl	80048d0 <HAL_RCC_GetPCLK2Freq>
 8007678:	61f8      	str	r0, [r7, #28]
        break;
 800767a:	e010      	b.n	800769e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800767c:	4b4d      	ldr	r3, [pc, #308]	@ (80077b4 <UART_SetConfig+0x56c>)
 800767e:	61fb      	str	r3, [r7, #28]
        break;
 8007680:	e00d      	b.n	800769e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007682:	f7fd f877 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8007686:	61f8      	str	r0, [r7, #28]
        break;
 8007688:	e009      	b.n	800769e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800768a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800768e:	61fb      	str	r3, [r7, #28]
        break;
 8007690:	e005      	b.n	800769e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800769c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d077      	beq.n	8007794 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	005a      	lsls	r2, r3, #1
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	441a      	add	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2b0f      	cmp	r3, #15
 80076be:	d916      	bls.n	80076ee <UART_SetConfig+0x4a6>
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c6:	d212      	bcs.n	80076ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f023 030f 	bic.w	r3, r3, #15
 80076d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	085b      	lsrs	r3, r3, #1
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	b29a      	uxth	r2, r3
 80076de:	8afb      	ldrh	r3, [r7, #22]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	8afa      	ldrh	r2, [r7, #22]
 80076ea:	60da      	str	r2, [r3, #12]
 80076ec:	e052      	b.n	8007794 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076f4:	e04e      	b.n	8007794 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d827      	bhi.n	800774e <UART_SetConfig+0x506>
 80076fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007704 <UART_SetConfig+0x4bc>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007729 	.word	0x08007729
 8007708:	08007731 	.word	0x08007731
 800770c:	08007739 	.word	0x08007739
 8007710:	0800774f 	.word	0x0800774f
 8007714:	0800773f 	.word	0x0800773f
 8007718:	0800774f 	.word	0x0800774f
 800771c:	0800774f 	.word	0x0800774f
 8007720:	0800774f 	.word	0x0800774f
 8007724:	08007747 	.word	0x08007747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007728:	f7fd f8bc 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 800772c:	61f8      	str	r0, [r7, #28]
        break;
 800772e:	e014      	b.n	800775a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007730:	f7fd f8ce 	bl	80048d0 <HAL_RCC_GetPCLK2Freq>
 8007734:	61f8      	str	r0, [r7, #28]
        break;
 8007736:	e010      	b.n	800775a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007738:	4b1e      	ldr	r3, [pc, #120]	@ (80077b4 <UART_SetConfig+0x56c>)
 800773a:	61fb      	str	r3, [r7, #28]
        break;
 800773c:	e00d      	b.n	800775a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800773e:	f7fd f819 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8007742:	61f8      	str	r0, [r7, #28]
        break;
 8007744:	e009      	b.n	800775a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800774a:	61fb      	str	r3, [r7, #28]
        break;
 800774c:	e005      	b.n	800775a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007758:	bf00      	nop
    }

    if (pclk != 0U)
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d019      	beq.n	8007794 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	085a      	lsrs	r2, r3, #1
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	441a      	add	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007772:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	2b0f      	cmp	r3, #15
 8007778:	d909      	bls.n	800778e <UART_SetConfig+0x546>
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007780:	d205      	bcs.n	800778e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	b29a      	uxth	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	60da      	str	r2, [r3, #12]
 800778c:	e002      	b.n	8007794 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80077a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3728      	adds	r7, #40	@ 0x28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077ae:	bf00      	nop
 80077b0:	40008000 	.word	0x40008000
 80077b4:	00f42400 	.word	0x00f42400

080077b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00a      	beq.n	80077e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00a      	beq.n	8007804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00a      	beq.n	8007826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782a:	f003 0304 	and.w	r3, r3, #4
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784c:	f003 0310 	and.w	r3, r3, #16
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00a      	beq.n	800786a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786e:	f003 0320 	and.w	r3, r3, #32
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01a      	beq.n	80078ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078b6:	d10a      	bne.n	80078ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	605a      	str	r2, [r3, #4]
  }
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b098      	sub	sp, #96	@ 0x60
 8007900:	af02      	add	r7, sp, #8
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800790c:	f7fa fca0 	bl	8002250 <HAL_GetTick>
 8007910:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	2b08      	cmp	r3, #8
 800791e:	d12e      	bne.n	800797e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007920:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007928:	2200      	movs	r2, #0
 800792a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f88c 	bl	8007a4c <UART_WaitOnFlagUntilTimeout>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d021      	beq.n	800797e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800794a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800794e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007958:	647b      	str	r3, [r7, #68]	@ 0x44
 800795a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800795e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e6      	bne.n	800793a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e062      	b.n	8007a44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b04      	cmp	r3, #4
 800798a:	d149      	bne.n	8007a20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800798c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007994:	2200      	movs	r2, #0
 8007996:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f856 	bl	8007a4c <UART_WaitOnFlagUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d03c      	beq.n	8007a20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	623b      	str	r3, [r7, #32]
   return(result);
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	461a      	mov	r2, r3
 80079c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80079c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e6      	bne.n	80079a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0301 	bic.w	r3, r3, #1
 80079ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079f8:	61fa      	str	r2, [r7, #28]
 80079fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	69b9      	ldr	r1, [r7, #24]
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	617b      	str	r3, [r7, #20]
   return(result);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e5      	bne.n	80079d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e011      	b.n	8007a44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3758      	adds	r7, #88	@ 0x58
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a5c:	e04f      	b.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a64:	d04b      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a66:	f7fa fbf3 	bl	8002250 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d302      	bcc.n	8007a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e04e      	b.n	8007b1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0304 	and.w	r3, r3, #4
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d037      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b80      	cmp	r3, #128	@ 0x80
 8007a92:	d034      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	2b40      	cmp	r3, #64	@ 0x40
 8007a98:	d031      	beq.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	f003 0308 	and.w	r3, r3, #8
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d110      	bne.n	8007aca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2208      	movs	r2, #8
 8007aae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f8ff 	bl	8007cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2208      	movs	r2, #8
 8007aba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e029      	b.n	8007b1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ad8:	d111      	bne.n	8007afe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 f8e5 	bl	8007cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e00f      	b.n	8007b1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69da      	ldr	r2, [r3, #28]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4013      	ands	r3, r2
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	bf0c      	ite	eq
 8007b0e:	2301      	moveq	r3, #1
 8007b10:	2300      	movne	r3, #0
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	461a      	mov	r2, r3
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d0a0      	beq.n	8007a5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b097      	sub	sp, #92	@ 0x5c
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	4613      	mov	r3, r2
 8007b34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	88fa      	ldrh	r2, [r7, #6]
 8007b40:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	88fa      	ldrh	r2, [r7, #6]
 8007b48:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b5a:	d10e      	bne.n	8007b7a <UART_Start_Receive_IT+0x52>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d105      	bne.n	8007b70 <UART_Start_Receive_IT+0x48>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007b6a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b6e:	e02d      	b.n	8007bcc <UART_Start_Receive_IT+0xa4>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	22ff      	movs	r2, #255	@ 0xff
 8007b74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b78:	e028      	b.n	8007bcc <UART_Start_Receive_IT+0xa4>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10d      	bne.n	8007b9e <UART_Start_Receive_IT+0x76>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d104      	bne.n	8007b94 <UART_Start_Receive_IT+0x6c>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	22ff      	movs	r2, #255	@ 0xff
 8007b8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b92:	e01b      	b.n	8007bcc <UART_Start_Receive_IT+0xa4>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	227f      	movs	r2, #127	@ 0x7f
 8007b98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007b9c:	e016      	b.n	8007bcc <UART_Start_Receive_IT+0xa4>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ba6:	d10d      	bne.n	8007bc4 <UART_Start_Receive_IT+0x9c>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d104      	bne.n	8007bba <UART_Start_Receive_IT+0x92>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	227f      	movs	r2, #127	@ 0x7f
 8007bb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bb8:	e008      	b.n	8007bcc <UART_Start_Receive_IT+0xa4>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	223f      	movs	r2, #63	@ 0x3f
 8007bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007bc2:	e003      	b.n	8007bcc <UART_Start_Receive_IT+0xa4>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2222      	movs	r2, #34	@ 0x22
 8007bd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3308      	adds	r3, #8
 8007be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bee:	f043 0301 	orr.w	r3, r3, #1
 8007bf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007bfc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007bfe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e5      	bne.n	8007bdc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c18:	d107      	bne.n	8007c2a <UART_Start_Receive_IT+0x102>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d103      	bne.n	8007c2a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4a21      	ldr	r2, [pc, #132]	@ (8007cac <UART_Start_Receive_IT+0x184>)
 8007c26:	669a      	str	r2, [r3, #104]	@ 0x68
 8007c28:	e002      	b.n	8007c30 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4a20      	ldr	r2, [pc, #128]	@ (8007cb0 <UART_Start_Receive_IT+0x188>)
 8007c2e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d019      	beq.n	8007c6c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c58:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e6      	bne.n	8007c38 <UART_Start_Receive_IT+0x110>
 8007c6a:	e018      	b.n	8007c9e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	613b      	str	r3, [r7, #16]
   return(result);
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f043 0320 	orr.w	r3, r3, #32
 8007c80:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c8a:	623b      	str	r3, [r7, #32]
 8007c8c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	69f9      	ldr	r1, [r7, #28]
 8007c90:	6a3a      	ldr	r2, [r7, #32]
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e6      	bne.n	8007c6c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	375c      	adds	r7, #92	@ 0x5c
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	08007fb9 	.word	0x08007fb9
 8007cb0:	08007dfd 	.word	0x08007dfd

08007cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b095      	sub	sp, #84	@ 0x54
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ce0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e6      	bne.n	8007cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	f023 0301 	bic.w	r3, r3, #1
 8007d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e5      	bne.n	8007cee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d118      	bne.n	8007d5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f023 0310 	bic.w	r3, r3, #16
 8007d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6979      	ldr	r1, [r7, #20]
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	613b      	str	r3, [r7, #16]
   return(result);
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e6      	bne.n	8007d2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007d70:	bf00      	nop
 8007d72:	3754      	adds	r7, #84	@ 0x54
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f7ff fa3e 	bl	800721c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dc4:	61fb      	str	r3, [r7, #28]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	61bb      	str	r3, [r7, #24]
 8007dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6979      	ldr	r1, [r7, #20]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	613b      	str	r3, [r7, #16]
   return(result);
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e6      	bne.n	8007db0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2220      	movs	r2, #32
 8007de6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff fa0a 	bl	8007208 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007df4:	bf00      	nop
 8007df6:	3720      	adds	r7, #32
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b09c      	sub	sp, #112	@ 0x70
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e0a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e14:	2b22      	cmp	r3, #34	@ 0x22
 8007e16:	f040 80be 	bne.w	8007f96 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007e20:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007e28:	b2d9      	uxtb	r1, r3
 8007e2a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e34:	400a      	ands	r2, r1
 8007e36:	b2d2      	uxtb	r2, r2
 8007e38:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f040 80a3 	bne.w	8007faa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e6      	bne.n	8007e64 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3308      	adds	r3, #8
 8007e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea8:	f023 0301 	bic.w	r3, r3, #1
 8007eac:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007eb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007eb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e5      	bne.n	8007e96 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a34      	ldr	r2, [pc, #208]	@ (8007fb4 <UART_RxISR_8BIT+0x1b8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d01f      	beq.n	8007f28 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d018      	beq.n	8007f28 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	623b      	str	r3, [r7, #32]
   return(result);
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f16:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e6      	bne.n	8007ef6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d12e      	bne.n	8007f8e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	e853 3f00 	ldrex	r3, [r3]
 8007f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 0310 	bic.w	r3, r3, #16
 8007f4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	461a      	mov	r2, r3
 8007f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	69b9      	ldr	r1, [r7, #24]
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	617b      	str	r3, [r7, #20]
   return(result);
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e6      	bne.n	8007f36 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	f003 0310 	and.w	r3, r3, #16
 8007f72:	2b10      	cmp	r3, #16
 8007f74:	d103      	bne.n	8007f7e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff f952 	bl	8007230 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f8c:	e00d      	b.n	8007faa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7f9 fa20 	bl	80013d4 <HAL_UART_RxCpltCallback>
}
 8007f94:	e009      	b.n	8007faa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	8b1b      	ldrh	r3, [r3, #24]
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0208 	orr.w	r2, r2, #8
 8007fa6:	b292      	uxth	r2, r2
 8007fa8:	831a      	strh	r2, [r3, #24]
}
 8007faa:	bf00      	nop
 8007fac:	3770      	adds	r7, #112	@ 0x70
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40008000 	.word	0x40008000

08007fb8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b09c      	sub	sp, #112	@ 0x70
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fc6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fd0:	2b22      	cmp	r3, #34	@ 0x22
 8007fd2:	f040 80be 	bne.w	8008152 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007fdc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007fe6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007fea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007fee:	4013      	ands	r3, r2
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ff4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffa:	1c9a      	adds	r2, r3, #2
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008006:	b29b      	uxth	r3, r3
 8008008:	3b01      	subs	r3, #1
 800800a:	b29a      	uxth	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008018:	b29b      	uxth	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	f040 80a3 	bne.w	8008166 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800802e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008034:	667b      	str	r3, [r7, #100]	@ 0x64
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800803e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008040:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008044:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008046:	e841 2300 	strex	r3, r2, [r1]
 800804a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800804c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1e6      	bne.n	8008020 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3308      	adds	r3, #8
 8008058:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800805c:	e853 3f00 	ldrex	r3, [r3]
 8008060:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	f023 0301 	bic.w	r3, r3, #1
 8008068:	663b      	str	r3, [r7, #96]	@ 0x60
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3308      	adds	r3, #8
 8008070:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008072:	643a      	str	r2, [r7, #64]	@ 0x40
 8008074:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008076:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008078:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800807a:	e841 2300 	strex	r3, r2, [r1]
 800807e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1e5      	bne.n	8008052 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2220      	movs	r2, #32
 800808a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a34      	ldr	r2, [pc, #208]	@ (8008170 <UART_RxISR_16BIT+0x1b8>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d01f      	beq.n	80080e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d018      	beq.n	80080e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	61fb      	str	r3, [r7, #28]
   return(result);
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080d8:	e841 2300 	strex	r3, r2, [r1]
 80080dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e6      	bne.n	80080b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d12e      	bne.n	800814a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f023 0310 	bic.w	r3, r3, #16
 8008106:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	461a      	mov	r2, r3
 800810e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008110:	61bb      	str	r3, [r7, #24]
 8008112:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008114:	6979      	ldr	r1, [r7, #20]
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	e841 2300 	strex	r3, r2, [r1]
 800811c:	613b      	str	r3, [r7, #16]
   return(result);
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e6      	bne.n	80080f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f003 0310 	and.w	r3, r3, #16
 800812e:	2b10      	cmp	r3, #16
 8008130:	d103      	bne.n	800813a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2210      	movs	r2, #16
 8008138:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff f874 	bl	8007230 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008148:	e00d      	b.n	8008166 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7f9 f942 	bl	80013d4 <HAL_UART_RxCpltCallback>
}
 8008150:	e009      	b.n	8008166 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	8b1b      	ldrh	r3, [r3, #24]
 8008158:	b29a      	uxth	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0208 	orr.w	r2, r2, #8
 8008162:	b292      	uxth	r2, r2
 8008164:	831a      	strh	r2, [r3, #24]
}
 8008166:	bf00      	nop
 8008168:	3770      	adds	r7, #112	@ 0x70
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	40008000 	.word	0x40008000

08008174 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008188:	b084      	sub	sp, #16
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	f107 001c 	add.w	r0, r7, #28
 8008196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f001 fa26 	bl	80095f8 <USB_CoreReset>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80081b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d106      	bne.n	80081c6 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80081c4:	e005      	b.n	80081d2 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081de:	b004      	add	sp, #16
 80081e0:	4770      	bx	lr
	...

080081e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	4613      	mov	r3, r2
 80081f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80081f2:	79fb      	ldrb	r3, [r7, #7]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d165      	bne.n	80082c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	4a3e      	ldr	r2, [pc, #248]	@ (80082f4 <USB_SetTurnaroundTime+0x110>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d906      	bls.n	800820e <USB_SetTurnaroundTime+0x2a>
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	4a3d      	ldr	r2, [pc, #244]	@ (80082f8 <USB_SetTurnaroundTime+0x114>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d202      	bcs.n	800820e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008208:	230f      	movs	r3, #15
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	e05c      	b.n	80082c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	4a39      	ldr	r2, [pc, #228]	@ (80082f8 <USB_SetTurnaroundTime+0x114>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d306      	bcc.n	8008224 <USB_SetTurnaroundTime+0x40>
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	4a38      	ldr	r2, [pc, #224]	@ (80082fc <USB_SetTurnaroundTime+0x118>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d202      	bcs.n	8008224 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800821e:	230e      	movs	r3, #14
 8008220:	617b      	str	r3, [r7, #20]
 8008222:	e051      	b.n	80082c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4a35      	ldr	r2, [pc, #212]	@ (80082fc <USB_SetTurnaroundTime+0x118>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d306      	bcc.n	800823a <USB_SetTurnaroundTime+0x56>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4a34      	ldr	r2, [pc, #208]	@ (8008300 <USB_SetTurnaroundTime+0x11c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d202      	bcs.n	800823a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008234:	230d      	movs	r3, #13
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	e046      	b.n	80082c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	4a30      	ldr	r2, [pc, #192]	@ (8008300 <USB_SetTurnaroundTime+0x11c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d306      	bcc.n	8008250 <USB_SetTurnaroundTime+0x6c>
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	4a2f      	ldr	r2, [pc, #188]	@ (8008304 <USB_SetTurnaroundTime+0x120>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d802      	bhi.n	8008250 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800824a:	230c      	movs	r3, #12
 800824c:	617b      	str	r3, [r7, #20]
 800824e:	e03b      	b.n	80082c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	4a2c      	ldr	r2, [pc, #176]	@ (8008304 <USB_SetTurnaroundTime+0x120>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d906      	bls.n	8008266 <USB_SetTurnaroundTime+0x82>
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	4a2b      	ldr	r2, [pc, #172]	@ (8008308 <USB_SetTurnaroundTime+0x124>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d802      	bhi.n	8008266 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008260:	230b      	movs	r3, #11
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e030      	b.n	80082c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	4a27      	ldr	r2, [pc, #156]	@ (8008308 <USB_SetTurnaroundTime+0x124>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d906      	bls.n	800827c <USB_SetTurnaroundTime+0x98>
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	4a26      	ldr	r2, [pc, #152]	@ (800830c <USB_SetTurnaroundTime+0x128>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d802      	bhi.n	800827c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008276:	230a      	movs	r3, #10
 8008278:	617b      	str	r3, [r7, #20]
 800827a:	e025      	b.n	80082c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	4a23      	ldr	r2, [pc, #140]	@ (800830c <USB_SetTurnaroundTime+0x128>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d906      	bls.n	8008292 <USB_SetTurnaroundTime+0xae>
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	4a22      	ldr	r2, [pc, #136]	@ (8008310 <USB_SetTurnaroundTime+0x12c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d202      	bcs.n	8008292 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800828c:	2309      	movs	r3, #9
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	e01a      	b.n	80082c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	4a1e      	ldr	r2, [pc, #120]	@ (8008310 <USB_SetTurnaroundTime+0x12c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d306      	bcc.n	80082a8 <USB_SetTurnaroundTime+0xc4>
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	4a1d      	ldr	r2, [pc, #116]	@ (8008314 <USB_SetTurnaroundTime+0x130>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d802      	bhi.n	80082a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80082a2:	2308      	movs	r3, #8
 80082a4:	617b      	str	r3, [r7, #20]
 80082a6:	e00f      	b.n	80082c8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	4a1a      	ldr	r2, [pc, #104]	@ (8008314 <USB_SetTurnaroundTime+0x130>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d906      	bls.n	80082be <USB_SetTurnaroundTime+0xda>
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	4a19      	ldr	r2, [pc, #100]	@ (8008318 <USB_SetTurnaroundTime+0x134>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d202      	bcs.n	80082be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80082b8:	2307      	movs	r3, #7
 80082ba:	617b      	str	r3, [r7, #20]
 80082bc:	e004      	b.n	80082c8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80082be:	2306      	movs	r3, #6
 80082c0:	617b      	str	r3, [r7, #20]
 80082c2:	e001      	b.n	80082c8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80082c4:	2309      	movs	r3, #9
 80082c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	029b      	lsls	r3, r3, #10
 80082dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80082e0:	431a      	orrs	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	371c      	adds	r7, #28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	00d8acbf 	.word	0x00d8acbf
 80082f8:	00e4e1c0 	.word	0x00e4e1c0
 80082fc:	00f42400 	.word	0x00f42400
 8008300:	01067380 	.word	0x01067380
 8008304:	011a499f 	.word	0x011a499f
 8008308:	01312cff 	.word	0x01312cff
 800830c:	014ca43f 	.word	0x014ca43f
 8008310:	016e3600 	.word	0x016e3600
 8008314:	01a6ab1f 	.word	0x01a6ab1f
 8008318:	01e84800 	.word	0x01e84800

0800831c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f043 0201 	orr.w	r2, r3, #1
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f023 0201 	bic.w	r2, r3, #1
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d115      	bne.n	80083ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800838e:	200a      	movs	r0, #10
 8008390:	f7f9 ff6a 	bl	8002268 <HAL_Delay>
      ms += 10U;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	330a      	adds	r3, #10
 8008398:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 f8b3 	bl	8009506 <USB_GetMode>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d01e      	beq.n	80083e4 <USB_SetCurrentMode+0x84>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80083aa:	d9f0      	bls.n	800838e <USB_SetCurrentMode+0x2e>
 80083ac:	e01a      	b.n	80083e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80083ae:	78fb      	ldrb	r3, [r7, #3]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d115      	bne.n	80083e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80083c0:	200a      	movs	r0, #10
 80083c2:	f7f9 ff51 	bl	8002268 <HAL_Delay>
      ms += 10U;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	330a      	adds	r3, #10
 80083ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 f89a 	bl	8009506 <USB_GetMode>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <USB_SetCurrentMode+0x84>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2bc7      	cmp	r3, #199	@ 0xc7
 80083dc:	d9f0      	bls.n	80083c0 <USB_SetCurrentMode+0x60>
 80083de:	e001      	b.n	80083e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e005      	b.n	80083f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80083e8:	d101      	bne.n	80083ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e000      	b.n	80083f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083f8:	b084      	sub	sp, #16
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b086      	sub	sp, #24
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008412:	2300      	movs	r3, #0
 8008414:	613b      	str	r3, [r7, #16]
 8008416:	e009      	b.n	800842c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	3340      	adds	r3, #64	@ 0x40
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	2200      	movs	r2, #0
 8008424:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	3301      	adds	r3, #1
 800842a:	613b      	str	r3, [r7, #16]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	2b0e      	cmp	r3, #14
 8008430:	d9f2      	bls.n	8008418 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008432:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008436:	2b00      	cmp	r3, #0
 8008438:	d11c      	bne.n	8008474 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008448:	f043 0302 	orr.w	r3, r3, #2
 800844c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008452:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	e005      	b.n	8008480 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008478:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008486:	461a      	mov	r2, r3
 8008488:	2300      	movs	r3, #0
 800848a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800848c:	2103      	movs	r1, #3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f95a 	bl	8008748 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008494:	2110      	movs	r1, #16
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f8f6 	bl	8008688 <USB_FlushTxFifo>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f920 	bl	80086ec <USB_FlushRxFifo>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084bc:	461a      	mov	r2, r3
 80084be:	2300      	movs	r3, #0
 80084c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c8:	461a      	mov	r2, r3
 80084ca:	2300      	movs	r3, #0
 80084cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084d4:	461a      	mov	r2, r3
 80084d6:	2300      	movs	r3, #0
 80084d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084da:	2300      	movs	r3, #0
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	e043      	b.n	8008568 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084f6:	d118      	bne.n	800852a <USB_DevInit+0x132>
    {
      if (i == 0U)
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	4413      	add	r3, r2
 8008506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800850a:	461a      	mov	r2, r3
 800850c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	e013      	b.n	800853c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008520:	461a      	mov	r2, r3
 8008522:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	e008      	b.n	800853c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008536:	461a      	mov	r2, r3
 8008538:	2300      	movs	r3, #0
 800853a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008548:	461a      	mov	r2, r3
 800854a:	2300      	movs	r3, #0
 800854c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800855a:	461a      	mov	r2, r3
 800855c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008560:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	3301      	adds	r3, #1
 8008566:	613b      	str	r3, [r7, #16]
 8008568:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800856c:	461a      	mov	r2, r3
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	4293      	cmp	r3, r2
 8008572:	d3b5      	bcc.n	80084e0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008574:	2300      	movs	r3, #0
 8008576:	613b      	str	r3, [r7, #16]
 8008578:	e043      	b.n	8008602 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800858c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008590:	d118      	bne.n	80085c4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10a      	bne.n	80085ae <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a4:	461a      	mov	r2, r3
 80085a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	e013      	b.n	80085d6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ba:	461a      	mov	r2, r3
 80085bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	e008      	b.n	80085d6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d0:	461a      	mov	r2, r3
 80085d2:	2300      	movs	r3, #0
 80085d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e2:	461a      	mov	r2, r3
 80085e4:	2300      	movs	r3, #0
 80085e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f4:	461a      	mov	r2, r3
 80085f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80085fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	3301      	adds	r3, #1
 8008600:	613b      	str	r3, [r7, #16]
 8008602:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008606:	461a      	mov	r2, r3
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	4293      	cmp	r3, r2
 800860c:	d3b5      	bcc.n	800857a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800861c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008620:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800862e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	f043 0210 	orr.w	r2, r3, #16
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	699a      	ldr	r2, [r3, #24]
 8008640:	4b10      	ldr	r3, [pc, #64]	@ (8008684 <USB_DevInit+0x28c>)
 8008642:	4313      	orrs	r3, r2
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008648:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800864c:	2b00      	cmp	r3, #0
 800864e:	d005      	beq.n	800865c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	f043 0208 	orr.w	r2, r3, #8
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800865c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008660:	2b01      	cmp	r3, #1
 8008662:	d107      	bne.n	8008674 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800866c:	f043 0304 	orr.w	r3, r3, #4
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008674:	7dfb      	ldrb	r3, [r7, #23]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008680:	b004      	add	sp, #16
 8008682:	4770      	bx	lr
 8008684:	803c3800 	.word	0x803c3800

08008688 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3301      	adds	r3, #1
 800869a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086a2:	d901      	bls.n	80086a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e01b      	b.n	80086e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	daf2      	bge.n	8008696 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	019b      	lsls	r3, r3, #6
 80086b8:	f043 0220 	orr.w	r2, r3, #32
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3301      	adds	r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086cc:	d901      	bls.n	80086d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e006      	b.n	80086e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b20      	cmp	r3, #32
 80086dc:	d0f0      	beq.n	80086c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3301      	adds	r3, #1
 80086fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008704:	d901      	bls.n	800870a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e018      	b.n	800873c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	daf2      	bge.n	80086f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2210      	movs	r2, #16
 800871a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3301      	adds	r3, #1
 8008720:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008728:	d901      	bls.n	800872e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e006      	b.n	800873c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f003 0310 	and.w	r3, r3, #16
 8008736:	2b10      	cmp	r3, #16
 8008738:	d0f0      	beq.n	800871c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	68f9      	ldr	r1, [r7, #12]
 8008764:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008768:	4313      	orrs	r3, r2
 800876a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800877a:	b480      	push	{r7}
 800877c:	b087      	sub	sp, #28
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f003 0306 	and.w	r3, r3, #6
 8008792:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b02      	cmp	r3, #2
 8008798:	d002      	beq.n	80087a0 <USB_GetDevSpeed+0x26>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b06      	cmp	r3, #6
 800879e:	d102      	bne.n	80087a6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80087a0:	2302      	movs	r3, #2
 80087a2:	75fb      	strb	r3, [r7, #23]
 80087a4:	e001      	b.n	80087aa <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80087a6:	230f      	movs	r3, #15
 80087a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	371c      	adds	r7, #28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	785b      	ldrb	r3, [r3, #1]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d13a      	bne.n	800884a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087da:	69da      	ldr	r2, [r3, #28]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	f003 030f 	and.w	r3, r3, #15
 80087e4:	2101      	movs	r1, #1
 80087e6:	fa01 f303 	lsl.w	r3, r1, r3
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	68f9      	ldr	r1, [r7, #12]
 80087ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087f2:	4313      	orrs	r3, r2
 80087f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d155      	bne.n	80088b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4413      	add	r3, r2
 8008814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	791b      	ldrb	r3, [r3, #4]
 8008826:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008828:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	059b      	lsls	r3, r3, #22
 800882e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008830:	4313      	orrs	r3, r2
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	0151      	lsls	r1, r2, #5
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	440a      	add	r2, r1
 800883a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800883e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	e036      	b.n	80088b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008850:	69da      	ldr	r2, [r3, #28]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	f003 030f 	and.w	r3, r3, #15
 800885a:	2101      	movs	r1, #1
 800885c:	fa01 f303 	lsl.w	r3, r1, r3
 8008860:	041b      	lsls	r3, r3, #16
 8008862:	68f9      	ldr	r1, [r7, #12]
 8008864:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008868:	4313      	orrs	r3, r2
 800886a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d11a      	bne.n	80088b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	791b      	ldrb	r3, [r3, #4]
 800889c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800889e:	430b      	orrs	r3, r1
 80088a0:	4313      	orrs	r3, r2
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	0151      	lsls	r1, r2, #5
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	440a      	add	r2, r1
 80088aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
	...

080088c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d161      	bne.n	80089a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088fa:	d11f      	bne.n	800893c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	0151      	lsls	r1, r2, #5
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	440a      	add	r2, r1
 8008912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008916:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800891a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	0151      	lsls	r1, r2, #5
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	440a      	add	r2, r1
 8008932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008936:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800893a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	f003 030f 	and.w	r3, r3, #15
 800894c:	2101      	movs	r1, #1
 800894e:	fa01 f303 	lsl.w	r3, r1, r3
 8008952:	b29b      	uxth	r3, r3
 8008954:	43db      	mvns	r3, r3
 8008956:	68f9      	ldr	r1, [r7, #12]
 8008958:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800895c:	4013      	ands	r3, r2
 800895e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008966:	69da      	ldr	r2, [r3, #28]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	f003 030f 	and.w	r3, r3, #15
 8008970:	2101      	movs	r1, #1
 8008972:	fa01 f303 	lsl.w	r3, r1, r3
 8008976:	b29b      	uxth	r3, r3
 8008978:	43db      	mvns	r3, r3
 800897a:	68f9      	ldr	r1, [r7, #12]
 800897c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008980:	4013      	ands	r3, r2
 8008982:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4413      	add	r3, r2
 800898c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	0159      	lsls	r1, r3, #5
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	440b      	add	r3, r1
 800899a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800899e:	4619      	mov	r1, r3
 80089a0:	4b35      	ldr	r3, [pc, #212]	@ (8008a78 <USB_DeactivateEndpoint+0x1b0>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	600b      	str	r3, [r1, #0]
 80089a6:	e060      	b.n	8008a6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089be:	d11f      	bne.n	8008a00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	0151      	lsls	r1, r2, #5
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	440a      	add	r2, r1
 80089d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80089de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	0151      	lsls	r1, r2, #5
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	440a      	add	r2, r1
 80089f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	f003 030f 	and.w	r3, r3, #15
 8008a10:	2101      	movs	r1, #1
 8008a12:	fa01 f303 	lsl.w	r3, r1, r3
 8008a16:	041b      	lsls	r3, r3, #16
 8008a18:	43db      	mvns	r3, r3
 8008a1a:	68f9      	ldr	r1, [r7, #12]
 8008a1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a20:	4013      	ands	r3, r2
 8008a22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a2a:	69da      	ldr	r2, [r3, #28]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	f003 030f 	and.w	r3, r3, #15
 8008a34:	2101      	movs	r1, #1
 8008a36:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3a:	041b      	lsls	r3, r3, #16
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	68f9      	ldr	r1, [r7, #12]
 8008a40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a44:	4013      	ands	r3, r2
 8008a46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	0159      	lsls	r1, r3, #5
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	440b      	add	r3, r1
 8008a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a62:	4619      	mov	r1, r3
 8008a64:	4b05      	ldr	r3, [pc, #20]	@ (8008a7c <USB_DeactivateEndpoint+0x1b4>)
 8008a66:	4013      	ands	r3, r2
 8008a68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	ec337800 	.word	0xec337800
 8008a7c:	eff37800 	.word	0xeff37800

08008a80 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	785b      	ldrb	r3, [r3, #1]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	f040 812d 	bne.w	8008cf8 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d132      	bne.n	8008b0c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	0151      	lsls	r1, r2, #5
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	440a      	add	r2, r1
 8008abc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ac0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ac4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ac8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	0151      	lsls	r1, r2, #5
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	440a      	add	r2, r1
 8008ae0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ae4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ae8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	0151      	lsls	r1, r2, #5
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	440a      	add	r2, r1
 8008b00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b04:	0cdb      	lsrs	r3, r3, #19
 8008b06:	04db      	lsls	r3, r3, #19
 8008b08:	6113      	str	r3, [r2, #16]
 8008b0a:	e097      	b.n	8008c3c <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	0151      	lsls	r1, r2, #5
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	440a      	add	r2, r1
 8008b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b26:	0cdb      	lsrs	r3, r3, #19
 8008b28:	04db      	lsls	r3, r3, #19
 8008b2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	0151      	lsls	r1, r2, #5
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	440a      	add	r2, r1
 8008b42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b46:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008b4a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008b4e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d11a      	bne.n	8008b8c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	691a      	ldr	r2, [r3, #16]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d903      	bls.n	8008b6a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689a      	ldr	r2, [r3, #8]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	0151      	lsls	r1, r2, #5
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	440a      	add	r2, r1
 8008b80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b88:	6113      	str	r3, [r2, #16]
 8008b8a:	e044      	b.n	8008c16 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	691a      	ldr	r2, [r3, #16]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	4413      	add	r3, r2
 8008b96:	1e5a      	subs	r2, r3, #1
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba0:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bae:	691a      	ldr	r2, [r3, #16]
 8008bb0:	89fb      	ldrh	r3, [r7, #14]
 8008bb2:	04d9      	lsls	r1, r3, #19
 8008bb4:	4b8f      	ldr	r3, [pc, #572]	@ (8008df4 <USB_EPStartXfer+0x374>)
 8008bb6:	400b      	ands	r3, r1
 8008bb8:	6939      	ldr	r1, [r7, #16]
 8008bba:	0148      	lsls	r0, r1, #5
 8008bbc:	6979      	ldr	r1, [r7, #20]
 8008bbe:	4401      	add	r1, r0
 8008bc0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	791b      	ldrb	r3, [r3, #4]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d122      	bne.n	8008c16 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	0151      	lsls	r1, r2, #5
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	440a      	add	r2, r1
 8008be6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bea:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008bee:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bfc:	691a      	ldr	r2, [r3, #16]
 8008bfe:	89fb      	ldrh	r3, [r7, #14]
 8008c00:	075b      	lsls	r3, r3, #29
 8008c02:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008c06:	6939      	ldr	r1, [r7, #16]
 8008c08:	0148      	lsls	r0, r1, #5
 8008c0a:	6979      	ldr	r1, [r7, #20]
 8008c0c:	4401      	add	r1, r0
 8008c0e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008c12:	4313      	orrs	r3, r2
 8008c14:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c22:	691a      	ldr	r2, [r3, #16]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c2c:	6939      	ldr	r1, [r7, #16]
 8008c2e:	0148      	lsls	r0, r1, #5
 8008c30:	6979      	ldr	r1, [r7, #20]
 8008c32:	4401      	add	r1, r0
 8008c34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	0151      	lsls	r1, r2, #5
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	440a      	add	r2, r1
 8008c52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c5a:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	791b      	ldrb	r3, [r3, #4]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d015      	beq.n	8008c90 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 813a 	beq.w	8008ee2 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	f003 030f 	and.w	r3, r3, #15
 8008c7e:	2101      	movs	r1, #1
 8008c80:	fa01 f303 	lsl.w	r3, r1, r3
 8008c84:	6979      	ldr	r1, [r7, #20]
 8008c86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	634b      	str	r3, [r1, #52]	@ 0x34
 8008c8e:	e128      	b.n	8008ee2 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d110      	bne.n	8008cc2 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	0151      	lsls	r1, r2, #5
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	440a      	add	r2, r1
 8008cb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	e00f      	b.n	8008ce2 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	0151      	lsls	r1, r2, #5
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	440a      	add	r2, r1
 8008cd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ce0:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68d9      	ldr	r1, [r3, #12]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781a      	ldrb	r2, [r3, #0]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f9a7 	bl	8009044 <USB_WritePacket>
 8008cf6:	e0f4      	b.n	8008ee2 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	0151      	lsls	r1, r2, #5
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	440a      	add	r2, r1
 8008d0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d12:	0cdb      	lsrs	r3, r3, #19
 8008d14:	04db      	lsls	r3, r3, #19
 8008d16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	0151      	lsls	r1, r2, #5
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	440a      	add	r2, r1
 8008d2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d32:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008d36:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008d3a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d12f      	bne.n	8008da2 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d70:	6939      	ldr	r1, [r7, #16]
 8008d72:	0148      	lsls	r0, r1, #5
 8008d74:	6979      	ldr	r1, [r7, #20]
 8008d76:	4401      	add	r1, r0
 8008d78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	0151      	lsls	r1, r2, #5
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	440a      	add	r2, r1
 8008d96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d9e:	6113      	str	r3, [r2, #16]
 8008da0:	e062      	b.n	8008e68 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d126      	bne.n	8008df8 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db6:	691a      	ldr	r2, [r3, #16]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dc0:	6939      	ldr	r1, [r7, #16]
 8008dc2:	0148      	lsls	r0, r1, #5
 8008dc4:	6979      	ldr	r1, [r7, #20]
 8008dc6:	4401      	add	r1, r0
 8008dc8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	0151      	lsls	r1, r2, #5
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	440a      	add	r2, r1
 8008de6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008dee:	6113      	str	r3, [r2, #16]
 8008df0:	e03a      	b.n	8008e68 <USB_EPStartXfer+0x3e8>
 8008df2:	bf00      	nop
 8008df4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	691a      	ldr	r2, [r3, #16]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	4413      	add	r3, r2
 8008e02:	1e5a      	subs	r2, r3, #1
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e0c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	89fa      	ldrh	r2, [r7, #14]
 8008e14:	fb03 f202 	mul.w	r2, r3, r2
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e28:	691a      	ldr	r2, [r3, #16]
 8008e2a:	89fb      	ldrh	r3, [r7, #14]
 8008e2c:	04d9      	lsls	r1, r3, #19
 8008e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8008eec <USB_EPStartXfer+0x46c>)
 8008e30:	400b      	ands	r3, r1
 8008e32:	6939      	ldr	r1, [r7, #16]
 8008e34:	0148      	lsls	r0, r1, #5
 8008e36:	6979      	ldr	r1, [r7, #20]
 8008e38:	4401      	add	r1, r0
 8008e3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e58:	6939      	ldr	r1, [r7, #16]
 8008e5a:	0148      	lsls	r0, r1, #5
 8008e5c:	6979      	ldr	r1, [r7, #20]
 8008e5e:	4401      	add	r1, r0
 8008e60:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008e64:	4313      	orrs	r3, r2
 8008e66:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	791b      	ldrb	r3, [r3, #4]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d128      	bne.n	8008ec2 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d110      	bne.n	8008ea2 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	0151      	lsls	r1, r2, #5
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	440a      	add	r2, r1
 8008e96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e9a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	e00f      	b.n	8008ec2 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	0151      	lsls	r1, r2, #5
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	440a      	add	r2, r1
 8008eb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ec0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	0151      	lsls	r1, r2, #5
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	440a      	add	r2, r1
 8008ed8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008edc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ee0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	1ff80000 	.word	0x1ff80000

08008ef0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	785b      	ldrb	r3, [r3, #1]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d14a      	bne.n	8008fa4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f26:	f040 8086 	bne.w	8009036 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	7812      	ldrb	r2, [r2, #0]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f4c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	7812      	ldrb	r2, [r2, #0]
 8008f62:	0151      	lsls	r1, r2, #5
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	440a      	add	r2, r1
 8008f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3301      	adds	r3, #1
 8008f76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d902      	bls.n	8008f88 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	75fb      	strb	r3, [r7, #23]
          break;
 8008f86:	e056      	b.n	8009036 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fa0:	d0e7      	beq.n	8008f72 <USB_EPStopXfer+0x82>
 8008fa2:	e048      	b.n	8009036 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fbc:	d13b      	bne.n	8009036 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	7812      	ldrb	r2, [r2, #0]
 8008fd2:	0151      	lsls	r1, r2, #5
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fdc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008fe0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	7812      	ldrb	r2, [r2, #0]
 8008ff6:	0151      	lsls	r1, r2, #5
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	440a      	add	r2, r1
 8008ffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009000:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009004:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	3301      	adds	r3, #1
 800900a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009012:	4293      	cmp	r3, r2
 8009014:	d902      	bls.n	800901c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	75fb      	strb	r3, [r7, #23]
          break;
 800901a:	e00c      	b.n	8009036 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	015a      	lsls	r2, r3, #5
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	4413      	add	r3, r2
 8009026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009034:	d0e7      	beq.n	8009006 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009036:	7dfb      	ldrb	r3, [r7, #23]
}
 8009038:	4618      	mov	r0, r3
 800903a:	371c      	adds	r7, #28
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009044:	b480      	push	{r7}
 8009046:	b089      	sub	sp, #36	@ 0x24
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	4611      	mov	r1, r2
 8009050:	461a      	mov	r2, r3
 8009052:	460b      	mov	r3, r1
 8009054:	71fb      	strb	r3, [r7, #7]
 8009056:	4613      	mov	r3, r2
 8009058:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009062:	88bb      	ldrh	r3, [r7, #4]
 8009064:	3303      	adds	r3, #3
 8009066:	089b      	lsrs	r3, r3, #2
 8009068:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800906a:	2300      	movs	r3, #0
 800906c:	61bb      	str	r3, [r7, #24]
 800906e:	e018      	b.n	80090a2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	031a      	lsls	r2, r3, #12
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	4413      	add	r3, r2
 8009078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800907c:	461a      	mov	r2, r3
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	3301      	adds	r3, #1
 8009088:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	3301      	adds	r3, #1
 800908e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	3301      	adds	r3, #1
 8009094:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	3301      	adds	r3, #1
 800909a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	3301      	adds	r3, #1
 80090a0:	61bb      	str	r3, [r7, #24]
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d3e2      	bcc.n	8009070 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3724      	adds	r7, #36	@ 0x24
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b08b      	sub	sp, #44	@ 0x2c
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	4613      	mov	r3, r2
 80090c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80090ce:	88fb      	ldrh	r3, [r7, #6]
 80090d0:	089b      	lsrs	r3, r3, #2
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80090d6:	88fb      	ldrh	r3, [r7, #6]
 80090d8:	f003 0303 	and.w	r3, r3, #3
 80090dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80090de:	2300      	movs	r3, #0
 80090e0:	623b      	str	r3, [r7, #32]
 80090e2:	e014      	b.n	800910e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80090f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f2:	3301      	adds	r3, #1
 80090f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	3301      	adds	r3, #1
 80090fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80090fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fe:	3301      	adds	r3, #1
 8009100:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009104:	3301      	adds	r3, #1
 8009106:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	3301      	adds	r3, #1
 800910c:	623b      	str	r3, [r7, #32]
 800910e:	6a3a      	ldr	r2, [r7, #32]
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	429a      	cmp	r2, r3
 8009114:	d3e6      	bcc.n	80090e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009116:	8bfb      	ldrh	r3, [r7, #30]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d01e      	beq.n	800915a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009126:	461a      	mov	r2, r3
 8009128:	f107 0310 	add.w	r3, r7, #16
 800912c:	6812      	ldr	r2, [r2, #0]
 800912e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	b2db      	uxtb	r3, r3
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	fa22 f303 	lsr.w	r3, r2, r3
 800913c:	b2da      	uxtb	r2, r3
 800913e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009140:	701a      	strb	r2, [r3, #0]
      i++;
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	3301      	adds	r3, #1
 8009146:	623b      	str	r3, [r7, #32]
      pDest++;
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	3301      	adds	r3, #1
 800914c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800914e:	8bfb      	ldrh	r3, [r7, #30]
 8009150:	3b01      	subs	r3, #1
 8009152:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009154:	8bfb      	ldrh	r3, [r7, #30]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1ea      	bne.n	8009130 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800915c:	4618      	mov	r0, r3
 800915e:	372c      	adds	r7, #44	@ 0x2c
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d12c      	bne.n	80091de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	db12      	blt.n	80091bc <USB_EPSetStall+0x54>
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00f      	beq.n	80091bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	0151      	lsls	r1, r2, #5
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	440a      	add	r2, r1
 80091b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80091ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	0151      	lsls	r1, r2, #5
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	440a      	add	r2, r1
 80091d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80091da:	6013      	str	r3, [r2, #0]
 80091dc:	e02b      	b.n	8009236 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	db12      	blt.n	8009216 <USB_EPSetStall+0xae>
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00f      	beq.n	8009216 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	0151      	lsls	r1, r2, #5
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	440a      	add	r2, r1
 800920c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009210:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009214:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	015a      	lsls	r2, r3, #5
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4413      	add	r3, r2
 800921e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	0151      	lsls	r1, r2, #5
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	440a      	add	r2, r1
 800922c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009230:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009234:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	785b      	ldrb	r3, [r3, #1]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d128      	bne.n	80092b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800927a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800927e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	791b      	ldrb	r3, [r3, #4]
 8009284:	2b03      	cmp	r3, #3
 8009286:	d003      	beq.n	8009290 <USB_EPClearStall+0x4c>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	791b      	ldrb	r3, [r3, #4]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d138      	bne.n	8009302 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	e027      	b.n	8009302 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	0151      	lsls	r1, r2, #5
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	440a      	add	r2, r1
 80092c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	791b      	ldrb	r3, [r3, #4]
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d003      	beq.n	80092e2 <USB_EPClearStall+0x9e>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	791b      	ldrb	r3, [r3, #4]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d10f      	bne.n	8009302 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009300:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800932e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009332:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	78fb      	ldrb	r3, [r7, #3]
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009344:	68f9      	ldr	r1, [r7, #12]
 8009346:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800934a:	4313      	orrs	r3, r2
 800934c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009376:	f023 0303 	bic.w	r3, r3, #3
 800937a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800938a:	f023 0302 	bic.w	r3, r3, #2
 800938e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800939e:	b480      	push	{r7}
 80093a0:	b085      	sub	sp, #20
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80093b8:	f023 0303 	bic.w	r3, r3, #3
 80093bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093cc:	f043 0302 	orr.w	r3, r3, #2
 80093d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	695b      	ldr	r3, [r3, #20]
 80093ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	4013      	ands	r3, r2
 80093f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093f8:	68fb      	ldr	r3, [r7, #12]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009406:	b480      	push	{r7}
 8009408:	b085      	sub	sp, #20
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	4013      	ands	r3, r2
 8009428:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	0c1b      	lsrs	r3, r3, #16
}
 800942e:	4618      	mov	r0, r3
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	4013      	ands	r3, r2
 800945c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	b29b      	uxth	r3, r3
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800946e:	b480      	push	{r7}
 8009470:	b085      	sub	sp, #20
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	4013      	ands	r3, r2
 800949a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800949c:	68bb      	ldr	r3, [r7, #8]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b087      	sub	sp, #28
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	f003 030f 	and.w	r3, r3, #15
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	fa22 f303 	lsr.w	r3, r2, r3
 80094da:	01db      	lsls	r3, r3, #7
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80094e4:	78fb      	ldrb	r3, [r7, #3]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4013      	ands	r3, r2
 80094f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094f8:	68bb      	ldr	r3, [r7, #8]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	f003 0301 	and.w	r3, r3, #1
}
 8009516:	4618      	mov	r0, r3
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009522:	b480      	push	{r7}
 8009524:	b085      	sub	sp, #20
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800953c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009540:	f023 0307 	bic.w	r3, r3, #7
 8009544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3714      	adds	r7, #20
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	333c      	adds	r3, #60	@ 0x3c
 800957a:	3304      	adds	r3, #4
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	4a1c      	ldr	r2, [pc, #112]	@ (80095f4 <USB_EP0_OutStart+0x8c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d90a      	bls.n	800959e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009594:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009598:	d101      	bne.n	800959e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	e024      	b.n	80095e8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095a4:	461a      	mov	r2, r3
 80095a6:	2300      	movs	r3, #0
 80095a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095cc:	f043 0318 	orr.w	r3, r3, #24
 80095d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80095e4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	4f54300a 	.word	0x4f54300a

080095f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009600:	2300      	movs	r3, #0
 8009602:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3301      	adds	r3, #1
 8009608:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009610:	d901      	bls.n	8009616 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	e01b      	b.n	800964e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	2b00      	cmp	r3, #0
 800961c:	daf2      	bge.n	8009604 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800961e:	2300      	movs	r3, #0
 8009620:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	f043 0201 	orr.w	r2, r3, #1
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3301      	adds	r3, #1
 8009632:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800963a:	d901      	bls.n	8009640 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800963c:	2303      	movs	r3, #3
 800963e:	e006      	b.n	800964e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b01      	cmp	r3, #1
 800964a:	d0f0      	beq.n	800962e <USB_CoreReset+0x36>

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
	...

0800965c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009668:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800966c:	f002 fdca 	bl	800c204 <USBD_static_malloc>
 8009670:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d109      	bne.n	800968c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	32b0      	adds	r2, #176	@ 0xb0
 8009682:	2100      	movs	r1, #0
 8009684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009688:	2302      	movs	r3, #2
 800968a:	e0d4      	b.n	8009836 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800968c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009690:	2100      	movs	r1, #0
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f003 fdc5 	bl	800d222 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	32b0      	adds	r2, #176	@ 0xb0
 80096a2:	68f9      	ldr	r1, [r7, #12]
 80096a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	32b0      	adds	r2, #176	@ 0xb0
 80096b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	7c1b      	ldrb	r3, [r3, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d138      	bne.n	8009736 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80096c4:	4b5e      	ldr	r3, [pc, #376]	@ (8009840 <USBD_CDC_Init+0x1e4>)
 80096c6:	7819      	ldrb	r1, [r3, #0]
 80096c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096cc:	2202      	movs	r2, #2
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f002 fb84 	bl	800bddc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80096d4:	4b5a      	ldr	r3, [pc, #360]	@ (8009840 <USBD_CDC_Init+0x1e4>)
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	f003 020f 	and.w	r2, r3, #15
 80096dc:	6879      	ldr	r1, [r7, #4]
 80096de:	4613      	mov	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	3324      	adds	r3, #36	@ 0x24
 80096ea:	2201      	movs	r2, #1
 80096ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096ee:	4b55      	ldr	r3, [pc, #340]	@ (8009844 <USBD_CDC_Init+0x1e8>)
 80096f0:	7819      	ldrb	r1, [r3, #0]
 80096f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096f6:	2202      	movs	r2, #2
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f002 fb6f 	bl	800bddc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80096fe:	4b51      	ldr	r3, [pc, #324]	@ (8009844 <USBD_CDC_Init+0x1e8>)
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	f003 020f 	and.w	r2, r3, #15
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	4613      	mov	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	440b      	add	r3, r1
 8009712:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009716:	2201      	movs	r2, #1
 8009718:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800971a:	4b4b      	ldr	r3, [pc, #300]	@ (8009848 <USBD_CDC_Init+0x1ec>)
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	f003 020f 	and.w	r2, r3, #15
 8009722:	6879      	ldr	r1, [r7, #4]
 8009724:	4613      	mov	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	440b      	add	r3, r1
 800972e:	3326      	adds	r3, #38	@ 0x26
 8009730:	2210      	movs	r2, #16
 8009732:	801a      	strh	r2, [r3, #0]
 8009734:	e035      	b.n	80097a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009736:	4b42      	ldr	r3, [pc, #264]	@ (8009840 <USBD_CDC_Init+0x1e4>)
 8009738:	7819      	ldrb	r1, [r3, #0]
 800973a:	2340      	movs	r3, #64	@ 0x40
 800973c:	2202      	movs	r2, #2
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f002 fb4c 	bl	800bddc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009744:	4b3e      	ldr	r3, [pc, #248]	@ (8009840 <USBD_CDC_Init+0x1e4>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	f003 020f 	and.w	r2, r3, #15
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	440b      	add	r3, r1
 8009758:	3324      	adds	r3, #36	@ 0x24
 800975a:	2201      	movs	r2, #1
 800975c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800975e:	4b39      	ldr	r3, [pc, #228]	@ (8009844 <USBD_CDC_Init+0x1e8>)
 8009760:	7819      	ldrb	r1, [r3, #0]
 8009762:	2340      	movs	r3, #64	@ 0x40
 8009764:	2202      	movs	r2, #2
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f002 fb38 	bl	800bddc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800976c:	4b35      	ldr	r3, [pc, #212]	@ (8009844 <USBD_CDC_Init+0x1e8>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	f003 020f 	and.w	r2, r3, #15
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	440b      	add	r3, r1
 8009780:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009784:	2201      	movs	r2, #1
 8009786:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009788:	4b2f      	ldr	r3, [pc, #188]	@ (8009848 <USBD_CDC_Init+0x1ec>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	f003 020f 	and.w	r2, r3, #15
 8009790:	6879      	ldr	r1, [r7, #4]
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	440b      	add	r3, r1
 800979c:	3326      	adds	r3, #38	@ 0x26
 800979e:	2210      	movs	r2, #16
 80097a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097a2:	4b29      	ldr	r3, [pc, #164]	@ (8009848 <USBD_CDC_Init+0x1ec>)
 80097a4:	7819      	ldrb	r1, [r3, #0]
 80097a6:	2308      	movs	r3, #8
 80097a8:	2203      	movs	r2, #3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f002 fb16 	bl	800bddc <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80097b0:	4b25      	ldr	r3, [pc, #148]	@ (8009848 <USBD_CDC_Init+0x1ec>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	f003 020f 	and.w	r2, r3, #15
 80097b8:	6879      	ldr	r1, [r7, #4]
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	440b      	add	r3, r1
 80097c4:	3324      	adds	r3, #36	@ 0x24
 80097c6:	2201      	movs	r2, #1
 80097c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	33b0      	adds	r3, #176	@ 0xb0
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009800:	2302      	movs	r3, #2
 8009802:	e018      	b.n	8009836 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	7c1b      	ldrb	r3, [r3, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10a      	bne.n	8009822 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800980c:	4b0d      	ldr	r3, [pc, #52]	@ (8009844 <USBD_CDC_Init+0x1e8>)
 800980e:	7819      	ldrb	r1, [r3, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009816:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f002 fc58 	bl	800c0d0 <USBD_LL_PrepareReceive>
 8009820:	e008      	b.n	8009834 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009822:	4b08      	ldr	r3, [pc, #32]	@ (8009844 <USBD_CDC_Init+0x1e8>)
 8009824:	7819      	ldrb	r1, [r3, #0]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800982c:	2340      	movs	r3, #64	@ 0x40
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f002 fc4e 	bl	800c0d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	2000012f 	.word	0x2000012f
 8009844:	20000130 	.word	0x20000130
 8009848:	20000131 	.word	0x20000131

0800984c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	460b      	mov	r3, r1
 8009856:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009858:	4b3a      	ldr	r3, [pc, #232]	@ (8009944 <USBD_CDC_DeInit+0xf8>)
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f002 fafa 	bl	800be58 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009864:	4b37      	ldr	r3, [pc, #220]	@ (8009944 <USBD_CDC_DeInit+0xf8>)
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	f003 020f 	and.w	r2, r3, #15
 800986c:	6879      	ldr	r1, [r7, #4]
 800986e:	4613      	mov	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	440b      	add	r3, r1
 8009878:	3324      	adds	r3, #36	@ 0x24
 800987a:	2200      	movs	r2, #0
 800987c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800987e:	4b32      	ldr	r3, [pc, #200]	@ (8009948 <USBD_CDC_DeInit+0xfc>)
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	4619      	mov	r1, r3
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f002 fae7 	bl	800be58 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800988a:	4b2f      	ldr	r3, [pc, #188]	@ (8009948 <USBD_CDC_DeInit+0xfc>)
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	f003 020f 	and.w	r2, r3, #15
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	4613      	mov	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	440b      	add	r3, r1
 800989e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098a2:	2200      	movs	r2, #0
 80098a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80098a6:	4b29      	ldr	r3, [pc, #164]	@ (800994c <USBD_CDC_DeInit+0x100>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f002 fad3 	bl	800be58 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80098b2:	4b26      	ldr	r3, [pc, #152]	@ (800994c <USBD_CDC_DeInit+0x100>)
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	f003 020f 	and.w	r2, r3, #15
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4613      	mov	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	440b      	add	r3, r1
 80098c6:	3324      	adds	r3, #36	@ 0x24
 80098c8:	2200      	movs	r2, #0
 80098ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80098cc:	4b1f      	ldr	r3, [pc, #124]	@ (800994c <USBD_CDC_DeInit+0x100>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	f003 020f 	and.w	r2, r3, #15
 80098d4:	6879      	ldr	r1, [r7, #4]
 80098d6:	4613      	mov	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	440b      	add	r3, r1
 80098e0:	3326      	adds	r3, #38	@ 0x26
 80098e2:	2200      	movs	r2, #0
 80098e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	32b0      	adds	r2, #176	@ 0xb0
 80098f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d01f      	beq.n	8009938 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	33b0      	adds	r3, #176	@ 0xb0
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	32b0      	adds	r2, #176	@ 0xb0
 8009916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991a:	4618      	mov	r0, r3
 800991c:	f002 fc80 	bl	800c220 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	32b0      	adds	r2, #176	@ 0xb0
 800992a:	2100      	movs	r1, #0
 800992c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	2000012f 	.word	0x2000012f
 8009948:	20000130 	.word	0x20000130
 800994c:	20000131 	.word	0x20000131

08009950 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	32b0      	adds	r2, #176	@ 0xb0
 8009964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009968:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800996a:	2300      	movs	r3, #0
 800996c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d101      	bne.n	8009980 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800997c:	2303      	movs	r3, #3
 800997e:	e0bf      	b.n	8009b00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009988:	2b00      	cmp	r3, #0
 800998a:	d050      	beq.n	8009a2e <USBD_CDC_Setup+0xde>
 800998c:	2b20      	cmp	r3, #32
 800998e:	f040 80af 	bne.w	8009af0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	88db      	ldrh	r3, [r3, #6]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d03a      	beq.n	8009a10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	b25b      	sxtb	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	da1b      	bge.n	80099dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	33b0      	adds	r3, #176	@ 0xb0
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80099ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	88d2      	ldrh	r2, [r2, #6]
 80099c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	88db      	ldrh	r3, [r3, #6]
 80099c6:	2b07      	cmp	r3, #7
 80099c8:	bf28      	it	cs
 80099ca:	2307      	movcs	r3, #7
 80099cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	89fa      	ldrh	r2, [r7, #14]
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f001 fd7d 	bl	800b4d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80099da:	e090      	b.n	8009afe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	785a      	ldrb	r2, [r3, #1]
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	88db      	ldrh	r3, [r3, #6]
 80099ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80099ec:	d803      	bhi.n	80099f6 <USBD_CDC_Setup+0xa6>
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	88db      	ldrh	r3, [r3, #6]
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	e000      	b.n	80099f8 <USBD_CDC_Setup+0xa8>
 80099f6:	2240      	movs	r2, #64	@ 0x40
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80099fe:	6939      	ldr	r1, [r7, #16]
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009a06:	461a      	mov	r2, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f001 fd8f 	bl	800b52c <USBD_CtlPrepareRx>
      break;
 8009a0e:	e076      	b.n	8009afe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	33b0      	adds	r3, #176	@ 0xb0
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	7850      	ldrb	r0, [r2, #1]
 8009a26:	2200      	movs	r2, #0
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	4798      	blx	r3
      break;
 8009a2c:	e067      	b.n	8009afe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	785b      	ldrb	r3, [r3, #1]
 8009a32:	2b0b      	cmp	r3, #11
 8009a34:	d851      	bhi.n	8009ada <USBD_CDC_Setup+0x18a>
 8009a36:	a201      	add	r2, pc, #4	@ (adr r2, 8009a3c <USBD_CDC_Setup+0xec>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009a6d 	.word	0x08009a6d
 8009a40:	08009ae9 	.word	0x08009ae9
 8009a44:	08009adb 	.word	0x08009adb
 8009a48:	08009adb 	.word	0x08009adb
 8009a4c:	08009adb 	.word	0x08009adb
 8009a50:	08009adb 	.word	0x08009adb
 8009a54:	08009adb 	.word	0x08009adb
 8009a58:	08009adb 	.word	0x08009adb
 8009a5c:	08009adb 	.word	0x08009adb
 8009a60:	08009adb 	.word	0x08009adb
 8009a64:	08009a97 	.word	0x08009a97
 8009a68:	08009ac1 	.word	0x08009ac1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d107      	bne.n	8009a88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a78:	f107 030a 	add.w	r3, r7, #10
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f001 fd27 	bl	800b4d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a86:	e032      	b.n	8009aee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f001 fca5 	bl	800b3da <USBD_CtlError>
            ret = USBD_FAIL;
 8009a90:	2303      	movs	r3, #3
 8009a92:	75fb      	strb	r3, [r7, #23]
          break;
 8009a94:	e02b      	b.n	8009aee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d107      	bne.n	8009ab2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009aa2:	f107 030d 	add.w	r3, r7, #13
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 fd12 	bl	800b4d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ab0:	e01d      	b.n	8009aee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f001 fc90 	bl	800b3da <USBD_CtlError>
            ret = USBD_FAIL;
 8009aba:	2303      	movs	r3, #3
 8009abc:	75fb      	strb	r3, [r7, #23]
          break;
 8009abe:	e016      	b.n	8009aee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d00f      	beq.n	8009aec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f001 fc83 	bl	800b3da <USBD_CtlError>
            ret = USBD_FAIL;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ad8:	e008      	b.n	8009aec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f001 fc7c 	bl	800b3da <USBD_CtlError>
          ret = USBD_FAIL;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ae6:	e002      	b.n	8009aee <USBD_CDC_Setup+0x19e>
          break;
 8009ae8:	bf00      	nop
 8009aea:	e008      	b.n	8009afe <USBD_CDC_Setup+0x1ae>
          break;
 8009aec:	bf00      	nop
      }
      break;
 8009aee:	e006      	b.n	8009afe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f001 fc71 	bl	800b3da <USBD_CtlError>
      ret = USBD_FAIL;
 8009af8:	2303      	movs	r3, #3
 8009afa:	75fb      	strb	r3, [r7, #23]
      break;
 8009afc:	bf00      	nop
  }

  return (uint8_t)ret;
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	32b0      	adds	r2, #176	@ 0xb0
 8009b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e065      	b.n	8009bfe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	32b0      	adds	r2, #176	@ 0xb0
 8009b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b42:	78fb      	ldrb	r3, [r7, #3]
 8009b44:	f003 020f 	and.w	r2, r3, #15
 8009b48:	6879      	ldr	r1, [r7, #4]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4413      	add	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	440b      	add	r3, r1
 8009b54:	3318      	adds	r3, #24
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d02f      	beq.n	8009bbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009b5c:	78fb      	ldrb	r3, [r7, #3]
 8009b5e:	f003 020f 	and.w	r2, r3, #15
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	440b      	add	r3, r1
 8009b6e:	3318      	adds	r3, #24
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	78fb      	ldrb	r3, [r7, #3]
 8009b74:	f003 010f 	and.w	r1, r3, #15
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	00db      	lsls	r3, r3, #3
 8009b7e:	440b      	add	r3, r1
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4403      	add	r3, r0
 8009b84:	331c      	adds	r3, #28
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b8c:	fb01 f303 	mul.w	r3, r1, r3
 8009b90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d112      	bne.n	8009bbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009b96:	78fb      	ldrb	r3, [r7, #3]
 8009b98:	f003 020f 	and.w	r2, r3, #15
 8009b9c:	6879      	ldr	r1, [r7, #4]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	440b      	add	r3, r1
 8009ba8:	3318      	adds	r3, #24
 8009baa:	2200      	movs	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009bae:	78f9      	ldrb	r1, [r7, #3]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f002 fa53 	bl	800c060 <USBD_LL_Transmit>
 8009bba:	e01f      	b.n	8009bfc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	33b0      	adds	r3, #176	@ 0xb0
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	4413      	add	r3, r2
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d010      	beq.n	8009bfc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	33b0      	adds	r3, #176	@ 0xb0
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009bf8:	78fa      	ldrb	r2, [r7, #3]
 8009bfa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b084      	sub	sp, #16
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	460b      	mov	r3, r1
 8009c10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	32b0      	adds	r2, #176	@ 0xb0
 8009c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	32b0      	adds	r2, #176	@ 0xb0
 8009c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e01a      	b.n	8009c6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f002 fa7f 	bl	800c140 <USBD_LL_GetRxDataSize>
 8009c42:	4602      	mov	r2, r0
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	33b0      	adds	r3, #176	@ 0xb0
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009c68:	4611      	mov	r1, r2
 8009c6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	32b0      	adds	r2, #176	@ 0xb0
 8009c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e024      	b.n	8009ce2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	33b0      	adds	r3, #176	@ 0xb0
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d019      	beq.n	8009ce0 <USBD_CDC_EP0_RxReady+0x6a>
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009cb2:	2bff      	cmp	r3, #255	@ 0xff
 8009cb4:	d014      	beq.n	8009ce0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	33b0      	adds	r3, #176	@ 0xb0
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009cce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009cd6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	22ff      	movs	r2, #255	@ 0xff
 8009cdc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009cf4:	2182      	movs	r1, #130	@ 0x82
 8009cf6:	4818      	ldr	r0, [pc, #96]	@ (8009d58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009cf8:	f000 fd0f 	bl	800a71a <USBD_GetEpDesc>
 8009cfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009cfe:	2101      	movs	r1, #1
 8009d00:	4815      	ldr	r0, [pc, #84]	@ (8009d58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d02:	f000 fd0a 	bl	800a71a <USBD_GetEpDesc>
 8009d06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d08:	2181      	movs	r1, #129	@ 0x81
 8009d0a:	4813      	ldr	r0, [pc, #76]	@ (8009d58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009d0c:	f000 fd05 	bl	800a71a <USBD_GetEpDesc>
 8009d10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2210      	movs	r2, #16
 8009d1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d006      	beq.n	8009d32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d2c:	711a      	strb	r2, [r3, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d006      	beq.n	8009d46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d40:	711a      	strb	r2, [r3, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2243      	movs	r2, #67	@ 0x43
 8009d4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d4c:	4b02      	ldr	r3, [pc, #8]	@ (8009d58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3718      	adds	r7, #24
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	200000ec 	.word	0x200000ec

08009d5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d64:	2182      	movs	r1, #130	@ 0x82
 8009d66:	4818      	ldr	r0, [pc, #96]	@ (8009dc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d68:	f000 fcd7 	bl	800a71a <USBD_GetEpDesc>
 8009d6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d6e:	2101      	movs	r1, #1
 8009d70:	4815      	ldr	r0, [pc, #84]	@ (8009dc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d72:	f000 fcd2 	bl	800a71a <USBD_GetEpDesc>
 8009d76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d78:	2181      	movs	r1, #129	@ 0x81
 8009d7a:	4813      	ldr	r0, [pc, #76]	@ (8009dc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009d7c:	f000 fccd 	bl	800a71a <USBD_GetEpDesc>
 8009d80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	2210      	movs	r2, #16
 8009d8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d006      	beq.n	8009da2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	2200      	movs	r2, #0
 8009d98:	711a      	strb	r2, [r3, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f042 0202 	orr.w	r2, r2, #2
 8009da0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d006      	beq.n	8009db6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	711a      	strb	r2, [r3, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f042 0202 	orr.w	r2, r2, #2
 8009db4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2243      	movs	r2, #67	@ 0x43
 8009dba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009dbc:	4b02      	ldr	r3, [pc, #8]	@ (8009dc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3718      	adds	r7, #24
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	200000ec 	.word	0x200000ec

08009dcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009dd4:	2182      	movs	r1, #130	@ 0x82
 8009dd6:	4818      	ldr	r0, [pc, #96]	@ (8009e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009dd8:	f000 fc9f 	bl	800a71a <USBD_GetEpDesc>
 8009ddc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009dde:	2101      	movs	r1, #1
 8009de0:	4815      	ldr	r0, [pc, #84]	@ (8009e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009de2:	f000 fc9a 	bl	800a71a <USBD_GetEpDesc>
 8009de6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009de8:	2181      	movs	r1, #129	@ 0x81
 8009dea:	4813      	ldr	r0, [pc, #76]	@ (8009e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009dec:	f000 fc95 	bl	800a71a <USBD_GetEpDesc>
 8009df0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2210      	movs	r2, #16
 8009dfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d006      	beq.n	8009e12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e0c:	711a      	strb	r2, [r3, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d006      	beq.n	8009e26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e20:	711a      	strb	r2, [r3, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2243      	movs	r2, #67	@ 0x43
 8009e2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e2c:	4b02      	ldr	r3, [pc, #8]	@ (8009e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	200000ec 	.word	0x200000ec

08009e3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	220a      	movs	r2, #10
 8009e48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e4a:	4b03      	ldr	r3, [pc, #12]	@ (8009e58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	200000a8 	.word	0x200000a8

08009e5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d101      	bne.n	8009e70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e009      	b.n	8009e84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	33b0      	adds	r3, #176	@ 0xb0
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4413      	add	r3, r2
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009e82:	2300      	movs	r3, #0
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	32b0      	adds	r2, #176	@ 0xb0
 8009ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eaa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e008      	b.n	8009ec8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	68ba      	ldr	r2, [r7, #8]
 8009eba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	371c      	adds	r7, #28
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	32b0      	adds	r2, #176	@ 0xb0
 8009ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e004      	b.n	8009f02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
	...

08009f10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	32b0      	adds	r2, #176	@ 0xb0
 8009f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	32b0      	adds	r2, #176	@ 0xb0
 8009f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e018      	b.n	8009f70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	7c1b      	ldrb	r3, [r3, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10a      	bne.n	8009f5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f46:	4b0c      	ldr	r3, [pc, #48]	@ (8009f78 <USBD_CDC_ReceivePacket+0x68>)
 8009f48:	7819      	ldrb	r1, [r3, #0]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f002 f8bb 	bl	800c0d0 <USBD_LL_PrepareReceive>
 8009f5a:	e008      	b.n	8009f6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f5c:	4b06      	ldr	r3, [pc, #24]	@ (8009f78 <USBD_CDC_ReceivePacket+0x68>)
 8009f5e:	7819      	ldrb	r1, [r3, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f66:	2340      	movs	r3, #64	@ 0x40
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f002 f8b1 	bl	800c0d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	20000130 	.word	0x20000130

08009f7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	4613      	mov	r3, r2
 8009f88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e01f      	b.n	8009fd4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d003      	beq.n	8009fba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	79fa      	ldrb	r2, [r7, #7]
 8009fc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f001 fe89 	bl	800bce0 <USBD_LL_Init>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e025      	b.n	800a040 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	32ae      	adds	r2, #174	@ 0xae
 800a006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00f      	beq.n	800a030 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	32ae      	adds	r2, #174	@ 0xae
 800a01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a020:	f107 020e 	add.w	r2, r7, #14
 800a024:	4610      	mov	r0, r2
 800a026:	4798      	blx	r3
 800a028:	4602      	mov	r2, r0
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 fe91 	bl	800bd78 <USBD_LL_Start>
 800a056:	4603      	mov	r3, r0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a068:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	460b      	mov	r3, r1
 800a080:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d009      	beq.n	800a0a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	78fa      	ldrb	r2, [r7, #3]
 800a09a:	4611      	mov	r1, r2
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	4798      	blx	r3
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	78fa      	ldrb	r2, [r7, #3]
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	4798      	blx	r3
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f001 f936 	bl	800b366 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a108:	461a      	mov	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a116:	f003 031f 	and.w	r3, r3, #31
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d01a      	beq.n	800a154 <USBD_LL_SetupStage+0x72>
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d822      	bhi.n	800a168 <USBD_LL_SetupStage+0x86>
 800a122:	2b00      	cmp	r3, #0
 800a124:	d002      	beq.n	800a12c <USBD_LL_SetupStage+0x4a>
 800a126:	2b01      	cmp	r3, #1
 800a128:	d00a      	beq.n	800a140 <USBD_LL_SetupStage+0x5e>
 800a12a:	e01d      	b.n	800a168 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fb63 	bl	800a800 <USBD_StdDevReq>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73fb      	strb	r3, [r7, #15]
      break;
 800a13e:	e020      	b.n	800a182 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fbcb 	bl	800a8e4 <USBD_StdItfReq>
 800a14e:	4603      	mov	r3, r0
 800a150:	73fb      	strb	r3, [r7, #15]
      break;
 800a152:	e016      	b.n	800a182 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a15a:	4619      	mov	r1, r3
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fc2d 	bl	800a9bc <USBD_StdEPReq>
 800a162:	4603      	mov	r3, r0
 800a164:	73fb      	strb	r3, [r7, #15]
      break;
 800a166:	e00c      	b.n	800a182 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a16e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a172:	b2db      	uxtb	r3, r3
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f001 fea4 	bl	800bec4 <USBD_LL_StallEP>
 800a17c:	4603      	mov	r3, r0
 800a17e:	73fb      	strb	r3, [r7, #15]
      break;
 800a180:	bf00      	nop
  }

  return ret;
 800a182:	7bfb      	ldrb	r3, [r7, #15]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	460b      	mov	r3, r1
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a19e:	7afb      	ldrb	r3, [r7, #11]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d16e      	bne.n	800a282 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a1aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a1b2:	2b03      	cmp	r3, #3
 800a1b4:	f040 8098 	bne.w	800a2e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d913      	bls.n	800a1ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	689a      	ldr	r2, [r3, #8]
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	1ad2      	subs	r2, r2, r3
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	68da      	ldr	r2, [r3, #12]
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	bf28      	it	cs
 800a1de:	4613      	movcs	r3, r2
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f001 f9be 	bl	800b566 <USBD_CtlContinueRx>
 800a1ea:	e07d      	b.n	800a2e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a1f2:	f003 031f 	and.w	r3, r3, #31
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d014      	beq.n	800a224 <USBD_LL_DataOutStage+0x98>
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d81d      	bhi.n	800a23a <USBD_LL_DataOutStage+0xae>
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d002      	beq.n	800a208 <USBD_LL_DataOutStage+0x7c>
 800a202:	2b01      	cmp	r3, #1
 800a204:	d003      	beq.n	800a20e <USBD_LL_DataOutStage+0x82>
 800a206:	e018      	b.n	800a23a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a208:	2300      	movs	r3, #0
 800a20a:	75bb      	strb	r3, [r7, #22]
            break;
 800a20c:	e018      	b.n	800a240 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a214:	b2db      	uxtb	r3, r3
 800a216:	4619      	mov	r1, r3
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 fa64 	bl	800a6e6 <USBD_CoreFindIF>
 800a21e:	4603      	mov	r3, r0
 800a220:	75bb      	strb	r3, [r7, #22]
            break;
 800a222:	e00d      	b.n	800a240 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	4619      	mov	r1, r3
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f000 fa66 	bl	800a700 <USBD_CoreFindEP>
 800a234:	4603      	mov	r3, r0
 800a236:	75bb      	strb	r3, [r7, #22]
            break;
 800a238:	e002      	b.n	800a240 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a23a:	2300      	movs	r3, #0
 800a23c:	75bb      	strb	r3, [r7, #22]
            break;
 800a23e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a240:	7dbb      	ldrb	r3, [r7, #22]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d119      	bne.n	800a27a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b03      	cmp	r3, #3
 800a250:	d113      	bne.n	800a27a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a252:	7dba      	ldrb	r2, [r7, #22]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	32ae      	adds	r2, #174	@ 0xae
 800a258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00b      	beq.n	800a27a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a262:	7dba      	ldrb	r2, [r7, #22]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a26a:	7dba      	ldrb	r2, [r7, #22]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	32ae      	adds	r2, #174	@ 0xae
 800a270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f001 f984 	bl	800b588 <USBD_CtlSendStatus>
 800a280:	e032      	b.n	800a2e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a282:	7afb      	ldrb	r3, [r7, #11]
 800a284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	4619      	mov	r1, r3
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f000 fa37 	bl	800a700 <USBD_CoreFindEP>
 800a292:	4603      	mov	r3, r0
 800a294:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a296:	7dbb      	ldrb	r3, [r7, #22]
 800a298:	2bff      	cmp	r3, #255	@ 0xff
 800a29a:	d025      	beq.n	800a2e8 <USBD_LL_DataOutStage+0x15c>
 800a29c:	7dbb      	ldrb	r3, [r7, #22]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d122      	bne.n	800a2e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b03      	cmp	r3, #3
 800a2ac:	d117      	bne.n	800a2de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a2ae:	7dba      	ldrb	r2, [r7, #22]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	32ae      	adds	r2, #174	@ 0xae
 800a2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00f      	beq.n	800a2de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a2be:	7dba      	ldrb	r2, [r7, #22]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a2c6:	7dba      	ldrb	r2, [r7, #22]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	32ae      	adds	r2, #174	@ 0xae
 800a2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	7afa      	ldrb	r2, [r7, #11]
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	4798      	blx	r3
 800a2da:	4603      	mov	r3, r0
 800a2dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d001      	beq.n	800a2e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
 800a2e6:	e000      	b.n	800a2ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3718      	adds	r7, #24
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b086      	sub	sp, #24
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	607a      	str	r2, [r7, #4]
 800a2fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a300:	7afb      	ldrb	r3, [r7, #11]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d16f      	bne.n	800a3e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3314      	adds	r3, #20
 800a30a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a312:	2b02      	cmp	r3, #2
 800a314:	d15a      	bne.n	800a3cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	689a      	ldr	r2, [r3, #8]
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d914      	bls.n	800a34c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	689a      	ldr	r2, [r3, #8]
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	1ad2      	subs	r2, r2, r3
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	461a      	mov	r2, r3
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f001 f8e6 	bl	800b50a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a33e:	2300      	movs	r3, #0
 800a340:	2200      	movs	r2, #0
 800a342:	2100      	movs	r1, #0
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f001 fec3 	bl	800c0d0 <USBD_LL_PrepareReceive>
 800a34a:	e03f      	b.n	800a3cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	68da      	ldr	r2, [r3, #12]
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	429a      	cmp	r2, r3
 800a356:	d11c      	bne.n	800a392 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a360:	429a      	cmp	r2, r3
 800a362:	d316      	bcc.n	800a392 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a36e:	429a      	cmp	r2, r3
 800a370:	d20f      	bcs.n	800a392 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a372:	2200      	movs	r2, #0
 800a374:	2100      	movs	r1, #0
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f001 f8c7 	bl	800b50a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a384:	2300      	movs	r3, #0
 800a386:	2200      	movs	r2, #0
 800a388:	2100      	movs	r1, #0
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f001 fea0 	bl	800c0d0 <USBD_LL_PrepareReceive>
 800a390:	e01c      	b.n	800a3cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b03      	cmp	r3, #3
 800a39c:	d10f      	bne.n	800a3be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d009      	beq.n	800a3be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3be:	2180      	movs	r1, #128	@ 0x80
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f001 fd7f 	bl	800bec4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f001 f8f1 	bl	800b5ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d03a      	beq.n	800a44c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f7ff fe42 	bl	800a060 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a3e4:	e032      	b.n	800a44c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a3e6:	7afb      	ldrb	r3, [r7, #11]
 800a3e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f000 f985 	bl	800a700 <USBD_CoreFindEP>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3fa:	7dfb      	ldrb	r3, [r7, #23]
 800a3fc:	2bff      	cmp	r3, #255	@ 0xff
 800a3fe:	d025      	beq.n	800a44c <USBD_LL_DataInStage+0x15a>
 800a400:	7dfb      	ldrb	r3, [r7, #23]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d122      	bne.n	800a44c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	2b03      	cmp	r3, #3
 800a410:	d11c      	bne.n	800a44c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a412:	7dfa      	ldrb	r2, [r7, #23]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	32ae      	adds	r2, #174	@ 0xae
 800a418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d014      	beq.n	800a44c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a422:	7dfa      	ldrb	r2, [r7, #23]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a42a:	7dfa      	ldrb	r2, [r7, #23]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	32ae      	adds	r2, #174	@ 0xae
 800a430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	7afa      	ldrb	r2, [r7, #11]
 800a438:	4611      	mov	r1, r2
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	4798      	blx	r3
 800a43e:	4603      	mov	r3, r0
 800a440:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a442:	7dbb      	ldrb	r3, [r7, #22]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a448:	7dbb      	ldrb	r3, [r7, #22]
 800a44a:	e000      	b.n	800a44e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3718      	adds	r7, #24
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b084      	sub	sp, #16
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d014      	beq.n	800a4bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00e      	beq.n	800a4bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	6852      	ldr	r2, [r2, #4]
 800a4aa:	b2d2      	uxtb	r2, r2
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	4798      	blx	r3
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d001      	beq.n	800a4bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4bc:	2340      	movs	r3, #64	@ 0x40
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f001 fc8a 	bl	800bddc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2240      	movs	r2, #64	@ 0x40
 800a4d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4d8:	2340      	movs	r3, #64	@ 0x40
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2180      	movs	r1, #128	@ 0x80
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 fc7c 	bl	800bddc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2240      	movs	r2, #64	@ 0x40
 800a4ee:	621a      	str	r2, [r3, #32]

  return ret;
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	460b      	mov	r3, r1
 800a504:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	78fa      	ldrb	r2, [r7, #3]
 800a50a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b04      	cmp	r3, #4
 800a52c:	d006      	beq.n	800a53c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a534:	b2da      	uxtb	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2204      	movs	r2, #4
 800a540:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a552:	b480      	push	{r7}
 800a554:	b083      	sub	sp, #12
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b04      	cmp	r3, #4
 800a564:	d106      	bne.n	800a574 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b082      	sub	sp, #8
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b03      	cmp	r3, #3
 800a594:	d110      	bne.n	800a5b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00b      	beq.n	800a5b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d005      	beq.n	800a5b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	32ae      	adds	r2, #174	@ 0xae
 800a5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	e01c      	b.n	800a61e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b03      	cmp	r3, #3
 800a5ee:	d115      	bne.n	800a61c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	32ae      	adds	r2, #174	@ 0xae
 800a5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fe:	6a1b      	ldr	r3, [r3, #32]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	32ae      	adds	r2, #174	@ 0xae
 800a60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a612:	6a1b      	ldr	r3, [r3, #32]
 800a614:	78fa      	ldrb	r2, [r7, #3]
 800a616:	4611      	mov	r1, r2
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b082      	sub	sp, #8
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	460b      	mov	r3, r1
 800a630:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	32ae      	adds	r2, #174	@ 0xae
 800a63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d101      	bne.n	800a648 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a644:	2303      	movs	r3, #3
 800a646:	e01c      	b.n	800a682 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b03      	cmp	r3, #3
 800a652:	d115      	bne.n	800a680 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	32ae      	adds	r2, #174	@ 0xae
 800a65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00b      	beq.n	800a680 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	32ae      	adds	r2, #174	@ 0xae
 800a672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a678:	78fa      	ldrb	r2, [r7, #3]
 800a67a:	4611      	mov	r1, r2
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00e      	beq.n	800a6dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	6852      	ldr	r2, [r2, #4]
 800a6ca:	b2d2      	uxtb	r2, r2
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	4798      	blx	r3
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a6d8:	2303      	movs	r3, #3
 800a6da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b083      	sub	sp, #12
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a70c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a70e:	4618      	mov	r0, r3
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b086      	sub	sp, #24
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	460b      	mov	r3, r1
 800a724:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a72e:	2300      	movs	r3, #0
 800a730:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	885b      	ldrh	r3, [r3, #2]
 800a736:	b29b      	uxth	r3, r3
 800a738:	68fa      	ldr	r2, [r7, #12]
 800a73a:	7812      	ldrb	r2, [r2, #0]
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d91f      	bls.n	800a780 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a746:	e013      	b.n	800a770 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a748:	f107 030a 	add.w	r3, r7, #10
 800a74c:	4619      	mov	r1, r3
 800a74e:	6978      	ldr	r0, [r7, #20]
 800a750:	f000 f81b 	bl	800a78a <USBD_GetNextDesc>
 800a754:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	785b      	ldrb	r3, [r3, #1]
 800a75a:	2b05      	cmp	r3, #5
 800a75c:	d108      	bne.n	800a770 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	789b      	ldrb	r3, [r3, #2]
 800a766:	78fa      	ldrb	r2, [r7, #3]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d008      	beq.n	800a77e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a76c:	2300      	movs	r3, #0
 800a76e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	885b      	ldrh	r3, [r3, #2]
 800a774:	b29a      	uxth	r2, r3
 800a776:	897b      	ldrh	r3, [r7, #10]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d8e5      	bhi.n	800a748 <USBD_GetEpDesc+0x2e>
 800a77c:	e000      	b.n	800a780 <USBD_GetEpDesc+0x66>
          break;
 800a77e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a780:	693b      	ldr	r3, [r7, #16]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b085      	sub	sp, #20
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	7812      	ldrb	r2, [r2, #0]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b087      	sub	sp, #28
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a7e0:	8a3b      	ldrh	r3, [r7, #16]
 800a7e2:	021b      	lsls	r3, r3, #8
 800a7e4:	b21a      	sxth	r2, r3
 800a7e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	b21b      	sxth	r3, r3
 800a7ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a7f0:	89fb      	ldrh	r3, [r7, #14]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	371c      	adds	r7, #28
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
	...

0800a800 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a816:	2b40      	cmp	r3, #64	@ 0x40
 800a818:	d005      	beq.n	800a826 <USBD_StdDevReq+0x26>
 800a81a:	2b40      	cmp	r3, #64	@ 0x40
 800a81c:	d857      	bhi.n	800a8ce <USBD_StdDevReq+0xce>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00f      	beq.n	800a842 <USBD_StdDevReq+0x42>
 800a822:	2b20      	cmp	r3, #32
 800a824:	d153      	bne.n	800a8ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	32ae      	adds	r2, #174	@ 0xae
 800a830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	4798      	blx	r3
 800a83c:	4603      	mov	r3, r0
 800a83e:	73fb      	strb	r3, [r7, #15]
      break;
 800a840:	e04a      	b.n	800a8d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	785b      	ldrb	r3, [r3, #1]
 800a846:	2b09      	cmp	r3, #9
 800a848:	d83b      	bhi.n	800a8c2 <USBD_StdDevReq+0xc2>
 800a84a:	a201      	add	r2, pc, #4	@ (adr r2, 800a850 <USBD_StdDevReq+0x50>)
 800a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a850:	0800a8a5 	.word	0x0800a8a5
 800a854:	0800a8b9 	.word	0x0800a8b9
 800a858:	0800a8c3 	.word	0x0800a8c3
 800a85c:	0800a8af 	.word	0x0800a8af
 800a860:	0800a8c3 	.word	0x0800a8c3
 800a864:	0800a883 	.word	0x0800a883
 800a868:	0800a879 	.word	0x0800a879
 800a86c:	0800a8c3 	.word	0x0800a8c3
 800a870:	0800a89b 	.word	0x0800a89b
 800a874:	0800a88d 	.word	0x0800a88d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fa3c 	bl	800acf8 <USBD_GetDescriptor>
          break;
 800a880:	e024      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fbcb 	bl	800b020 <USBD_SetAddress>
          break;
 800a88a:	e01f      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a88c:	6839      	ldr	r1, [r7, #0]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fc0a 	bl	800b0a8 <USBD_SetConfig>
 800a894:	4603      	mov	r3, r0
 800a896:	73fb      	strb	r3, [r7, #15]
          break;
 800a898:	e018      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a89a:	6839      	ldr	r1, [r7, #0]
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fcad 	bl	800b1fc <USBD_GetConfig>
          break;
 800a8a2:	e013      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fcde 	bl	800b268 <USBD_GetStatus>
          break;
 800a8ac:	e00e      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fd0d 	bl	800b2d0 <USBD_SetFeature>
          break;
 800a8b6:	e009      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a8b8:	6839      	ldr	r1, [r7, #0]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fd31 	bl	800b322 <USBD_ClrFeature>
          break;
 800a8c0:	e004      	b.n	800a8cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fd88 	bl	800b3da <USBD_CtlError>
          break;
 800a8ca:	bf00      	nop
      }
      break;
 800a8cc:	e004      	b.n	800a8d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a8ce:	6839      	ldr	r1, [r7, #0]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fd82 	bl	800b3da <USBD_CtlError>
      break;
 800a8d6:	bf00      	nop
  }

  return ret;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop

0800a8e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8fa:	2b40      	cmp	r3, #64	@ 0x40
 800a8fc:	d005      	beq.n	800a90a <USBD_StdItfReq+0x26>
 800a8fe:	2b40      	cmp	r3, #64	@ 0x40
 800a900:	d852      	bhi.n	800a9a8 <USBD_StdItfReq+0xc4>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <USBD_StdItfReq+0x26>
 800a906:	2b20      	cmp	r3, #32
 800a908:	d14e      	bne.n	800a9a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a910:	b2db      	uxtb	r3, r3
 800a912:	3b01      	subs	r3, #1
 800a914:	2b02      	cmp	r3, #2
 800a916:	d840      	bhi.n	800a99a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	889b      	ldrh	r3, [r3, #4]
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d836      	bhi.n	800a990 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	889b      	ldrh	r3, [r3, #4]
 800a926:	b2db      	uxtb	r3, r3
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f7ff fedb 	bl	800a6e6 <USBD_CoreFindIF>
 800a930:	4603      	mov	r3, r0
 800a932:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	2bff      	cmp	r3, #255	@ 0xff
 800a938:	d01d      	beq.n	800a976 <USBD_StdItfReq+0x92>
 800a93a:	7bbb      	ldrb	r3, [r7, #14]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d11a      	bne.n	800a976 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a940:	7bba      	ldrb	r2, [r7, #14]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	32ae      	adds	r2, #174	@ 0xae
 800a946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00f      	beq.n	800a970 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a950:	7bba      	ldrb	r2, [r7, #14]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a958:	7bba      	ldrb	r2, [r7, #14]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	32ae      	adds	r2, #174	@ 0xae
 800a95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	4798      	blx	r3
 800a96a:	4603      	mov	r3, r0
 800a96c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a96e:	e004      	b.n	800a97a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a970:	2303      	movs	r3, #3
 800a972:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a974:	e001      	b.n	800a97a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a976:	2303      	movs	r3, #3
 800a978:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	88db      	ldrh	r3, [r3, #6]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d110      	bne.n	800a9a4 <USBD_StdItfReq+0xc0>
 800a982:	7bfb      	ldrb	r3, [r7, #15]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10d      	bne.n	800a9a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fdfd 	bl	800b588 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a98e:	e009      	b.n	800a9a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 fd21 	bl	800b3da <USBD_CtlError>
          break;
 800a998:	e004      	b.n	800a9a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fd1c 	bl	800b3da <USBD_CtlError>
          break;
 800a9a2:	e000      	b.n	800a9a6 <USBD_StdItfReq+0xc2>
          break;
 800a9a4:	bf00      	nop
      }
      break;
 800a9a6:	e004      	b.n	800a9b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fd15 	bl	800b3da <USBD_CtlError>
      break;
 800a9b0:	bf00      	nop
  }

  return ret;
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	889b      	ldrh	r3, [r3, #4]
 800a9ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9d8:	2b40      	cmp	r3, #64	@ 0x40
 800a9da:	d007      	beq.n	800a9ec <USBD_StdEPReq+0x30>
 800a9dc:	2b40      	cmp	r3, #64	@ 0x40
 800a9de:	f200 817f 	bhi.w	800ace0 <USBD_StdEPReq+0x324>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d02a      	beq.n	800aa3c <USBD_StdEPReq+0x80>
 800a9e6:	2b20      	cmp	r3, #32
 800a9e8:	f040 817a 	bne.w	800ace0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7ff fe85 	bl	800a700 <USBD_CoreFindEP>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9fa:	7b7b      	ldrb	r3, [r7, #13]
 800a9fc:	2bff      	cmp	r3, #255	@ 0xff
 800a9fe:	f000 8174 	beq.w	800acea <USBD_StdEPReq+0x32e>
 800aa02:	7b7b      	ldrb	r3, [r7, #13]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f040 8170 	bne.w	800acea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aa0a:	7b7a      	ldrb	r2, [r7, #13]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aa12:	7b7a      	ldrb	r2, [r7, #13]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	32ae      	adds	r2, #174	@ 0xae
 800aa18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 8163 	beq.w	800acea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aa24:	7b7a      	ldrb	r2, [r7, #13]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	32ae      	adds	r2, #174	@ 0xae
 800aa2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	4798      	blx	r3
 800aa36:	4603      	mov	r3, r0
 800aa38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa3a:	e156      	b.n	800acea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	785b      	ldrb	r3, [r3, #1]
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d008      	beq.n	800aa56 <USBD_StdEPReq+0x9a>
 800aa44:	2b03      	cmp	r3, #3
 800aa46:	f300 8145 	bgt.w	800acd4 <USBD_StdEPReq+0x318>
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f000 809b 	beq.w	800ab86 <USBD_StdEPReq+0x1ca>
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d03c      	beq.n	800aace <USBD_StdEPReq+0x112>
 800aa54:	e13e      	b.n	800acd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d002      	beq.n	800aa68 <USBD_StdEPReq+0xac>
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d016      	beq.n	800aa94 <USBD_StdEPReq+0xd8>
 800aa66:	e02c      	b.n	800aac2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00d      	beq.n	800aa8a <USBD_StdEPReq+0xce>
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
 800aa70:	2b80      	cmp	r3, #128	@ 0x80
 800aa72:	d00a      	beq.n	800aa8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 fa23 	bl	800bec4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa7e:	2180      	movs	r1, #128	@ 0x80
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f001 fa1f 	bl	800bec4 <USBD_LL_StallEP>
 800aa86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa88:	e020      	b.n	800aacc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fca4 	bl	800b3da <USBD_CtlError>
              break;
 800aa92:	e01b      	b.n	800aacc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	885b      	ldrh	r3, [r3, #2]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10e      	bne.n	800aaba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00b      	beq.n	800aaba <USBD_StdEPReq+0xfe>
 800aaa2:	7bbb      	ldrb	r3, [r7, #14]
 800aaa4:	2b80      	cmp	r3, #128	@ 0x80
 800aaa6:	d008      	beq.n	800aaba <USBD_StdEPReq+0xfe>
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	88db      	ldrh	r3, [r3, #6]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d104      	bne.n	800aaba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 fa05 	bl	800bec4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fd64 	bl	800b588 <USBD_CtlSendStatus>

              break;
 800aac0:	e004      	b.n	800aacc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fc88 	bl	800b3da <USBD_CtlError>
              break;
 800aaca:	bf00      	nop
          }
          break;
 800aacc:	e107      	b.n	800acde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d002      	beq.n	800aae0 <USBD_StdEPReq+0x124>
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d016      	beq.n	800ab0c <USBD_StdEPReq+0x150>
 800aade:	e04b      	b.n	800ab78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aae0:	7bbb      	ldrb	r3, [r7, #14]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00d      	beq.n	800ab02 <USBD_StdEPReq+0x146>
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
 800aae8:	2b80      	cmp	r3, #128	@ 0x80
 800aaea:	d00a      	beq.n	800ab02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f001 f9e7 	bl	800bec4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaf6:	2180      	movs	r1, #128	@ 0x80
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f001 f9e3 	bl	800bec4 <USBD_LL_StallEP>
 800aafe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab00:	e040      	b.n	800ab84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fc68 	bl	800b3da <USBD_CtlError>
              break;
 800ab0a:	e03b      	b.n	800ab84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	885b      	ldrh	r3, [r3, #2]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d136      	bne.n	800ab82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d004      	beq.n	800ab28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f001 fa04 	bl	800bf30 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 fd2d 	bl	800b588 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab2e:	7bbb      	ldrb	r3, [r7, #14]
 800ab30:	4619      	mov	r1, r3
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7ff fde4 	bl	800a700 <USBD_CoreFindEP>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab3c:	7b7b      	ldrb	r3, [r7, #13]
 800ab3e:	2bff      	cmp	r3, #255	@ 0xff
 800ab40:	d01f      	beq.n	800ab82 <USBD_StdEPReq+0x1c6>
 800ab42:	7b7b      	ldrb	r3, [r7, #13]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d11c      	bne.n	800ab82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ab48:	7b7a      	ldrb	r2, [r7, #13]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ab50:	7b7a      	ldrb	r2, [r7, #13]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	32ae      	adds	r2, #174	@ 0xae
 800ab56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d010      	beq.n	800ab82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab60:	7b7a      	ldrb	r2, [r7, #13]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	32ae      	adds	r2, #174	@ 0xae
 800ab66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	4798      	blx	r3
 800ab72:	4603      	mov	r3, r0
 800ab74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ab76:	e004      	b.n	800ab82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fc2d 	bl	800b3da <USBD_CtlError>
              break;
 800ab80:	e000      	b.n	800ab84 <USBD_StdEPReq+0x1c8>
              break;
 800ab82:	bf00      	nop
          }
          break;
 800ab84:	e0ab      	b.n	800acde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d002      	beq.n	800ab98 <USBD_StdEPReq+0x1dc>
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d032      	beq.n	800abfc <USBD_StdEPReq+0x240>
 800ab96:	e097      	b.n	800acc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d007      	beq.n	800abae <USBD_StdEPReq+0x1f2>
 800ab9e:	7bbb      	ldrb	r3, [r7, #14]
 800aba0:	2b80      	cmp	r3, #128	@ 0x80
 800aba2:	d004      	beq.n	800abae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fc17 	bl	800b3da <USBD_CtlError>
                break;
 800abac:	e091      	b.n	800acd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	da0b      	bge.n	800abce <USBD_StdEPReq+0x212>
 800abb6:	7bbb      	ldrb	r3, [r7, #14]
 800abb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abbc:	4613      	mov	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	3310      	adds	r3, #16
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	4413      	add	r3, r2
 800abca:	3304      	adds	r3, #4
 800abcc:	e00b      	b.n	800abe6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abd4:	4613      	mov	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	4413      	add	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	4413      	add	r3, r2
 800abe4:	3304      	adds	r3, #4
 800abe6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2200      	movs	r2, #0
 800abec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2202      	movs	r2, #2
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fc6d 	bl	800b4d4 <USBD_CtlSendData>
              break;
 800abfa:	e06a      	b.n	800acd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	da11      	bge.n	800ac28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
 800ac06:	f003 020f 	and.w	r2, r3, #15
 800ac0a:	6879      	ldr	r1, [r7, #4]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	440b      	add	r3, r1
 800ac16:	3324      	adds	r3, #36	@ 0x24
 800ac18:	881b      	ldrh	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d117      	bne.n	800ac4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac1e:	6839      	ldr	r1, [r7, #0]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fbda 	bl	800b3da <USBD_CtlError>
                  break;
 800ac26:	e054      	b.n	800acd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac28:	7bbb      	ldrb	r3, [r7, #14]
 800ac2a:	f003 020f 	and.w	r2, r3, #15
 800ac2e:	6879      	ldr	r1, [r7, #4]
 800ac30:	4613      	mov	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	440b      	add	r3, r1
 800ac3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac3e:	881b      	ldrh	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d104      	bne.n	800ac4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fbc7 	bl	800b3da <USBD_CtlError>
                  break;
 800ac4c:	e041      	b.n	800acd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	da0b      	bge.n	800ac6e <USBD_StdEPReq+0x2b2>
 800ac56:	7bbb      	ldrb	r3, [r7, #14]
 800ac58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	3310      	adds	r3, #16
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	4413      	add	r3, r2
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	e00b      	b.n	800ac86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac6e:	7bbb      	ldrb	r3, [r7, #14]
 800ac70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac74:	4613      	mov	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	4413      	add	r3, r2
 800ac84:	3304      	adds	r3, #4
 800ac86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d002      	beq.n	800ac94 <USBD_StdEPReq+0x2d8>
 800ac8e:	7bbb      	ldrb	r3, [r7, #14]
 800ac90:	2b80      	cmp	r3, #128	@ 0x80
 800ac92:	d103      	bne.n	800ac9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2200      	movs	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	e00e      	b.n	800acba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f001 f97b 	bl	800bf9c <USBD_LL_IsStallEP>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	2201      	movs	r2, #1
 800acb0:	601a      	str	r2, [r3, #0]
 800acb2:	e002      	b.n	800acba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2200      	movs	r2, #0
 800acb8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2202      	movs	r2, #2
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fc07 	bl	800b4d4 <USBD_CtlSendData>
              break;
 800acc6:	e004      	b.n	800acd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800acc8:	6839      	ldr	r1, [r7, #0]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fb85 	bl	800b3da <USBD_CtlError>
              break;
 800acd0:	bf00      	nop
          }
          break;
 800acd2:	e004      	b.n	800acde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fb7f 	bl	800b3da <USBD_CtlError>
          break;
 800acdc:	bf00      	nop
      }
      break;
 800acde:	e005      	b.n	800acec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ace0:	6839      	ldr	r1, [r7, #0]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 fb79 	bl	800b3da <USBD_CtlError>
      break;
 800ace8:	e000      	b.n	800acec <USBD_StdEPReq+0x330>
      break;
 800acea:	bf00      	nop
  }

  return ret;
 800acec:	7bfb      	ldrb	r3, [r7, #15]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad02:	2300      	movs	r3, #0
 800ad04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	885b      	ldrh	r3, [r3, #2]
 800ad12:	0a1b      	lsrs	r3, r3, #8
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	3b01      	subs	r3, #1
 800ad18:	2b0e      	cmp	r3, #14
 800ad1a:	f200 8152 	bhi.w	800afc2 <USBD_GetDescriptor+0x2ca>
 800ad1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad24 <USBD_GetDescriptor+0x2c>)
 800ad20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad24:	0800ad95 	.word	0x0800ad95
 800ad28:	0800adad 	.word	0x0800adad
 800ad2c:	0800aded 	.word	0x0800aded
 800ad30:	0800afc3 	.word	0x0800afc3
 800ad34:	0800afc3 	.word	0x0800afc3
 800ad38:	0800af63 	.word	0x0800af63
 800ad3c:	0800af8f 	.word	0x0800af8f
 800ad40:	0800afc3 	.word	0x0800afc3
 800ad44:	0800afc3 	.word	0x0800afc3
 800ad48:	0800afc3 	.word	0x0800afc3
 800ad4c:	0800afc3 	.word	0x0800afc3
 800ad50:	0800afc3 	.word	0x0800afc3
 800ad54:	0800afc3 	.word	0x0800afc3
 800ad58:	0800afc3 	.word	0x0800afc3
 800ad5c:	0800ad61 	.word	0x0800ad61
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad66:	69db      	ldr	r3, [r3, #28]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00b      	beq.n	800ad84 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	7c12      	ldrb	r2, [r2, #16]
 800ad78:	f107 0108 	add.w	r1, r7, #8
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4798      	blx	r3
 800ad80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad82:	e126      	b.n	800afd2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fb27 	bl	800b3da <USBD_CtlError>
        err++;
 800ad8c:	7afb      	ldrb	r3, [r7, #11]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	72fb      	strb	r3, [r7, #11]
      break;
 800ad92:	e11e      	b.n	800afd2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	7c12      	ldrb	r2, [r2, #16]
 800ada0:	f107 0108 	add.w	r1, r7, #8
 800ada4:	4610      	mov	r0, r2
 800ada6:	4798      	blx	r3
 800ada8:	60f8      	str	r0, [r7, #12]
      break;
 800adaa:	e112      	b.n	800afd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	7c1b      	ldrb	r3, [r3, #16]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10d      	bne.n	800add0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adbc:	f107 0208 	add.w	r2, r7, #8
 800adc0:	4610      	mov	r0, r2
 800adc2:	4798      	blx	r3
 800adc4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3301      	adds	r3, #1
 800adca:	2202      	movs	r2, #2
 800adcc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adce:	e100      	b.n	800afd2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800add6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add8:	f107 0208 	add.w	r2, r7, #8
 800addc:	4610      	mov	r0, r2
 800adde:	4798      	blx	r3
 800ade0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	3301      	adds	r3, #1
 800ade6:	2202      	movs	r2, #2
 800ade8:	701a      	strb	r2, [r3, #0]
      break;
 800adea:	e0f2      	b.n	800afd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	885b      	ldrh	r3, [r3, #2]
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	2b05      	cmp	r3, #5
 800adf4:	f200 80ac 	bhi.w	800af50 <USBD_GetDescriptor+0x258>
 800adf8:	a201      	add	r2, pc, #4	@ (adr r2, 800ae00 <USBD_GetDescriptor+0x108>)
 800adfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfe:	bf00      	nop
 800ae00:	0800ae19 	.word	0x0800ae19
 800ae04:	0800ae4d 	.word	0x0800ae4d
 800ae08:	0800ae81 	.word	0x0800ae81
 800ae0c:	0800aeb5 	.word	0x0800aeb5
 800ae10:	0800aee9 	.word	0x0800aee9
 800ae14:	0800af1d 	.word	0x0800af1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00b      	beq.n	800ae3c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	7c12      	ldrb	r2, [r2, #16]
 800ae30:	f107 0108 	add.w	r1, r7, #8
 800ae34:	4610      	mov	r0, r2
 800ae36:	4798      	blx	r3
 800ae38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae3a:	e091      	b.n	800af60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 facb 	bl	800b3da <USBD_CtlError>
            err++;
 800ae44:	7afb      	ldrb	r3, [r7, #11]
 800ae46:	3301      	adds	r3, #1
 800ae48:	72fb      	strb	r3, [r7, #11]
          break;
 800ae4a:	e089      	b.n	800af60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00b      	beq.n	800ae70 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	7c12      	ldrb	r2, [r2, #16]
 800ae64:	f107 0108 	add.w	r1, r7, #8
 800ae68:	4610      	mov	r0, r2
 800ae6a:	4798      	blx	r3
 800ae6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae6e:	e077      	b.n	800af60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae70:	6839      	ldr	r1, [r7, #0]
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fab1 	bl	800b3da <USBD_CtlError>
            err++;
 800ae78:	7afb      	ldrb	r3, [r7, #11]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae7e:	e06f      	b.n	800af60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00b      	beq.n	800aea4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	7c12      	ldrb	r2, [r2, #16]
 800ae98:	f107 0108 	add.w	r1, r7, #8
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	4798      	blx	r3
 800aea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aea2:	e05d      	b.n	800af60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fa97 	bl	800b3da <USBD_CtlError>
            err++;
 800aeac:	7afb      	ldrb	r3, [r7, #11]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	72fb      	strb	r3, [r7, #11]
          break;
 800aeb2:	e055      	b.n	800af60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00b      	beq.n	800aed8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	7c12      	ldrb	r2, [r2, #16]
 800aecc:	f107 0108 	add.w	r1, r7, #8
 800aed0:	4610      	mov	r0, r2
 800aed2:	4798      	blx	r3
 800aed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aed6:	e043      	b.n	800af60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fa7d 	bl	800b3da <USBD_CtlError>
            err++;
 800aee0:	7afb      	ldrb	r3, [r7, #11]
 800aee2:	3301      	adds	r3, #1
 800aee4:	72fb      	strb	r3, [r7, #11]
          break;
 800aee6:	e03b      	b.n	800af60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00b      	beq.n	800af0c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	7c12      	ldrb	r2, [r2, #16]
 800af00:	f107 0108 	add.w	r1, r7, #8
 800af04:	4610      	mov	r0, r2
 800af06:	4798      	blx	r3
 800af08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af0a:	e029      	b.n	800af60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af0c:	6839      	ldr	r1, [r7, #0]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fa63 	bl	800b3da <USBD_CtlError>
            err++;
 800af14:	7afb      	ldrb	r3, [r7, #11]
 800af16:	3301      	adds	r3, #1
 800af18:	72fb      	strb	r3, [r7, #11]
          break;
 800af1a:	e021      	b.n	800af60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00b      	beq.n	800af40 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	7c12      	ldrb	r2, [r2, #16]
 800af34:	f107 0108 	add.w	r1, r7, #8
 800af38:	4610      	mov	r0, r2
 800af3a:	4798      	blx	r3
 800af3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af3e:	e00f      	b.n	800af60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fa49 	bl	800b3da <USBD_CtlError>
            err++;
 800af48:	7afb      	ldrb	r3, [r7, #11]
 800af4a:	3301      	adds	r3, #1
 800af4c:	72fb      	strb	r3, [r7, #11]
          break;
 800af4e:	e007      	b.n	800af60 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800af50:	6839      	ldr	r1, [r7, #0]
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 fa41 	bl	800b3da <USBD_CtlError>
          err++;
 800af58:	7afb      	ldrb	r3, [r7, #11]
 800af5a:	3301      	adds	r3, #1
 800af5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800af5e:	bf00      	nop
      }
      break;
 800af60:	e037      	b.n	800afd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	7c1b      	ldrb	r3, [r3, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d109      	bne.n	800af7e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af72:	f107 0208 	add.w	r2, r7, #8
 800af76:	4610      	mov	r0, r2
 800af78:	4798      	blx	r3
 800af7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af7c:	e029      	b.n	800afd2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fa2a 	bl	800b3da <USBD_CtlError>
        err++;
 800af86:	7afb      	ldrb	r3, [r7, #11]
 800af88:	3301      	adds	r3, #1
 800af8a:	72fb      	strb	r3, [r7, #11]
      break;
 800af8c:	e021      	b.n	800afd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	7c1b      	ldrb	r3, [r3, #16]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10d      	bne.n	800afb2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af9e:	f107 0208 	add.w	r2, r7, #8
 800afa2:	4610      	mov	r0, r2
 800afa4:	4798      	blx	r3
 800afa6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	3301      	adds	r3, #1
 800afac:	2207      	movs	r2, #7
 800afae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afb0:	e00f      	b.n	800afd2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fa10 	bl	800b3da <USBD_CtlError>
        err++;
 800afba:	7afb      	ldrb	r3, [r7, #11]
 800afbc:	3301      	adds	r3, #1
 800afbe:	72fb      	strb	r3, [r7, #11]
      break;
 800afc0:	e007      	b.n	800afd2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fa08 	bl	800b3da <USBD_CtlError>
      err++;
 800afca:	7afb      	ldrb	r3, [r7, #11]
 800afcc:	3301      	adds	r3, #1
 800afce:	72fb      	strb	r3, [r7, #11]
      break;
 800afd0:	bf00      	nop
  }

  if (err != 0U)
 800afd2:	7afb      	ldrb	r3, [r7, #11]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d11e      	bne.n	800b016 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	88db      	ldrh	r3, [r3, #6]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d016      	beq.n	800b00e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800afe0:	893b      	ldrh	r3, [r7, #8]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00e      	beq.n	800b004 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	88da      	ldrh	r2, [r3, #6]
 800afea:	893b      	ldrh	r3, [r7, #8]
 800afec:	4293      	cmp	r3, r2
 800afee:	bf28      	it	cs
 800aff0:	4613      	movcs	r3, r2
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aff6:	893b      	ldrh	r3, [r7, #8]
 800aff8:	461a      	mov	r2, r3
 800affa:	68f9      	ldr	r1, [r7, #12]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fa69 	bl	800b4d4 <USBD_CtlSendData>
 800b002:	e009      	b.n	800b018 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b004:	6839      	ldr	r1, [r7, #0]
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f9e7 	bl	800b3da <USBD_CtlError>
 800b00c:	e004      	b.n	800b018 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 faba 	bl	800b588 <USBD_CtlSendStatus>
 800b014:	e000      	b.n	800b018 <USBD_GetDescriptor+0x320>
    return;
 800b016:	bf00      	nop
  }
}
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop

0800b020 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	889b      	ldrh	r3, [r3, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d131      	bne.n	800b096 <USBD_SetAddress+0x76>
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	88db      	ldrh	r3, [r3, #6]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d12d      	bne.n	800b096 <USBD_SetAddress+0x76>
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	885b      	ldrh	r3, [r3, #2]
 800b03e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b040:	d829      	bhi.n	800b096 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	885b      	ldrh	r3, [r3, #2]
 800b046:	b2db      	uxtb	r3, r3
 800b048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b04c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b054:	b2db      	uxtb	r3, r3
 800b056:	2b03      	cmp	r3, #3
 800b058:	d104      	bne.n	800b064 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b05a:	6839      	ldr	r1, [r7, #0]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f9bc 	bl	800b3da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b062:	e01d      	b.n	800b0a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	7bfa      	ldrb	r2, [r7, #15]
 800b068:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 ffbf 	bl	800bff4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fa86 	bl	800b588 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d004      	beq.n	800b08c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2202      	movs	r2, #2
 800b086:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08a:	e009      	b.n	800b0a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b094:	e004      	b.n	800b0a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f99e 	bl	800b3da <USBD_CtlError>
  }
}
 800b09e:	bf00      	nop
 800b0a0:	bf00      	nop
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	885b      	ldrh	r3, [r3, #2]
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	4b4e      	ldr	r3, [pc, #312]	@ (800b1f8 <USBD_SetConfig+0x150>)
 800b0be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0c0:	4b4d      	ldr	r3, [pc, #308]	@ (800b1f8 <USBD_SetConfig+0x150>)
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d905      	bls.n	800b0d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f985 	bl	800b3da <USBD_CtlError>
    return USBD_FAIL;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e08c      	b.n	800b1ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d002      	beq.n	800b0e6 <USBD_SetConfig+0x3e>
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d029      	beq.n	800b138 <USBD_SetConfig+0x90>
 800b0e4:	e075      	b.n	800b1d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b0e6:	4b44      	ldr	r3, [pc, #272]	@ (800b1f8 <USBD_SetConfig+0x150>)
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d020      	beq.n	800b130 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b0ee:	4b42      	ldr	r3, [pc, #264]	@ (800b1f8 <USBD_SetConfig+0x150>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0f8:	4b3f      	ldr	r3, [pc, #252]	@ (800b1f8 <USBD_SetConfig+0x150>)
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7fe ffb9 	bl	800a076 <USBD_SetClassConfig>
 800b104:	4603      	mov	r3, r0
 800b106:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b108:	7bfb      	ldrb	r3, [r7, #15]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d008      	beq.n	800b120 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f962 	bl	800b3da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2202      	movs	r2, #2
 800b11a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b11e:	e065      	b.n	800b1ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fa31 	bl	800b588 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2203      	movs	r2, #3
 800b12a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b12e:	e05d      	b.n	800b1ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fa29 	bl	800b588 <USBD_CtlSendStatus>
      break;
 800b136:	e059      	b.n	800b1ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b138:	4b2f      	ldr	r3, [pc, #188]	@ (800b1f8 <USBD_SetConfig+0x150>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d112      	bne.n	800b166 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2202      	movs	r2, #2
 800b144:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b148:	4b2b      	ldr	r3, [pc, #172]	@ (800b1f8 <USBD_SetConfig+0x150>)
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	461a      	mov	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b152:	4b29      	ldr	r3, [pc, #164]	@ (800b1f8 <USBD_SetConfig+0x150>)
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7fe ffa8 	bl	800a0ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fa12 	bl	800b588 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b164:	e042      	b.n	800b1ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b166:	4b24      	ldr	r3, [pc, #144]	@ (800b1f8 <USBD_SetConfig+0x150>)
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	429a      	cmp	r2, r3
 800b172:	d02a      	beq.n	800b1ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7fe ff96 	bl	800a0ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b182:	4b1d      	ldr	r3, [pc, #116]	@ (800b1f8 <USBD_SetConfig+0x150>)
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	461a      	mov	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b18c:	4b1a      	ldr	r3, [pc, #104]	@ (800b1f8 <USBD_SetConfig+0x150>)
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7fe ff6f 	bl	800a076 <USBD_SetClassConfig>
 800b198:	4603      	mov	r3, r0
 800b19a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b19c:	7bfb      	ldrb	r3, [r7, #15]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00f      	beq.n	800b1c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 f918 	bl	800b3da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7fe ff7b 	bl	800a0ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b1c0:	e014      	b.n	800b1ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f9e0 	bl	800b588 <USBD_CtlSendStatus>
      break;
 800b1c8:	e010      	b.n	800b1ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f9dc 	bl	800b588 <USBD_CtlSendStatus>
      break;
 800b1d0:	e00c      	b.n	800b1ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f900 	bl	800b3da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1da:	4b07      	ldr	r3, [pc, #28]	@ (800b1f8 <USBD_SetConfig+0x150>)
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	4619      	mov	r1, r3
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7fe ff64 	bl	800a0ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ea:	bf00      	nop
  }

  return ret;
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20000684 	.word	0x20000684

0800b1fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	88db      	ldrh	r3, [r3, #6]
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d004      	beq.n	800b218 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 f8e2 	bl	800b3da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b216:	e023      	b.n	800b260 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	2b02      	cmp	r3, #2
 800b222:	dc02      	bgt.n	800b22a <USBD_GetConfig+0x2e>
 800b224:	2b00      	cmp	r3, #0
 800b226:	dc03      	bgt.n	800b230 <USBD_GetConfig+0x34>
 800b228:	e015      	b.n	800b256 <USBD_GetConfig+0x5a>
 800b22a:	2b03      	cmp	r3, #3
 800b22c:	d00b      	beq.n	800b246 <USBD_GetConfig+0x4a>
 800b22e:	e012      	b.n	800b256 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	3308      	adds	r3, #8
 800b23a:	2201      	movs	r2, #1
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f948 	bl	800b4d4 <USBD_CtlSendData>
        break;
 800b244:	e00c      	b.n	800b260 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3304      	adds	r3, #4
 800b24a:	2201      	movs	r2, #1
 800b24c:	4619      	mov	r1, r3
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f940 	bl	800b4d4 <USBD_CtlSendData>
        break;
 800b254:	e004      	b.n	800b260 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f8be 	bl	800b3da <USBD_CtlError>
        break;
 800b25e:	bf00      	nop
}
 800b260:	bf00      	nop
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	3b01      	subs	r3, #1
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d81e      	bhi.n	800b2be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	88db      	ldrh	r3, [r3, #6]
 800b284:	2b02      	cmp	r3, #2
 800b286:	d004      	beq.n	800b292 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f8a5 	bl	800b3da <USBD_CtlError>
        break;
 800b290:	e01a      	b.n	800b2c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2201      	movs	r2, #1
 800b296:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f043 0202 	orr.w	r2, r3, #2
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	330c      	adds	r3, #12
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f90c 	bl	800b4d4 <USBD_CtlSendData>
      break;
 800b2bc:	e004      	b.n	800b2c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f88a 	bl	800b3da <USBD_CtlError>
      break;
 800b2c6:	bf00      	nop
  }
}
 800b2c8:	bf00      	nop
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	885b      	ldrh	r3, [r3, #2]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d107      	bne.n	800b2f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f94c 	bl	800b588 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b2f0:	e013      	b.n	800b31a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	885b      	ldrh	r3, [r3, #2]
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d10b      	bne.n	800b312 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	889b      	ldrh	r3, [r3, #4]
 800b2fe:	0a1b      	lsrs	r3, r3, #8
 800b300:	b29b      	uxth	r3, r3
 800b302:	b2da      	uxtb	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f93c 	bl	800b588 <USBD_CtlSendStatus>
}
 800b310:	e003      	b.n	800b31a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f860 	bl	800b3da <USBD_CtlError>
}
 800b31a:	bf00      	nop
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b082      	sub	sp, #8
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b332:	b2db      	uxtb	r3, r3
 800b334:	3b01      	subs	r3, #1
 800b336:	2b02      	cmp	r3, #2
 800b338:	d80b      	bhi.n	800b352 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	885b      	ldrh	r3, [r3, #2]
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d10c      	bne.n	800b35c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f91c 	bl	800b588 <USBD_CtlSendStatus>
      }
      break;
 800b350:	e004      	b.n	800b35c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 f840 	bl	800b3da <USBD_CtlError>
      break;
 800b35a:	e000      	b.n	800b35e <USBD_ClrFeature+0x3c>
      break;
 800b35c:	bf00      	nop
  }
}
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	781a      	ldrb	r2, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3301      	adds	r3, #1
 800b380:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	781a      	ldrb	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	3301      	adds	r3, #1
 800b38e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f7ff fa16 	bl	800a7c2 <SWAPBYTE>
 800b396:	4603      	mov	r3, r0
 800b398:	461a      	mov	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f7ff fa09 	bl	800a7c2 <SWAPBYTE>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f7ff f9fc 	bl	800a7c2 <SWAPBYTE>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	80da      	strh	r2, [r3, #6]
}
 800b3d2:	bf00      	nop
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3e4:	2180      	movs	r1, #128	@ 0x80
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fd6c 	bl	800bec4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fd68 	bl	800bec4 <USBD_LL_StallEP>
}
 800b3f4:	bf00      	nop
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b408:	2300      	movs	r3, #0
 800b40a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d042      	beq.n	800b498 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b416:	6938      	ldr	r0, [r7, #16]
 800b418:	f000 f842 	bl	800b4a0 <USBD_GetLen>
 800b41c:	4603      	mov	r3, r0
 800b41e:	3301      	adds	r3, #1
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b426:	d808      	bhi.n	800b43a <USBD_GetString+0x3e>
 800b428:	6938      	ldr	r0, [r7, #16]
 800b42a:	f000 f839 	bl	800b4a0 <USBD_GetLen>
 800b42e:	4603      	mov	r3, r0
 800b430:	3301      	adds	r3, #1
 800b432:	b29b      	uxth	r3, r3
 800b434:	005b      	lsls	r3, r3, #1
 800b436:	b29a      	uxth	r2, r3
 800b438:	e001      	b.n	800b43e <USBD_GetString+0x42>
 800b43a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	4413      	add	r3, r2
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	7812      	ldrb	r2, [r2, #0]
 800b44c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b44e:	7dfb      	ldrb	r3, [r7, #23]
 800b450:	3301      	adds	r3, #1
 800b452:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	4413      	add	r3, r2
 800b45a:	2203      	movs	r2, #3
 800b45c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	3301      	adds	r3, #1
 800b462:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b464:	e013      	b.n	800b48e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b466:	7dfb      	ldrb	r3, [r7, #23]
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	4413      	add	r3, r2
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	7812      	ldrb	r2, [r2, #0]
 800b470:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	3301      	adds	r3, #1
 800b476:	613b      	str	r3, [r7, #16]
    idx++;
 800b478:	7dfb      	ldrb	r3, [r7, #23]
 800b47a:	3301      	adds	r3, #1
 800b47c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	4413      	add	r3, r2
 800b484:	2200      	movs	r2, #0
 800b486:	701a      	strb	r2, [r3, #0]
    idx++;
 800b488:	7dfb      	ldrb	r3, [r7, #23]
 800b48a:	3301      	adds	r3, #1
 800b48c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1e7      	bne.n	800b466 <USBD_GetString+0x6a>
 800b496:	e000      	b.n	800b49a <USBD_GetString+0x9e>
    return;
 800b498:	bf00      	nop
  }
}
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b4b0:	e005      	b.n	800b4be <USBD_GetLen+0x1e>
  {
    len++;
 800b4b2:	7bfb      	ldrb	r3, [r7, #15]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1f5      	bne.n	800b4b2 <USBD_GetLen+0x12>
  }

  return len;
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3714      	adds	r7, #20
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f000 fdb0 	bl	800c060 <USBD_LL_Transmit>

  return USBD_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b084      	sub	sp, #16
 800b50e:	af00      	add	r7, sp, #0
 800b510:	60f8      	str	r0, [r7, #12]
 800b512:	60b9      	str	r1, [r7, #8]
 800b514:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68ba      	ldr	r2, [r7, #8]
 800b51a:	2100      	movs	r1, #0
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 fd9f 	bl	800c060 <USBD_LL_Transmit>

  return USBD_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2203      	movs	r2, #3
 800b53c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	2100      	movs	r1, #0
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	f000 fdba 	bl	800c0d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	60f8      	str	r0, [r7, #12]
 800b56e:	60b9      	str	r1, [r7, #8]
 800b570:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	2100      	movs	r1, #0
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f000 fda9 	bl	800c0d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2204      	movs	r2, #4
 800b594:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b598:	2300      	movs	r3, #0
 800b59a:	2200      	movs	r2, #0
 800b59c:	2100      	movs	r1, #0
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fd5e 	bl	800c060 <USBD_LL_Transmit>

  return USBD_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b082      	sub	sp, #8
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2205      	movs	r2, #5
 800b5ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5be:	2300      	movs	r3, #0
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fd83 	bl	800c0d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b5d8:	2200      	movs	r2, #0
 800b5da:	4912      	ldr	r1, [pc, #72]	@ (800b624 <MX_USB_DEVICE_Init+0x50>)
 800b5dc:	4812      	ldr	r0, [pc, #72]	@ (800b628 <MX_USB_DEVICE_Init+0x54>)
 800b5de:	f7fe fccd 	bl	8009f7c <USBD_Init>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b5e8:	f7f5 ff10 	bl	800140c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b5ec:	490f      	ldr	r1, [pc, #60]	@ (800b62c <MX_USB_DEVICE_Init+0x58>)
 800b5ee:	480e      	ldr	r0, [pc, #56]	@ (800b628 <MX_USB_DEVICE_Init+0x54>)
 800b5f0:	f7fe fcf4 	bl	8009fdc <USBD_RegisterClass>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b5fa:	f7f5 ff07 	bl	800140c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b5fe:	490c      	ldr	r1, [pc, #48]	@ (800b630 <MX_USB_DEVICE_Init+0x5c>)
 800b600:	4809      	ldr	r0, [pc, #36]	@ (800b628 <MX_USB_DEVICE_Init+0x54>)
 800b602:	f7fe fc2b 	bl	8009e5c <USBD_CDC_RegisterInterface>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d001      	beq.n	800b610 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b60c:	f7f5 fefe 	bl	800140c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b610:	4805      	ldr	r0, [pc, #20]	@ (800b628 <MX_USB_DEVICE_Init+0x54>)
 800b612:	f7fe fd19 	bl	800a048 <USBD_Start>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b61c:	f7f5 fef6 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b620:	bf00      	nop
 800b622:	bd80      	pop	{r7, pc}
 800b624:	20000148 	.word	0x20000148
 800b628:	20000688 	.word	0x20000688
 800b62c:	200000b4 	.word	0x200000b4
 800b630:	20000134 	.word	0x20000134

0800b634 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b638:	2200      	movs	r2, #0
 800b63a:	4905      	ldr	r1, [pc, #20]	@ (800b650 <CDC_Init_FS+0x1c>)
 800b63c:	4805      	ldr	r0, [pc, #20]	@ (800b654 <CDC_Init_FS+0x20>)
 800b63e:	f7fe fc27 	bl	8009e90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b642:	4905      	ldr	r1, [pc, #20]	@ (800b658 <CDC_Init_FS+0x24>)
 800b644:	4803      	ldr	r0, [pc, #12]	@ (800b654 <CDC_Init_FS+0x20>)
 800b646:	f7fe fc45 	bl	8009ed4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b64a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	20001164 	.word	0x20001164
 800b654:	20000688 	.word	0x20000688
 800b658:	20000964 	.word	0x20000964

0800b65c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b65c:	b480      	push	{r7}
 800b65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b660:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b662:	4618      	mov	r0, r3
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	4603      	mov	r3, r0
 800b674:	6039      	str	r1, [r7, #0]
 800b676:	71fb      	strb	r3, [r7, #7]
 800b678:	4613      	mov	r3, r2
 800b67a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b67c:	79fb      	ldrb	r3, [r7, #7]
 800b67e:	2b23      	cmp	r3, #35	@ 0x23
 800b680:	d84a      	bhi.n	800b718 <CDC_Control_FS+0xac>
 800b682:	a201      	add	r2, pc, #4	@ (adr r2, 800b688 <CDC_Control_FS+0x1c>)
 800b684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b688:	0800b719 	.word	0x0800b719
 800b68c:	0800b719 	.word	0x0800b719
 800b690:	0800b719 	.word	0x0800b719
 800b694:	0800b719 	.word	0x0800b719
 800b698:	0800b719 	.word	0x0800b719
 800b69c:	0800b719 	.word	0x0800b719
 800b6a0:	0800b719 	.word	0x0800b719
 800b6a4:	0800b719 	.word	0x0800b719
 800b6a8:	0800b719 	.word	0x0800b719
 800b6ac:	0800b719 	.word	0x0800b719
 800b6b0:	0800b719 	.word	0x0800b719
 800b6b4:	0800b719 	.word	0x0800b719
 800b6b8:	0800b719 	.word	0x0800b719
 800b6bc:	0800b719 	.word	0x0800b719
 800b6c0:	0800b719 	.word	0x0800b719
 800b6c4:	0800b719 	.word	0x0800b719
 800b6c8:	0800b719 	.word	0x0800b719
 800b6cc:	0800b719 	.word	0x0800b719
 800b6d0:	0800b719 	.word	0x0800b719
 800b6d4:	0800b719 	.word	0x0800b719
 800b6d8:	0800b719 	.word	0x0800b719
 800b6dc:	0800b719 	.word	0x0800b719
 800b6e0:	0800b719 	.word	0x0800b719
 800b6e4:	0800b719 	.word	0x0800b719
 800b6e8:	0800b719 	.word	0x0800b719
 800b6ec:	0800b719 	.word	0x0800b719
 800b6f0:	0800b719 	.word	0x0800b719
 800b6f4:	0800b719 	.word	0x0800b719
 800b6f8:	0800b719 	.word	0x0800b719
 800b6fc:	0800b719 	.word	0x0800b719
 800b700:	0800b719 	.word	0x0800b719
 800b704:	0800b719 	.word	0x0800b719
 800b708:	0800b719 	.word	0x0800b719
 800b70c:	0800b719 	.word	0x0800b719
 800b710:	0800b719 	.word	0x0800b719
 800b714:	0800b719 	.word	0x0800b719
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b718:	bf00      	nop
  }

  return (USBD_OK);
 800b71a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b732:	6879      	ldr	r1, [r7, #4]
 800b734:	4805      	ldr	r0, [pc, #20]	@ (800b74c <CDC_Receive_FS+0x24>)
 800b736:	f7fe fbcd 	bl	8009ed4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b73a:	4804      	ldr	r0, [pc, #16]	@ (800b74c <CDC_Receive_FS+0x24>)
 800b73c:	f7fe fbe8 	bl	8009f10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b740:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b742:	4618      	mov	r0, r3
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	20000688 	.word	0x20000688

0800b750 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b750:	b480      	push	{r7}
 800b752:	b087      	sub	sp, #28
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	4613      	mov	r3, r2
 800b75c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b762:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b766:	4618      	mov	r0, r3
 800b768:	371c      	adds	r7, #28
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
	...

0800b774 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	4603      	mov	r3, r0
 800b77c:	6039      	str	r1, [r7, #0]
 800b77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	2212      	movs	r2, #18
 800b784:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b786:	4b03      	ldr	r3, [pc, #12]	@ (800b794 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b788:	4618      	mov	r0, r3
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	20000168 	.word	0x20000168

0800b798 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	6039      	str	r1, [r7, #0]
 800b7a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	2204      	movs	r2, #4
 800b7a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b7aa:	4b03      	ldr	r3, [pc, #12]	@ (800b7b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr
 800b7b8:	20000188 	.word	0x20000188

0800b7bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	6039      	str	r1, [r7, #0]
 800b7c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7c8:	79fb      	ldrb	r3, [r7, #7]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d105      	bne.n	800b7da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	4907      	ldr	r1, [pc, #28]	@ (800b7f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b7d2:	4808      	ldr	r0, [pc, #32]	@ (800b7f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b7d4:	f7ff fe12 	bl	800b3fc <USBD_GetString>
 800b7d8:	e004      	b.n	800b7e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7da:	683a      	ldr	r2, [r7, #0]
 800b7dc:	4904      	ldr	r1, [pc, #16]	@ (800b7f0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b7de:	4805      	ldr	r0, [pc, #20]	@ (800b7f4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b7e0:	f7ff fe0c 	bl	800b3fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7e4:	4b02      	ldr	r3, [pc, #8]	@ (800b7f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	20001964 	.word	0x20001964
 800b7f4:	080113a8 	.word	0x080113a8

0800b7f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	6039      	str	r1, [r7, #0]
 800b802:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	4904      	ldr	r1, [pc, #16]	@ (800b818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b808:	4804      	ldr	r0, [pc, #16]	@ (800b81c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b80a:	f7ff fdf7 	bl	800b3fc <USBD_GetString>
  return USBD_StrDesc;
 800b80e:	4b02      	ldr	r3, [pc, #8]	@ (800b818 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	20001964 	.word	0x20001964
 800b81c:	080113c0 	.word	0x080113c0

0800b820 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	6039      	str	r1, [r7, #0]
 800b82a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	221a      	movs	r2, #26
 800b830:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b832:	f000 f855 	bl	800b8e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b836:	4b02      	ldr	r3, [pc, #8]	@ (800b840 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	2000018c 	.word	0x2000018c

0800b844 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	6039      	str	r1, [r7, #0]
 800b84e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b850:	79fb      	ldrb	r3, [r7, #7]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d105      	bne.n	800b862 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	4907      	ldr	r1, [pc, #28]	@ (800b878 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b85a:	4808      	ldr	r0, [pc, #32]	@ (800b87c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b85c:	f7ff fdce 	bl	800b3fc <USBD_GetString>
 800b860:	e004      	b.n	800b86c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	4904      	ldr	r1, [pc, #16]	@ (800b878 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b866:	4805      	ldr	r0, [pc, #20]	@ (800b87c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b868:	f7ff fdc8 	bl	800b3fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b86c:	4b02      	ldr	r3, [pc, #8]	@ (800b878 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20001964 	.word	0x20001964
 800b87c:	080113d4 	.word	0x080113d4

0800b880 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	4603      	mov	r3, r0
 800b888:	6039      	str	r1, [r7, #0]
 800b88a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b88c:	79fb      	ldrb	r3, [r7, #7]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d105      	bne.n	800b89e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	4907      	ldr	r1, [pc, #28]	@ (800b8b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b896:	4808      	ldr	r0, [pc, #32]	@ (800b8b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b898:	f7ff fdb0 	bl	800b3fc <USBD_GetString>
 800b89c:	e004      	b.n	800b8a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b89e:	683a      	ldr	r2, [r7, #0]
 800b8a0:	4904      	ldr	r1, [pc, #16]	@ (800b8b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8a2:	4805      	ldr	r0, [pc, #20]	@ (800b8b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8a4:	f7ff fdaa 	bl	800b3fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8a8:	4b02      	ldr	r3, [pc, #8]	@ (800b8b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20001964 	.word	0x20001964
 800b8b8:	080113e0 	.word	0x080113e0

0800b8bc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	6039      	str	r1, [r7, #0]
 800b8c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	220c      	movs	r2, #12
 800b8cc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b8ce:	4b03      	ldr	r3, [pc, #12]	@ (800b8dc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	2000017c 	.word	0x2000017c

0800b8e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b924 <Get_SerialNum+0x44>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b8ec:	4b0e      	ldr	r3, [pc, #56]	@ (800b928 <Get_SerialNum+0x48>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b8f2:	4b0e      	ldr	r3, [pc, #56]	@ (800b92c <Get_SerialNum+0x4c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d009      	beq.n	800b91a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b906:	2208      	movs	r2, #8
 800b908:	4909      	ldr	r1, [pc, #36]	@ (800b930 <Get_SerialNum+0x50>)
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f000 f814 	bl	800b938 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b910:	2204      	movs	r2, #4
 800b912:	4908      	ldr	r1, [pc, #32]	@ (800b934 <Get_SerialNum+0x54>)
 800b914:	68b8      	ldr	r0, [r7, #8]
 800b916:	f000 f80f 	bl	800b938 <IntToUnicode>
  }
}
 800b91a:	bf00      	nop
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	1fff7590 	.word	0x1fff7590
 800b928:	1fff7594 	.word	0x1fff7594
 800b92c:	1fff7598 	.word	0x1fff7598
 800b930:	2000018e 	.word	0x2000018e
 800b934:	2000019e 	.word	0x2000019e

0800b938 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b938:	b480      	push	{r7}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	4613      	mov	r3, r2
 800b944:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b946:	2300      	movs	r3, #0
 800b948:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b94a:	2300      	movs	r3, #0
 800b94c:	75fb      	strb	r3, [r7, #23]
 800b94e:	e027      	b.n	800b9a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	0f1b      	lsrs	r3, r3, #28
 800b954:	2b09      	cmp	r3, #9
 800b956:	d80b      	bhi.n	800b970 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	0f1b      	lsrs	r3, r3, #28
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	7dfb      	ldrb	r3, [r7, #23]
 800b960:	005b      	lsls	r3, r3, #1
 800b962:	4619      	mov	r1, r3
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	440b      	add	r3, r1
 800b968:	3230      	adds	r2, #48	@ 0x30
 800b96a:	b2d2      	uxtb	r2, r2
 800b96c:	701a      	strb	r2, [r3, #0]
 800b96e:	e00a      	b.n	800b986 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	0f1b      	lsrs	r3, r3, #28
 800b974:	b2da      	uxtb	r2, r3
 800b976:	7dfb      	ldrb	r3, [r7, #23]
 800b978:	005b      	lsls	r3, r3, #1
 800b97a:	4619      	mov	r1, r3
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	440b      	add	r3, r1
 800b980:	3237      	adds	r2, #55	@ 0x37
 800b982:	b2d2      	uxtb	r2, r2
 800b984:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	011b      	lsls	r3, r3, #4
 800b98a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	005b      	lsls	r3, r3, #1
 800b990:	3301      	adds	r3, #1
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	4413      	add	r3, r2
 800b996:	2200      	movs	r2, #0
 800b998:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
 800b99c:	3301      	adds	r3, #1
 800b99e:	75fb      	strb	r3, [r7, #23]
 800b9a0:	7dfa      	ldrb	r2, [r7, #23]
 800b9a2:	79fb      	ldrb	r3, [r7, #7]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d3d3      	bcc.n	800b950 <IntToUnicode+0x18>
  }
}
 800b9a8:	bf00      	nop
 800b9aa:	bf00      	nop
 800b9ac:	371c      	adds	r7, #28
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
	...

0800b9b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b0ac      	sub	sp, #176	@ 0xb0
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	601a      	str	r2, [r3, #0]
 800b9c8:	605a      	str	r2, [r3, #4]
 800b9ca:	609a      	str	r2, [r3, #8]
 800b9cc:	60da      	str	r2, [r3, #12]
 800b9ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b9d0:	f107 0314 	add.w	r3, r7, #20
 800b9d4:	2288      	movs	r2, #136	@ 0x88
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f001 fc22 	bl	800d222 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9e6:	d173      	bne.n	800bad0 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b9e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b9ec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b9ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b9f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800b9fe:	2318      	movs	r3, #24
 800ba00:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800ba02:	2307      	movs	r3, #7
 800ba04:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800ba06:	2302      	movs	r3, #2
 800ba08:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800ba0a:	2302      	movs	r3, #2
 800ba0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800ba0e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ba12:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ba14:	f107 0314 	add.w	r3, r7, #20
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7f8 ffcf 	bl	80049bc <HAL_RCCEx_PeriphCLKConfig>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d001      	beq.n	800ba28 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800ba24:	f7f5 fcf2 	bl	800140c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba28:	4b2b      	ldr	r3, [pc, #172]	@ (800bad8 <HAL_PCD_MspInit+0x120>)
 800ba2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba2c:	4a2a      	ldr	r2, [pc, #168]	@ (800bad8 <HAL_PCD_MspInit+0x120>)
 800ba2e:	f043 0301 	orr.w	r3, r3, #1
 800ba32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ba34:	4b28      	ldr	r3, [pc, #160]	@ (800bad8 <HAL_PCD_MspInit+0x120>)
 800ba36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	613b      	str	r3, [r7, #16]
 800ba3e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ba40:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ba44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba48:	2302      	movs	r3, #2
 800ba4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba54:	2303      	movs	r3, #3
 800ba56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba5a:	230a      	movs	r3, #10
 800ba5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800ba64:	4619      	mov	r1, r3
 800ba66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ba6a:	f7f6 fdb1 	bl	80025d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bad8 <HAL_PCD_MspInit+0x120>)
 800ba70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba72:	4a19      	ldr	r2, [pc, #100]	@ (800bad8 <HAL_PCD_MspInit+0x120>)
 800ba74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ba78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ba7a:	4b17      	ldr	r3, [pc, #92]	@ (800bad8 <HAL_PCD_MspInit+0x120>)
 800ba7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba82:	60fb      	str	r3, [r7, #12]
 800ba84:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba86:	4b14      	ldr	r3, [pc, #80]	@ (800bad8 <HAL_PCD_MspInit+0x120>)
 800ba88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d114      	bne.n	800babc <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba92:	4b11      	ldr	r3, [pc, #68]	@ (800bad8 <HAL_PCD_MspInit+0x120>)
 800ba94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba96:	4a10      	ldr	r2, [pc, #64]	@ (800bad8 <HAL_PCD_MspInit+0x120>)
 800ba98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba9c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba9e:	4b0e      	ldr	r3, [pc, #56]	@ (800bad8 <HAL_PCD_MspInit+0x120>)
 800baa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800baa6:	60bb      	str	r3, [r7, #8]
 800baa8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800baaa:	f7f8 f977 	bl	8003d9c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800baae:	4b0a      	ldr	r3, [pc, #40]	@ (800bad8 <HAL_PCD_MspInit+0x120>)
 800bab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bab2:	4a09      	ldr	r2, [pc, #36]	@ (800bad8 <HAL_PCD_MspInit+0x120>)
 800bab4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bab8:	6593      	str	r3, [r2, #88]	@ 0x58
 800baba:	e001      	b.n	800bac0 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800babc:	f7f8 f96e 	bl	8003d9c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bac0:	2200      	movs	r2, #0
 800bac2:	2100      	movs	r1, #0
 800bac4:	2043      	movs	r0, #67	@ 0x43
 800bac6:	f7f6 fcce 	bl	8002466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800baca:	2043      	movs	r0, #67	@ 0x43
 800bacc:	f7f6 fce7 	bl	800249e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bad0:	bf00      	nop
 800bad2:	37b0      	adds	r7, #176	@ 0xb0
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	40021000 	.word	0x40021000

0800badc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800baf0:	4619      	mov	r1, r3
 800baf2:	4610      	mov	r0, r2
 800baf4:	f7fe faf5 	bl	800a0e2 <USBD_LL_SetupStage>
}
 800baf8:	bf00      	nop
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bb12:	78fa      	ldrb	r2, [r7, #3]
 800bb14:	6879      	ldr	r1, [r7, #4]
 800bb16:	4613      	mov	r3, r2
 800bb18:	00db      	lsls	r3, r3, #3
 800bb1a:	4413      	add	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	440b      	add	r3, r1
 800bb20:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	78fb      	ldrb	r3, [r7, #3]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	f7fe fb2f 	bl	800a18c <USBD_LL_DataOutStage>
}
 800bb2e:	bf00      	nop
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b082      	sub	sp, #8
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
 800bb3e:	460b      	mov	r3, r1
 800bb40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bb48:	78fa      	ldrb	r2, [r7, #3]
 800bb4a:	6879      	ldr	r1, [r7, #4]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	00db      	lsls	r3, r3, #3
 800bb50:	4413      	add	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	440b      	add	r3, r1
 800bb56:	3320      	adds	r3, #32
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	78fb      	ldrb	r3, [r7, #3]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	f7fe fbc8 	bl	800a2f2 <USBD_LL_DataInStage>
}
 800bb62:	bf00      	nop
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b082      	sub	sp, #8
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7fe fd02 	bl	800a582 <USBD_LL_SOF>
}
 800bb7e:	bf00      	nop
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b084      	sub	sp, #16
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	79db      	ldrb	r3, [r3, #7]
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d001      	beq.n	800bb9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bb9a:	f7f5 fc37 	bl	800140c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bba4:	7bfa      	ldrb	r2, [r7, #15]
 800bba6:	4611      	mov	r1, r2
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7fe fca6 	bl	800a4fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fe fc4e 	bl	800a456 <USBD_LL_Reset>
}
 800bbba:	bf00      	nop
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
	...

0800bbc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	6812      	ldr	r2, [r2, #0]
 800bbda:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bbde:	f043 0301 	orr.w	r3, r3, #1
 800bbe2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fe fc95 	bl	800a51a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	7adb      	ldrb	r3, [r3, #11]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d005      	beq.n	800bc04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbf8:	4b04      	ldr	r3, [pc, #16]	@ (800bc0c <HAL_PCD_SuspendCallback+0x48>)
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	4a03      	ldr	r2, [pc, #12]	@ (800bc0c <HAL_PCD_SuspendCallback+0x48>)
 800bbfe:	f043 0306 	orr.w	r3, r3, #6
 800bc02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc04:	bf00      	nop
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	e000ed00 	.word	0xe000ed00

0800bc10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	6812      	ldr	r2, [r2, #0]
 800bc26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc2a:	f023 0301 	bic.w	r3, r3, #1
 800bc2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	7adb      	ldrb	r3, [r3, #11]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d007      	beq.n	800bc48 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc38:	4b08      	ldr	r3, [pc, #32]	@ (800bc5c <HAL_PCD_ResumeCallback+0x4c>)
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	4a07      	ldr	r2, [pc, #28]	@ (800bc5c <HAL_PCD_ResumeCallback+0x4c>)
 800bc3e:	f023 0306 	bic.w	r3, r3, #6
 800bc42:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bc44:	f000 faf6 	bl	800c234 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fe fc7f 	bl	800a552 <USBD_LL_Resume>
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	e000ed00 	.word	0xe000ed00

0800bc60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc72:	78fa      	ldrb	r2, [r7, #3]
 800bc74:	4611      	mov	r1, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fe fcd5 	bl	800a626 <USBD_LL_IsoOUTIncomplete>
}
 800bc7c:	bf00      	nop
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc96:	78fa      	ldrb	r2, [r7, #3]
 800bc98:	4611      	mov	r1, r2
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7fe fc91 	bl	800a5c2 <USBD_LL_IsoINIncomplete>
}
 800bca0:	bf00      	nop
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fe fce7 	bl	800a68a <USBD_LL_DevConnected>
}
 800bcbc:	bf00      	nop
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fe fce4 	bl	800a6a0 <USBD_LL_DevDisconnected>
}
 800bcd8:	bf00      	nop
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d13c      	bne.n	800bd6a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bcf0:	4a20      	ldr	r2, [pc, #128]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a1e      	ldr	r2, [pc, #120]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bcfc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd00:	4b1c      	ldr	r3, [pc, #112]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bd06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bd08:	4b1a      	ldr	r3, [pc, #104]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd0a:	2206      	movs	r2, #6
 800bd0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bd0e:	4b19      	ldr	r3, [pc, #100]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd10:	2202      	movs	r2, #2
 800bd12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bd14:	4b17      	ldr	r3, [pc, #92]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd16:	2202      	movs	r2, #2
 800bd18:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd1a:	4b16      	ldr	r3, [pc, #88]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bd20:	4b14      	ldr	r3, [pc, #80]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd22:	2200      	movs	r2, #0
 800bd24:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bd26:	4b13      	ldr	r3, [pc, #76]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800bd2c:	4b11      	ldr	r3, [pc, #68]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bd32:	4b10      	ldr	r3, [pc, #64]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bd38:	4b0e      	ldr	r3, [pc, #56]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bd3e:	480d      	ldr	r0, [pc, #52]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd40:	f7f6 fe22 	bl	8002988 <HAL_PCD_Init>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d001      	beq.n	800bd4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bd4a:	f7f5 fb5f 	bl	800140c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bd4e:	2180      	movs	r1, #128	@ 0x80
 800bd50:	4808      	ldr	r0, [pc, #32]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd52:	f7f7 ff7a 	bl	8003c4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bd56:	2240      	movs	r2, #64	@ 0x40
 800bd58:	2100      	movs	r1, #0
 800bd5a:	4806      	ldr	r0, [pc, #24]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd5c:	f7f7 ff2e 	bl	8003bbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bd60:	2280      	movs	r2, #128	@ 0x80
 800bd62:	2101      	movs	r1, #1
 800bd64:	4803      	ldr	r0, [pc, #12]	@ (800bd74 <USBD_LL_Init+0x94>)
 800bd66:	f7f7 ff29 	bl	8003bbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3708      	adds	r7, #8
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	20001b64 	.word	0x20001b64

0800bd78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd84:	2300      	movs	r3, #0
 800bd86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7f6 ff09 	bl	8002ba6 <HAL_PCD_Start>
 800bd94:	4603      	mov	r3, r0
 800bd96:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd98:	7bbb      	ldrb	r3, [r7, #14]
 800bd9a:	2b03      	cmp	r3, #3
 800bd9c:	d816      	bhi.n	800bdcc <USBD_LL_Start+0x54>
 800bd9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bda4 <USBD_LL_Start+0x2c>)
 800bda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda4:	0800bdb5 	.word	0x0800bdb5
 800bda8:	0800bdbb 	.word	0x0800bdbb
 800bdac:	0800bdc1 	.word	0x0800bdc1
 800bdb0:	0800bdc7 	.word	0x0800bdc7
    case HAL_OK :
      usb_status = USBD_OK;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb8:	e00b      	b.n	800bdd2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdba:	2303      	movs	r3, #3
 800bdbc:	73fb      	strb	r3, [r7, #15]
    break;
 800bdbe:	e008      	b.n	800bdd2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc4:	e005      	b.n	800bdd2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdca:	e002      	b.n	800bdd2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd0:	bf00      	nop
  }
  return usb_status;
 800bdd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	4608      	mov	r0, r1
 800bde6:	4611      	mov	r1, r2
 800bde8:	461a      	mov	r2, r3
 800bdea:	4603      	mov	r3, r0
 800bdec:	70fb      	strb	r3, [r7, #3]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	70bb      	strb	r3, [r7, #2]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800be04:	78bb      	ldrb	r3, [r7, #2]
 800be06:	883a      	ldrh	r2, [r7, #0]
 800be08:	78f9      	ldrb	r1, [r7, #3]
 800be0a:	f7f7 fbb5 	bl	8003578 <HAL_PCD_EP_Open>
 800be0e:	4603      	mov	r3, r0
 800be10:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be12:	7bbb      	ldrb	r3, [r7, #14]
 800be14:	2b03      	cmp	r3, #3
 800be16:	d817      	bhi.n	800be48 <USBD_LL_OpenEP+0x6c>
 800be18:	a201      	add	r2, pc, #4	@ (adr r2, 800be20 <USBD_LL_OpenEP+0x44>)
 800be1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1e:	bf00      	nop
 800be20:	0800be31 	.word	0x0800be31
 800be24:	0800be37 	.word	0x0800be37
 800be28:	0800be3d 	.word	0x0800be3d
 800be2c:	0800be43 	.word	0x0800be43
    case HAL_OK :
      usb_status = USBD_OK;
 800be30:	2300      	movs	r3, #0
 800be32:	73fb      	strb	r3, [r7, #15]
    break;
 800be34:	e00b      	b.n	800be4e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be36:	2303      	movs	r3, #3
 800be38:	73fb      	strb	r3, [r7, #15]
    break;
 800be3a:	e008      	b.n	800be4e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be3c:	2301      	movs	r3, #1
 800be3e:	73fb      	strb	r3, [r7, #15]
    break;
 800be40:	e005      	b.n	800be4e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be42:	2303      	movs	r3, #3
 800be44:	73fb      	strb	r3, [r7, #15]
    break;
 800be46:	e002      	b.n	800be4e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800be48:	2303      	movs	r3, #3
 800be4a:	73fb      	strb	r3, [r7, #15]
    break;
 800be4c:	bf00      	nop
  }
  return usb_status;
 800be4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	460b      	mov	r3, r1
 800be62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be64:	2300      	movs	r3, #0
 800be66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be68:	2300      	movs	r3, #0
 800be6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be72:	78fa      	ldrb	r2, [r7, #3]
 800be74:	4611      	mov	r1, r2
 800be76:	4618      	mov	r0, r3
 800be78:	f7f7 fbe8 	bl	800364c <HAL_PCD_EP_Close>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be80:	7bbb      	ldrb	r3, [r7, #14]
 800be82:	2b03      	cmp	r3, #3
 800be84:	d816      	bhi.n	800beb4 <USBD_LL_CloseEP+0x5c>
 800be86:	a201      	add	r2, pc, #4	@ (adr r2, 800be8c <USBD_LL_CloseEP+0x34>)
 800be88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8c:	0800be9d 	.word	0x0800be9d
 800be90:	0800bea3 	.word	0x0800bea3
 800be94:	0800bea9 	.word	0x0800bea9
 800be98:	0800beaf 	.word	0x0800beaf
    case HAL_OK :
      usb_status = USBD_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bea0:	e00b      	b.n	800beba <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bea2:	2303      	movs	r3, #3
 800bea4:	73fb      	strb	r3, [r7, #15]
    break;
 800bea6:	e008      	b.n	800beba <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bea8:	2301      	movs	r3, #1
 800beaa:	73fb      	strb	r3, [r7, #15]
    break;
 800beac:	e005      	b.n	800beba <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800beae:	2303      	movs	r3, #3
 800beb0:	73fb      	strb	r3, [r7, #15]
    break;
 800beb2:	e002      	b.n	800beba <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800beb4:	2303      	movs	r3, #3
 800beb6:	73fb      	strb	r3, [r7, #15]
    break;
 800beb8:	bf00      	nop
  }
  return usb_status;
 800beba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bede:	78fa      	ldrb	r2, [r7, #3]
 800bee0:	4611      	mov	r1, r2
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7f7 fc77 	bl	80037d6 <HAL_PCD_EP_SetStall>
 800bee8:	4603      	mov	r3, r0
 800beea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800beec:	7bbb      	ldrb	r3, [r7, #14]
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d816      	bhi.n	800bf20 <USBD_LL_StallEP+0x5c>
 800bef2:	a201      	add	r2, pc, #4	@ (adr r2, 800bef8 <USBD_LL_StallEP+0x34>)
 800bef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef8:	0800bf09 	.word	0x0800bf09
 800befc:	0800bf0f 	.word	0x0800bf0f
 800bf00:	0800bf15 	.word	0x0800bf15
 800bf04:	0800bf1b 	.word	0x0800bf1b
    case HAL_OK :
      usb_status = USBD_OK;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf0c:	e00b      	b.n	800bf26 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	73fb      	strb	r3, [r7, #15]
    break;
 800bf12:	e008      	b.n	800bf26 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf14:	2301      	movs	r3, #1
 800bf16:	73fb      	strb	r3, [r7, #15]
    break;
 800bf18:	e005      	b.n	800bf26 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf1e:	e002      	b.n	800bf26 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bf20:	2303      	movs	r3, #3
 800bf22:	73fb      	strb	r3, [r7, #15]
    break;
 800bf24:	bf00      	nop
  }
  return usb_status;
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf4a:	78fa      	ldrb	r2, [r7, #3]
 800bf4c:	4611      	mov	r1, r2
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7f7 fca3 	bl	800389a <HAL_PCD_EP_ClrStall>
 800bf54:	4603      	mov	r3, r0
 800bf56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bf58:	7bbb      	ldrb	r3, [r7, #14]
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d816      	bhi.n	800bf8c <USBD_LL_ClearStallEP+0x5c>
 800bf5e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf64 <USBD_LL_ClearStallEP+0x34>)
 800bf60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf64:	0800bf75 	.word	0x0800bf75
 800bf68:	0800bf7b 	.word	0x0800bf7b
 800bf6c:	0800bf81 	.word	0x0800bf81
 800bf70:	0800bf87 	.word	0x0800bf87
    case HAL_OK :
      usb_status = USBD_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	73fb      	strb	r3, [r7, #15]
    break;
 800bf78:	e00b      	b.n	800bf92 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf7e:	e008      	b.n	800bf92 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf80:	2301      	movs	r3, #1
 800bf82:	73fb      	strb	r3, [r7, #15]
    break;
 800bf84:	e005      	b.n	800bf92 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf86:	2303      	movs	r3, #3
 800bf88:	73fb      	strb	r3, [r7, #15]
    break;
 800bf8a:	e002      	b.n	800bf92 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf90:	bf00      	nop
  }
  return usb_status;
 800bf92:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bfb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	da0b      	bge.n	800bfd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bfb8:	78fb      	ldrb	r3, [r7, #3]
 800bfba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bfbe:	68f9      	ldr	r1, [r7, #12]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	4413      	add	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	440b      	add	r3, r1
 800bfca:	3316      	adds	r3, #22
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	e00b      	b.n	800bfe8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bfd6:	68f9      	ldr	r1, [r7, #12]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	00db      	lsls	r3, r3, #3
 800bfdc:	4413      	add	r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	440b      	add	r3, r1
 800bfe2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bfe6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c00e:	78fa      	ldrb	r2, [r7, #3]
 800c010:	4611      	mov	r1, r2
 800c012:	4618      	mov	r0, r3
 800c014:	f7f7 fa8c 	bl	8003530 <HAL_PCD_SetAddress>
 800c018:	4603      	mov	r3, r0
 800c01a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c01c:	7bbb      	ldrb	r3, [r7, #14]
 800c01e:	2b03      	cmp	r3, #3
 800c020:	d816      	bhi.n	800c050 <USBD_LL_SetUSBAddress+0x5c>
 800c022:	a201      	add	r2, pc, #4	@ (adr r2, 800c028 <USBD_LL_SetUSBAddress+0x34>)
 800c024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c028:	0800c039 	.word	0x0800c039
 800c02c:	0800c03f 	.word	0x0800c03f
 800c030:	0800c045 	.word	0x0800c045
 800c034:	0800c04b 	.word	0x0800c04b
    case HAL_OK :
      usb_status = USBD_OK;
 800c038:	2300      	movs	r3, #0
 800c03a:	73fb      	strb	r3, [r7, #15]
    break;
 800c03c:	e00b      	b.n	800c056 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c03e:	2303      	movs	r3, #3
 800c040:	73fb      	strb	r3, [r7, #15]
    break;
 800c042:	e008      	b.n	800c056 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c044:	2301      	movs	r3, #1
 800c046:	73fb      	strb	r3, [r7, #15]
    break;
 800c048:	e005      	b.n	800c056 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c04a:	2303      	movs	r3, #3
 800c04c:	73fb      	strb	r3, [r7, #15]
    break;
 800c04e:	e002      	b.n	800c056 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c050:	2303      	movs	r3, #3
 800c052:	73fb      	strb	r3, [r7, #15]
    break;
 800c054:	bf00      	nop
  }
  return usb_status;
 800c056:	7bfb      	ldrb	r3, [r7, #15]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	607a      	str	r2, [r7, #4]
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	460b      	mov	r3, r1
 800c06e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c074:	2300      	movs	r3, #0
 800c076:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c07e:	7af9      	ldrb	r1, [r7, #11]
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	f7f7 fb76 	bl	8003774 <HAL_PCD_EP_Transmit>
 800c088:	4603      	mov	r3, r0
 800c08a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c08c:	7dbb      	ldrb	r3, [r7, #22]
 800c08e:	2b03      	cmp	r3, #3
 800c090:	d816      	bhi.n	800c0c0 <USBD_LL_Transmit+0x60>
 800c092:	a201      	add	r2, pc, #4	@ (adr r2, 800c098 <USBD_LL_Transmit+0x38>)
 800c094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c098:	0800c0a9 	.word	0x0800c0a9
 800c09c:	0800c0af 	.word	0x0800c0af
 800c0a0:	0800c0b5 	.word	0x0800c0b5
 800c0a4:	0800c0bb 	.word	0x0800c0bb
    case HAL_OK :
      usb_status = USBD_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	75fb      	strb	r3, [r7, #23]
    break;
 800c0ac:	e00b      	b.n	800c0c6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	75fb      	strb	r3, [r7, #23]
    break;
 800c0b2:	e008      	b.n	800c0c6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	75fb      	strb	r3, [r7, #23]
    break;
 800c0b8:	e005      	b.n	800c0c6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	75fb      	strb	r3, [r7, #23]
    break;
 800c0be:	e002      	b.n	800c0c6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	75fb      	strb	r3, [r7, #23]
    break;
 800c0c4:	bf00      	nop
  }
  return usb_status;
 800c0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3718      	adds	r7, #24
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	607a      	str	r2, [r7, #4]
 800c0da:	603b      	str	r3, [r7, #0]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c0ee:	7af9      	ldrb	r1, [r7, #11]
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	f7f7 faf4 	bl	80036e0 <HAL_PCD_EP_Receive>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c0fc:	7dbb      	ldrb	r3, [r7, #22]
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	d816      	bhi.n	800c130 <USBD_LL_PrepareReceive+0x60>
 800c102:	a201      	add	r2, pc, #4	@ (adr r2, 800c108 <USBD_LL_PrepareReceive+0x38>)
 800c104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c108:	0800c119 	.word	0x0800c119
 800c10c:	0800c11f 	.word	0x0800c11f
 800c110:	0800c125 	.word	0x0800c125
 800c114:	0800c12b 	.word	0x0800c12b
    case HAL_OK :
      usb_status = USBD_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	75fb      	strb	r3, [r7, #23]
    break;
 800c11c:	e00b      	b.n	800c136 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c11e:	2303      	movs	r3, #3
 800c120:	75fb      	strb	r3, [r7, #23]
    break;
 800c122:	e008      	b.n	800c136 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c124:	2301      	movs	r3, #1
 800c126:	75fb      	strb	r3, [r7, #23]
    break;
 800c128:	e005      	b.n	800c136 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c12a:	2303      	movs	r3, #3
 800c12c:	75fb      	strb	r3, [r7, #23]
    break;
 800c12e:	e002      	b.n	800c136 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c130:	2303      	movs	r3, #3
 800c132:	75fb      	strb	r3, [r7, #23]
    break;
 800c134:	bf00      	nop
  }
  return usb_status;
 800c136:	7dfb      	ldrb	r3, [r7, #23]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3718      	adds	r7, #24
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	460b      	mov	r3, r1
 800c14a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c152:	78fa      	ldrb	r2, [r7, #3]
 800c154:	4611      	mov	r1, r2
 800c156:	4618      	mov	r0, r3
 800c158:	f7f7 faf4 	bl	8003744 <HAL_PCD_EP_GetRxCount>
 800c15c:	4603      	mov	r3, r0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
	...

0800c168 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	460b      	mov	r3, r1
 800c172:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c174:	78fb      	ldrb	r3, [r7, #3]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d002      	beq.n	800c180 <HAL_PCDEx_LPM_Callback+0x18>
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d01f      	beq.n	800c1be <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c17e:	e03b      	b.n	800c1f8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	7adb      	ldrb	r3, [r3, #11]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d007      	beq.n	800c198 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c188:	f000 f854 	bl	800c234 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c18c:	4b1c      	ldr	r3, [pc, #112]	@ (800c200 <HAL_PCDEx_LPM_Callback+0x98>)
 800c18e:	691b      	ldr	r3, [r3, #16]
 800c190:	4a1b      	ldr	r2, [pc, #108]	@ (800c200 <HAL_PCDEx_LPM_Callback+0x98>)
 800c192:	f023 0306 	bic.w	r3, r3, #6
 800c196:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	6812      	ldr	r2, [r2, #0]
 800c1a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c1aa:	f023 0301 	bic.w	r3, r3, #1
 800c1ae:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fe f9cb 	bl	800a552 <USBD_LL_Resume>
    break;
 800c1bc:	e01c      	b.n	800c1f8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	6812      	ldr	r2, [r2, #0]
 800c1cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c1d0:	f043 0301 	orr.w	r3, r3, #1
 800c1d4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe f99c 	bl	800a51a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	7adb      	ldrb	r3, [r3, #11]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d005      	beq.n	800c1f6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1ea:	4b05      	ldr	r3, [pc, #20]	@ (800c200 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1ec:	691b      	ldr	r3, [r3, #16]
 800c1ee:	4a04      	ldr	r2, [pc, #16]	@ (800c200 <HAL_PCDEx_LPM_Callback+0x98>)
 800c1f0:	f043 0306 	orr.w	r3, r3, #6
 800c1f4:	6113      	str	r3, [r2, #16]
    break;
 800c1f6:	bf00      	nop
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	e000ed00 	.word	0xe000ed00

0800c204 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c20c:	4b03      	ldr	r3, [pc, #12]	@ (800c21c <USBD_static_malloc+0x18>)
}
 800c20e:	4618      	mov	r0, r3
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	20002048 	.word	0x20002048

0800c220 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]

}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c238:	f7f5 f86a 	bl	8001310 <SystemClock_Config>
}
 800c23c:	bf00      	nop
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <__cvt>:
 800c240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c244:	ec57 6b10 	vmov	r6, r7, d0
 800c248:	2f00      	cmp	r7, #0
 800c24a:	460c      	mov	r4, r1
 800c24c:	4619      	mov	r1, r3
 800c24e:	463b      	mov	r3, r7
 800c250:	bfbb      	ittet	lt
 800c252:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c256:	461f      	movlt	r7, r3
 800c258:	2300      	movge	r3, #0
 800c25a:	232d      	movlt	r3, #45	@ 0x2d
 800c25c:	700b      	strb	r3, [r1, #0]
 800c25e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c260:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c264:	4691      	mov	r9, r2
 800c266:	f023 0820 	bic.w	r8, r3, #32
 800c26a:	bfbc      	itt	lt
 800c26c:	4632      	movlt	r2, r6
 800c26e:	4616      	movlt	r6, r2
 800c270:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c274:	d005      	beq.n	800c282 <__cvt+0x42>
 800c276:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c27a:	d100      	bne.n	800c27e <__cvt+0x3e>
 800c27c:	3401      	adds	r4, #1
 800c27e:	2102      	movs	r1, #2
 800c280:	e000      	b.n	800c284 <__cvt+0x44>
 800c282:	2103      	movs	r1, #3
 800c284:	ab03      	add	r3, sp, #12
 800c286:	9301      	str	r3, [sp, #4]
 800c288:	ab02      	add	r3, sp, #8
 800c28a:	9300      	str	r3, [sp, #0]
 800c28c:	ec47 6b10 	vmov	d0, r6, r7
 800c290:	4653      	mov	r3, sl
 800c292:	4622      	mov	r2, r4
 800c294:	f001 f8ec 	bl	800d470 <_dtoa_r>
 800c298:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c29c:	4605      	mov	r5, r0
 800c29e:	d119      	bne.n	800c2d4 <__cvt+0x94>
 800c2a0:	f019 0f01 	tst.w	r9, #1
 800c2a4:	d00e      	beq.n	800c2c4 <__cvt+0x84>
 800c2a6:	eb00 0904 	add.w	r9, r0, r4
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	f7f4 fc09 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2b6:	b108      	cbz	r0, 800c2bc <__cvt+0x7c>
 800c2b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c2bc:	2230      	movs	r2, #48	@ 0x30
 800c2be:	9b03      	ldr	r3, [sp, #12]
 800c2c0:	454b      	cmp	r3, r9
 800c2c2:	d31e      	bcc.n	800c302 <__cvt+0xc2>
 800c2c4:	9b03      	ldr	r3, [sp, #12]
 800c2c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2c8:	1b5b      	subs	r3, r3, r5
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	6013      	str	r3, [r2, #0]
 800c2ce:	b004      	add	sp, #16
 800c2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c2d8:	eb00 0904 	add.w	r9, r0, r4
 800c2dc:	d1e5      	bne.n	800c2aa <__cvt+0x6a>
 800c2de:	7803      	ldrb	r3, [r0, #0]
 800c2e0:	2b30      	cmp	r3, #48	@ 0x30
 800c2e2:	d10a      	bne.n	800c2fa <__cvt+0xba>
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	4639      	mov	r1, r7
 800c2ec:	f7f4 fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2f0:	b918      	cbnz	r0, 800c2fa <__cvt+0xba>
 800c2f2:	f1c4 0401 	rsb	r4, r4, #1
 800c2f6:	f8ca 4000 	str.w	r4, [sl]
 800c2fa:	f8da 3000 	ldr.w	r3, [sl]
 800c2fe:	4499      	add	r9, r3
 800c300:	e7d3      	b.n	800c2aa <__cvt+0x6a>
 800c302:	1c59      	adds	r1, r3, #1
 800c304:	9103      	str	r1, [sp, #12]
 800c306:	701a      	strb	r2, [r3, #0]
 800c308:	e7d9      	b.n	800c2be <__cvt+0x7e>

0800c30a <__exponent>:
 800c30a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c30c:	2900      	cmp	r1, #0
 800c30e:	bfba      	itte	lt
 800c310:	4249      	neglt	r1, r1
 800c312:	232d      	movlt	r3, #45	@ 0x2d
 800c314:	232b      	movge	r3, #43	@ 0x2b
 800c316:	2909      	cmp	r1, #9
 800c318:	7002      	strb	r2, [r0, #0]
 800c31a:	7043      	strb	r3, [r0, #1]
 800c31c:	dd29      	ble.n	800c372 <__exponent+0x68>
 800c31e:	f10d 0307 	add.w	r3, sp, #7
 800c322:	461d      	mov	r5, r3
 800c324:	270a      	movs	r7, #10
 800c326:	461a      	mov	r2, r3
 800c328:	fbb1 f6f7 	udiv	r6, r1, r7
 800c32c:	fb07 1416 	mls	r4, r7, r6, r1
 800c330:	3430      	adds	r4, #48	@ 0x30
 800c332:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c336:	460c      	mov	r4, r1
 800c338:	2c63      	cmp	r4, #99	@ 0x63
 800c33a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c33e:	4631      	mov	r1, r6
 800c340:	dcf1      	bgt.n	800c326 <__exponent+0x1c>
 800c342:	3130      	adds	r1, #48	@ 0x30
 800c344:	1e94      	subs	r4, r2, #2
 800c346:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c34a:	1c41      	adds	r1, r0, #1
 800c34c:	4623      	mov	r3, r4
 800c34e:	42ab      	cmp	r3, r5
 800c350:	d30a      	bcc.n	800c368 <__exponent+0x5e>
 800c352:	f10d 0309 	add.w	r3, sp, #9
 800c356:	1a9b      	subs	r3, r3, r2
 800c358:	42ac      	cmp	r4, r5
 800c35a:	bf88      	it	hi
 800c35c:	2300      	movhi	r3, #0
 800c35e:	3302      	adds	r3, #2
 800c360:	4403      	add	r3, r0
 800c362:	1a18      	subs	r0, r3, r0
 800c364:	b003      	add	sp, #12
 800c366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c368:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c36c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c370:	e7ed      	b.n	800c34e <__exponent+0x44>
 800c372:	2330      	movs	r3, #48	@ 0x30
 800c374:	3130      	adds	r1, #48	@ 0x30
 800c376:	7083      	strb	r3, [r0, #2]
 800c378:	70c1      	strb	r1, [r0, #3]
 800c37a:	1d03      	adds	r3, r0, #4
 800c37c:	e7f1      	b.n	800c362 <__exponent+0x58>
	...

0800c380 <_printf_float>:
 800c380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c384:	b08d      	sub	sp, #52	@ 0x34
 800c386:	460c      	mov	r4, r1
 800c388:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c38c:	4616      	mov	r6, r2
 800c38e:	461f      	mov	r7, r3
 800c390:	4605      	mov	r5, r0
 800c392:	f000 ff65 	bl	800d260 <_localeconv_r>
 800c396:	6803      	ldr	r3, [r0, #0]
 800c398:	9304      	str	r3, [sp, #16]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7f3 ff68 	bl	8000270 <strlen>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3a4:	f8d8 3000 	ldr.w	r3, [r8]
 800c3a8:	9005      	str	r0, [sp, #20]
 800c3aa:	3307      	adds	r3, #7
 800c3ac:	f023 0307 	bic.w	r3, r3, #7
 800c3b0:	f103 0208 	add.w	r2, r3, #8
 800c3b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c3b8:	f8d4 b000 	ldr.w	fp, [r4]
 800c3bc:	f8c8 2000 	str.w	r2, [r8]
 800c3c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c3c8:	9307      	str	r3, [sp, #28]
 800c3ca:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c3d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3d6:	4b9c      	ldr	r3, [pc, #624]	@ (800c648 <_printf_float+0x2c8>)
 800c3d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3dc:	f7f4 fba6 	bl	8000b2c <__aeabi_dcmpun>
 800c3e0:	bb70      	cbnz	r0, 800c440 <_printf_float+0xc0>
 800c3e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3e6:	4b98      	ldr	r3, [pc, #608]	@ (800c648 <_printf_float+0x2c8>)
 800c3e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3ec:	f7f4 fb80 	bl	8000af0 <__aeabi_dcmple>
 800c3f0:	bb30      	cbnz	r0, 800c440 <_printf_float+0xc0>
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	4640      	mov	r0, r8
 800c3f8:	4649      	mov	r1, r9
 800c3fa:	f7f4 fb6f 	bl	8000adc <__aeabi_dcmplt>
 800c3fe:	b110      	cbz	r0, 800c406 <_printf_float+0x86>
 800c400:	232d      	movs	r3, #45	@ 0x2d
 800c402:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c406:	4a91      	ldr	r2, [pc, #580]	@ (800c64c <_printf_float+0x2cc>)
 800c408:	4b91      	ldr	r3, [pc, #580]	@ (800c650 <_printf_float+0x2d0>)
 800c40a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c40e:	bf94      	ite	ls
 800c410:	4690      	movls	r8, r2
 800c412:	4698      	movhi	r8, r3
 800c414:	2303      	movs	r3, #3
 800c416:	6123      	str	r3, [r4, #16]
 800c418:	f02b 0304 	bic.w	r3, fp, #4
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	f04f 0900 	mov.w	r9, #0
 800c422:	9700      	str	r7, [sp, #0]
 800c424:	4633      	mov	r3, r6
 800c426:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c428:	4621      	mov	r1, r4
 800c42a:	4628      	mov	r0, r5
 800c42c:	f000 f9d2 	bl	800c7d4 <_printf_common>
 800c430:	3001      	adds	r0, #1
 800c432:	f040 808d 	bne.w	800c550 <_printf_float+0x1d0>
 800c436:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c43a:	b00d      	add	sp, #52	@ 0x34
 800c43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c440:	4642      	mov	r2, r8
 800c442:	464b      	mov	r3, r9
 800c444:	4640      	mov	r0, r8
 800c446:	4649      	mov	r1, r9
 800c448:	f7f4 fb70 	bl	8000b2c <__aeabi_dcmpun>
 800c44c:	b140      	cbz	r0, 800c460 <_printf_float+0xe0>
 800c44e:	464b      	mov	r3, r9
 800c450:	2b00      	cmp	r3, #0
 800c452:	bfbc      	itt	lt
 800c454:	232d      	movlt	r3, #45	@ 0x2d
 800c456:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c45a:	4a7e      	ldr	r2, [pc, #504]	@ (800c654 <_printf_float+0x2d4>)
 800c45c:	4b7e      	ldr	r3, [pc, #504]	@ (800c658 <_printf_float+0x2d8>)
 800c45e:	e7d4      	b.n	800c40a <_printf_float+0x8a>
 800c460:	6863      	ldr	r3, [r4, #4]
 800c462:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c466:	9206      	str	r2, [sp, #24]
 800c468:	1c5a      	adds	r2, r3, #1
 800c46a:	d13b      	bne.n	800c4e4 <_printf_float+0x164>
 800c46c:	2306      	movs	r3, #6
 800c46e:	6063      	str	r3, [r4, #4]
 800c470:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c474:	2300      	movs	r3, #0
 800c476:	6022      	str	r2, [r4, #0]
 800c478:	9303      	str	r3, [sp, #12]
 800c47a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c47c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c480:	ab09      	add	r3, sp, #36	@ 0x24
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	6861      	ldr	r1, [r4, #4]
 800c486:	ec49 8b10 	vmov	d0, r8, r9
 800c48a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c48e:	4628      	mov	r0, r5
 800c490:	f7ff fed6 	bl	800c240 <__cvt>
 800c494:	9b06      	ldr	r3, [sp, #24]
 800c496:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c498:	2b47      	cmp	r3, #71	@ 0x47
 800c49a:	4680      	mov	r8, r0
 800c49c:	d129      	bne.n	800c4f2 <_printf_float+0x172>
 800c49e:	1cc8      	adds	r0, r1, #3
 800c4a0:	db02      	blt.n	800c4a8 <_printf_float+0x128>
 800c4a2:	6863      	ldr	r3, [r4, #4]
 800c4a4:	4299      	cmp	r1, r3
 800c4a6:	dd41      	ble.n	800c52c <_printf_float+0x1ac>
 800c4a8:	f1aa 0a02 	sub.w	sl, sl, #2
 800c4ac:	fa5f fa8a 	uxtb.w	sl, sl
 800c4b0:	3901      	subs	r1, #1
 800c4b2:	4652      	mov	r2, sl
 800c4b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c4b8:	9109      	str	r1, [sp, #36]	@ 0x24
 800c4ba:	f7ff ff26 	bl	800c30a <__exponent>
 800c4be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4c0:	1813      	adds	r3, r2, r0
 800c4c2:	2a01      	cmp	r2, #1
 800c4c4:	4681      	mov	r9, r0
 800c4c6:	6123      	str	r3, [r4, #16]
 800c4c8:	dc02      	bgt.n	800c4d0 <_printf_float+0x150>
 800c4ca:	6822      	ldr	r2, [r4, #0]
 800c4cc:	07d2      	lsls	r2, r2, #31
 800c4ce:	d501      	bpl.n	800c4d4 <_printf_float+0x154>
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	6123      	str	r3, [r4, #16]
 800c4d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d0a2      	beq.n	800c422 <_printf_float+0xa2>
 800c4dc:	232d      	movs	r3, #45	@ 0x2d
 800c4de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4e2:	e79e      	b.n	800c422 <_printf_float+0xa2>
 800c4e4:	9a06      	ldr	r2, [sp, #24]
 800c4e6:	2a47      	cmp	r2, #71	@ 0x47
 800c4e8:	d1c2      	bne.n	800c470 <_printf_float+0xf0>
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1c0      	bne.n	800c470 <_printf_float+0xf0>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e7bd      	b.n	800c46e <_printf_float+0xee>
 800c4f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c4f6:	d9db      	bls.n	800c4b0 <_printf_float+0x130>
 800c4f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c4fc:	d118      	bne.n	800c530 <_printf_float+0x1b0>
 800c4fe:	2900      	cmp	r1, #0
 800c500:	6863      	ldr	r3, [r4, #4]
 800c502:	dd0b      	ble.n	800c51c <_printf_float+0x19c>
 800c504:	6121      	str	r1, [r4, #16]
 800c506:	b913      	cbnz	r3, 800c50e <_printf_float+0x18e>
 800c508:	6822      	ldr	r2, [r4, #0]
 800c50a:	07d0      	lsls	r0, r2, #31
 800c50c:	d502      	bpl.n	800c514 <_printf_float+0x194>
 800c50e:	3301      	adds	r3, #1
 800c510:	440b      	add	r3, r1
 800c512:	6123      	str	r3, [r4, #16]
 800c514:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c516:	f04f 0900 	mov.w	r9, #0
 800c51a:	e7db      	b.n	800c4d4 <_printf_float+0x154>
 800c51c:	b913      	cbnz	r3, 800c524 <_printf_float+0x1a4>
 800c51e:	6822      	ldr	r2, [r4, #0]
 800c520:	07d2      	lsls	r2, r2, #31
 800c522:	d501      	bpl.n	800c528 <_printf_float+0x1a8>
 800c524:	3302      	adds	r3, #2
 800c526:	e7f4      	b.n	800c512 <_printf_float+0x192>
 800c528:	2301      	movs	r3, #1
 800c52a:	e7f2      	b.n	800c512 <_printf_float+0x192>
 800c52c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c532:	4299      	cmp	r1, r3
 800c534:	db05      	blt.n	800c542 <_printf_float+0x1c2>
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	6121      	str	r1, [r4, #16]
 800c53a:	07d8      	lsls	r0, r3, #31
 800c53c:	d5ea      	bpl.n	800c514 <_printf_float+0x194>
 800c53e:	1c4b      	adds	r3, r1, #1
 800c540:	e7e7      	b.n	800c512 <_printf_float+0x192>
 800c542:	2900      	cmp	r1, #0
 800c544:	bfd4      	ite	le
 800c546:	f1c1 0202 	rsble	r2, r1, #2
 800c54a:	2201      	movgt	r2, #1
 800c54c:	4413      	add	r3, r2
 800c54e:	e7e0      	b.n	800c512 <_printf_float+0x192>
 800c550:	6823      	ldr	r3, [r4, #0]
 800c552:	055a      	lsls	r2, r3, #21
 800c554:	d407      	bmi.n	800c566 <_printf_float+0x1e6>
 800c556:	6923      	ldr	r3, [r4, #16]
 800c558:	4642      	mov	r2, r8
 800c55a:	4631      	mov	r1, r6
 800c55c:	4628      	mov	r0, r5
 800c55e:	47b8      	blx	r7
 800c560:	3001      	adds	r0, #1
 800c562:	d12b      	bne.n	800c5bc <_printf_float+0x23c>
 800c564:	e767      	b.n	800c436 <_printf_float+0xb6>
 800c566:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c56a:	f240 80dd 	bls.w	800c728 <_printf_float+0x3a8>
 800c56e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c572:	2200      	movs	r2, #0
 800c574:	2300      	movs	r3, #0
 800c576:	f7f4 faa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d033      	beq.n	800c5e6 <_printf_float+0x266>
 800c57e:	4a37      	ldr	r2, [pc, #220]	@ (800c65c <_printf_float+0x2dc>)
 800c580:	2301      	movs	r3, #1
 800c582:	4631      	mov	r1, r6
 800c584:	4628      	mov	r0, r5
 800c586:	47b8      	blx	r7
 800c588:	3001      	adds	r0, #1
 800c58a:	f43f af54 	beq.w	800c436 <_printf_float+0xb6>
 800c58e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c592:	4543      	cmp	r3, r8
 800c594:	db02      	blt.n	800c59c <_printf_float+0x21c>
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	07d8      	lsls	r0, r3, #31
 800c59a:	d50f      	bpl.n	800c5bc <_printf_float+0x23c>
 800c59c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5a0:	4631      	mov	r1, r6
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	47b8      	blx	r7
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	f43f af45 	beq.w	800c436 <_printf_float+0xb6>
 800c5ac:	f04f 0900 	mov.w	r9, #0
 800c5b0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c5b4:	f104 0a1a 	add.w	sl, r4, #26
 800c5b8:	45c8      	cmp	r8, r9
 800c5ba:	dc09      	bgt.n	800c5d0 <_printf_float+0x250>
 800c5bc:	6823      	ldr	r3, [r4, #0]
 800c5be:	079b      	lsls	r3, r3, #30
 800c5c0:	f100 8103 	bmi.w	800c7ca <_printf_float+0x44a>
 800c5c4:	68e0      	ldr	r0, [r4, #12]
 800c5c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5c8:	4298      	cmp	r0, r3
 800c5ca:	bfb8      	it	lt
 800c5cc:	4618      	movlt	r0, r3
 800c5ce:	e734      	b.n	800c43a <_printf_float+0xba>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	4652      	mov	r2, sl
 800c5d4:	4631      	mov	r1, r6
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	47b8      	blx	r7
 800c5da:	3001      	adds	r0, #1
 800c5dc:	f43f af2b 	beq.w	800c436 <_printf_float+0xb6>
 800c5e0:	f109 0901 	add.w	r9, r9, #1
 800c5e4:	e7e8      	b.n	800c5b8 <_printf_float+0x238>
 800c5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	dc39      	bgt.n	800c660 <_printf_float+0x2e0>
 800c5ec:	4a1b      	ldr	r2, [pc, #108]	@ (800c65c <_printf_float+0x2dc>)
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	47b8      	blx	r7
 800c5f6:	3001      	adds	r0, #1
 800c5f8:	f43f af1d 	beq.w	800c436 <_printf_float+0xb6>
 800c5fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c600:	ea59 0303 	orrs.w	r3, r9, r3
 800c604:	d102      	bne.n	800c60c <_printf_float+0x28c>
 800c606:	6823      	ldr	r3, [r4, #0]
 800c608:	07d9      	lsls	r1, r3, #31
 800c60a:	d5d7      	bpl.n	800c5bc <_printf_float+0x23c>
 800c60c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c610:	4631      	mov	r1, r6
 800c612:	4628      	mov	r0, r5
 800c614:	47b8      	blx	r7
 800c616:	3001      	adds	r0, #1
 800c618:	f43f af0d 	beq.w	800c436 <_printf_float+0xb6>
 800c61c:	f04f 0a00 	mov.w	sl, #0
 800c620:	f104 0b1a 	add.w	fp, r4, #26
 800c624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c626:	425b      	negs	r3, r3
 800c628:	4553      	cmp	r3, sl
 800c62a:	dc01      	bgt.n	800c630 <_printf_float+0x2b0>
 800c62c:	464b      	mov	r3, r9
 800c62e:	e793      	b.n	800c558 <_printf_float+0x1d8>
 800c630:	2301      	movs	r3, #1
 800c632:	465a      	mov	r2, fp
 800c634:	4631      	mov	r1, r6
 800c636:	4628      	mov	r0, r5
 800c638:	47b8      	blx	r7
 800c63a:	3001      	adds	r0, #1
 800c63c:	f43f aefb 	beq.w	800c436 <_printf_float+0xb6>
 800c640:	f10a 0a01 	add.w	sl, sl, #1
 800c644:	e7ee      	b.n	800c624 <_printf_float+0x2a4>
 800c646:	bf00      	nop
 800c648:	7fefffff 	.word	0x7fefffff
 800c64c:	08011444 	.word	0x08011444
 800c650:	08011448 	.word	0x08011448
 800c654:	0801144c 	.word	0x0801144c
 800c658:	08011450 	.word	0x08011450
 800c65c:	080117e0 	.word	0x080117e0
 800c660:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c662:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c666:	4553      	cmp	r3, sl
 800c668:	bfa8      	it	ge
 800c66a:	4653      	movge	r3, sl
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	4699      	mov	r9, r3
 800c670:	dc36      	bgt.n	800c6e0 <_printf_float+0x360>
 800c672:	f04f 0b00 	mov.w	fp, #0
 800c676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c67a:	f104 021a 	add.w	r2, r4, #26
 800c67e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c680:	9306      	str	r3, [sp, #24]
 800c682:	eba3 0309 	sub.w	r3, r3, r9
 800c686:	455b      	cmp	r3, fp
 800c688:	dc31      	bgt.n	800c6ee <_printf_float+0x36e>
 800c68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c68c:	459a      	cmp	sl, r3
 800c68e:	dc3a      	bgt.n	800c706 <_printf_float+0x386>
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	07da      	lsls	r2, r3, #31
 800c694:	d437      	bmi.n	800c706 <_printf_float+0x386>
 800c696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c698:	ebaa 0903 	sub.w	r9, sl, r3
 800c69c:	9b06      	ldr	r3, [sp, #24]
 800c69e:	ebaa 0303 	sub.w	r3, sl, r3
 800c6a2:	4599      	cmp	r9, r3
 800c6a4:	bfa8      	it	ge
 800c6a6:	4699      	movge	r9, r3
 800c6a8:	f1b9 0f00 	cmp.w	r9, #0
 800c6ac:	dc33      	bgt.n	800c716 <_printf_float+0x396>
 800c6ae:	f04f 0800 	mov.w	r8, #0
 800c6b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6b6:	f104 0b1a 	add.w	fp, r4, #26
 800c6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6bc:	ebaa 0303 	sub.w	r3, sl, r3
 800c6c0:	eba3 0309 	sub.w	r3, r3, r9
 800c6c4:	4543      	cmp	r3, r8
 800c6c6:	f77f af79 	ble.w	800c5bc <_printf_float+0x23c>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	465a      	mov	r2, fp
 800c6ce:	4631      	mov	r1, r6
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	47b8      	blx	r7
 800c6d4:	3001      	adds	r0, #1
 800c6d6:	f43f aeae 	beq.w	800c436 <_printf_float+0xb6>
 800c6da:	f108 0801 	add.w	r8, r8, #1
 800c6de:	e7ec      	b.n	800c6ba <_printf_float+0x33a>
 800c6e0:	4642      	mov	r2, r8
 800c6e2:	4631      	mov	r1, r6
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	47b8      	blx	r7
 800c6e8:	3001      	adds	r0, #1
 800c6ea:	d1c2      	bne.n	800c672 <_printf_float+0x2f2>
 800c6ec:	e6a3      	b.n	800c436 <_printf_float+0xb6>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	4631      	mov	r1, r6
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	9206      	str	r2, [sp, #24]
 800c6f6:	47b8      	blx	r7
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	f43f ae9c 	beq.w	800c436 <_printf_float+0xb6>
 800c6fe:	9a06      	ldr	r2, [sp, #24]
 800c700:	f10b 0b01 	add.w	fp, fp, #1
 800c704:	e7bb      	b.n	800c67e <_printf_float+0x2fe>
 800c706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c70a:	4631      	mov	r1, r6
 800c70c:	4628      	mov	r0, r5
 800c70e:	47b8      	blx	r7
 800c710:	3001      	adds	r0, #1
 800c712:	d1c0      	bne.n	800c696 <_printf_float+0x316>
 800c714:	e68f      	b.n	800c436 <_printf_float+0xb6>
 800c716:	9a06      	ldr	r2, [sp, #24]
 800c718:	464b      	mov	r3, r9
 800c71a:	4442      	add	r2, r8
 800c71c:	4631      	mov	r1, r6
 800c71e:	4628      	mov	r0, r5
 800c720:	47b8      	blx	r7
 800c722:	3001      	adds	r0, #1
 800c724:	d1c3      	bne.n	800c6ae <_printf_float+0x32e>
 800c726:	e686      	b.n	800c436 <_printf_float+0xb6>
 800c728:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c72c:	f1ba 0f01 	cmp.w	sl, #1
 800c730:	dc01      	bgt.n	800c736 <_printf_float+0x3b6>
 800c732:	07db      	lsls	r3, r3, #31
 800c734:	d536      	bpl.n	800c7a4 <_printf_float+0x424>
 800c736:	2301      	movs	r3, #1
 800c738:	4642      	mov	r2, r8
 800c73a:	4631      	mov	r1, r6
 800c73c:	4628      	mov	r0, r5
 800c73e:	47b8      	blx	r7
 800c740:	3001      	adds	r0, #1
 800c742:	f43f ae78 	beq.w	800c436 <_printf_float+0xb6>
 800c746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c74a:	4631      	mov	r1, r6
 800c74c:	4628      	mov	r0, r5
 800c74e:	47b8      	blx	r7
 800c750:	3001      	adds	r0, #1
 800c752:	f43f ae70 	beq.w	800c436 <_printf_float+0xb6>
 800c756:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c75a:	2200      	movs	r2, #0
 800c75c:	2300      	movs	r3, #0
 800c75e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c762:	f7f4 f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c766:	b9c0      	cbnz	r0, 800c79a <_printf_float+0x41a>
 800c768:	4653      	mov	r3, sl
 800c76a:	f108 0201 	add.w	r2, r8, #1
 800c76e:	4631      	mov	r1, r6
 800c770:	4628      	mov	r0, r5
 800c772:	47b8      	blx	r7
 800c774:	3001      	adds	r0, #1
 800c776:	d10c      	bne.n	800c792 <_printf_float+0x412>
 800c778:	e65d      	b.n	800c436 <_printf_float+0xb6>
 800c77a:	2301      	movs	r3, #1
 800c77c:	465a      	mov	r2, fp
 800c77e:	4631      	mov	r1, r6
 800c780:	4628      	mov	r0, r5
 800c782:	47b8      	blx	r7
 800c784:	3001      	adds	r0, #1
 800c786:	f43f ae56 	beq.w	800c436 <_printf_float+0xb6>
 800c78a:	f108 0801 	add.w	r8, r8, #1
 800c78e:	45d0      	cmp	r8, sl
 800c790:	dbf3      	blt.n	800c77a <_printf_float+0x3fa>
 800c792:	464b      	mov	r3, r9
 800c794:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c798:	e6df      	b.n	800c55a <_printf_float+0x1da>
 800c79a:	f04f 0800 	mov.w	r8, #0
 800c79e:	f104 0b1a 	add.w	fp, r4, #26
 800c7a2:	e7f4      	b.n	800c78e <_printf_float+0x40e>
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	4642      	mov	r2, r8
 800c7a8:	e7e1      	b.n	800c76e <_printf_float+0x3ee>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	464a      	mov	r2, r9
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	47b8      	blx	r7
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	f43f ae3e 	beq.w	800c436 <_printf_float+0xb6>
 800c7ba:	f108 0801 	add.w	r8, r8, #1
 800c7be:	68e3      	ldr	r3, [r4, #12]
 800c7c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7c2:	1a5b      	subs	r3, r3, r1
 800c7c4:	4543      	cmp	r3, r8
 800c7c6:	dcf0      	bgt.n	800c7aa <_printf_float+0x42a>
 800c7c8:	e6fc      	b.n	800c5c4 <_printf_float+0x244>
 800c7ca:	f04f 0800 	mov.w	r8, #0
 800c7ce:	f104 0919 	add.w	r9, r4, #25
 800c7d2:	e7f4      	b.n	800c7be <_printf_float+0x43e>

0800c7d4 <_printf_common>:
 800c7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d8:	4616      	mov	r6, r2
 800c7da:	4698      	mov	r8, r3
 800c7dc:	688a      	ldr	r2, [r1, #8]
 800c7de:	690b      	ldr	r3, [r1, #16]
 800c7e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	bfb8      	it	lt
 800c7e8:	4613      	movlt	r3, r2
 800c7ea:	6033      	str	r3, [r6, #0]
 800c7ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7f0:	4607      	mov	r7, r0
 800c7f2:	460c      	mov	r4, r1
 800c7f4:	b10a      	cbz	r2, 800c7fa <_printf_common+0x26>
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	6033      	str	r3, [r6, #0]
 800c7fa:	6823      	ldr	r3, [r4, #0]
 800c7fc:	0699      	lsls	r1, r3, #26
 800c7fe:	bf42      	ittt	mi
 800c800:	6833      	ldrmi	r3, [r6, #0]
 800c802:	3302      	addmi	r3, #2
 800c804:	6033      	strmi	r3, [r6, #0]
 800c806:	6825      	ldr	r5, [r4, #0]
 800c808:	f015 0506 	ands.w	r5, r5, #6
 800c80c:	d106      	bne.n	800c81c <_printf_common+0x48>
 800c80e:	f104 0a19 	add.w	sl, r4, #25
 800c812:	68e3      	ldr	r3, [r4, #12]
 800c814:	6832      	ldr	r2, [r6, #0]
 800c816:	1a9b      	subs	r3, r3, r2
 800c818:	42ab      	cmp	r3, r5
 800c81a:	dc26      	bgt.n	800c86a <_printf_common+0x96>
 800c81c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c820:	6822      	ldr	r2, [r4, #0]
 800c822:	3b00      	subs	r3, #0
 800c824:	bf18      	it	ne
 800c826:	2301      	movne	r3, #1
 800c828:	0692      	lsls	r2, r2, #26
 800c82a:	d42b      	bmi.n	800c884 <_printf_common+0xb0>
 800c82c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c830:	4641      	mov	r1, r8
 800c832:	4638      	mov	r0, r7
 800c834:	47c8      	blx	r9
 800c836:	3001      	adds	r0, #1
 800c838:	d01e      	beq.n	800c878 <_printf_common+0xa4>
 800c83a:	6823      	ldr	r3, [r4, #0]
 800c83c:	6922      	ldr	r2, [r4, #16]
 800c83e:	f003 0306 	and.w	r3, r3, #6
 800c842:	2b04      	cmp	r3, #4
 800c844:	bf02      	ittt	eq
 800c846:	68e5      	ldreq	r5, [r4, #12]
 800c848:	6833      	ldreq	r3, [r6, #0]
 800c84a:	1aed      	subeq	r5, r5, r3
 800c84c:	68a3      	ldr	r3, [r4, #8]
 800c84e:	bf0c      	ite	eq
 800c850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c854:	2500      	movne	r5, #0
 800c856:	4293      	cmp	r3, r2
 800c858:	bfc4      	itt	gt
 800c85a:	1a9b      	subgt	r3, r3, r2
 800c85c:	18ed      	addgt	r5, r5, r3
 800c85e:	2600      	movs	r6, #0
 800c860:	341a      	adds	r4, #26
 800c862:	42b5      	cmp	r5, r6
 800c864:	d11a      	bne.n	800c89c <_printf_common+0xc8>
 800c866:	2000      	movs	r0, #0
 800c868:	e008      	b.n	800c87c <_printf_common+0xa8>
 800c86a:	2301      	movs	r3, #1
 800c86c:	4652      	mov	r2, sl
 800c86e:	4641      	mov	r1, r8
 800c870:	4638      	mov	r0, r7
 800c872:	47c8      	blx	r9
 800c874:	3001      	adds	r0, #1
 800c876:	d103      	bne.n	800c880 <_printf_common+0xac>
 800c878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c880:	3501      	adds	r5, #1
 800c882:	e7c6      	b.n	800c812 <_printf_common+0x3e>
 800c884:	18e1      	adds	r1, r4, r3
 800c886:	1c5a      	adds	r2, r3, #1
 800c888:	2030      	movs	r0, #48	@ 0x30
 800c88a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c88e:	4422      	add	r2, r4
 800c890:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c898:	3302      	adds	r3, #2
 800c89a:	e7c7      	b.n	800c82c <_printf_common+0x58>
 800c89c:	2301      	movs	r3, #1
 800c89e:	4622      	mov	r2, r4
 800c8a0:	4641      	mov	r1, r8
 800c8a2:	4638      	mov	r0, r7
 800c8a4:	47c8      	blx	r9
 800c8a6:	3001      	adds	r0, #1
 800c8a8:	d0e6      	beq.n	800c878 <_printf_common+0xa4>
 800c8aa:	3601      	adds	r6, #1
 800c8ac:	e7d9      	b.n	800c862 <_printf_common+0x8e>
	...

0800c8b0 <_printf_i>:
 800c8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8b4:	7e0f      	ldrb	r7, [r1, #24]
 800c8b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8b8:	2f78      	cmp	r7, #120	@ 0x78
 800c8ba:	4691      	mov	r9, r2
 800c8bc:	4680      	mov	r8, r0
 800c8be:	460c      	mov	r4, r1
 800c8c0:	469a      	mov	sl, r3
 800c8c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c8c6:	d807      	bhi.n	800c8d8 <_printf_i+0x28>
 800c8c8:	2f62      	cmp	r7, #98	@ 0x62
 800c8ca:	d80a      	bhi.n	800c8e2 <_printf_i+0x32>
 800c8cc:	2f00      	cmp	r7, #0
 800c8ce:	f000 80d2 	beq.w	800ca76 <_printf_i+0x1c6>
 800c8d2:	2f58      	cmp	r7, #88	@ 0x58
 800c8d4:	f000 80b9 	beq.w	800ca4a <_printf_i+0x19a>
 800c8d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c8e0:	e03a      	b.n	800c958 <_printf_i+0xa8>
 800c8e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c8e6:	2b15      	cmp	r3, #21
 800c8e8:	d8f6      	bhi.n	800c8d8 <_printf_i+0x28>
 800c8ea:	a101      	add	r1, pc, #4	@ (adr r1, 800c8f0 <_printf_i+0x40>)
 800c8ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8f0:	0800c949 	.word	0x0800c949
 800c8f4:	0800c95d 	.word	0x0800c95d
 800c8f8:	0800c8d9 	.word	0x0800c8d9
 800c8fc:	0800c8d9 	.word	0x0800c8d9
 800c900:	0800c8d9 	.word	0x0800c8d9
 800c904:	0800c8d9 	.word	0x0800c8d9
 800c908:	0800c95d 	.word	0x0800c95d
 800c90c:	0800c8d9 	.word	0x0800c8d9
 800c910:	0800c8d9 	.word	0x0800c8d9
 800c914:	0800c8d9 	.word	0x0800c8d9
 800c918:	0800c8d9 	.word	0x0800c8d9
 800c91c:	0800ca5d 	.word	0x0800ca5d
 800c920:	0800c987 	.word	0x0800c987
 800c924:	0800ca17 	.word	0x0800ca17
 800c928:	0800c8d9 	.word	0x0800c8d9
 800c92c:	0800c8d9 	.word	0x0800c8d9
 800c930:	0800ca7f 	.word	0x0800ca7f
 800c934:	0800c8d9 	.word	0x0800c8d9
 800c938:	0800c987 	.word	0x0800c987
 800c93c:	0800c8d9 	.word	0x0800c8d9
 800c940:	0800c8d9 	.word	0x0800c8d9
 800c944:	0800ca1f 	.word	0x0800ca1f
 800c948:	6833      	ldr	r3, [r6, #0]
 800c94a:	1d1a      	adds	r2, r3, #4
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	6032      	str	r2, [r6, #0]
 800c950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c958:	2301      	movs	r3, #1
 800c95a:	e09d      	b.n	800ca98 <_printf_i+0x1e8>
 800c95c:	6833      	ldr	r3, [r6, #0]
 800c95e:	6820      	ldr	r0, [r4, #0]
 800c960:	1d19      	adds	r1, r3, #4
 800c962:	6031      	str	r1, [r6, #0]
 800c964:	0606      	lsls	r6, r0, #24
 800c966:	d501      	bpl.n	800c96c <_printf_i+0xbc>
 800c968:	681d      	ldr	r5, [r3, #0]
 800c96a:	e003      	b.n	800c974 <_printf_i+0xc4>
 800c96c:	0645      	lsls	r5, r0, #25
 800c96e:	d5fb      	bpl.n	800c968 <_printf_i+0xb8>
 800c970:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c974:	2d00      	cmp	r5, #0
 800c976:	da03      	bge.n	800c980 <_printf_i+0xd0>
 800c978:	232d      	movs	r3, #45	@ 0x2d
 800c97a:	426d      	negs	r5, r5
 800c97c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c980:	4859      	ldr	r0, [pc, #356]	@ (800cae8 <_printf_i+0x238>)
 800c982:	230a      	movs	r3, #10
 800c984:	e011      	b.n	800c9aa <_printf_i+0xfa>
 800c986:	6821      	ldr	r1, [r4, #0]
 800c988:	6833      	ldr	r3, [r6, #0]
 800c98a:	0608      	lsls	r0, r1, #24
 800c98c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c990:	d402      	bmi.n	800c998 <_printf_i+0xe8>
 800c992:	0649      	lsls	r1, r1, #25
 800c994:	bf48      	it	mi
 800c996:	b2ad      	uxthmi	r5, r5
 800c998:	2f6f      	cmp	r7, #111	@ 0x6f
 800c99a:	4853      	ldr	r0, [pc, #332]	@ (800cae8 <_printf_i+0x238>)
 800c99c:	6033      	str	r3, [r6, #0]
 800c99e:	bf14      	ite	ne
 800c9a0:	230a      	movne	r3, #10
 800c9a2:	2308      	moveq	r3, #8
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c9aa:	6866      	ldr	r6, [r4, #4]
 800c9ac:	60a6      	str	r6, [r4, #8]
 800c9ae:	2e00      	cmp	r6, #0
 800c9b0:	bfa2      	ittt	ge
 800c9b2:	6821      	ldrge	r1, [r4, #0]
 800c9b4:	f021 0104 	bicge.w	r1, r1, #4
 800c9b8:	6021      	strge	r1, [r4, #0]
 800c9ba:	b90d      	cbnz	r5, 800c9c0 <_printf_i+0x110>
 800c9bc:	2e00      	cmp	r6, #0
 800c9be:	d04b      	beq.n	800ca58 <_printf_i+0x1a8>
 800c9c0:	4616      	mov	r6, r2
 800c9c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c9c6:	fb03 5711 	mls	r7, r3, r1, r5
 800c9ca:	5dc7      	ldrb	r7, [r0, r7]
 800c9cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9d0:	462f      	mov	r7, r5
 800c9d2:	42bb      	cmp	r3, r7
 800c9d4:	460d      	mov	r5, r1
 800c9d6:	d9f4      	bls.n	800c9c2 <_printf_i+0x112>
 800c9d8:	2b08      	cmp	r3, #8
 800c9da:	d10b      	bne.n	800c9f4 <_printf_i+0x144>
 800c9dc:	6823      	ldr	r3, [r4, #0]
 800c9de:	07df      	lsls	r7, r3, #31
 800c9e0:	d508      	bpl.n	800c9f4 <_printf_i+0x144>
 800c9e2:	6923      	ldr	r3, [r4, #16]
 800c9e4:	6861      	ldr	r1, [r4, #4]
 800c9e6:	4299      	cmp	r1, r3
 800c9e8:	bfde      	ittt	le
 800c9ea:	2330      	movle	r3, #48	@ 0x30
 800c9ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c9f4:	1b92      	subs	r2, r2, r6
 800c9f6:	6122      	str	r2, [r4, #16]
 800c9f8:	f8cd a000 	str.w	sl, [sp]
 800c9fc:	464b      	mov	r3, r9
 800c9fe:	aa03      	add	r2, sp, #12
 800ca00:	4621      	mov	r1, r4
 800ca02:	4640      	mov	r0, r8
 800ca04:	f7ff fee6 	bl	800c7d4 <_printf_common>
 800ca08:	3001      	adds	r0, #1
 800ca0a:	d14a      	bne.n	800caa2 <_printf_i+0x1f2>
 800ca0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca10:	b004      	add	sp, #16
 800ca12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	f043 0320 	orr.w	r3, r3, #32
 800ca1c:	6023      	str	r3, [r4, #0]
 800ca1e:	4833      	ldr	r0, [pc, #204]	@ (800caec <_printf_i+0x23c>)
 800ca20:	2778      	movs	r7, #120	@ 0x78
 800ca22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	6831      	ldr	r1, [r6, #0]
 800ca2a:	061f      	lsls	r7, r3, #24
 800ca2c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca30:	d402      	bmi.n	800ca38 <_printf_i+0x188>
 800ca32:	065f      	lsls	r7, r3, #25
 800ca34:	bf48      	it	mi
 800ca36:	b2ad      	uxthmi	r5, r5
 800ca38:	6031      	str	r1, [r6, #0]
 800ca3a:	07d9      	lsls	r1, r3, #31
 800ca3c:	bf44      	itt	mi
 800ca3e:	f043 0320 	orrmi.w	r3, r3, #32
 800ca42:	6023      	strmi	r3, [r4, #0]
 800ca44:	b11d      	cbz	r5, 800ca4e <_printf_i+0x19e>
 800ca46:	2310      	movs	r3, #16
 800ca48:	e7ac      	b.n	800c9a4 <_printf_i+0xf4>
 800ca4a:	4827      	ldr	r0, [pc, #156]	@ (800cae8 <_printf_i+0x238>)
 800ca4c:	e7e9      	b.n	800ca22 <_printf_i+0x172>
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	f023 0320 	bic.w	r3, r3, #32
 800ca54:	6023      	str	r3, [r4, #0]
 800ca56:	e7f6      	b.n	800ca46 <_printf_i+0x196>
 800ca58:	4616      	mov	r6, r2
 800ca5a:	e7bd      	b.n	800c9d8 <_printf_i+0x128>
 800ca5c:	6833      	ldr	r3, [r6, #0]
 800ca5e:	6825      	ldr	r5, [r4, #0]
 800ca60:	6961      	ldr	r1, [r4, #20]
 800ca62:	1d18      	adds	r0, r3, #4
 800ca64:	6030      	str	r0, [r6, #0]
 800ca66:	062e      	lsls	r6, r5, #24
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	d501      	bpl.n	800ca70 <_printf_i+0x1c0>
 800ca6c:	6019      	str	r1, [r3, #0]
 800ca6e:	e002      	b.n	800ca76 <_printf_i+0x1c6>
 800ca70:	0668      	lsls	r0, r5, #25
 800ca72:	d5fb      	bpl.n	800ca6c <_printf_i+0x1bc>
 800ca74:	8019      	strh	r1, [r3, #0]
 800ca76:	2300      	movs	r3, #0
 800ca78:	6123      	str	r3, [r4, #16]
 800ca7a:	4616      	mov	r6, r2
 800ca7c:	e7bc      	b.n	800c9f8 <_printf_i+0x148>
 800ca7e:	6833      	ldr	r3, [r6, #0]
 800ca80:	1d1a      	adds	r2, r3, #4
 800ca82:	6032      	str	r2, [r6, #0]
 800ca84:	681e      	ldr	r6, [r3, #0]
 800ca86:	6862      	ldr	r2, [r4, #4]
 800ca88:	2100      	movs	r1, #0
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	f7f3 fba0 	bl	80001d0 <memchr>
 800ca90:	b108      	cbz	r0, 800ca96 <_printf_i+0x1e6>
 800ca92:	1b80      	subs	r0, r0, r6
 800ca94:	6060      	str	r0, [r4, #4]
 800ca96:	6863      	ldr	r3, [r4, #4]
 800ca98:	6123      	str	r3, [r4, #16]
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800caa0:	e7aa      	b.n	800c9f8 <_printf_i+0x148>
 800caa2:	6923      	ldr	r3, [r4, #16]
 800caa4:	4632      	mov	r2, r6
 800caa6:	4649      	mov	r1, r9
 800caa8:	4640      	mov	r0, r8
 800caaa:	47d0      	blx	sl
 800caac:	3001      	adds	r0, #1
 800caae:	d0ad      	beq.n	800ca0c <_printf_i+0x15c>
 800cab0:	6823      	ldr	r3, [r4, #0]
 800cab2:	079b      	lsls	r3, r3, #30
 800cab4:	d413      	bmi.n	800cade <_printf_i+0x22e>
 800cab6:	68e0      	ldr	r0, [r4, #12]
 800cab8:	9b03      	ldr	r3, [sp, #12]
 800caba:	4298      	cmp	r0, r3
 800cabc:	bfb8      	it	lt
 800cabe:	4618      	movlt	r0, r3
 800cac0:	e7a6      	b.n	800ca10 <_printf_i+0x160>
 800cac2:	2301      	movs	r3, #1
 800cac4:	4632      	mov	r2, r6
 800cac6:	4649      	mov	r1, r9
 800cac8:	4640      	mov	r0, r8
 800caca:	47d0      	blx	sl
 800cacc:	3001      	adds	r0, #1
 800cace:	d09d      	beq.n	800ca0c <_printf_i+0x15c>
 800cad0:	3501      	adds	r5, #1
 800cad2:	68e3      	ldr	r3, [r4, #12]
 800cad4:	9903      	ldr	r1, [sp, #12]
 800cad6:	1a5b      	subs	r3, r3, r1
 800cad8:	42ab      	cmp	r3, r5
 800cada:	dcf2      	bgt.n	800cac2 <_printf_i+0x212>
 800cadc:	e7eb      	b.n	800cab6 <_printf_i+0x206>
 800cade:	2500      	movs	r5, #0
 800cae0:	f104 0619 	add.w	r6, r4, #25
 800cae4:	e7f5      	b.n	800cad2 <_printf_i+0x222>
 800cae6:	bf00      	nop
 800cae8:	08011454 	.word	0x08011454
 800caec:	08011465 	.word	0x08011465

0800caf0 <_scanf_float>:
 800caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	b087      	sub	sp, #28
 800caf6:	4617      	mov	r7, r2
 800caf8:	9303      	str	r3, [sp, #12]
 800cafa:	688b      	ldr	r3, [r1, #8]
 800cafc:	1e5a      	subs	r2, r3, #1
 800cafe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cb02:	bf81      	itttt	hi
 800cb04:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cb08:	eb03 0b05 	addhi.w	fp, r3, r5
 800cb0c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cb10:	608b      	strhi	r3, [r1, #8]
 800cb12:	680b      	ldr	r3, [r1, #0]
 800cb14:	460a      	mov	r2, r1
 800cb16:	f04f 0500 	mov.w	r5, #0
 800cb1a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cb1e:	f842 3b1c 	str.w	r3, [r2], #28
 800cb22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cb26:	4680      	mov	r8, r0
 800cb28:	460c      	mov	r4, r1
 800cb2a:	bf98      	it	ls
 800cb2c:	f04f 0b00 	movls.w	fp, #0
 800cb30:	9201      	str	r2, [sp, #4]
 800cb32:	4616      	mov	r6, r2
 800cb34:	46aa      	mov	sl, r5
 800cb36:	46a9      	mov	r9, r5
 800cb38:	9502      	str	r5, [sp, #8]
 800cb3a:	68a2      	ldr	r2, [r4, #8]
 800cb3c:	b152      	cbz	r2, 800cb54 <_scanf_float+0x64>
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	2b4e      	cmp	r3, #78	@ 0x4e
 800cb44:	d864      	bhi.n	800cc10 <_scanf_float+0x120>
 800cb46:	2b40      	cmp	r3, #64	@ 0x40
 800cb48:	d83c      	bhi.n	800cbc4 <_scanf_float+0xd4>
 800cb4a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cb4e:	b2c8      	uxtb	r0, r1
 800cb50:	280e      	cmp	r0, #14
 800cb52:	d93a      	bls.n	800cbca <_scanf_float+0xda>
 800cb54:	f1b9 0f00 	cmp.w	r9, #0
 800cb58:	d003      	beq.n	800cb62 <_scanf_float+0x72>
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb60:	6023      	str	r3, [r4, #0]
 800cb62:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cb66:	f1ba 0f01 	cmp.w	sl, #1
 800cb6a:	f200 8117 	bhi.w	800cd9c <_scanf_float+0x2ac>
 800cb6e:	9b01      	ldr	r3, [sp, #4]
 800cb70:	429e      	cmp	r6, r3
 800cb72:	f200 8108 	bhi.w	800cd86 <_scanf_float+0x296>
 800cb76:	2001      	movs	r0, #1
 800cb78:	b007      	add	sp, #28
 800cb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb7e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cb82:	2a0d      	cmp	r2, #13
 800cb84:	d8e6      	bhi.n	800cb54 <_scanf_float+0x64>
 800cb86:	a101      	add	r1, pc, #4	@ (adr r1, 800cb8c <_scanf_float+0x9c>)
 800cb88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb8c:	0800ccd3 	.word	0x0800ccd3
 800cb90:	0800cb55 	.word	0x0800cb55
 800cb94:	0800cb55 	.word	0x0800cb55
 800cb98:	0800cb55 	.word	0x0800cb55
 800cb9c:	0800cd33 	.word	0x0800cd33
 800cba0:	0800cd0b 	.word	0x0800cd0b
 800cba4:	0800cb55 	.word	0x0800cb55
 800cba8:	0800cb55 	.word	0x0800cb55
 800cbac:	0800cce1 	.word	0x0800cce1
 800cbb0:	0800cb55 	.word	0x0800cb55
 800cbb4:	0800cb55 	.word	0x0800cb55
 800cbb8:	0800cb55 	.word	0x0800cb55
 800cbbc:	0800cb55 	.word	0x0800cb55
 800cbc0:	0800cc99 	.word	0x0800cc99
 800cbc4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cbc8:	e7db      	b.n	800cb82 <_scanf_float+0x92>
 800cbca:	290e      	cmp	r1, #14
 800cbcc:	d8c2      	bhi.n	800cb54 <_scanf_float+0x64>
 800cbce:	a001      	add	r0, pc, #4	@ (adr r0, 800cbd4 <_scanf_float+0xe4>)
 800cbd0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cbd4:	0800cc89 	.word	0x0800cc89
 800cbd8:	0800cb55 	.word	0x0800cb55
 800cbdc:	0800cc89 	.word	0x0800cc89
 800cbe0:	0800cd1f 	.word	0x0800cd1f
 800cbe4:	0800cb55 	.word	0x0800cb55
 800cbe8:	0800cc31 	.word	0x0800cc31
 800cbec:	0800cc6f 	.word	0x0800cc6f
 800cbf0:	0800cc6f 	.word	0x0800cc6f
 800cbf4:	0800cc6f 	.word	0x0800cc6f
 800cbf8:	0800cc6f 	.word	0x0800cc6f
 800cbfc:	0800cc6f 	.word	0x0800cc6f
 800cc00:	0800cc6f 	.word	0x0800cc6f
 800cc04:	0800cc6f 	.word	0x0800cc6f
 800cc08:	0800cc6f 	.word	0x0800cc6f
 800cc0c:	0800cc6f 	.word	0x0800cc6f
 800cc10:	2b6e      	cmp	r3, #110	@ 0x6e
 800cc12:	d809      	bhi.n	800cc28 <_scanf_float+0x138>
 800cc14:	2b60      	cmp	r3, #96	@ 0x60
 800cc16:	d8b2      	bhi.n	800cb7e <_scanf_float+0x8e>
 800cc18:	2b54      	cmp	r3, #84	@ 0x54
 800cc1a:	d07b      	beq.n	800cd14 <_scanf_float+0x224>
 800cc1c:	2b59      	cmp	r3, #89	@ 0x59
 800cc1e:	d199      	bne.n	800cb54 <_scanf_float+0x64>
 800cc20:	2d07      	cmp	r5, #7
 800cc22:	d197      	bne.n	800cb54 <_scanf_float+0x64>
 800cc24:	2508      	movs	r5, #8
 800cc26:	e02c      	b.n	800cc82 <_scanf_float+0x192>
 800cc28:	2b74      	cmp	r3, #116	@ 0x74
 800cc2a:	d073      	beq.n	800cd14 <_scanf_float+0x224>
 800cc2c:	2b79      	cmp	r3, #121	@ 0x79
 800cc2e:	e7f6      	b.n	800cc1e <_scanf_float+0x12e>
 800cc30:	6821      	ldr	r1, [r4, #0]
 800cc32:	05c8      	lsls	r0, r1, #23
 800cc34:	d51b      	bpl.n	800cc6e <_scanf_float+0x17e>
 800cc36:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cc3a:	6021      	str	r1, [r4, #0]
 800cc3c:	f109 0901 	add.w	r9, r9, #1
 800cc40:	f1bb 0f00 	cmp.w	fp, #0
 800cc44:	d003      	beq.n	800cc4e <_scanf_float+0x15e>
 800cc46:	3201      	adds	r2, #1
 800cc48:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800cc4c:	60a2      	str	r2, [r4, #8]
 800cc4e:	68a3      	ldr	r3, [r4, #8]
 800cc50:	3b01      	subs	r3, #1
 800cc52:	60a3      	str	r3, [r4, #8]
 800cc54:	6923      	ldr	r3, [r4, #16]
 800cc56:	3301      	adds	r3, #1
 800cc58:	6123      	str	r3, [r4, #16]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	3b01      	subs	r3, #1
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	607b      	str	r3, [r7, #4]
 800cc62:	f340 8087 	ble.w	800cd74 <_scanf_float+0x284>
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	603b      	str	r3, [r7, #0]
 800cc6c:	e765      	b.n	800cb3a <_scanf_float+0x4a>
 800cc6e:	eb1a 0105 	adds.w	r1, sl, r5
 800cc72:	f47f af6f 	bne.w	800cb54 <_scanf_float+0x64>
 800cc76:	6822      	ldr	r2, [r4, #0]
 800cc78:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cc7c:	6022      	str	r2, [r4, #0]
 800cc7e:	460d      	mov	r5, r1
 800cc80:	468a      	mov	sl, r1
 800cc82:	f806 3b01 	strb.w	r3, [r6], #1
 800cc86:	e7e2      	b.n	800cc4e <_scanf_float+0x15e>
 800cc88:	6822      	ldr	r2, [r4, #0]
 800cc8a:	0610      	lsls	r0, r2, #24
 800cc8c:	f57f af62 	bpl.w	800cb54 <_scanf_float+0x64>
 800cc90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc94:	6022      	str	r2, [r4, #0]
 800cc96:	e7f4      	b.n	800cc82 <_scanf_float+0x192>
 800cc98:	f1ba 0f00 	cmp.w	sl, #0
 800cc9c:	d10e      	bne.n	800ccbc <_scanf_float+0x1cc>
 800cc9e:	f1b9 0f00 	cmp.w	r9, #0
 800cca2:	d10e      	bne.n	800ccc2 <_scanf_float+0x1d2>
 800cca4:	6822      	ldr	r2, [r4, #0]
 800cca6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ccaa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ccae:	d108      	bne.n	800ccc2 <_scanf_float+0x1d2>
 800ccb0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ccb4:	6022      	str	r2, [r4, #0]
 800ccb6:	f04f 0a01 	mov.w	sl, #1
 800ccba:	e7e2      	b.n	800cc82 <_scanf_float+0x192>
 800ccbc:	f1ba 0f02 	cmp.w	sl, #2
 800ccc0:	d055      	beq.n	800cd6e <_scanf_float+0x27e>
 800ccc2:	2d01      	cmp	r5, #1
 800ccc4:	d002      	beq.n	800cccc <_scanf_float+0x1dc>
 800ccc6:	2d04      	cmp	r5, #4
 800ccc8:	f47f af44 	bne.w	800cb54 <_scanf_float+0x64>
 800cccc:	3501      	adds	r5, #1
 800ccce:	b2ed      	uxtb	r5, r5
 800ccd0:	e7d7      	b.n	800cc82 <_scanf_float+0x192>
 800ccd2:	f1ba 0f01 	cmp.w	sl, #1
 800ccd6:	f47f af3d 	bne.w	800cb54 <_scanf_float+0x64>
 800ccda:	f04f 0a02 	mov.w	sl, #2
 800ccde:	e7d0      	b.n	800cc82 <_scanf_float+0x192>
 800cce0:	b97d      	cbnz	r5, 800cd02 <_scanf_float+0x212>
 800cce2:	f1b9 0f00 	cmp.w	r9, #0
 800cce6:	f47f af38 	bne.w	800cb5a <_scanf_float+0x6a>
 800ccea:	6822      	ldr	r2, [r4, #0]
 800ccec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ccf0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ccf4:	f040 8108 	bne.w	800cf08 <_scanf_float+0x418>
 800ccf8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ccfc:	6022      	str	r2, [r4, #0]
 800ccfe:	2501      	movs	r5, #1
 800cd00:	e7bf      	b.n	800cc82 <_scanf_float+0x192>
 800cd02:	2d03      	cmp	r5, #3
 800cd04:	d0e2      	beq.n	800cccc <_scanf_float+0x1dc>
 800cd06:	2d05      	cmp	r5, #5
 800cd08:	e7de      	b.n	800ccc8 <_scanf_float+0x1d8>
 800cd0a:	2d02      	cmp	r5, #2
 800cd0c:	f47f af22 	bne.w	800cb54 <_scanf_float+0x64>
 800cd10:	2503      	movs	r5, #3
 800cd12:	e7b6      	b.n	800cc82 <_scanf_float+0x192>
 800cd14:	2d06      	cmp	r5, #6
 800cd16:	f47f af1d 	bne.w	800cb54 <_scanf_float+0x64>
 800cd1a:	2507      	movs	r5, #7
 800cd1c:	e7b1      	b.n	800cc82 <_scanf_float+0x192>
 800cd1e:	6822      	ldr	r2, [r4, #0]
 800cd20:	0591      	lsls	r1, r2, #22
 800cd22:	f57f af17 	bpl.w	800cb54 <_scanf_float+0x64>
 800cd26:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cd2a:	6022      	str	r2, [r4, #0]
 800cd2c:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd30:	e7a7      	b.n	800cc82 <_scanf_float+0x192>
 800cd32:	6822      	ldr	r2, [r4, #0]
 800cd34:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cd38:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cd3c:	d006      	beq.n	800cd4c <_scanf_float+0x25c>
 800cd3e:	0550      	lsls	r0, r2, #21
 800cd40:	f57f af08 	bpl.w	800cb54 <_scanf_float+0x64>
 800cd44:	f1b9 0f00 	cmp.w	r9, #0
 800cd48:	f000 80de 	beq.w	800cf08 <_scanf_float+0x418>
 800cd4c:	0591      	lsls	r1, r2, #22
 800cd4e:	bf58      	it	pl
 800cd50:	9902      	ldrpl	r1, [sp, #8]
 800cd52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd56:	bf58      	it	pl
 800cd58:	eba9 0101 	subpl.w	r1, r9, r1
 800cd5c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cd60:	bf58      	it	pl
 800cd62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cd66:	6022      	str	r2, [r4, #0]
 800cd68:	f04f 0900 	mov.w	r9, #0
 800cd6c:	e789      	b.n	800cc82 <_scanf_float+0x192>
 800cd6e:	f04f 0a03 	mov.w	sl, #3
 800cd72:	e786      	b.n	800cc82 <_scanf_float+0x192>
 800cd74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cd78:	4639      	mov	r1, r7
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	4798      	blx	r3
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	f43f aedb 	beq.w	800cb3a <_scanf_float+0x4a>
 800cd84:	e6e6      	b.n	800cb54 <_scanf_float+0x64>
 800cd86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd8e:	463a      	mov	r2, r7
 800cd90:	4640      	mov	r0, r8
 800cd92:	4798      	blx	r3
 800cd94:	6923      	ldr	r3, [r4, #16]
 800cd96:	3b01      	subs	r3, #1
 800cd98:	6123      	str	r3, [r4, #16]
 800cd9a:	e6e8      	b.n	800cb6e <_scanf_float+0x7e>
 800cd9c:	1e6b      	subs	r3, r5, #1
 800cd9e:	2b06      	cmp	r3, #6
 800cda0:	d824      	bhi.n	800cdec <_scanf_float+0x2fc>
 800cda2:	2d02      	cmp	r5, #2
 800cda4:	d836      	bhi.n	800ce14 <_scanf_float+0x324>
 800cda6:	9b01      	ldr	r3, [sp, #4]
 800cda8:	429e      	cmp	r6, r3
 800cdaa:	f67f aee4 	bls.w	800cb76 <_scanf_float+0x86>
 800cdae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdb6:	463a      	mov	r2, r7
 800cdb8:	4640      	mov	r0, r8
 800cdba:	4798      	blx	r3
 800cdbc:	6923      	ldr	r3, [r4, #16]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	6123      	str	r3, [r4, #16]
 800cdc2:	e7f0      	b.n	800cda6 <_scanf_float+0x2b6>
 800cdc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdc8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cdcc:	463a      	mov	r2, r7
 800cdce:	4640      	mov	r0, r8
 800cdd0:	4798      	blx	r3
 800cdd2:	6923      	ldr	r3, [r4, #16]
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	6123      	str	r3, [r4, #16]
 800cdd8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cddc:	fa5f fa8a 	uxtb.w	sl, sl
 800cde0:	f1ba 0f02 	cmp.w	sl, #2
 800cde4:	d1ee      	bne.n	800cdc4 <_scanf_float+0x2d4>
 800cde6:	3d03      	subs	r5, #3
 800cde8:	b2ed      	uxtb	r5, r5
 800cdea:	1b76      	subs	r6, r6, r5
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	05da      	lsls	r2, r3, #23
 800cdf0:	d530      	bpl.n	800ce54 <_scanf_float+0x364>
 800cdf2:	055b      	lsls	r3, r3, #21
 800cdf4:	d511      	bpl.n	800ce1a <_scanf_float+0x32a>
 800cdf6:	9b01      	ldr	r3, [sp, #4]
 800cdf8:	429e      	cmp	r6, r3
 800cdfa:	f67f aebc 	bls.w	800cb76 <_scanf_float+0x86>
 800cdfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce06:	463a      	mov	r2, r7
 800ce08:	4640      	mov	r0, r8
 800ce0a:	4798      	blx	r3
 800ce0c:	6923      	ldr	r3, [r4, #16]
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	6123      	str	r3, [r4, #16]
 800ce12:	e7f0      	b.n	800cdf6 <_scanf_float+0x306>
 800ce14:	46aa      	mov	sl, r5
 800ce16:	46b3      	mov	fp, r6
 800ce18:	e7de      	b.n	800cdd8 <_scanf_float+0x2e8>
 800ce1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ce1e:	6923      	ldr	r3, [r4, #16]
 800ce20:	2965      	cmp	r1, #101	@ 0x65
 800ce22:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ce26:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800ce2a:	6123      	str	r3, [r4, #16]
 800ce2c:	d00c      	beq.n	800ce48 <_scanf_float+0x358>
 800ce2e:	2945      	cmp	r1, #69	@ 0x45
 800ce30:	d00a      	beq.n	800ce48 <_scanf_float+0x358>
 800ce32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce36:	463a      	mov	r2, r7
 800ce38:	4640      	mov	r0, r8
 800ce3a:	4798      	blx	r3
 800ce3c:	6923      	ldr	r3, [r4, #16]
 800ce3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ce42:	3b01      	subs	r3, #1
 800ce44:	1eb5      	subs	r5, r6, #2
 800ce46:	6123      	str	r3, [r4, #16]
 800ce48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce4c:	463a      	mov	r2, r7
 800ce4e:	4640      	mov	r0, r8
 800ce50:	4798      	blx	r3
 800ce52:	462e      	mov	r6, r5
 800ce54:	6822      	ldr	r2, [r4, #0]
 800ce56:	f012 0210 	ands.w	r2, r2, #16
 800ce5a:	d001      	beq.n	800ce60 <_scanf_float+0x370>
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	e68b      	b.n	800cb78 <_scanf_float+0x88>
 800ce60:	7032      	strb	r2, [r6, #0]
 800ce62:	6823      	ldr	r3, [r4, #0]
 800ce64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ce68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce6c:	d11c      	bne.n	800cea8 <_scanf_float+0x3b8>
 800ce6e:	9b02      	ldr	r3, [sp, #8]
 800ce70:	454b      	cmp	r3, r9
 800ce72:	eba3 0209 	sub.w	r2, r3, r9
 800ce76:	d123      	bne.n	800cec0 <_scanf_float+0x3d0>
 800ce78:	9901      	ldr	r1, [sp, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	4640      	mov	r0, r8
 800ce7e:	f002 fc6f 	bl	800f760 <_strtod_r>
 800ce82:	9b03      	ldr	r3, [sp, #12]
 800ce84:	6821      	ldr	r1, [r4, #0]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f011 0f02 	tst.w	r1, #2
 800ce8c:	ec57 6b10 	vmov	r6, r7, d0
 800ce90:	f103 0204 	add.w	r2, r3, #4
 800ce94:	d01f      	beq.n	800ced6 <_scanf_float+0x3e6>
 800ce96:	9903      	ldr	r1, [sp, #12]
 800ce98:	600a      	str	r2, [r1, #0]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	e9c3 6700 	strd	r6, r7, [r3]
 800cea0:	68e3      	ldr	r3, [r4, #12]
 800cea2:	3301      	adds	r3, #1
 800cea4:	60e3      	str	r3, [r4, #12]
 800cea6:	e7d9      	b.n	800ce5c <_scanf_float+0x36c>
 800cea8:	9b04      	ldr	r3, [sp, #16]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d0e4      	beq.n	800ce78 <_scanf_float+0x388>
 800ceae:	9905      	ldr	r1, [sp, #20]
 800ceb0:	230a      	movs	r3, #10
 800ceb2:	3101      	adds	r1, #1
 800ceb4:	4640      	mov	r0, r8
 800ceb6:	f002 fcd3 	bl	800f860 <_strtol_r>
 800ceba:	9b04      	ldr	r3, [sp, #16]
 800cebc:	9e05      	ldr	r6, [sp, #20]
 800cebe:	1ac2      	subs	r2, r0, r3
 800cec0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cec4:	429e      	cmp	r6, r3
 800cec6:	bf28      	it	cs
 800cec8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cecc:	4910      	ldr	r1, [pc, #64]	@ (800cf10 <_scanf_float+0x420>)
 800cece:	4630      	mov	r0, r6
 800ced0:	f000 f918 	bl	800d104 <siprintf>
 800ced4:	e7d0      	b.n	800ce78 <_scanf_float+0x388>
 800ced6:	f011 0f04 	tst.w	r1, #4
 800ceda:	9903      	ldr	r1, [sp, #12]
 800cedc:	600a      	str	r2, [r1, #0]
 800cede:	d1dc      	bne.n	800ce9a <_scanf_float+0x3aa>
 800cee0:	681d      	ldr	r5, [r3, #0]
 800cee2:	4632      	mov	r2, r6
 800cee4:	463b      	mov	r3, r7
 800cee6:	4630      	mov	r0, r6
 800cee8:	4639      	mov	r1, r7
 800ceea:	f7f3 fe1f 	bl	8000b2c <__aeabi_dcmpun>
 800ceee:	b128      	cbz	r0, 800cefc <_scanf_float+0x40c>
 800cef0:	4808      	ldr	r0, [pc, #32]	@ (800cf14 <_scanf_float+0x424>)
 800cef2:	f000 fa2d 	bl	800d350 <nanf>
 800cef6:	ed85 0a00 	vstr	s0, [r5]
 800cefa:	e7d1      	b.n	800cea0 <_scanf_float+0x3b0>
 800cefc:	4630      	mov	r0, r6
 800cefe:	4639      	mov	r1, r7
 800cf00:	f7f3 fe72 	bl	8000be8 <__aeabi_d2f>
 800cf04:	6028      	str	r0, [r5, #0]
 800cf06:	e7cb      	b.n	800cea0 <_scanf_float+0x3b0>
 800cf08:	f04f 0900 	mov.w	r9, #0
 800cf0c:	e629      	b.n	800cb62 <_scanf_float+0x72>
 800cf0e:	bf00      	nop
 800cf10:	08011476 	.word	0x08011476
 800cf14:	08011828 	.word	0x08011828

0800cf18 <std>:
 800cf18:	2300      	movs	r3, #0
 800cf1a:	b510      	push	{r4, lr}
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	e9c0 3300 	strd	r3, r3, [r0]
 800cf22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf26:	6083      	str	r3, [r0, #8]
 800cf28:	8181      	strh	r1, [r0, #12]
 800cf2a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cf2c:	81c2      	strh	r2, [r0, #14]
 800cf2e:	6183      	str	r3, [r0, #24]
 800cf30:	4619      	mov	r1, r3
 800cf32:	2208      	movs	r2, #8
 800cf34:	305c      	adds	r0, #92	@ 0x5c
 800cf36:	f000 f974 	bl	800d222 <memset>
 800cf3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf70 <std+0x58>)
 800cf3c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cf3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cf74 <std+0x5c>)
 800cf40:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cf42:	4b0d      	ldr	r3, [pc, #52]	@ (800cf78 <std+0x60>)
 800cf44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf46:	4b0d      	ldr	r3, [pc, #52]	@ (800cf7c <std+0x64>)
 800cf48:	6323      	str	r3, [r4, #48]	@ 0x30
 800cf4a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf80 <std+0x68>)
 800cf4c:	6224      	str	r4, [r4, #32]
 800cf4e:	429c      	cmp	r4, r3
 800cf50:	d006      	beq.n	800cf60 <std+0x48>
 800cf52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cf56:	4294      	cmp	r4, r2
 800cf58:	d002      	beq.n	800cf60 <std+0x48>
 800cf5a:	33d0      	adds	r3, #208	@ 0xd0
 800cf5c:	429c      	cmp	r4, r3
 800cf5e:	d105      	bne.n	800cf6c <std+0x54>
 800cf60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cf64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf68:	f000 b9ee 	b.w	800d348 <__retarget_lock_init_recursive>
 800cf6c:	bd10      	pop	{r4, pc}
 800cf6e:	bf00      	nop
 800cf70:	0800d199 	.word	0x0800d199
 800cf74:	0800d1bf 	.word	0x0800d1bf
 800cf78:	0800d1f7 	.word	0x0800d1f7
 800cf7c:	0800d21b 	.word	0x0800d21b
 800cf80:	20002268 	.word	0x20002268

0800cf84 <stdio_exit_handler>:
 800cf84:	4a02      	ldr	r2, [pc, #8]	@ (800cf90 <stdio_exit_handler+0xc>)
 800cf86:	4903      	ldr	r1, [pc, #12]	@ (800cf94 <stdio_exit_handler+0x10>)
 800cf88:	4803      	ldr	r0, [pc, #12]	@ (800cf98 <stdio_exit_handler+0x14>)
 800cf8a:	f000 b869 	b.w	800d060 <_fwalk_sglue>
 800cf8e:	bf00      	nop
 800cf90:	200001a8 	.word	0x200001a8
 800cf94:	08010251 	.word	0x08010251
 800cf98:	200001b8 	.word	0x200001b8

0800cf9c <cleanup_stdio>:
 800cf9c:	6841      	ldr	r1, [r0, #4]
 800cf9e:	4b0c      	ldr	r3, [pc, #48]	@ (800cfd0 <cleanup_stdio+0x34>)
 800cfa0:	4299      	cmp	r1, r3
 800cfa2:	b510      	push	{r4, lr}
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	d001      	beq.n	800cfac <cleanup_stdio+0x10>
 800cfa8:	f003 f952 	bl	8010250 <_fflush_r>
 800cfac:	68a1      	ldr	r1, [r4, #8]
 800cfae:	4b09      	ldr	r3, [pc, #36]	@ (800cfd4 <cleanup_stdio+0x38>)
 800cfb0:	4299      	cmp	r1, r3
 800cfb2:	d002      	beq.n	800cfba <cleanup_stdio+0x1e>
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f003 f94b 	bl	8010250 <_fflush_r>
 800cfba:	68e1      	ldr	r1, [r4, #12]
 800cfbc:	4b06      	ldr	r3, [pc, #24]	@ (800cfd8 <cleanup_stdio+0x3c>)
 800cfbe:	4299      	cmp	r1, r3
 800cfc0:	d004      	beq.n	800cfcc <cleanup_stdio+0x30>
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfc8:	f003 b942 	b.w	8010250 <_fflush_r>
 800cfcc:	bd10      	pop	{r4, pc}
 800cfce:	bf00      	nop
 800cfd0:	20002268 	.word	0x20002268
 800cfd4:	200022d0 	.word	0x200022d0
 800cfd8:	20002338 	.word	0x20002338

0800cfdc <global_stdio_init.part.0>:
 800cfdc:	b510      	push	{r4, lr}
 800cfde:	4b0b      	ldr	r3, [pc, #44]	@ (800d00c <global_stdio_init.part.0+0x30>)
 800cfe0:	4c0b      	ldr	r4, [pc, #44]	@ (800d010 <global_stdio_init.part.0+0x34>)
 800cfe2:	4a0c      	ldr	r2, [pc, #48]	@ (800d014 <global_stdio_init.part.0+0x38>)
 800cfe4:	601a      	str	r2, [r3, #0]
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	2200      	movs	r2, #0
 800cfea:	2104      	movs	r1, #4
 800cfec:	f7ff ff94 	bl	800cf18 <std>
 800cff0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cff4:	2201      	movs	r2, #1
 800cff6:	2109      	movs	r1, #9
 800cff8:	f7ff ff8e 	bl	800cf18 <std>
 800cffc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d000:	2202      	movs	r2, #2
 800d002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d006:	2112      	movs	r1, #18
 800d008:	f7ff bf86 	b.w	800cf18 <std>
 800d00c:	200023a0 	.word	0x200023a0
 800d010:	20002268 	.word	0x20002268
 800d014:	0800cf85 	.word	0x0800cf85

0800d018 <__sfp_lock_acquire>:
 800d018:	4801      	ldr	r0, [pc, #4]	@ (800d020 <__sfp_lock_acquire+0x8>)
 800d01a:	f000 b996 	b.w	800d34a <__retarget_lock_acquire_recursive>
 800d01e:	bf00      	nop
 800d020:	200023a9 	.word	0x200023a9

0800d024 <__sfp_lock_release>:
 800d024:	4801      	ldr	r0, [pc, #4]	@ (800d02c <__sfp_lock_release+0x8>)
 800d026:	f000 b991 	b.w	800d34c <__retarget_lock_release_recursive>
 800d02a:	bf00      	nop
 800d02c:	200023a9 	.word	0x200023a9

0800d030 <__sinit>:
 800d030:	b510      	push	{r4, lr}
 800d032:	4604      	mov	r4, r0
 800d034:	f7ff fff0 	bl	800d018 <__sfp_lock_acquire>
 800d038:	6a23      	ldr	r3, [r4, #32]
 800d03a:	b11b      	cbz	r3, 800d044 <__sinit+0x14>
 800d03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d040:	f7ff bff0 	b.w	800d024 <__sfp_lock_release>
 800d044:	4b04      	ldr	r3, [pc, #16]	@ (800d058 <__sinit+0x28>)
 800d046:	6223      	str	r3, [r4, #32]
 800d048:	4b04      	ldr	r3, [pc, #16]	@ (800d05c <__sinit+0x2c>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1f5      	bne.n	800d03c <__sinit+0xc>
 800d050:	f7ff ffc4 	bl	800cfdc <global_stdio_init.part.0>
 800d054:	e7f2      	b.n	800d03c <__sinit+0xc>
 800d056:	bf00      	nop
 800d058:	0800cf9d 	.word	0x0800cf9d
 800d05c:	200023a0 	.word	0x200023a0

0800d060 <_fwalk_sglue>:
 800d060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d064:	4607      	mov	r7, r0
 800d066:	4688      	mov	r8, r1
 800d068:	4614      	mov	r4, r2
 800d06a:	2600      	movs	r6, #0
 800d06c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d070:	f1b9 0901 	subs.w	r9, r9, #1
 800d074:	d505      	bpl.n	800d082 <_fwalk_sglue+0x22>
 800d076:	6824      	ldr	r4, [r4, #0]
 800d078:	2c00      	cmp	r4, #0
 800d07a:	d1f7      	bne.n	800d06c <_fwalk_sglue+0xc>
 800d07c:	4630      	mov	r0, r6
 800d07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d082:	89ab      	ldrh	r3, [r5, #12]
 800d084:	2b01      	cmp	r3, #1
 800d086:	d907      	bls.n	800d098 <_fwalk_sglue+0x38>
 800d088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d08c:	3301      	adds	r3, #1
 800d08e:	d003      	beq.n	800d098 <_fwalk_sglue+0x38>
 800d090:	4629      	mov	r1, r5
 800d092:	4638      	mov	r0, r7
 800d094:	47c0      	blx	r8
 800d096:	4306      	orrs	r6, r0
 800d098:	3568      	adds	r5, #104	@ 0x68
 800d09a:	e7e9      	b.n	800d070 <_fwalk_sglue+0x10>

0800d09c <sniprintf>:
 800d09c:	b40c      	push	{r2, r3}
 800d09e:	b530      	push	{r4, r5, lr}
 800d0a0:	4b17      	ldr	r3, [pc, #92]	@ (800d100 <sniprintf+0x64>)
 800d0a2:	1e0c      	subs	r4, r1, #0
 800d0a4:	681d      	ldr	r5, [r3, #0]
 800d0a6:	b09d      	sub	sp, #116	@ 0x74
 800d0a8:	da08      	bge.n	800d0bc <sniprintf+0x20>
 800d0aa:	238b      	movs	r3, #139	@ 0x8b
 800d0ac:	602b      	str	r3, [r5, #0]
 800d0ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0b2:	b01d      	add	sp, #116	@ 0x74
 800d0b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0b8:	b002      	add	sp, #8
 800d0ba:	4770      	bx	lr
 800d0bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d0c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d0c4:	bf14      	ite	ne
 800d0c6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800d0ca:	4623      	moveq	r3, r4
 800d0cc:	9304      	str	r3, [sp, #16]
 800d0ce:	9307      	str	r3, [sp, #28]
 800d0d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d0d4:	9002      	str	r0, [sp, #8]
 800d0d6:	9006      	str	r0, [sp, #24]
 800d0d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d0dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d0de:	ab21      	add	r3, sp, #132	@ 0x84
 800d0e0:	a902      	add	r1, sp, #8
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	9301      	str	r3, [sp, #4]
 800d0e6:	f002 fc19 	bl	800f91c <_svfiprintf_r>
 800d0ea:	1c43      	adds	r3, r0, #1
 800d0ec:	bfbc      	itt	lt
 800d0ee:	238b      	movlt	r3, #139	@ 0x8b
 800d0f0:	602b      	strlt	r3, [r5, #0]
 800d0f2:	2c00      	cmp	r4, #0
 800d0f4:	d0dd      	beq.n	800d0b2 <sniprintf+0x16>
 800d0f6:	9b02      	ldr	r3, [sp, #8]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	701a      	strb	r2, [r3, #0]
 800d0fc:	e7d9      	b.n	800d0b2 <sniprintf+0x16>
 800d0fe:	bf00      	nop
 800d100:	200001b4 	.word	0x200001b4

0800d104 <siprintf>:
 800d104:	b40e      	push	{r1, r2, r3}
 800d106:	b500      	push	{lr}
 800d108:	b09c      	sub	sp, #112	@ 0x70
 800d10a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d10c:	9002      	str	r0, [sp, #8]
 800d10e:	9006      	str	r0, [sp, #24]
 800d110:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d114:	4809      	ldr	r0, [pc, #36]	@ (800d13c <siprintf+0x38>)
 800d116:	9107      	str	r1, [sp, #28]
 800d118:	9104      	str	r1, [sp, #16]
 800d11a:	4909      	ldr	r1, [pc, #36]	@ (800d140 <siprintf+0x3c>)
 800d11c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d120:	9105      	str	r1, [sp, #20]
 800d122:	6800      	ldr	r0, [r0, #0]
 800d124:	9301      	str	r3, [sp, #4]
 800d126:	a902      	add	r1, sp, #8
 800d128:	f002 fbf8 	bl	800f91c <_svfiprintf_r>
 800d12c:	9b02      	ldr	r3, [sp, #8]
 800d12e:	2200      	movs	r2, #0
 800d130:	701a      	strb	r2, [r3, #0]
 800d132:	b01c      	add	sp, #112	@ 0x70
 800d134:	f85d eb04 	ldr.w	lr, [sp], #4
 800d138:	b003      	add	sp, #12
 800d13a:	4770      	bx	lr
 800d13c:	200001b4 	.word	0x200001b4
 800d140:	ffff0208 	.word	0xffff0208

0800d144 <siscanf>:
 800d144:	b40e      	push	{r1, r2, r3}
 800d146:	b530      	push	{r4, r5, lr}
 800d148:	b09c      	sub	sp, #112	@ 0x70
 800d14a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d14c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800d150:	f854 5b04 	ldr.w	r5, [r4], #4
 800d154:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d158:	9002      	str	r0, [sp, #8]
 800d15a:	9006      	str	r0, [sp, #24]
 800d15c:	f7f3 f888 	bl	8000270 <strlen>
 800d160:	4b0b      	ldr	r3, [pc, #44]	@ (800d190 <siscanf+0x4c>)
 800d162:	9003      	str	r0, [sp, #12]
 800d164:	9007      	str	r0, [sp, #28]
 800d166:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d168:	480a      	ldr	r0, [pc, #40]	@ (800d194 <siscanf+0x50>)
 800d16a:	9401      	str	r4, [sp, #4]
 800d16c:	2300      	movs	r3, #0
 800d16e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d170:	9314      	str	r3, [sp, #80]	@ 0x50
 800d172:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d176:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d17a:	462a      	mov	r2, r5
 800d17c:	4623      	mov	r3, r4
 800d17e:	a902      	add	r1, sp, #8
 800d180:	6800      	ldr	r0, [r0, #0]
 800d182:	f002 fd1f 	bl	800fbc4 <__ssvfiscanf_r>
 800d186:	b01c      	add	sp, #112	@ 0x70
 800d188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d18c:	b003      	add	sp, #12
 800d18e:	4770      	bx	lr
 800d190:	0800d1bb 	.word	0x0800d1bb
 800d194:	200001b4 	.word	0x200001b4

0800d198 <__sread>:
 800d198:	b510      	push	{r4, lr}
 800d19a:	460c      	mov	r4, r1
 800d19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1a0:	f000 f884 	bl	800d2ac <_read_r>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	bfab      	itete	ge
 800d1a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d1aa:	89a3      	ldrhlt	r3, [r4, #12]
 800d1ac:	181b      	addge	r3, r3, r0
 800d1ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d1b2:	bfac      	ite	ge
 800d1b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d1b6:	81a3      	strhlt	r3, [r4, #12]
 800d1b8:	bd10      	pop	{r4, pc}

0800d1ba <__seofread>:
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	4770      	bx	lr

0800d1be <__swrite>:
 800d1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c2:	461f      	mov	r7, r3
 800d1c4:	898b      	ldrh	r3, [r1, #12]
 800d1c6:	05db      	lsls	r3, r3, #23
 800d1c8:	4605      	mov	r5, r0
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	4616      	mov	r6, r2
 800d1ce:	d505      	bpl.n	800d1dc <__swrite+0x1e>
 800d1d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1d4:	2302      	movs	r3, #2
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f000 f856 	bl	800d288 <_lseek_r>
 800d1dc:	89a3      	ldrh	r3, [r4, #12]
 800d1de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d1e6:	81a3      	strh	r3, [r4, #12]
 800d1e8:	4632      	mov	r2, r6
 800d1ea:	463b      	mov	r3, r7
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f2:	f000 b86d 	b.w	800d2d0 <_write_r>

0800d1f6 <__sseek>:
 800d1f6:	b510      	push	{r4, lr}
 800d1f8:	460c      	mov	r4, r1
 800d1fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1fe:	f000 f843 	bl	800d288 <_lseek_r>
 800d202:	1c43      	adds	r3, r0, #1
 800d204:	89a3      	ldrh	r3, [r4, #12]
 800d206:	bf15      	itete	ne
 800d208:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d20a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d20e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d212:	81a3      	strheq	r3, [r4, #12]
 800d214:	bf18      	it	ne
 800d216:	81a3      	strhne	r3, [r4, #12]
 800d218:	bd10      	pop	{r4, pc}

0800d21a <__sclose>:
 800d21a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d21e:	f000 b823 	b.w	800d268 <_close_r>

0800d222 <memset>:
 800d222:	4402      	add	r2, r0
 800d224:	4603      	mov	r3, r0
 800d226:	4293      	cmp	r3, r2
 800d228:	d100      	bne.n	800d22c <memset+0xa>
 800d22a:	4770      	bx	lr
 800d22c:	f803 1b01 	strb.w	r1, [r3], #1
 800d230:	e7f9      	b.n	800d226 <memset+0x4>

0800d232 <strstr>:
 800d232:	780a      	ldrb	r2, [r1, #0]
 800d234:	b570      	push	{r4, r5, r6, lr}
 800d236:	b96a      	cbnz	r2, 800d254 <strstr+0x22>
 800d238:	bd70      	pop	{r4, r5, r6, pc}
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d109      	bne.n	800d252 <strstr+0x20>
 800d23e:	460c      	mov	r4, r1
 800d240:	4605      	mov	r5, r0
 800d242:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d246:	2b00      	cmp	r3, #0
 800d248:	d0f6      	beq.n	800d238 <strstr+0x6>
 800d24a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d24e:	429e      	cmp	r6, r3
 800d250:	d0f7      	beq.n	800d242 <strstr+0x10>
 800d252:	3001      	adds	r0, #1
 800d254:	7803      	ldrb	r3, [r0, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1ef      	bne.n	800d23a <strstr+0x8>
 800d25a:	4618      	mov	r0, r3
 800d25c:	e7ec      	b.n	800d238 <strstr+0x6>
	...

0800d260 <_localeconv_r>:
 800d260:	4800      	ldr	r0, [pc, #0]	@ (800d264 <_localeconv_r+0x4>)
 800d262:	4770      	bx	lr
 800d264:	200002f4 	.word	0x200002f4

0800d268 <_close_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4d06      	ldr	r5, [pc, #24]	@ (800d284 <_close_r+0x1c>)
 800d26c:	2300      	movs	r3, #0
 800d26e:	4604      	mov	r4, r0
 800d270:	4608      	mov	r0, r1
 800d272:	602b      	str	r3, [r5, #0]
 800d274:	f7f4 fbfc 	bl	8001a70 <_close>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_close_r+0x1a>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_close_r+0x1a>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	200023a4 	.word	0x200023a4

0800d288 <_lseek_r>:
 800d288:	b538      	push	{r3, r4, r5, lr}
 800d28a:	4d07      	ldr	r5, [pc, #28]	@ (800d2a8 <_lseek_r+0x20>)
 800d28c:	4604      	mov	r4, r0
 800d28e:	4608      	mov	r0, r1
 800d290:	4611      	mov	r1, r2
 800d292:	2200      	movs	r2, #0
 800d294:	602a      	str	r2, [r5, #0]
 800d296:	461a      	mov	r2, r3
 800d298:	f7f4 fc11 	bl	8001abe <_lseek>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_lseek_r+0x1e>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_lseek_r+0x1e>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	200023a4 	.word	0x200023a4

0800d2ac <_read_r>:
 800d2ac:	b538      	push	{r3, r4, r5, lr}
 800d2ae:	4d07      	ldr	r5, [pc, #28]	@ (800d2cc <_read_r+0x20>)
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	4608      	mov	r0, r1
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	602a      	str	r2, [r5, #0]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	f7f4 fb9f 	bl	80019fe <_read>
 800d2c0:	1c43      	adds	r3, r0, #1
 800d2c2:	d102      	bne.n	800d2ca <_read_r+0x1e>
 800d2c4:	682b      	ldr	r3, [r5, #0]
 800d2c6:	b103      	cbz	r3, 800d2ca <_read_r+0x1e>
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	bd38      	pop	{r3, r4, r5, pc}
 800d2cc:	200023a4 	.word	0x200023a4

0800d2d0 <_write_r>:
 800d2d0:	b538      	push	{r3, r4, r5, lr}
 800d2d2:	4d07      	ldr	r5, [pc, #28]	@ (800d2f0 <_write_r+0x20>)
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	4608      	mov	r0, r1
 800d2d8:	4611      	mov	r1, r2
 800d2da:	2200      	movs	r2, #0
 800d2dc:	602a      	str	r2, [r5, #0]
 800d2de:	461a      	mov	r2, r3
 800d2e0:	f7f4 fbaa 	bl	8001a38 <_write>
 800d2e4:	1c43      	adds	r3, r0, #1
 800d2e6:	d102      	bne.n	800d2ee <_write_r+0x1e>
 800d2e8:	682b      	ldr	r3, [r5, #0]
 800d2ea:	b103      	cbz	r3, 800d2ee <_write_r+0x1e>
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	bd38      	pop	{r3, r4, r5, pc}
 800d2f0:	200023a4 	.word	0x200023a4

0800d2f4 <__errno>:
 800d2f4:	4b01      	ldr	r3, [pc, #4]	@ (800d2fc <__errno+0x8>)
 800d2f6:	6818      	ldr	r0, [r3, #0]
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	200001b4 	.word	0x200001b4

0800d300 <__libc_init_array>:
 800d300:	b570      	push	{r4, r5, r6, lr}
 800d302:	4d0d      	ldr	r5, [pc, #52]	@ (800d338 <__libc_init_array+0x38>)
 800d304:	4c0d      	ldr	r4, [pc, #52]	@ (800d33c <__libc_init_array+0x3c>)
 800d306:	1b64      	subs	r4, r4, r5
 800d308:	10a4      	asrs	r4, r4, #2
 800d30a:	2600      	movs	r6, #0
 800d30c:	42a6      	cmp	r6, r4
 800d30e:	d109      	bne.n	800d324 <__libc_init_array+0x24>
 800d310:	4d0b      	ldr	r5, [pc, #44]	@ (800d340 <__libc_init_array+0x40>)
 800d312:	4c0c      	ldr	r4, [pc, #48]	@ (800d344 <__libc_init_array+0x44>)
 800d314:	f003 ffca 	bl	80112ac <_init>
 800d318:	1b64      	subs	r4, r4, r5
 800d31a:	10a4      	asrs	r4, r4, #2
 800d31c:	2600      	movs	r6, #0
 800d31e:	42a6      	cmp	r6, r4
 800d320:	d105      	bne.n	800d32e <__libc_init_array+0x2e>
 800d322:	bd70      	pop	{r4, r5, r6, pc}
 800d324:	f855 3b04 	ldr.w	r3, [r5], #4
 800d328:	4798      	blx	r3
 800d32a:	3601      	adds	r6, #1
 800d32c:	e7ee      	b.n	800d30c <__libc_init_array+0xc>
 800d32e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d332:	4798      	blx	r3
 800d334:	3601      	adds	r6, #1
 800d336:	e7f2      	b.n	800d31e <__libc_init_array+0x1e>
 800d338:	08011894 	.word	0x08011894
 800d33c:	08011894 	.word	0x08011894
 800d340:	08011894 	.word	0x08011894
 800d344:	08011898 	.word	0x08011898

0800d348 <__retarget_lock_init_recursive>:
 800d348:	4770      	bx	lr

0800d34a <__retarget_lock_acquire_recursive>:
 800d34a:	4770      	bx	lr

0800d34c <__retarget_lock_release_recursive>:
 800d34c:	4770      	bx	lr
	...

0800d350 <nanf>:
 800d350:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d358 <nanf+0x8>
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	7fc00000 	.word	0x7fc00000

0800d35c <quorem>:
 800d35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d360:	6903      	ldr	r3, [r0, #16]
 800d362:	690c      	ldr	r4, [r1, #16]
 800d364:	42a3      	cmp	r3, r4
 800d366:	4607      	mov	r7, r0
 800d368:	db7e      	blt.n	800d468 <quorem+0x10c>
 800d36a:	3c01      	subs	r4, #1
 800d36c:	f101 0814 	add.w	r8, r1, #20
 800d370:	00a3      	lsls	r3, r4, #2
 800d372:	f100 0514 	add.w	r5, r0, #20
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d386:	3301      	adds	r3, #1
 800d388:	429a      	cmp	r2, r3
 800d38a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d38e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d392:	d32e      	bcc.n	800d3f2 <quorem+0x96>
 800d394:	f04f 0a00 	mov.w	sl, #0
 800d398:	46c4      	mov	ip, r8
 800d39a:	46ae      	mov	lr, r5
 800d39c:	46d3      	mov	fp, sl
 800d39e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3a2:	b298      	uxth	r0, r3
 800d3a4:	fb06 a000 	mla	r0, r6, r0, sl
 800d3a8:	0c02      	lsrs	r2, r0, #16
 800d3aa:	0c1b      	lsrs	r3, r3, #16
 800d3ac:	fb06 2303 	mla	r3, r6, r3, r2
 800d3b0:	f8de 2000 	ldr.w	r2, [lr]
 800d3b4:	b280      	uxth	r0, r0
 800d3b6:	b292      	uxth	r2, r2
 800d3b8:	1a12      	subs	r2, r2, r0
 800d3ba:	445a      	add	r2, fp
 800d3bc:	f8de 0000 	ldr.w	r0, [lr]
 800d3c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d3ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d3ce:	b292      	uxth	r2, r2
 800d3d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d3d4:	45e1      	cmp	r9, ip
 800d3d6:	f84e 2b04 	str.w	r2, [lr], #4
 800d3da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d3de:	d2de      	bcs.n	800d39e <quorem+0x42>
 800d3e0:	9b00      	ldr	r3, [sp, #0]
 800d3e2:	58eb      	ldr	r3, [r5, r3]
 800d3e4:	b92b      	cbnz	r3, 800d3f2 <quorem+0x96>
 800d3e6:	9b01      	ldr	r3, [sp, #4]
 800d3e8:	3b04      	subs	r3, #4
 800d3ea:	429d      	cmp	r5, r3
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	d32f      	bcc.n	800d450 <quorem+0xf4>
 800d3f0:	613c      	str	r4, [r7, #16]
 800d3f2:	4638      	mov	r0, r7
 800d3f4:	f001 f9c4 	bl	800e780 <__mcmp>
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	db25      	blt.n	800d448 <quorem+0xec>
 800d3fc:	4629      	mov	r1, r5
 800d3fe:	2000      	movs	r0, #0
 800d400:	f858 2b04 	ldr.w	r2, [r8], #4
 800d404:	f8d1 c000 	ldr.w	ip, [r1]
 800d408:	fa1f fe82 	uxth.w	lr, r2
 800d40c:	fa1f f38c 	uxth.w	r3, ip
 800d410:	eba3 030e 	sub.w	r3, r3, lr
 800d414:	4403      	add	r3, r0
 800d416:	0c12      	lsrs	r2, r2, #16
 800d418:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d41c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d420:	b29b      	uxth	r3, r3
 800d422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d426:	45c1      	cmp	r9, r8
 800d428:	f841 3b04 	str.w	r3, [r1], #4
 800d42c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d430:	d2e6      	bcs.n	800d400 <quorem+0xa4>
 800d432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d43a:	b922      	cbnz	r2, 800d446 <quorem+0xea>
 800d43c:	3b04      	subs	r3, #4
 800d43e:	429d      	cmp	r5, r3
 800d440:	461a      	mov	r2, r3
 800d442:	d30b      	bcc.n	800d45c <quorem+0x100>
 800d444:	613c      	str	r4, [r7, #16]
 800d446:	3601      	adds	r6, #1
 800d448:	4630      	mov	r0, r6
 800d44a:	b003      	add	sp, #12
 800d44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d450:	6812      	ldr	r2, [r2, #0]
 800d452:	3b04      	subs	r3, #4
 800d454:	2a00      	cmp	r2, #0
 800d456:	d1cb      	bne.n	800d3f0 <quorem+0x94>
 800d458:	3c01      	subs	r4, #1
 800d45a:	e7c6      	b.n	800d3ea <quorem+0x8e>
 800d45c:	6812      	ldr	r2, [r2, #0]
 800d45e:	3b04      	subs	r3, #4
 800d460:	2a00      	cmp	r2, #0
 800d462:	d1ef      	bne.n	800d444 <quorem+0xe8>
 800d464:	3c01      	subs	r4, #1
 800d466:	e7ea      	b.n	800d43e <quorem+0xe2>
 800d468:	2000      	movs	r0, #0
 800d46a:	e7ee      	b.n	800d44a <quorem+0xee>
 800d46c:	0000      	movs	r0, r0
	...

0800d470 <_dtoa_r>:
 800d470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d474:	69c7      	ldr	r7, [r0, #28]
 800d476:	b099      	sub	sp, #100	@ 0x64
 800d478:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d47c:	ec55 4b10 	vmov	r4, r5, d0
 800d480:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d482:	9109      	str	r1, [sp, #36]	@ 0x24
 800d484:	4683      	mov	fp, r0
 800d486:	920e      	str	r2, [sp, #56]	@ 0x38
 800d488:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d48a:	b97f      	cbnz	r7, 800d4ac <_dtoa_r+0x3c>
 800d48c:	2010      	movs	r0, #16
 800d48e:	f000 fdfd 	bl	800e08c <malloc>
 800d492:	4602      	mov	r2, r0
 800d494:	f8cb 001c 	str.w	r0, [fp, #28]
 800d498:	b920      	cbnz	r0, 800d4a4 <_dtoa_r+0x34>
 800d49a:	4ba7      	ldr	r3, [pc, #668]	@ (800d738 <_dtoa_r+0x2c8>)
 800d49c:	21ef      	movs	r1, #239	@ 0xef
 800d49e:	48a7      	ldr	r0, [pc, #668]	@ (800d73c <_dtoa_r+0x2cc>)
 800d4a0:	f002 ffc6 	bl	8010430 <__assert_func>
 800d4a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d4a8:	6007      	str	r7, [r0, #0]
 800d4aa:	60c7      	str	r7, [r0, #12]
 800d4ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4b0:	6819      	ldr	r1, [r3, #0]
 800d4b2:	b159      	cbz	r1, 800d4cc <_dtoa_r+0x5c>
 800d4b4:	685a      	ldr	r2, [r3, #4]
 800d4b6:	604a      	str	r2, [r1, #4]
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	4093      	lsls	r3, r2
 800d4bc:	608b      	str	r3, [r1, #8]
 800d4be:	4658      	mov	r0, fp
 800d4c0:	f000 feda 	bl	800e278 <_Bfree>
 800d4c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	1e2b      	subs	r3, r5, #0
 800d4ce:	bfb9      	ittee	lt
 800d4d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d4d4:	9303      	strlt	r3, [sp, #12]
 800d4d6:	2300      	movge	r3, #0
 800d4d8:	6033      	strge	r3, [r6, #0]
 800d4da:	9f03      	ldr	r7, [sp, #12]
 800d4dc:	4b98      	ldr	r3, [pc, #608]	@ (800d740 <_dtoa_r+0x2d0>)
 800d4de:	bfbc      	itt	lt
 800d4e0:	2201      	movlt	r2, #1
 800d4e2:	6032      	strlt	r2, [r6, #0]
 800d4e4:	43bb      	bics	r3, r7
 800d4e6:	d112      	bne.n	800d50e <_dtoa_r+0x9e>
 800d4e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d4ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d4ee:	6013      	str	r3, [r2, #0]
 800d4f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d4f4:	4323      	orrs	r3, r4
 800d4f6:	f000 854d 	beq.w	800df94 <_dtoa_r+0xb24>
 800d4fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d4fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d754 <_dtoa_r+0x2e4>
 800d500:	2b00      	cmp	r3, #0
 800d502:	f000 854f 	beq.w	800dfa4 <_dtoa_r+0xb34>
 800d506:	f10a 0303 	add.w	r3, sl, #3
 800d50a:	f000 bd49 	b.w	800dfa0 <_dtoa_r+0xb30>
 800d50e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d512:	2200      	movs	r2, #0
 800d514:	ec51 0b17 	vmov	r0, r1, d7
 800d518:	2300      	movs	r3, #0
 800d51a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d51e:	f7f3 fad3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d522:	4680      	mov	r8, r0
 800d524:	b158      	cbz	r0, 800d53e <_dtoa_r+0xce>
 800d526:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d528:	2301      	movs	r3, #1
 800d52a:	6013      	str	r3, [r2, #0]
 800d52c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d52e:	b113      	cbz	r3, 800d536 <_dtoa_r+0xc6>
 800d530:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d532:	4b84      	ldr	r3, [pc, #528]	@ (800d744 <_dtoa_r+0x2d4>)
 800d534:	6013      	str	r3, [r2, #0]
 800d536:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d758 <_dtoa_r+0x2e8>
 800d53a:	f000 bd33 	b.w	800dfa4 <_dtoa_r+0xb34>
 800d53e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d542:	aa16      	add	r2, sp, #88	@ 0x58
 800d544:	a917      	add	r1, sp, #92	@ 0x5c
 800d546:	4658      	mov	r0, fp
 800d548:	f001 fa3a 	bl	800e9c0 <__d2b>
 800d54c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d550:	4681      	mov	r9, r0
 800d552:	2e00      	cmp	r6, #0
 800d554:	d077      	beq.n	800d646 <_dtoa_r+0x1d6>
 800d556:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d558:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d55c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d564:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d568:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d56c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d570:	4619      	mov	r1, r3
 800d572:	2200      	movs	r2, #0
 800d574:	4b74      	ldr	r3, [pc, #464]	@ (800d748 <_dtoa_r+0x2d8>)
 800d576:	f7f2 fe87 	bl	8000288 <__aeabi_dsub>
 800d57a:	a369      	add	r3, pc, #420	@ (adr r3, 800d720 <_dtoa_r+0x2b0>)
 800d57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d580:	f7f3 f83a 	bl	80005f8 <__aeabi_dmul>
 800d584:	a368      	add	r3, pc, #416	@ (adr r3, 800d728 <_dtoa_r+0x2b8>)
 800d586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58a:	f7f2 fe7f 	bl	800028c <__adddf3>
 800d58e:	4604      	mov	r4, r0
 800d590:	4630      	mov	r0, r6
 800d592:	460d      	mov	r5, r1
 800d594:	f7f2 ffc6 	bl	8000524 <__aeabi_i2d>
 800d598:	a365      	add	r3, pc, #404	@ (adr r3, 800d730 <_dtoa_r+0x2c0>)
 800d59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59e:	f7f3 f82b 	bl	80005f8 <__aeabi_dmul>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	f7f2 fe6f 	bl	800028c <__adddf3>
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	460d      	mov	r5, r1
 800d5b2:	f7f3 fad1 	bl	8000b58 <__aeabi_d2iz>
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	4607      	mov	r7, r0
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	4620      	mov	r0, r4
 800d5be:	4629      	mov	r1, r5
 800d5c0:	f7f3 fa8c 	bl	8000adc <__aeabi_dcmplt>
 800d5c4:	b140      	cbz	r0, 800d5d8 <_dtoa_r+0x168>
 800d5c6:	4638      	mov	r0, r7
 800d5c8:	f7f2 ffac 	bl	8000524 <__aeabi_i2d>
 800d5cc:	4622      	mov	r2, r4
 800d5ce:	462b      	mov	r3, r5
 800d5d0:	f7f3 fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5d4:	b900      	cbnz	r0, 800d5d8 <_dtoa_r+0x168>
 800d5d6:	3f01      	subs	r7, #1
 800d5d8:	2f16      	cmp	r7, #22
 800d5da:	d851      	bhi.n	800d680 <_dtoa_r+0x210>
 800d5dc:	4b5b      	ldr	r3, [pc, #364]	@ (800d74c <_dtoa_r+0x2dc>)
 800d5de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5ea:	f7f3 fa77 	bl	8000adc <__aeabi_dcmplt>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d048      	beq.n	800d684 <_dtoa_r+0x214>
 800d5f2:	3f01      	subs	r7, #1
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d5f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d5fa:	1b9b      	subs	r3, r3, r6
 800d5fc:	1e5a      	subs	r2, r3, #1
 800d5fe:	bf44      	itt	mi
 800d600:	f1c3 0801 	rsbmi	r8, r3, #1
 800d604:	2300      	movmi	r3, #0
 800d606:	9208      	str	r2, [sp, #32]
 800d608:	bf54      	ite	pl
 800d60a:	f04f 0800 	movpl.w	r8, #0
 800d60e:	9308      	strmi	r3, [sp, #32]
 800d610:	2f00      	cmp	r7, #0
 800d612:	db39      	blt.n	800d688 <_dtoa_r+0x218>
 800d614:	9b08      	ldr	r3, [sp, #32]
 800d616:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d618:	443b      	add	r3, r7
 800d61a:	9308      	str	r3, [sp, #32]
 800d61c:	2300      	movs	r3, #0
 800d61e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d622:	2b09      	cmp	r3, #9
 800d624:	d864      	bhi.n	800d6f0 <_dtoa_r+0x280>
 800d626:	2b05      	cmp	r3, #5
 800d628:	bfc4      	itt	gt
 800d62a:	3b04      	subgt	r3, #4
 800d62c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d630:	f1a3 0302 	sub.w	r3, r3, #2
 800d634:	bfcc      	ite	gt
 800d636:	2400      	movgt	r4, #0
 800d638:	2401      	movle	r4, #1
 800d63a:	2b03      	cmp	r3, #3
 800d63c:	d863      	bhi.n	800d706 <_dtoa_r+0x296>
 800d63e:	e8df f003 	tbb	[pc, r3]
 800d642:	372a      	.short	0x372a
 800d644:	5535      	.short	0x5535
 800d646:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d64a:	441e      	add	r6, r3
 800d64c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d650:	2b20      	cmp	r3, #32
 800d652:	bfc1      	itttt	gt
 800d654:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d658:	409f      	lslgt	r7, r3
 800d65a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d65e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d662:	bfd6      	itet	le
 800d664:	f1c3 0320 	rsble	r3, r3, #32
 800d668:	ea47 0003 	orrgt.w	r0, r7, r3
 800d66c:	fa04 f003 	lslle.w	r0, r4, r3
 800d670:	f7f2 ff48 	bl	8000504 <__aeabi_ui2d>
 800d674:	2201      	movs	r2, #1
 800d676:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d67a:	3e01      	subs	r6, #1
 800d67c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d67e:	e777      	b.n	800d570 <_dtoa_r+0x100>
 800d680:	2301      	movs	r3, #1
 800d682:	e7b8      	b.n	800d5f6 <_dtoa_r+0x186>
 800d684:	9012      	str	r0, [sp, #72]	@ 0x48
 800d686:	e7b7      	b.n	800d5f8 <_dtoa_r+0x188>
 800d688:	427b      	negs	r3, r7
 800d68a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d68c:	2300      	movs	r3, #0
 800d68e:	eba8 0807 	sub.w	r8, r8, r7
 800d692:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d694:	e7c4      	b.n	800d620 <_dtoa_r+0x1b0>
 800d696:	2300      	movs	r3, #0
 800d698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d69a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	dc35      	bgt.n	800d70c <_dtoa_r+0x29c>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	9307      	str	r3, [sp, #28]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6aa:	e00b      	b.n	800d6c4 <_dtoa_r+0x254>
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e7f3      	b.n	800d698 <_dtoa_r+0x228>
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6b6:	18fb      	adds	r3, r7, r3
 800d6b8:	9300      	str	r3, [sp, #0]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	9307      	str	r3, [sp, #28]
 800d6c0:	bfb8      	it	lt
 800d6c2:	2301      	movlt	r3, #1
 800d6c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	2204      	movs	r2, #4
 800d6cc:	f102 0514 	add.w	r5, r2, #20
 800d6d0:	429d      	cmp	r5, r3
 800d6d2:	d91f      	bls.n	800d714 <_dtoa_r+0x2a4>
 800d6d4:	6041      	str	r1, [r0, #4]
 800d6d6:	4658      	mov	r0, fp
 800d6d8:	f000 fd8e 	bl	800e1f8 <_Balloc>
 800d6dc:	4682      	mov	sl, r0
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	d13c      	bne.n	800d75c <_dtoa_r+0x2ec>
 800d6e2:	4b1b      	ldr	r3, [pc, #108]	@ (800d750 <_dtoa_r+0x2e0>)
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d6ea:	e6d8      	b.n	800d49e <_dtoa_r+0x2e>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e7e0      	b.n	800d6b2 <_dtoa_r+0x242>
 800d6f0:	2401      	movs	r4, #1
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d6f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d6fc:	9300      	str	r3, [sp, #0]
 800d6fe:	9307      	str	r3, [sp, #28]
 800d700:	2200      	movs	r2, #0
 800d702:	2312      	movs	r3, #18
 800d704:	e7d0      	b.n	800d6a8 <_dtoa_r+0x238>
 800d706:	2301      	movs	r3, #1
 800d708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d70a:	e7f5      	b.n	800d6f8 <_dtoa_r+0x288>
 800d70c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	9307      	str	r3, [sp, #28]
 800d712:	e7d7      	b.n	800d6c4 <_dtoa_r+0x254>
 800d714:	3101      	adds	r1, #1
 800d716:	0052      	lsls	r2, r2, #1
 800d718:	e7d8      	b.n	800d6cc <_dtoa_r+0x25c>
 800d71a:	bf00      	nop
 800d71c:	f3af 8000 	nop.w
 800d720:	636f4361 	.word	0x636f4361
 800d724:	3fd287a7 	.word	0x3fd287a7
 800d728:	8b60c8b3 	.word	0x8b60c8b3
 800d72c:	3fc68a28 	.word	0x3fc68a28
 800d730:	509f79fb 	.word	0x509f79fb
 800d734:	3fd34413 	.word	0x3fd34413
 800d738:	08011488 	.word	0x08011488
 800d73c:	0801149f 	.word	0x0801149f
 800d740:	7ff00000 	.word	0x7ff00000
 800d744:	080117e1 	.word	0x080117e1
 800d748:	3ff80000 	.word	0x3ff80000
 800d74c:	08011598 	.word	0x08011598
 800d750:	080114f7 	.word	0x080114f7
 800d754:	08011484 	.word	0x08011484
 800d758:	080117e0 	.word	0x080117e0
 800d75c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d760:	6018      	str	r0, [r3, #0]
 800d762:	9b07      	ldr	r3, [sp, #28]
 800d764:	2b0e      	cmp	r3, #14
 800d766:	f200 80a4 	bhi.w	800d8b2 <_dtoa_r+0x442>
 800d76a:	2c00      	cmp	r4, #0
 800d76c:	f000 80a1 	beq.w	800d8b2 <_dtoa_r+0x442>
 800d770:	2f00      	cmp	r7, #0
 800d772:	dd33      	ble.n	800d7dc <_dtoa_r+0x36c>
 800d774:	4bad      	ldr	r3, [pc, #692]	@ (800da2c <_dtoa_r+0x5bc>)
 800d776:	f007 020f 	and.w	r2, r7, #15
 800d77a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d77e:	ed93 7b00 	vldr	d7, [r3]
 800d782:	05f8      	lsls	r0, r7, #23
 800d784:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d788:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d78c:	d516      	bpl.n	800d7bc <_dtoa_r+0x34c>
 800d78e:	4ba8      	ldr	r3, [pc, #672]	@ (800da30 <_dtoa_r+0x5c0>)
 800d790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d798:	f7f3 f858 	bl	800084c <__aeabi_ddiv>
 800d79c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7a0:	f004 040f 	and.w	r4, r4, #15
 800d7a4:	2603      	movs	r6, #3
 800d7a6:	4da2      	ldr	r5, [pc, #648]	@ (800da30 <_dtoa_r+0x5c0>)
 800d7a8:	b954      	cbnz	r4, 800d7c0 <_dtoa_r+0x350>
 800d7aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7b2:	f7f3 f84b 	bl	800084c <__aeabi_ddiv>
 800d7b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7ba:	e028      	b.n	800d80e <_dtoa_r+0x39e>
 800d7bc:	2602      	movs	r6, #2
 800d7be:	e7f2      	b.n	800d7a6 <_dtoa_r+0x336>
 800d7c0:	07e1      	lsls	r1, r4, #31
 800d7c2:	d508      	bpl.n	800d7d6 <_dtoa_r+0x366>
 800d7c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7cc:	f7f2 ff14 	bl	80005f8 <__aeabi_dmul>
 800d7d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7d4:	3601      	adds	r6, #1
 800d7d6:	1064      	asrs	r4, r4, #1
 800d7d8:	3508      	adds	r5, #8
 800d7da:	e7e5      	b.n	800d7a8 <_dtoa_r+0x338>
 800d7dc:	f000 80d2 	beq.w	800d984 <_dtoa_r+0x514>
 800d7e0:	427c      	negs	r4, r7
 800d7e2:	4b92      	ldr	r3, [pc, #584]	@ (800da2c <_dtoa_r+0x5bc>)
 800d7e4:	4d92      	ldr	r5, [pc, #584]	@ (800da30 <_dtoa_r+0x5c0>)
 800d7e6:	f004 020f 	and.w	r2, r4, #15
 800d7ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7f6:	f7f2 feff 	bl	80005f8 <__aeabi_dmul>
 800d7fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7fe:	1124      	asrs	r4, r4, #4
 800d800:	2300      	movs	r3, #0
 800d802:	2602      	movs	r6, #2
 800d804:	2c00      	cmp	r4, #0
 800d806:	f040 80b2 	bne.w	800d96e <_dtoa_r+0x4fe>
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d1d3      	bne.n	800d7b6 <_dtoa_r+0x346>
 800d80e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d810:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 80b7 	beq.w	800d988 <_dtoa_r+0x518>
 800d81a:	4b86      	ldr	r3, [pc, #536]	@ (800da34 <_dtoa_r+0x5c4>)
 800d81c:	2200      	movs	r2, #0
 800d81e:	4620      	mov	r0, r4
 800d820:	4629      	mov	r1, r5
 800d822:	f7f3 f95b 	bl	8000adc <__aeabi_dcmplt>
 800d826:	2800      	cmp	r0, #0
 800d828:	f000 80ae 	beq.w	800d988 <_dtoa_r+0x518>
 800d82c:	9b07      	ldr	r3, [sp, #28]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f000 80aa 	beq.w	800d988 <_dtoa_r+0x518>
 800d834:	9b00      	ldr	r3, [sp, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	dd37      	ble.n	800d8aa <_dtoa_r+0x43a>
 800d83a:	1e7b      	subs	r3, r7, #1
 800d83c:	9304      	str	r3, [sp, #16]
 800d83e:	4620      	mov	r0, r4
 800d840:	4b7d      	ldr	r3, [pc, #500]	@ (800da38 <_dtoa_r+0x5c8>)
 800d842:	2200      	movs	r2, #0
 800d844:	4629      	mov	r1, r5
 800d846:	f7f2 fed7 	bl	80005f8 <__aeabi_dmul>
 800d84a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d84e:	9c00      	ldr	r4, [sp, #0]
 800d850:	3601      	adds	r6, #1
 800d852:	4630      	mov	r0, r6
 800d854:	f7f2 fe66 	bl	8000524 <__aeabi_i2d>
 800d858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d85c:	f7f2 fecc 	bl	80005f8 <__aeabi_dmul>
 800d860:	4b76      	ldr	r3, [pc, #472]	@ (800da3c <_dtoa_r+0x5cc>)
 800d862:	2200      	movs	r2, #0
 800d864:	f7f2 fd12 	bl	800028c <__adddf3>
 800d868:	4605      	mov	r5, r0
 800d86a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d86e:	2c00      	cmp	r4, #0
 800d870:	f040 808d 	bne.w	800d98e <_dtoa_r+0x51e>
 800d874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d878:	4b71      	ldr	r3, [pc, #452]	@ (800da40 <_dtoa_r+0x5d0>)
 800d87a:	2200      	movs	r2, #0
 800d87c:	f7f2 fd04 	bl	8000288 <__aeabi_dsub>
 800d880:	4602      	mov	r2, r0
 800d882:	460b      	mov	r3, r1
 800d884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d888:	462a      	mov	r2, r5
 800d88a:	4633      	mov	r3, r6
 800d88c:	f7f3 f944 	bl	8000b18 <__aeabi_dcmpgt>
 800d890:	2800      	cmp	r0, #0
 800d892:	f040 828b 	bne.w	800ddac <_dtoa_r+0x93c>
 800d896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d89a:	462a      	mov	r2, r5
 800d89c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d8a0:	f7f3 f91c 	bl	8000adc <__aeabi_dcmplt>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	f040 8128 	bne.w	800dafa <_dtoa_r+0x68a>
 800d8aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d8ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d8b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	f2c0 815a 	blt.w	800db6e <_dtoa_r+0x6fe>
 800d8ba:	2f0e      	cmp	r7, #14
 800d8bc:	f300 8157 	bgt.w	800db6e <_dtoa_r+0x6fe>
 800d8c0:	4b5a      	ldr	r3, [pc, #360]	@ (800da2c <_dtoa_r+0x5bc>)
 800d8c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d8c6:	ed93 7b00 	vldr	d7, [r3]
 800d8ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	ed8d 7b00 	vstr	d7, [sp]
 800d8d2:	da03      	bge.n	800d8dc <_dtoa_r+0x46c>
 800d8d4:	9b07      	ldr	r3, [sp, #28]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f340 8101 	ble.w	800dade <_dtoa_r+0x66e>
 800d8dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d8e0:	4656      	mov	r6, sl
 800d8e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	4629      	mov	r1, r5
 800d8ea:	f7f2 ffaf 	bl	800084c <__aeabi_ddiv>
 800d8ee:	f7f3 f933 	bl	8000b58 <__aeabi_d2iz>
 800d8f2:	4680      	mov	r8, r0
 800d8f4:	f7f2 fe16 	bl	8000524 <__aeabi_i2d>
 800d8f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8fc:	f7f2 fe7c 	bl	80005f8 <__aeabi_dmul>
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	4620      	mov	r0, r4
 800d906:	4629      	mov	r1, r5
 800d908:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d90c:	f7f2 fcbc 	bl	8000288 <__aeabi_dsub>
 800d910:	f806 4b01 	strb.w	r4, [r6], #1
 800d914:	9d07      	ldr	r5, [sp, #28]
 800d916:	eba6 040a 	sub.w	r4, r6, sl
 800d91a:	42a5      	cmp	r5, r4
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	f040 8117 	bne.w	800db52 <_dtoa_r+0x6e2>
 800d924:	f7f2 fcb2 	bl	800028c <__adddf3>
 800d928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d92c:	4604      	mov	r4, r0
 800d92e:	460d      	mov	r5, r1
 800d930:	f7f3 f8f2 	bl	8000b18 <__aeabi_dcmpgt>
 800d934:	2800      	cmp	r0, #0
 800d936:	f040 80f9 	bne.w	800db2c <_dtoa_r+0x6bc>
 800d93a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d93e:	4620      	mov	r0, r4
 800d940:	4629      	mov	r1, r5
 800d942:	f7f3 f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d946:	b118      	cbz	r0, 800d950 <_dtoa_r+0x4e0>
 800d948:	f018 0f01 	tst.w	r8, #1
 800d94c:	f040 80ee 	bne.w	800db2c <_dtoa_r+0x6bc>
 800d950:	4649      	mov	r1, r9
 800d952:	4658      	mov	r0, fp
 800d954:	f000 fc90 	bl	800e278 <_Bfree>
 800d958:	2300      	movs	r3, #0
 800d95a:	7033      	strb	r3, [r6, #0]
 800d95c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d95e:	3701      	adds	r7, #1
 800d960:	601f      	str	r7, [r3, #0]
 800d962:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d964:	2b00      	cmp	r3, #0
 800d966:	f000 831d 	beq.w	800dfa4 <_dtoa_r+0xb34>
 800d96a:	601e      	str	r6, [r3, #0]
 800d96c:	e31a      	b.n	800dfa4 <_dtoa_r+0xb34>
 800d96e:	07e2      	lsls	r2, r4, #31
 800d970:	d505      	bpl.n	800d97e <_dtoa_r+0x50e>
 800d972:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d976:	f7f2 fe3f 	bl	80005f8 <__aeabi_dmul>
 800d97a:	3601      	adds	r6, #1
 800d97c:	2301      	movs	r3, #1
 800d97e:	1064      	asrs	r4, r4, #1
 800d980:	3508      	adds	r5, #8
 800d982:	e73f      	b.n	800d804 <_dtoa_r+0x394>
 800d984:	2602      	movs	r6, #2
 800d986:	e742      	b.n	800d80e <_dtoa_r+0x39e>
 800d988:	9c07      	ldr	r4, [sp, #28]
 800d98a:	9704      	str	r7, [sp, #16]
 800d98c:	e761      	b.n	800d852 <_dtoa_r+0x3e2>
 800d98e:	4b27      	ldr	r3, [pc, #156]	@ (800da2c <_dtoa_r+0x5bc>)
 800d990:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d992:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d996:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d99a:	4454      	add	r4, sl
 800d99c:	2900      	cmp	r1, #0
 800d99e:	d053      	beq.n	800da48 <_dtoa_r+0x5d8>
 800d9a0:	4928      	ldr	r1, [pc, #160]	@ (800da44 <_dtoa_r+0x5d4>)
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	f7f2 ff52 	bl	800084c <__aeabi_ddiv>
 800d9a8:	4633      	mov	r3, r6
 800d9aa:	462a      	mov	r2, r5
 800d9ac:	f7f2 fc6c 	bl	8000288 <__aeabi_dsub>
 800d9b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9b4:	4656      	mov	r6, sl
 800d9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ba:	f7f3 f8cd 	bl	8000b58 <__aeabi_d2iz>
 800d9be:	4605      	mov	r5, r0
 800d9c0:	f7f2 fdb0 	bl	8000524 <__aeabi_i2d>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9cc:	f7f2 fc5c 	bl	8000288 <__aeabi_dsub>
 800d9d0:	3530      	adds	r5, #48	@ 0x30
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9da:	f806 5b01 	strb.w	r5, [r6], #1
 800d9de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9e2:	f7f3 f87b 	bl	8000adc <__aeabi_dcmplt>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d171      	bne.n	800dace <_dtoa_r+0x65e>
 800d9ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9ee:	4911      	ldr	r1, [pc, #68]	@ (800da34 <_dtoa_r+0x5c4>)
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	f7f2 fc49 	bl	8000288 <__aeabi_dsub>
 800d9f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9fa:	f7f3 f86f 	bl	8000adc <__aeabi_dcmplt>
 800d9fe:	2800      	cmp	r0, #0
 800da00:	f040 8095 	bne.w	800db2e <_dtoa_r+0x6be>
 800da04:	42a6      	cmp	r6, r4
 800da06:	f43f af50 	beq.w	800d8aa <_dtoa_r+0x43a>
 800da0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da0e:	4b0a      	ldr	r3, [pc, #40]	@ (800da38 <_dtoa_r+0x5c8>)
 800da10:	2200      	movs	r2, #0
 800da12:	f7f2 fdf1 	bl	80005f8 <__aeabi_dmul>
 800da16:	4b08      	ldr	r3, [pc, #32]	@ (800da38 <_dtoa_r+0x5c8>)
 800da18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da1c:	2200      	movs	r2, #0
 800da1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da22:	f7f2 fde9 	bl	80005f8 <__aeabi_dmul>
 800da26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da2a:	e7c4      	b.n	800d9b6 <_dtoa_r+0x546>
 800da2c:	08011598 	.word	0x08011598
 800da30:	08011570 	.word	0x08011570
 800da34:	3ff00000 	.word	0x3ff00000
 800da38:	40240000 	.word	0x40240000
 800da3c:	401c0000 	.word	0x401c0000
 800da40:	40140000 	.word	0x40140000
 800da44:	3fe00000 	.word	0x3fe00000
 800da48:	4631      	mov	r1, r6
 800da4a:	4628      	mov	r0, r5
 800da4c:	f7f2 fdd4 	bl	80005f8 <__aeabi_dmul>
 800da50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da54:	9415      	str	r4, [sp, #84]	@ 0x54
 800da56:	4656      	mov	r6, sl
 800da58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da5c:	f7f3 f87c 	bl	8000b58 <__aeabi_d2iz>
 800da60:	4605      	mov	r5, r0
 800da62:	f7f2 fd5f 	bl	8000524 <__aeabi_i2d>
 800da66:	4602      	mov	r2, r0
 800da68:	460b      	mov	r3, r1
 800da6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da6e:	f7f2 fc0b 	bl	8000288 <__aeabi_dsub>
 800da72:	3530      	adds	r5, #48	@ 0x30
 800da74:	f806 5b01 	strb.w	r5, [r6], #1
 800da78:	4602      	mov	r2, r0
 800da7a:	460b      	mov	r3, r1
 800da7c:	42a6      	cmp	r6, r4
 800da7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da82:	f04f 0200 	mov.w	r2, #0
 800da86:	d124      	bne.n	800dad2 <_dtoa_r+0x662>
 800da88:	4bac      	ldr	r3, [pc, #688]	@ (800dd3c <_dtoa_r+0x8cc>)
 800da8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da8e:	f7f2 fbfd 	bl	800028c <__adddf3>
 800da92:	4602      	mov	r2, r0
 800da94:	460b      	mov	r3, r1
 800da96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da9a:	f7f3 f83d 	bl	8000b18 <__aeabi_dcmpgt>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d145      	bne.n	800db2e <_dtoa_r+0x6be>
 800daa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800daa6:	49a5      	ldr	r1, [pc, #660]	@ (800dd3c <_dtoa_r+0x8cc>)
 800daa8:	2000      	movs	r0, #0
 800daaa:	f7f2 fbed 	bl	8000288 <__aeabi_dsub>
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dab6:	f7f3 f811 	bl	8000adc <__aeabi_dcmplt>
 800daba:	2800      	cmp	r0, #0
 800dabc:	f43f aef5 	beq.w	800d8aa <_dtoa_r+0x43a>
 800dac0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800dac2:	1e73      	subs	r3, r6, #1
 800dac4:	9315      	str	r3, [sp, #84]	@ 0x54
 800dac6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800daca:	2b30      	cmp	r3, #48	@ 0x30
 800dacc:	d0f8      	beq.n	800dac0 <_dtoa_r+0x650>
 800dace:	9f04      	ldr	r7, [sp, #16]
 800dad0:	e73e      	b.n	800d950 <_dtoa_r+0x4e0>
 800dad2:	4b9b      	ldr	r3, [pc, #620]	@ (800dd40 <_dtoa_r+0x8d0>)
 800dad4:	f7f2 fd90 	bl	80005f8 <__aeabi_dmul>
 800dad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dadc:	e7bc      	b.n	800da58 <_dtoa_r+0x5e8>
 800dade:	d10c      	bne.n	800dafa <_dtoa_r+0x68a>
 800dae0:	4b98      	ldr	r3, [pc, #608]	@ (800dd44 <_dtoa_r+0x8d4>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dae8:	f7f2 fd86 	bl	80005f8 <__aeabi_dmul>
 800daec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800daf0:	f7f3 f808 	bl	8000b04 <__aeabi_dcmpge>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	f000 8157 	beq.w	800dda8 <_dtoa_r+0x938>
 800dafa:	2400      	movs	r4, #0
 800dafc:	4625      	mov	r5, r4
 800dafe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db00:	43db      	mvns	r3, r3
 800db02:	9304      	str	r3, [sp, #16]
 800db04:	4656      	mov	r6, sl
 800db06:	2700      	movs	r7, #0
 800db08:	4621      	mov	r1, r4
 800db0a:	4658      	mov	r0, fp
 800db0c:	f000 fbb4 	bl	800e278 <_Bfree>
 800db10:	2d00      	cmp	r5, #0
 800db12:	d0dc      	beq.n	800dace <_dtoa_r+0x65e>
 800db14:	b12f      	cbz	r7, 800db22 <_dtoa_r+0x6b2>
 800db16:	42af      	cmp	r7, r5
 800db18:	d003      	beq.n	800db22 <_dtoa_r+0x6b2>
 800db1a:	4639      	mov	r1, r7
 800db1c:	4658      	mov	r0, fp
 800db1e:	f000 fbab 	bl	800e278 <_Bfree>
 800db22:	4629      	mov	r1, r5
 800db24:	4658      	mov	r0, fp
 800db26:	f000 fba7 	bl	800e278 <_Bfree>
 800db2a:	e7d0      	b.n	800dace <_dtoa_r+0x65e>
 800db2c:	9704      	str	r7, [sp, #16]
 800db2e:	4633      	mov	r3, r6
 800db30:	461e      	mov	r6, r3
 800db32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db36:	2a39      	cmp	r2, #57	@ 0x39
 800db38:	d107      	bne.n	800db4a <_dtoa_r+0x6da>
 800db3a:	459a      	cmp	sl, r3
 800db3c:	d1f8      	bne.n	800db30 <_dtoa_r+0x6c0>
 800db3e:	9a04      	ldr	r2, [sp, #16]
 800db40:	3201      	adds	r2, #1
 800db42:	9204      	str	r2, [sp, #16]
 800db44:	2230      	movs	r2, #48	@ 0x30
 800db46:	f88a 2000 	strb.w	r2, [sl]
 800db4a:	781a      	ldrb	r2, [r3, #0]
 800db4c:	3201      	adds	r2, #1
 800db4e:	701a      	strb	r2, [r3, #0]
 800db50:	e7bd      	b.n	800dace <_dtoa_r+0x65e>
 800db52:	4b7b      	ldr	r3, [pc, #492]	@ (800dd40 <_dtoa_r+0x8d0>)
 800db54:	2200      	movs	r2, #0
 800db56:	f7f2 fd4f 	bl	80005f8 <__aeabi_dmul>
 800db5a:	2200      	movs	r2, #0
 800db5c:	2300      	movs	r3, #0
 800db5e:	4604      	mov	r4, r0
 800db60:	460d      	mov	r5, r1
 800db62:	f7f2 ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 800db66:	2800      	cmp	r0, #0
 800db68:	f43f aebb 	beq.w	800d8e2 <_dtoa_r+0x472>
 800db6c:	e6f0      	b.n	800d950 <_dtoa_r+0x4e0>
 800db6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db70:	2a00      	cmp	r2, #0
 800db72:	f000 80db 	beq.w	800dd2c <_dtoa_r+0x8bc>
 800db76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db78:	2a01      	cmp	r2, #1
 800db7a:	f300 80bf 	bgt.w	800dcfc <_dtoa_r+0x88c>
 800db7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db80:	2a00      	cmp	r2, #0
 800db82:	f000 80b7 	beq.w	800dcf4 <_dtoa_r+0x884>
 800db86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800db8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db8c:	4646      	mov	r6, r8
 800db8e:	9a08      	ldr	r2, [sp, #32]
 800db90:	2101      	movs	r1, #1
 800db92:	441a      	add	r2, r3
 800db94:	4658      	mov	r0, fp
 800db96:	4498      	add	r8, r3
 800db98:	9208      	str	r2, [sp, #32]
 800db9a:	f000 fc6b 	bl	800e474 <__i2b>
 800db9e:	4605      	mov	r5, r0
 800dba0:	b15e      	cbz	r6, 800dbba <_dtoa_r+0x74a>
 800dba2:	9b08      	ldr	r3, [sp, #32]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	dd08      	ble.n	800dbba <_dtoa_r+0x74a>
 800dba8:	42b3      	cmp	r3, r6
 800dbaa:	9a08      	ldr	r2, [sp, #32]
 800dbac:	bfa8      	it	ge
 800dbae:	4633      	movge	r3, r6
 800dbb0:	eba8 0803 	sub.w	r8, r8, r3
 800dbb4:	1af6      	subs	r6, r6, r3
 800dbb6:	1ad3      	subs	r3, r2, r3
 800dbb8:	9308      	str	r3, [sp, #32]
 800dbba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbbc:	b1f3      	cbz	r3, 800dbfc <_dtoa_r+0x78c>
 800dbbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f000 80b7 	beq.w	800dd34 <_dtoa_r+0x8c4>
 800dbc6:	b18c      	cbz	r4, 800dbec <_dtoa_r+0x77c>
 800dbc8:	4629      	mov	r1, r5
 800dbca:	4622      	mov	r2, r4
 800dbcc:	4658      	mov	r0, fp
 800dbce:	f000 fd11 	bl	800e5f4 <__pow5mult>
 800dbd2:	464a      	mov	r2, r9
 800dbd4:	4601      	mov	r1, r0
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	4658      	mov	r0, fp
 800dbda:	f000 fc61 	bl	800e4a0 <__multiply>
 800dbde:	4649      	mov	r1, r9
 800dbe0:	9004      	str	r0, [sp, #16]
 800dbe2:	4658      	mov	r0, fp
 800dbe4:	f000 fb48 	bl	800e278 <_Bfree>
 800dbe8:	9b04      	ldr	r3, [sp, #16]
 800dbea:	4699      	mov	r9, r3
 800dbec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbee:	1b1a      	subs	r2, r3, r4
 800dbf0:	d004      	beq.n	800dbfc <_dtoa_r+0x78c>
 800dbf2:	4649      	mov	r1, r9
 800dbf4:	4658      	mov	r0, fp
 800dbf6:	f000 fcfd 	bl	800e5f4 <__pow5mult>
 800dbfa:	4681      	mov	r9, r0
 800dbfc:	2101      	movs	r1, #1
 800dbfe:	4658      	mov	r0, fp
 800dc00:	f000 fc38 	bl	800e474 <__i2b>
 800dc04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc06:	4604      	mov	r4, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	f000 81cf 	beq.w	800dfac <_dtoa_r+0xb3c>
 800dc0e:	461a      	mov	r2, r3
 800dc10:	4601      	mov	r1, r0
 800dc12:	4658      	mov	r0, fp
 800dc14:	f000 fcee 	bl	800e5f4 <__pow5mult>
 800dc18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	f300 8095 	bgt.w	800dd4c <_dtoa_r+0x8dc>
 800dc22:	9b02      	ldr	r3, [sp, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f040 8087 	bne.w	800dd38 <_dtoa_r+0x8c8>
 800dc2a:	9b03      	ldr	r3, [sp, #12]
 800dc2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f040 8089 	bne.w	800dd48 <_dtoa_r+0x8d8>
 800dc36:	9b03      	ldr	r3, [sp, #12]
 800dc38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc3c:	0d1b      	lsrs	r3, r3, #20
 800dc3e:	051b      	lsls	r3, r3, #20
 800dc40:	b12b      	cbz	r3, 800dc4e <_dtoa_r+0x7de>
 800dc42:	9b08      	ldr	r3, [sp, #32]
 800dc44:	3301      	adds	r3, #1
 800dc46:	9308      	str	r3, [sp, #32]
 800dc48:	f108 0801 	add.w	r8, r8, #1
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 81b0 	beq.w	800dfb8 <_dtoa_r+0xb48>
 800dc58:	6923      	ldr	r3, [r4, #16]
 800dc5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc5e:	6918      	ldr	r0, [r3, #16]
 800dc60:	f000 fbbc 	bl	800e3dc <__hi0bits>
 800dc64:	f1c0 0020 	rsb	r0, r0, #32
 800dc68:	9b08      	ldr	r3, [sp, #32]
 800dc6a:	4418      	add	r0, r3
 800dc6c:	f010 001f 	ands.w	r0, r0, #31
 800dc70:	d077      	beq.n	800dd62 <_dtoa_r+0x8f2>
 800dc72:	f1c0 0320 	rsb	r3, r0, #32
 800dc76:	2b04      	cmp	r3, #4
 800dc78:	dd6b      	ble.n	800dd52 <_dtoa_r+0x8e2>
 800dc7a:	9b08      	ldr	r3, [sp, #32]
 800dc7c:	f1c0 001c 	rsb	r0, r0, #28
 800dc80:	4403      	add	r3, r0
 800dc82:	4480      	add	r8, r0
 800dc84:	4406      	add	r6, r0
 800dc86:	9308      	str	r3, [sp, #32]
 800dc88:	f1b8 0f00 	cmp.w	r8, #0
 800dc8c:	dd05      	ble.n	800dc9a <_dtoa_r+0x82a>
 800dc8e:	4649      	mov	r1, r9
 800dc90:	4642      	mov	r2, r8
 800dc92:	4658      	mov	r0, fp
 800dc94:	f000 fd08 	bl	800e6a8 <__lshift>
 800dc98:	4681      	mov	r9, r0
 800dc9a:	9b08      	ldr	r3, [sp, #32]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	dd05      	ble.n	800dcac <_dtoa_r+0x83c>
 800dca0:	4621      	mov	r1, r4
 800dca2:	461a      	mov	r2, r3
 800dca4:	4658      	mov	r0, fp
 800dca6:	f000 fcff 	bl	800e6a8 <__lshift>
 800dcaa:	4604      	mov	r4, r0
 800dcac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d059      	beq.n	800dd66 <_dtoa_r+0x8f6>
 800dcb2:	4621      	mov	r1, r4
 800dcb4:	4648      	mov	r0, r9
 800dcb6:	f000 fd63 	bl	800e780 <__mcmp>
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	da53      	bge.n	800dd66 <_dtoa_r+0x8f6>
 800dcbe:	1e7b      	subs	r3, r7, #1
 800dcc0:	9304      	str	r3, [sp, #16]
 800dcc2:	4649      	mov	r1, r9
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	220a      	movs	r2, #10
 800dcc8:	4658      	mov	r0, fp
 800dcca:	f000 faf7 	bl	800e2bc <__multadd>
 800dcce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcd0:	4681      	mov	r9, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f000 8172 	beq.w	800dfbc <_dtoa_r+0xb4c>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	4629      	mov	r1, r5
 800dcdc:	220a      	movs	r2, #10
 800dcde:	4658      	mov	r0, fp
 800dce0:	f000 faec 	bl	800e2bc <__multadd>
 800dce4:	9b00      	ldr	r3, [sp, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	4605      	mov	r5, r0
 800dcea:	dc67      	bgt.n	800ddbc <_dtoa_r+0x94c>
 800dcec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	dc41      	bgt.n	800dd76 <_dtoa_r+0x906>
 800dcf2:	e063      	b.n	800ddbc <_dtoa_r+0x94c>
 800dcf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dcf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dcfa:	e746      	b.n	800db8a <_dtoa_r+0x71a>
 800dcfc:	9b07      	ldr	r3, [sp, #28]
 800dcfe:	1e5c      	subs	r4, r3, #1
 800dd00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd02:	42a3      	cmp	r3, r4
 800dd04:	bfbf      	itttt	lt
 800dd06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dd08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dd0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dd0c:	1ae3      	sublt	r3, r4, r3
 800dd0e:	bfb4      	ite	lt
 800dd10:	18d2      	addlt	r2, r2, r3
 800dd12:	1b1c      	subge	r4, r3, r4
 800dd14:	9b07      	ldr	r3, [sp, #28]
 800dd16:	bfbc      	itt	lt
 800dd18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dd1a:	2400      	movlt	r4, #0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	bfb5      	itete	lt
 800dd20:	eba8 0603 	sublt.w	r6, r8, r3
 800dd24:	9b07      	ldrge	r3, [sp, #28]
 800dd26:	2300      	movlt	r3, #0
 800dd28:	4646      	movge	r6, r8
 800dd2a:	e730      	b.n	800db8e <_dtoa_r+0x71e>
 800dd2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dd30:	4646      	mov	r6, r8
 800dd32:	e735      	b.n	800dba0 <_dtoa_r+0x730>
 800dd34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd36:	e75c      	b.n	800dbf2 <_dtoa_r+0x782>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	e788      	b.n	800dc4e <_dtoa_r+0x7de>
 800dd3c:	3fe00000 	.word	0x3fe00000
 800dd40:	40240000 	.word	0x40240000
 800dd44:	40140000 	.word	0x40140000
 800dd48:	9b02      	ldr	r3, [sp, #8]
 800dd4a:	e780      	b.n	800dc4e <_dtoa_r+0x7de>
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd50:	e782      	b.n	800dc58 <_dtoa_r+0x7e8>
 800dd52:	d099      	beq.n	800dc88 <_dtoa_r+0x818>
 800dd54:	9a08      	ldr	r2, [sp, #32]
 800dd56:	331c      	adds	r3, #28
 800dd58:	441a      	add	r2, r3
 800dd5a:	4498      	add	r8, r3
 800dd5c:	441e      	add	r6, r3
 800dd5e:	9208      	str	r2, [sp, #32]
 800dd60:	e792      	b.n	800dc88 <_dtoa_r+0x818>
 800dd62:	4603      	mov	r3, r0
 800dd64:	e7f6      	b.n	800dd54 <_dtoa_r+0x8e4>
 800dd66:	9b07      	ldr	r3, [sp, #28]
 800dd68:	9704      	str	r7, [sp, #16]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	dc20      	bgt.n	800ddb0 <_dtoa_r+0x940>
 800dd6e:	9300      	str	r3, [sp, #0]
 800dd70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd72:	2b02      	cmp	r3, #2
 800dd74:	dd1e      	ble.n	800ddb4 <_dtoa_r+0x944>
 800dd76:	9b00      	ldr	r3, [sp, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f47f aec0 	bne.w	800dafe <_dtoa_r+0x68e>
 800dd7e:	4621      	mov	r1, r4
 800dd80:	2205      	movs	r2, #5
 800dd82:	4658      	mov	r0, fp
 800dd84:	f000 fa9a 	bl	800e2bc <__multadd>
 800dd88:	4601      	mov	r1, r0
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	4648      	mov	r0, r9
 800dd8e:	f000 fcf7 	bl	800e780 <__mcmp>
 800dd92:	2800      	cmp	r0, #0
 800dd94:	f77f aeb3 	ble.w	800dafe <_dtoa_r+0x68e>
 800dd98:	4656      	mov	r6, sl
 800dd9a:	2331      	movs	r3, #49	@ 0x31
 800dd9c:	f806 3b01 	strb.w	r3, [r6], #1
 800dda0:	9b04      	ldr	r3, [sp, #16]
 800dda2:	3301      	adds	r3, #1
 800dda4:	9304      	str	r3, [sp, #16]
 800dda6:	e6ae      	b.n	800db06 <_dtoa_r+0x696>
 800dda8:	9c07      	ldr	r4, [sp, #28]
 800ddaa:	9704      	str	r7, [sp, #16]
 800ddac:	4625      	mov	r5, r4
 800ddae:	e7f3      	b.n	800dd98 <_dtoa_r+0x928>
 800ddb0:	9b07      	ldr	r3, [sp, #28]
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f000 8104 	beq.w	800dfc4 <_dtoa_r+0xb54>
 800ddbc:	2e00      	cmp	r6, #0
 800ddbe:	dd05      	ble.n	800ddcc <_dtoa_r+0x95c>
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	4632      	mov	r2, r6
 800ddc4:	4658      	mov	r0, fp
 800ddc6:	f000 fc6f 	bl	800e6a8 <__lshift>
 800ddca:	4605      	mov	r5, r0
 800ddcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d05a      	beq.n	800de88 <_dtoa_r+0xa18>
 800ddd2:	6869      	ldr	r1, [r5, #4]
 800ddd4:	4658      	mov	r0, fp
 800ddd6:	f000 fa0f 	bl	800e1f8 <_Balloc>
 800ddda:	4606      	mov	r6, r0
 800dddc:	b928      	cbnz	r0, 800ddea <_dtoa_r+0x97a>
 800ddde:	4b84      	ldr	r3, [pc, #528]	@ (800dff0 <_dtoa_r+0xb80>)
 800dde0:	4602      	mov	r2, r0
 800dde2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dde6:	f7ff bb5a 	b.w	800d49e <_dtoa_r+0x2e>
 800ddea:	692a      	ldr	r2, [r5, #16]
 800ddec:	3202      	adds	r2, #2
 800ddee:	0092      	lsls	r2, r2, #2
 800ddf0:	f105 010c 	add.w	r1, r5, #12
 800ddf4:	300c      	adds	r0, #12
 800ddf6:	f002 fb03 	bl	8010400 <memcpy>
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	4631      	mov	r1, r6
 800ddfe:	4658      	mov	r0, fp
 800de00:	f000 fc52 	bl	800e6a8 <__lshift>
 800de04:	f10a 0301 	add.w	r3, sl, #1
 800de08:	9307      	str	r3, [sp, #28]
 800de0a:	9b00      	ldr	r3, [sp, #0]
 800de0c:	4453      	add	r3, sl
 800de0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de10:	9b02      	ldr	r3, [sp, #8]
 800de12:	f003 0301 	and.w	r3, r3, #1
 800de16:	462f      	mov	r7, r5
 800de18:	930a      	str	r3, [sp, #40]	@ 0x28
 800de1a:	4605      	mov	r5, r0
 800de1c:	9b07      	ldr	r3, [sp, #28]
 800de1e:	4621      	mov	r1, r4
 800de20:	3b01      	subs	r3, #1
 800de22:	4648      	mov	r0, r9
 800de24:	9300      	str	r3, [sp, #0]
 800de26:	f7ff fa99 	bl	800d35c <quorem>
 800de2a:	4639      	mov	r1, r7
 800de2c:	9002      	str	r0, [sp, #8]
 800de2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de32:	4648      	mov	r0, r9
 800de34:	f000 fca4 	bl	800e780 <__mcmp>
 800de38:	462a      	mov	r2, r5
 800de3a:	9008      	str	r0, [sp, #32]
 800de3c:	4621      	mov	r1, r4
 800de3e:	4658      	mov	r0, fp
 800de40:	f000 fcba 	bl	800e7b8 <__mdiff>
 800de44:	68c2      	ldr	r2, [r0, #12]
 800de46:	4606      	mov	r6, r0
 800de48:	bb02      	cbnz	r2, 800de8c <_dtoa_r+0xa1c>
 800de4a:	4601      	mov	r1, r0
 800de4c:	4648      	mov	r0, r9
 800de4e:	f000 fc97 	bl	800e780 <__mcmp>
 800de52:	4602      	mov	r2, r0
 800de54:	4631      	mov	r1, r6
 800de56:	4658      	mov	r0, fp
 800de58:	920e      	str	r2, [sp, #56]	@ 0x38
 800de5a:	f000 fa0d 	bl	800e278 <_Bfree>
 800de5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de62:	9e07      	ldr	r6, [sp, #28]
 800de64:	ea43 0102 	orr.w	r1, r3, r2
 800de68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de6a:	4319      	orrs	r1, r3
 800de6c:	d110      	bne.n	800de90 <_dtoa_r+0xa20>
 800de6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de72:	d029      	beq.n	800dec8 <_dtoa_r+0xa58>
 800de74:	9b08      	ldr	r3, [sp, #32]
 800de76:	2b00      	cmp	r3, #0
 800de78:	dd02      	ble.n	800de80 <_dtoa_r+0xa10>
 800de7a:	9b02      	ldr	r3, [sp, #8]
 800de7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800de80:	9b00      	ldr	r3, [sp, #0]
 800de82:	f883 8000 	strb.w	r8, [r3]
 800de86:	e63f      	b.n	800db08 <_dtoa_r+0x698>
 800de88:	4628      	mov	r0, r5
 800de8a:	e7bb      	b.n	800de04 <_dtoa_r+0x994>
 800de8c:	2201      	movs	r2, #1
 800de8e:	e7e1      	b.n	800de54 <_dtoa_r+0x9e4>
 800de90:	9b08      	ldr	r3, [sp, #32]
 800de92:	2b00      	cmp	r3, #0
 800de94:	db04      	blt.n	800dea0 <_dtoa_r+0xa30>
 800de96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800de98:	430b      	orrs	r3, r1
 800de9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de9c:	430b      	orrs	r3, r1
 800de9e:	d120      	bne.n	800dee2 <_dtoa_r+0xa72>
 800dea0:	2a00      	cmp	r2, #0
 800dea2:	dded      	ble.n	800de80 <_dtoa_r+0xa10>
 800dea4:	4649      	mov	r1, r9
 800dea6:	2201      	movs	r2, #1
 800dea8:	4658      	mov	r0, fp
 800deaa:	f000 fbfd 	bl	800e6a8 <__lshift>
 800deae:	4621      	mov	r1, r4
 800deb0:	4681      	mov	r9, r0
 800deb2:	f000 fc65 	bl	800e780 <__mcmp>
 800deb6:	2800      	cmp	r0, #0
 800deb8:	dc03      	bgt.n	800dec2 <_dtoa_r+0xa52>
 800deba:	d1e1      	bne.n	800de80 <_dtoa_r+0xa10>
 800debc:	f018 0f01 	tst.w	r8, #1
 800dec0:	d0de      	beq.n	800de80 <_dtoa_r+0xa10>
 800dec2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dec6:	d1d8      	bne.n	800de7a <_dtoa_r+0xa0a>
 800dec8:	9a00      	ldr	r2, [sp, #0]
 800deca:	2339      	movs	r3, #57	@ 0x39
 800decc:	7013      	strb	r3, [r2, #0]
 800dece:	4633      	mov	r3, r6
 800ded0:	461e      	mov	r6, r3
 800ded2:	3b01      	subs	r3, #1
 800ded4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ded8:	2a39      	cmp	r2, #57	@ 0x39
 800deda:	d052      	beq.n	800df82 <_dtoa_r+0xb12>
 800dedc:	3201      	adds	r2, #1
 800dede:	701a      	strb	r2, [r3, #0]
 800dee0:	e612      	b.n	800db08 <_dtoa_r+0x698>
 800dee2:	2a00      	cmp	r2, #0
 800dee4:	dd07      	ble.n	800def6 <_dtoa_r+0xa86>
 800dee6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800deea:	d0ed      	beq.n	800dec8 <_dtoa_r+0xa58>
 800deec:	9a00      	ldr	r2, [sp, #0]
 800deee:	f108 0301 	add.w	r3, r8, #1
 800def2:	7013      	strb	r3, [r2, #0]
 800def4:	e608      	b.n	800db08 <_dtoa_r+0x698>
 800def6:	9b07      	ldr	r3, [sp, #28]
 800def8:	9a07      	ldr	r2, [sp, #28]
 800defa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800defe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df00:	4293      	cmp	r3, r2
 800df02:	d028      	beq.n	800df56 <_dtoa_r+0xae6>
 800df04:	4649      	mov	r1, r9
 800df06:	2300      	movs	r3, #0
 800df08:	220a      	movs	r2, #10
 800df0a:	4658      	mov	r0, fp
 800df0c:	f000 f9d6 	bl	800e2bc <__multadd>
 800df10:	42af      	cmp	r7, r5
 800df12:	4681      	mov	r9, r0
 800df14:	f04f 0300 	mov.w	r3, #0
 800df18:	f04f 020a 	mov.w	r2, #10
 800df1c:	4639      	mov	r1, r7
 800df1e:	4658      	mov	r0, fp
 800df20:	d107      	bne.n	800df32 <_dtoa_r+0xac2>
 800df22:	f000 f9cb 	bl	800e2bc <__multadd>
 800df26:	4607      	mov	r7, r0
 800df28:	4605      	mov	r5, r0
 800df2a:	9b07      	ldr	r3, [sp, #28]
 800df2c:	3301      	adds	r3, #1
 800df2e:	9307      	str	r3, [sp, #28]
 800df30:	e774      	b.n	800de1c <_dtoa_r+0x9ac>
 800df32:	f000 f9c3 	bl	800e2bc <__multadd>
 800df36:	4629      	mov	r1, r5
 800df38:	4607      	mov	r7, r0
 800df3a:	2300      	movs	r3, #0
 800df3c:	220a      	movs	r2, #10
 800df3e:	4658      	mov	r0, fp
 800df40:	f000 f9bc 	bl	800e2bc <__multadd>
 800df44:	4605      	mov	r5, r0
 800df46:	e7f0      	b.n	800df2a <_dtoa_r+0xaba>
 800df48:	9b00      	ldr	r3, [sp, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	bfcc      	ite	gt
 800df4e:	461e      	movgt	r6, r3
 800df50:	2601      	movle	r6, #1
 800df52:	4456      	add	r6, sl
 800df54:	2700      	movs	r7, #0
 800df56:	4649      	mov	r1, r9
 800df58:	2201      	movs	r2, #1
 800df5a:	4658      	mov	r0, fp
 800df5c:	f000 fba4 	bl	800e6a8 <__lshift>
 800df60:	4621      	mov	r1, r4
 800df62:	4681      	mov	r9, r0
 800df64:	f000 fc0c 	bl	800e780 <__mcmp>
 800df68:	2800      	cmp	r0, #0
 800df6a:	dcb0      	bgt.n	800dece <_dtoa_r+0xa5e>
 800df6c:	d102      	bne.n	800df74 <_dtoa_r+0xb04>
 800df6e:	f018 0f01 	tst.w	r8, #1
 800df72:	d1ac      	bne.n	800dece <_dtoa_r+0xa5e>
 800df74:	4633      	mov	r3, r6
 800df76:	461e      	mov	r6, r3
 800df78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df7c:	2a30      	cmp	r2, #48	@ 0x30
 800df7e:	d0fa      	beq.n	800df76 <_dtoa_r+0xb06>
 800df80:	e5c2      	b.n	800db08 <_dtoa_r+0x698>
 800df82:	459a      	cmp	sl, r3
 800df84:	d1a4      	bne.n	800ded0 <_dtoa_r+0xa60>
 800df86:	9b04      	ldr	r3, [sp, #16]
 800df88:	3301      	adds	r3, #1
 800df8a:	9304      	str	r3, [sp, #16]
 800df8c:	2331      	movs	r3, #49	@ 0x31
 800df8e:	f88a 3000 	strb.w	r3, [sl]
 800df92:	e5b9      	b.n	800db08 <_dtoa_r+0x698>
 800df94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dff4 <_dtoa_r+0xb84>
 800df9a:	b11b      	cbz	r3, 800dfa4 <_dtoa_r+0xb34>
 800df9c:	f10a 0308 	add.w	r3, sl, #8
 800dfa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfa2:	6013      	str	r3, [r2, #0]
 800dfa4:	4650      	mov	r0, sl
 800dfa6:	b019      	add	sp, #100	@ 0x64
 800dfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	f77f ae37 	ble.w	800dc22 <_dtoa_r+0x7b2>
 800dfb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dfb8:	2001      	movs	r0, #1
 800dfba:	e655      	b.n	800dc68 <_dtoa_r+0x7f8>
 800dfbc:	9b00      	ldr	r3, [sp, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f77f aed6 	ble.w	800dd70 <_dtoa_r+0x900>
 800dfc4:	4656      	mov	r6, sl
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	4648      	mov	r0, r9
 800dfca:	f7ff f9c7 	bl	800d35c <quorem>
 800dfce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dfd2:	f806 8b01 	strb.w	r8, [r6], #1
 800dfd6:	9b00      	ldr	r3, [sp, #0]
 800dfd8:	eba6 020a 	sub.w	r2, r6, sl
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	ddb3      	ble.n	800df48 <_dtoa_r+0xad8>
 800dfe0:	4649      	mov	r1, r9
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	220a      	movs	r2, #10
 800dfe6:	4658      	mov	r0, fp
 800dfe8:	f000 f968 	bl	800e2bc <__multadd>
 800dfec:	4681      	mov	r9, r0
 800dfee:	e7ea      	b.n	800dfc6 <_dtoa_r+0xb56>
 800dff0:	080114f7 	.word	0x080114f7
 800dff4:	0801147b 	.word	0x0801147b

0800dff8 <_free_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4605      	mov	r5, r0
 800dffc:	2900      	cmp	r1, #0
 800dffe:	d041      	beq.n	800e084 <_free_r+0x8c>
 800e000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e004:	1f0c      	subs	r4, r1, #4
 800e006:	2b00      	cmp	r3, #0
 800e008:	bfb8      	it	lt
 800e00a:	18e4      	addlt	r4, r4, r3
 800e00c:	f000 f8e8 	bl	800e1e0 <__malloc_lock>
 800e010:	4a1d      	ldr	r2, [pc, #116]	@ (800e088 <_free_r+0x90>)
 800e012:	6813      	ldr	r3, [r2, #0]
 800e014:	b933      	cbnz	r3, 800e024 <_free_r+0x2c>
 800e016:	6063      	str	r3, [r4, #4]
 800e018:	6014      	str	r4, [r2, #0]
 800e01a:	4628      	mov	r0, r5
 800e01c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e020:	f000 b8e4 	b.w	800e1ec <__malloc_unlock>
 800e024:	42a3      	cmp	r3, r4
 800e026:	d908      	bls.n	800e03a <_free_r+0x42>
 800e028:	6820      	ldr	r0, [r4, #0]
 800e02a:	1821      	adds	r1, r4, r0
 800e02c:	428b      	cmp	r3, r1
 800e02e:	bf01      	itttt	eq
 800e030:	6819      	ldreq	r1, [r3, #0]
 800e032:	685b      	ldreq	r3, [r3, #4]
 800e034:	1809      	addeq	r1, r1, r0
 800e036:	6021      	streq	r1, [r4, #0]
 800e038:	e7ed      	b.n	800e016 <_free_r+0x1e>
 800e03a:	461a      	mov	r2, r3
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	b10b      	cbz	r3, 800e044 <_free_r+0x4c>
 800e040:	42a3      	cmp	r3, r4
 800e042:	d9fa      	bls.n	800e03a <_free_r+0x42>
 800e044:	6811      	ldr	r1, [r2, #0]
 800e046:	1850      	adds	r0, r2, r1
 800e048:	42a0      	cmp	r0, r4
 800e04a:	d10b      	bne.n	800e064 <_free_r+0x6c>
 800e04c:	6820      	ldr	r0, [r4, #0]
 800e04e:	4401      	add	r1, r0
 800e050:	1850      	adds	r0, r2, r1
 800e052:	4283      	cmp	r3, r0
 800e054:	6011      	str	r1, [r2, #0]
 800e056:	d1e0      	bne.n	800e01a <_free_r+0x22>
 800e058:	6818      	ldr	r0, [r3, #0]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	6053      	str	r3, [r2, #4]
 800e05e:	4408      	add	r0, r1
 800e060:	6010      	str	r0, [r2, #0]
 800e062:	e7da      	b.n	800e01a <_free_r+0x22>
 800e064:	d902      	bls.n	800e06c <_free_r+0x74>
 800e066:	230c      	movs	r3, #12
 800e068:	602b      	str	r3, [r5, #0]
 800e06a:	e7d6      	b.n	800e01a <_free_r+0x22>
 800e06c:	6820      	ldr	r0, [r4, #0]
 800e06e:	1821      	adds	r1, r4, r0
 800e070:	428b      	cmp	r3, r1
 800e072:	bf04      	itt	eq
 800e074:	6819      	ldreq	r1, [r3, #0]
 800e076:	685b      	ldreq	r3, [r3, #4]
 800e078:	6063      	str	r3, [r4, #4]
 800e07a:	bf04      	itt	eq
 800e07c:	1809      	addeq	r1, r1, r0
 800e07e:	6021      	streq	r1, [r4, #0]
 800e080:	6054      	str	r4, [r2, #4]
 800e082:	e7ca      	b.n	800e01a <_free_r+0x22>
 800e084:	bd38      	pop	{r3, r4, r5, pc}
 800e086:	bf00      	nop
 800e088:	200023b0 	.word	0x200023b0

0800e08c <malloc>:
 800e08c:	4b02      	ldr	r3, [pc, #8]	@ (800e098 <malloc+0xc>)
 800e08e:	4601      	mov	r1, r0
 800e090:	6818      	ldr	r0, [r3, #0]
 800e092:	f000 b825 	b.w	800e0e0 <_malloc_r>
 800e096:	bf00      	nop
 800e098:	200001b4 	.word	0x200001b4

0800e09c <sbrk_aligned>:
 800e09c:	b570      	push	{r4, r5, r6, lr}
 800e09e:	4e0f      	ldr	r6, [pc, #60]	@ (800e0dc <sbrk_aligned+0x40>)
 800e0a0:	460c      	mov	r4, r1
 800e0a2:	6831      	ldr	r1, [r6, #0]
 800e0a4:	4605      	mov	r5, r0
 800e0a6:	b911      	cbnz	r1, 800e0ae <sbrk_aligned+0x12>
 800e0a8:	f002 f99a 	bl	80103e0 <_sbrk_r>
 800e0ac:	6030      	str	r0, [r6, #0]
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	f002 f995 	bl	80103e0 <_sbrk_r>
 800e0b6:	1c43      	adds	r3, r0, #1
 800e0b8:	d103      	bne.n	800e0c2 <sbrk_aligned+0x26>
 800e0ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e0be:	4620      	mov	r0, r4
 800e0c0:	bd70      	pop	{r4, r5, r6, pc}
 800e0c2:	1cc4      	adds	r4, r0, #3
 800e0c4:	f024 0403 	bic.w	r4, r4, #3
 800e0c8:	42a0      	cmp	r0, r4
 800e0ca:	d0f8      	beq.n	800e0be <sbrk_aligned+0x22>
 800e0cc:	1a21      	subs	r1, r4, r0
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	f002 f986 	bl	80103e0 <_sbrk_r>
 800e0d4:	3001      	adds	r0, #1
 800e0d6:	d1f2      	bne.n	800e0be <sbrk_aligned+0x22>
 800e0d8:	e7ef      	b.n	800e0ba <sbrk_aligned+0x1e>
 800e0da:	bf00      	nop
 800e0dc:	200023ac 	.word	0x200023ac

0800e0e0 <_malloc_r>:
 800e0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e4:	1ccd      	adds	r5, r1, #3
 800e0e6:	f025 0503 	bic.w	r5, r5, #3
 800e0ea:	3508      	adds	r5, #8
 800e0ec:	2d0c      	cmp	r5, #12
 800e0ee:	bf38      	it	cc
 800e0f0:	250c      	movcc	r5, #12
 800e0f2:	2d00      	cmp	r5, #0
 800e0f4:	4606      	mov	r6, r0
 800e0f6:	db01      	blt.n	800e0fc <_malloc_r+0x1c>
 800e0f8:	42a9      	cmp	r1, r5
 800e0fa:	d904      	bls.n	800e106 <_malloc_r+0x26>
 800e0fc:	230c      	movs	r3, #12
 800e0fe:	6033      	str	r3, [r6, #0]
 800e100:	2000      	movs	r0, #0
 800e102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e106:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e1dc <_malloc_r+0xfc>
 800e10a:	f000 f869 	bl	800e1e0 <__malloc_lock>
 800e10e:	f8d8 3000 	ldr.w	r3, [r8]
 800e112:	461c      	mov	r4, r3
 800e114:	bb44      	cbnz	r4, 800e168 <_malloc_r+0x88>
 800e116:	4629      	mov	r1, r5
 800e118:	4630      	mov	r0, r6
 800e11a:	f7ff ffbf 	bl	800e09c <sbrk_aligned>
 800e11e:	1c43      	adds	r3, r0, #1
 800e120:	4604      	mov	r4, r0
 800e122:	d158      	bne.n	800e1d6 <_malloc_r+0xf6>
 800e124:	f8d8 4000 	ldr.w	r4, [r8]
 800e128:	4627      	mov	r7, r4
 800e12a:	2f00      	cmp	r7, #0
 800e12c:	d143      	bne.n	800e1b6 <_malloc_r+0xd6>
 800e12e:	2c00      	cmp	r4, #0
 800e130:	d04b      	beq.n	800e1ca <_malloc_r+0xea>
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	4639      	mov	r1, r7
 800e136:	4630      	mov	r0, r6
 800e138:	eb04 0903 	add.w	r9, r4, r3
 800e13c:	f002 f950 	bl	80103e0 <_sbrk_r>
 800e140:	4581      	cmp	r9, r0
 800e142:	d142      	bne.n	800e1ca <_malloc_r+0xea>
 800e144:	6821      	ldr	r1, [r4, #0]
 800e146:	1a6d      	subs	r5, r5, r1
 800e148:	4629      	mov	r1, r5
 800e14a:	4630      	mov	r0, r6
 800e14c:	f7ff ffa6 	bl	800e09c <sbrk_aligned>
 800e150:	3001      	adds	r0, #1
 800e152:	d03a      	beq.n	800e1ca <_malloc_r+0xea>
 800e154:	6823      	ldr	r3, [r4, #0]
 800e156:	442b      	add	r3, r5
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	f8d8 3000 	ldr.w	r3, [r8]
 800e15e:	685a      	ldr	r2, [r3, #4]
 800e160:	bb62      	cbnz	r2, 800e1bc <_malloc_r+0xdc>
 800e162:	f8c8 7000 	str.w	r7, [r8]
 800e166:	e00f      	b.n	800e188 <_malloc_r+0xa8>
 800e168:	6822      	ldr	r2, [r4, #0]
 800e16a:	1b52      	subs	r2, r2, r5
 800e16c:	d420      	bmi.n	800e1b0 <_malloc_r+0xd0>
 800e16e:	2a0b      	cmp	r2, #11
 800e170:	d917      	bls.n	800e1a2 <_malloc_r+0xc2>
 800e172:	1961      	adds	r1, r4, r5
 800e174:	42a3      	cmp	r3, r4
 800e176:	6025      	str	r5, [r4, #0]
 800e178:	bf18      	it	ne
 800e17a:	6059      	strne	r1, [r3, #4]
 800e17c:	6863      	ldr	r3, [r4, #4]
 800e17e:	bf08      	it	eq
 800e180:	f8c8 1000 	streq.w	r1, [r8]
 800e184:	5162      	str	r2, [r4, r5]
 800e186:	604b      	str	r3, [r1, #4]
 800e188:	4630      	mov	r0, r6
 800e18a:	f000 f82f 	bl	800e1ec <__malloc_unlock>
 800e18e:	f104 000b 	add.w	r0, r4, #11
 800e192:	1d23      	adds	r3, r4, #4
 800e194:	f020 0007 	bic.w	r0, r0, #7
 800e198:	1ac2      	subs	r2, r0, r3
 800e19a:	bf1c      	itt	ne
 800e19c:	1a1b      	subne	r3, r3, r0
 800e19e:	50a3      	strne	r3, [r4, r2]
 800e1a0:	e7af      	b.n	800e102 <_malloc_r+0x22>
 800e1a2:	6862      	ldr	r2, [r4, #4]
 800e1a4:	42a3      	cmp	r3, r4
 800e1a6:	bf0c      	ite	eq
 800e1a8:	f8c8 2000 	streq.w	r2, [r8]
 800e1ac:	605a      	strne	r2, [r3, #4]
 800e1ae:	e7eb      	b.n	800e188 <_malloc_r+0xa8>
 800e1b0:	4623      	mov	r3, r4
 800e1b2:	6864      	ldr	r4, [r4, #4]
 800e1b4:	e7ae      	b.n	800e114 <_malloc_r+0x34>
 800e1b6:	463c      	mov	r4, r7
 800e1b8:	687f      	ldr	r7, [r7, #4]
 800e1ba:	e7b6      	b.n	800e12a <_malloc_r+0x4a>
 800e1bc:	461a      	mov	r2, r3
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	42a3      	cmp	r3, r4
 800e1c2:	d1fb      	bne.n	800e1bc <_malloc_r+0xdc>
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	6053      	str	r3, [r2, #4]
 800e1c8:	e7de      	b.n	800e188 <_malloc_r+0xa8>
 800e1ca:	230c      	movs	r3, #12
 800e1cc:	6033      	str	r3, [r6, #0]
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	f000 f80c 	bl	800e1ec <__malloc_unlock>
 800e1d4:	e794      	b.n	800e100 <_malloc_r+0x20>
 800e1d6:	6005      	str	r5, [r0, #0]
 800e1d8:	e7d6      	b.n	800e188 <_malloc_r+0xa8>
 800e1da:	bf00      	nop
 800e1dc:	200023b0 	.word	0x200023b0

0800e1e0 <__malloc_lock>:
 800e1e0:	4801      	ldr	r0, [pc, #4]	@ (800e1e8 <__malloc_lock+0x8>)
 800e1e2:	f7ff b8b2 	b.w	800d34a <__retarget_lock_acquire_recursive>
 800e1e6:	bf00      	nop
 800e1e8:	200023a8 	.word	0x200023a8

0800e1ec <__malloc_unlock>:
 800e1ec:	4801      	ldr	r0, [pc, #4]	@ (800e1f4 <__malloc_unlock+0x8>)
 800e1ee:	f7ff b8ad 	b.w	800d34c <__retarget_lock_release_recursive>
 800e1f2:	bf00      	nop
 800e1f4:	200023a8 	.word	0x200023a8

0800e1f8 <_Balloc>:
 800e1f8:	b570      	push	{r4, r5, r6, lr}
 800e1fa:	69c6      	ldr	r6, [r0, #28]
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	460d      	mov	r5, r1
 800e200:	b976      	cbnz	r6, 800e220 <_Balloc+0x28>
 800e202:	2010      	movs	r0, #16
 800e204:	f7ff ff42 	bl	800e08c <malloc>
 800e208:	4602      	mov	r2, r0
 800e20a:	61e0      	str	r0, [r4, #28]
 800e20c:	b920      	cbnz	r0, 800e218 <_Balloc+0x20>
 800e20e:	4b18      	ldr	r3, [pc, #96]	@ (800e270 <_Balloc+0x78>)
 800e210:	4818      	ldr	r0, [pc, #96]	@ (800e274 <_Balloc+0x7c>)
 800e212:	216b      	movs	r1, #107	@ 0x6b
 800e214:	f002 f90c 	bl	8010430 <__assert_func>
 800e218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e21c:	6006      	str	r6, [r0, #0]
 800e21e:	60c6      	str	r6, [r0, #12]
 800e220:	69e6      	ldr	r6, [r4, #28]
 800e222:	68f3      	ldr	r3, [r6, #12]
 800e224:	b183      	cbz	r3, 800e248 <_Balloc+0x50>
 800e226:	69e3      	ldr	r3, [r4, #28]
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e22e:	b9b8      	cbnz	r0, 800e260 <_Balloc+0x68>
 800e230:	2101      	movs	r1, #1
 800e232:	fa01 f605 	lsl.w	r6, r1, r5
 800e236:	1d72      	adds	r2, r6, #5
 800e238:	0092      	lsls	r2, r2, #2
 800e23a:	4620      	mov	r0, r4
 800e23c:	f002 f916 	bl	801046c <_calloc_r>
 800e240:	b160      	cbz	r0, 800e25c <_Balloc+0x64>
 800e242:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e246:	e00e      	b.n	800e266 <_Balloc+0x6e>
 800e248:	2221      	movs	r2, #33	@ 0x21
 800e24a:	2104      	movs	r1, #4
 800e24c:	4620      	mov	r0, r4
 800e24e:	f002 f90d 	bl	801046c <_calloc_r>
 800e252:	69e3      	ldr	r3, [r4, #28]
 800e254:	60f0      	str	r0, [r6, #12]
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d1e4      	bne.n	800e226 <_Balloc+0x2e>
 800e25c:	2000      	movs	r0, #0
 800e25e:	bd70      	pop	{r4, r5, r6, pc}
 800e260:	6802      	ldr	r2, [r0, #0]
 800e262:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e266:	2300      	movs	r3, #0
 800e268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e26c:	e7f7      	b.n	800e25e <_Balloc+0x66>
 800e26e:	bf00      	nop
 800e270:	08011488 	.word	0x08011488
 800e274:	08011508 	.word	0x08011508

0800e278 <_Bfree>:
 800e278:	b570      	push	{r4, r5, r6, lr}
 800e27a:	69c6      	ldr	r6, [r0, #28]
 800e27c:	4605      	mov	r5, r0
 800e27e:	460c      	mov	r4, r1
 800e280:	b976      	cbnz	r6, 800e2a0 <_Bfree+0x28>
 800e282:	2010      	movs	r0, #16
 800e284:	f7ff ff02 	bl	800e08c <malloc>
 800e288:	4602      	mov	r2, r0
 800e28a:	61e8      	str	r0, [r5, #28]
 800e28c:	b920      	cbnz	r0, 800e298 <_Bfree+0x20>
 800e28e:	4b09      	ldr	r3, [pc, #36]	@ (800e2b4 <_Bfree+0x3c>)
 800e290:	4809      	ldr	r0, [pc, #36]	@ (800e2b8 <_Bfree+0x40>)
 800e292:	218f      	movs	r1, #143	@ 0x8f
 800e294:	f002 f8cc 	bl	8010430 <__assert_func>
 800e298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e29c:	6006      	str	r6, [r0, #0]
 800e29e:	60c6      	str	r6, [r0, #12]
 800e2a0:	b13c      	cbz	r4, 800e2b2 <_Bfree+0x3a>
 800e2a2:	69eb      	ldr	r3, [r5, #28]
 800e2a4:	6862      	ldr	r2, [r4, #4]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2ac:	6021      	str	r1, [r4, #0]
 800e2ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e2b2:	bd70      	pop	{r4, r5, r6, pc}
 800e2b4:	08011488 	.word	0x08011488
 800e2b8:	08011508 	.word	0x08011508

0800e2bc <__multadd>:
 800e2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c0:	690d      	ldr	r5, [r1, #16]
 800e2c2:	4607      	mov	r7, r0
 800e2c4:	460c      	mov	r4, r1
 800e2c6:	461e      	mov	r6, r3
 800e2c8:	f101 0c14 	add.w	ip, r1, #20
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	f8dc 3000 	ldr.w	r3, [ip]
 800e2d2:	b299      	uxth	r1, r3
 800e2d4:	fb02 6101 	mla	r1, r2, r1, r6
 800e2d8:	0c1e      	lsrs	r6, r3, #16
 800e2da:	0c0b      	lsrs	r3, r1, #16
 800e2dc:	fb02 3306 	mla	r3, r2, r6, r3
 800e2e0:	b289      	uxth	r1, r1
 800e2e2:	3001      	adds	r0, #1
 800e2e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e2e8:	4285      	cmp	r5, r0
 800e2ea:	f84c 1b04 	str.w	r1, [ip], #4
 800e2ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e2f2:	dcec      	bgt.n	800e2ce <__multadd+0x12>
 800e2f4:	b30e      	cbz	r6, 800e33a <__multadd+0x7e>
 800e2f6:	68a3      	ldr	r3, [r4, #8]
 800e2f8:	42ab      	cmp	r3, r5
 800e2fa:	dc19      	bgt.n	800e330 <__multadd+0x74>
 800e2fc:	6861      	ldr	r1, [r4, #4]
 800e2fe:	4638      	mov	r0, r7
 800e300:	3101      	adds	r1, #1
 800e302:	f7ff ff79 	bl	800e1f8 <_Balloc>
 800e306:	4680      	mov	r8, r0
 800e308:	b928      	cbnz	r0, 800e316 <__multadd+0x5a>
 800e30a:	4602      	mov	r2, r0
 800e30c:	4b0c      	ldr	r3, [pc, #48]	@ (800e340 <__multadd+0x84>)
 800e30e:	480d      	ldr	r0, [pc, #52]	@ (800e344 <__multadd+0x88>)
 800e310:	21ba      	movs	r1, #186	@ 0xba
 800e312:	f002 f88d 	bl	8010430 <__assert_func>
 800e316:	6922      	ldr	r2, [r4, #16]
 800e318:	3202      	adds	r2, #2
 800e31a:	f104 010c 	add.w	r1, r4, #12
 800e31e:	0092      	lsls	r2, r2, #2
 800e320:	300c      	adds	r0, #12
 800e322:	f002 f86d 	bl	8010400 <memcpy>
 800e326:	4621      	mov	r1, r4
 800e328:	4638      	mov	r0, r7
 800e32a:	f7ff ffa5 	bl	800e278 <_Bfree>
 800e32e:	4644      	mov	r4, r8
 800e330:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e334:	3501      	adds	r5, #1
 800e336:	615e      	str	r6, [r3, #20]
 800e338:	6125      	str	r5, [r4, #16]
 800e33a:	4620      	mov	r0, r4
 800e33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e340:	080114f7 	.word	0x080114f7
 800e344:	08011508 	.word	0x08011508

0800e348 <__s2b>:
 800e348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e34c:	460c      	mov	r4, r1
 800e34e:	4615      	mov	r5, r2
 800e350:	461f      	mov	r7, r3
 800e352:	2209      	movs	r2, #9
 800e354:	3308      	adds	r3, #8
 800e356:	4606      	mov	r6, r0
 800e358:	fb93 f3f2 	sdiv	r3, r3, r2
 800e35c:	2100      	movs	r1, #0
 800e35e:	2201      	movs	r2, #1
 800e360:	429a      	cmp	r2, r3
 800e362:	db09      	blt.n	800e378 <__s2b+0x30>
 800e364:	4630      	mov	r0, r6
 800e366:	f7ff ff47 	bl	800e1f8 <_Balloc>
 800e36a:	b940      	cbnz	r0, 800e37e <__s2b+0x36>
 800e36c:	4602      	mov	r2, r0
 800e36e:	4b19      	ldr	r3, [pc, #100]	@ (800e3d4 <__s2b+0x8c>)
 800e370:	4819      	ldr	r0, [pc, #100]	@ (800e3d8 <__s2b+0x90>)
 800e372:	21d3      	movs	r1, #211	@ 0xd3
 800e374:	f002 f85c 	bl	8010430 <__assert_func>
 800e378:	0052      	lsls	r2, r2, #1
 800e37a:	3101      	adds	r1, #1
 800e37c:	e7f0      	b.n	800e360 <__s2b+0x18>
 800e37e:	9b08      	ldr	r3, [sp, #32]
 800e380:	6143      	str	r3, [r0, #20]
 800e382:	2d09      	cmp	r5, #9
 800e384:	f04f 0301 	mov.w	r3, #1
 800e388:	6103      	str	r3, [r0, #16]
 800e38a:	dd16      	ble.n	800e3ba <__s2b+0x72>
 800e38c:	f104 0909 	add.w	r9, r4, #9
 800e390:	46c8      	mov	r8, r9
 800e392:	442c      	add	r4, r5
 800e394:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e398:	4601      	mov	r1, r0
 800e39a:	3b30      	subs	r3, #48	@ 0x30
 800e39c:	220a      	movs	r2, #10
 800e39e:	4630      	mov	r0, r6
 800e3a0:	f7ff ff8c 	bl	800e2bc <__multadd>
 800e3a4:	45a0      	cmp	r8, r4
 800e3a6:	d1f5      	bne.n	800e394 <__s2b+0x4c>
 800e3a8:	f1a5 0408 	sub.w	r4, r5, #8
 800e3ac:	444c      	add	r4, r9
 800e3ae:	1b2d      	subs	r5, r5, r4
 800e3b0:	1963      	adds	r3, r4, r5
 800e3b2:	42bb      	cmp	r3, r7
 800e3b4:	db04      	blt.n	800e3c0 <__s2b+0x78>
 800e3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ba:	340a      	adds	r4, #10
 800e3bc:	2509      	movs	r5, #9
 800e3be:	e7f6      	b.n	800e3ae <__s2b+0x66>
 800e3c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e3c4:	4601      	mov	r1, r0
 800e3c6:	3b30      	subs	r3, #48	@ 0x30
 800e3c8:	220a      	movs	r2, #10
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	f7ff ff76 	bl	800e2bc <__multadd>
 800e3d0:	e7ee      	b.n	800e3b0 <__s2b+0x68>
 800e3d2:	bf00      	nop
 800e3d4:	080114f7 	.word	0x080114f7
 800e3d8:	08011508 	.word	0x08011508

0800e3dc <__hi0bits>:
 800e3dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	bf36      	itet	cc
 800e3e4:	0403      	lslcc	r3, r0, #16
 800e3e6:	2000      	movcs	r0, #0
 800e3e8:	2010      	movcc	r0, #16
 800e3ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e3ee:	bf3c      	itt	cc
 800e3f0:	021b      	lslcc	r3, r3, #8
 800e3f2:	3008      	addcc	r0, #8
 800e3f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3f8:	bf3c      	itt	cc
 800e3fa:	011b      	lslcc	r3, r3, #4
 800e3fc:	3004      	addcc	r0, #4
 800e3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e402:	bf3c      	itt	cc
 800e404:	009b      	lslcc	r3, r3, #2
 800e406:	3002      	addcc	r0, #2
 800e408:	2b00      	cmp	r3, #0
 800e40a:	db05      	blt.n	800e418 <__hi0bits+0x3c>
 800e40c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e410:	f100 0001 	add.w	r0, r0, #1
 800e414:	bf08      	it	eq
 800e416:	2020      	moveq	r0, #32
 800e418:	4770      	bx	lr

0800e41a <__lo0bits>:
 800e41a:	6803      	ldr	r3, [r0, #0]
 800e41c:	4602      	mov	r2, r0
 800e41e:	f013 0007 	ands.w	r0, r3, #7
 800e422:	d00b      	beq.n	800e43c <__lo0bits+0x22>
 800e424:	07d9      	lsls	r1, r3, #31
 800e426:	d421      	bmi.n	800e46c <__lo0bits+0x52>
 800e428:	0798      	lsls	r0, r3, #30
 800e42a:	bf49      	itett	mi
 800e42c:	085b      	lsrmi	r3, r3, #1
 800e42e:	089b      	lsrpl	r3, r3, #2
 800e430:	2001      	movmi	r0, #1
 800e432:	6013      	strmi	r3, [r2, #0]
 800e434:	bf5c      	itt	pl
 800e436:	6013      	strpl	r3, [r2, #0]
 800e438:	2002      	movpl	r0, #2
 800e43a:	4770      	bx	lr
 800e43c:	b299      	uxth	r1, r3
 800e43e:	b909      	cbnz	r1, 800e444 <__lo0bits+0x2a>
 800e440:	0c1b      	lsrs	r3, r3, #16
 800e442:	2010      	movs	r0, #16
 800e444:	b2d9      	uxtb	r1, r3
 800e446:	b909      	cbnz	r1, 800e44c <__lo0bits+0x32>
 800e448:	3008      	adds	r0, #8
 800e44a:	0a1b      	lsrs	r3, r3, #8
 800e44c:	0719      	lsls	r1, r3, #28
 800e44e:	bf04      	itt	eq
 800e450:	091b      	lsreq	r3, r3, #4
 800e452:	3004      	addeq	r0, #4
 800e454:	0799      	lsls	r1, r3, #30
 800e456:	bf04      	itt	eq
 800e458:	089b      	lsreq	r3, r3, #2
 800e45a:	3002      	addeq	r0, #2
 800e45c:	07d9      	lsls	r1, r3, #31
 800e45e:	d403      	bmi.n	800e468 <__lo0bits+0x4e>
 800e460:	085b      	lsrs	r3, r3, #1
 800e462:	f100 0001 	add.w	r0, r0, #1
 800e466:	d003      	beq.n	800e470 <__lo0bits+0x56>
 800e468:	6013      	str	r3, [r2, #0]
 800e46a:	4770      	bx	lr
 800e46c:	2000      	movs	r0, #0
 800e46e:	4770      	bx	lr
 800e470:	2020      	movs	r0, #32
 800e472:	4770      	bx	lr

0800e474 <__i2b>:
 800e474:	b510      	push	{r4, lr}
 800e476:	460c      	mov	r4, r1
 800e478:	2101      	movs	r1, #1
 800e47a:	f7ff febd 	bl	800e1f8 <_Balloc>
 800e47e:	4602      	mov	r2, r0
 800e480:	b928      	cbnz	r0, 800e48e <__i2b+0x1a>
 800e482:	4b05      	ldr	r3, [pc, #20]	@ (800e498 <__i2b+0x24>)
 800e484:	4805      	ldr	r0, [pc, #20]	@ (800e49c <__i2b+0x28>)
 800e486:	f240 1145 	movw	r1, #325	@ 0x145
 800e48a:	f001 ffd1 	bl	8010430 <__assert_func>
 800e48e:	2301      	movs	r3, #1
 800e490:	6144      	str	r4, [r0, #20]
 800e492:	6103      	str	r3, [r0, #16]
 800e494:	bd10      	pop	{r4, pc}
 800e496:	bf00      	nop
 800e498:	080114f7 	.word	0x080114f7
 800e49c:	08011508 	.word	0x08011508

0800e4a0 <__multiply>:
 800e4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	4614      	mov	r4, r2
 800e4a6:	690a      	ldr	r2, [r1, #16]
 800e4a8:	6923      	ldr	r3, [r4, #16]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	bfa8      	it	ge
 800e4ae:	4623      	movge	r3, r4
 800e4b0:	460f      	mov	r7, r1
 800e4b2:	bfa4      	itt	ge
 800e4b4:	460c      	movge	r4, r1
 800e4b6:	461f      	movge	r7, r3
 800e4b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e4bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e4c0:	68a3      	ldr	r3, [r4, #8]
 800e4c2:	6861      	ldr	r1, [r4, #4]
 800e4c4:	eb0a 0609 	add.w	r6, sl, r9
 800e4c8:	42b3      	cmp	r3, r6
 800e4ca:	b085      	sub	sp, #20
 800e4cc:	bfb8      	it	lt
 800e4ce:	3101      	addlt	r1, #1
 800e4d0:	f7ff fe92 	bl	800e1f8 <_Balloc>
 800e4d4:	b930      	cbnz	r0, 800e4e4 <__multiply+0x44>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	4b44      	ldr	r3, [pc, #272]	@ (800e5ec <__multiply+0x14c>)
 800e4da:	4845      	ldr	r0, [pc, #276]	@ (800e5f0 <__multiply+0x150>)
 800e4dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e4e0:	f001 ffa6 	bl	8010430 <__assert_func>
 800e4e4:	f100 0514 	add.w	r5, r0, #20
 800e4e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e4ec:	462b      	mov	r3, r5
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	4543      	cmp	r3, r8
 800e4f2:	d321      	bcc.n	800e538 <__multiply+0x98>
 800e4f4:	f107 0114 	add.w	r1, r7, #20
 800e4f8:	f104 0214 	add.w	r2, r4, #20
 800e4fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e500:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e504:	9302      	str	r3, [sp, #8]
 800e506:	1b13      	subs	r3, r2, r4
 800e508:	3b15      	subs	r3, #21
 800e50a:	f023 0303 	bic.w	r3, r3, #3
 800e50e:	3304      	adds	r3, #4
 800e510:	f104 0715 	add.w	r7, r4, #21
 800e514:	42ba      	cmp	r2, r7
 800e516:	bf38      	it	cc
 800e518:	2304      	movcc	r3, #4
 800e51a:	9301      	str	r3, [sp, #4]
 800e51c:	9b02      	ldr	r3, [sp, #8]
 800e51e:	9103      	str	r1, [sp, #12]
 800e520:	428b      	cmp	r3, r1
 800e522:	d80c      	bhi.n	800e53e <__multiply+0x9e>
 800e524:	2e00      	cmp	r6, #0
 800e526:	dd03      	ble.n	800e530 <__multiply+0x90>
 800e528:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d05b      	beq.n	800e5e8 <__multiply+0x148>
 800e530:	6106      	str	r6, [r0, #16]
 800e532:	b005      	add	sp, #20
 800e534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e538:	f843 2b04 	str.w	r2, [r3], #4
 800e53c:	e7d8      	b.n	800e4f0 <__multiply+0x50>
 800e53e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e542:	f1ba 0f00 	cmp.w	sl, #0
 800e546:	d024      	beq.n	800e592 <__multiply+0xf2>
 800e548:	f104 0e14 	add.w	lr, r4, #20
 800e54c:	46a9      	mov	r9, r5
 800e54e:	f04f 0c00 	mov.w	ip, #0
 800e552:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e556:	f8d9 3000 	ldr.w	r3, [r9]
 800e55a:	fa1f fb87 	uxth.w	fp, r7
 800e55e:	b29b      	uxth	r3, r3
 800e560:	fb0a 330b 	mla	r3, sl, fp, r3
 800e564:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e568:	f8d9 7000 	ldr.w	r7, [r9]
 800e56c:	4463      	add	r3, ip
 800e56e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e572:	fb0a c70b 	mla	r7, sl, fp, ip
 800e576:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e580:	4572      	cmp	r2, lr
 800e582:	f849 3b04 	str.w	r3, [r9], #4
 800e586:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e58a:	d8e2      	bhi.n	800e552 <__multiply+0xb2>
 800e58c:	9b01      	ldr	r3, [sp, #4]
 800e58e:	f845 c003 	str.w	ip, [r5, r3]
 800e592:	9b03      	ldr	r3, [sp, #12]
 800e594:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e598:	3104      	adds	r1, #4
 800e59a:	f1b9 0f00 	cmp.w	r9, #0
 800e59e:	d021      	beq.n	800e5e4 <__multiply+0x144>
 800e5a0:	682b      	ldr	r3, [r5, #0]
 800e5a2:	f104 0c14 	add.w	ip, r4, #20
 800e5a6:	46ae      	mov	lr, r5
 800e5a8:	f04f 0a00 	mov.w	sl, #0
 800e5ac:	f8bc b000 	ldrh.w	fp, [ip]
 800e5b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e5b4:	fb09 770b 	mla	r7, r9, fp, r7
 800e5b8:	4457      	add	r7, sl
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e5c0:	f84e 3b04 	str.w	r3, [lr], #4
 800e5c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e5c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5cc:	f8be 3000 	ldrh.w	r3, [lr]
 800e5d0:	fb09 330a 	mla	r3, r9, sl, r3
 800e5d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e5d8:	4562      	cmp	r2, ip
 800e5da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5de:	d8e5      	bhi.n	800e5ac <__multiply+0x10c>
 800e5e0:	9f01      	ldr	r7, [sp, #4]
 800e5e2:	51eb      	str	r3, [r5, r7]
 800e5e4:	3504      	adds	r5, #4
 800e5e6:	e799      	b.n	800e51c <__multiply+0x7c>
 800e5e8:	3e01      	subs	r6, #1
 800e5ea:	e79b      	b.n	800e524 <__multiply+0x84>
 800e5ec:	080114f7 	.word	0x080114f7
 800e5f0:	08011508 	.word	0x08011508

0800e5f4 <__pow5mult>:
 800e5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5f8:	4615      	mov	r5, r2
 800e5fa:	f012 0203 	ands.w	r2, r2, #3
 800e5fe:	4607      	mov	r7, r0
 800e600:	460e      	mov	r6, r1
 800e602:	d007      	beq.n	800e614 <__pow5mult+0x20>
 800e604:	4c25      	ldr	r4, [pc, #148]	@ (800e69c <__pow5mult+0xa8>)
 800e606:	3a01      	subs	r2, #1
 800e608:	2300      	movs	r3, #0
 800e60a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e60e:	f7ff fe55 	bl	800e2bc <__multadd>
 800e612:	4606      	mov	r6, r0
 800e614:	10ad      	asrs	r5, r5, #2
 800e616:	d03d      	beq.n	800e694 <__pow5mult+0xa0>
 800e618:	69fc      	ldr	r4, [r7, #28]
 800e61a:	b97c      	cbnz	r4, 800e63c <__pow5mult+0x48>
 800e61c:	2010      	movs	r0, #16
 800e61e:	f7ff fd35 	bl	800e08c <malloc>
 800e622:	4602      	mov	r2, r0
 800e624:	61f8      	str	r0, [r7, #28]
 800e626:	b928      	cbnz	r0, 800e634 <__pow5mult+0x40>
 800e628:	4b1d      	ldr	r3, [pc, #116]	@ (800e6a0 <__pow5mult+0xac>)
 800e62a:	481e      	ldr	r0, [pc, #120]	@ (800e6a4 <__pow5mult+0xb0>)
 800e62c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e630:	f001 fefe 	bl	8010430 <__assert_func>
 800e634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e638:	6004      	str	r4, [r0, #0]
 800e63a:	60c4      	str	r4, [r0, #12]
 800e63c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e644:	b94c      	cbnz	r4, 800e65a <__pow5mult+0x66>
 800e646:	f240 2171 	movw	r1, #625	@ 0x271
 800e64a:	4638      	mov	r0, r7
 800e64c:	f7ff ff12 	bl	800e474 <__i2b>
 800e650:	2300      	movs	r3, #0
 800e652:	f8c8 0008 	str.w	r0, [r8, #8]
 800e656:	4604      	mov	r4, r0
 800e658:	6003      	str	r3, [r0, #0]
 800e65a:	f04f 0900 	mov.w	r9, #0
 800e65e:	07eb      	lsls	r3, r5, #31
 800e660:	d50a      	bpl.n	800e678 <__pow5mult+0x84>
 800e662:	4631      	mov	r1, r6
 800e664:	4622      	mov	r2, r4
 800e666:	4638      	mov	r0, r7
 800e668:	f7ff ff1a 	bl	800e4a0 <__multiply>
 800e66c:	4631      	mov	r1, r6
 800e66e:	4680      	mov	r8, r0
 800e670:	4638      	mov	r0, r7
 800e672:	f7ff fe01 	bl	800e278 <_Bfree>
 800e676:	4646      	mov	r6, r8
 800e678:	106d      	asrs	r5, r5, #1
 800e67a:	d00b      	beq.n	800e694 <__pow5mult+0xa0>
 800e67c:	6820      	ldr	r0, [r4, #0]
 800e67e:	b938      	cbnz	r0, 800e690 <__pow5mult+0x9c>
 800e680:	4622      	mov	r2, r4
 800e682:	4621      	mov	r1, r4
 800e684:	4638      	mov	r0, r7
 800e686:	f7ff ff0b 	bl	800e4a0 <__multiply>
 800e68a:	6020      	str	r0, [r4, #0]
 800e68c:	f8c0 9000 	str.w	r9, [r0]
 800e690:	4604      	mov	r4, r0
 800e692:	e7e4      	b.n	800e65e <__pow5mult+0x6a>
 800e694:	4630      	mov	r0, r6
 800e696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e69a:	bf00      	nop
 800e69c:	08011564 	.word	0x08011564
 800e6a0:	08011488 	.word	0x08011488
 800e6a4:	08011508 	.word	0x08011508

0800e6a8 <__lshift>:
 800e6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6ac:	460c      	mov	r4, r1
 800e6ae:	6849      	ldr	r1, [r1, #4]
 800e6b0:	6923      	ldr	r3, [r4, #16]
 800e6b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6b6:	68a3      	ldr	r3, [r4, #8]
 800e6b8:	4607      	mov	r7, r0
 800e6ba:	4691      	mov	r9, r2
 800e6bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6c0:	f108 0601 	add.w	r6, r8, #1
 800e6c4:	42b3      	cmp	r3, r6
 800e6c6:	db0b      	blt.n	800e6e0 <__lshift+0x38>
 800e6c8:	4638      	mov	r0, r7
 800e6ca:	f7ff fd95 	bl	800e1f8 <_Balloc>
 800e6ce:	4605      	mov	r5, r0
 800e6d0:	b948      	cbnz	r0, 800e6e6 <__lshift+0x3e>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	4b28      	ldr	r3, [pc, #160]	@ (800e778 <__lshift+0xd0>)
 800e6d6:	4829      	ldr	r0, [pc, #164]	@ (800e77c <__lshift+0xd4>)
 800e6d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e6dc:	f001 fea8 	bl	8010430 <__assert_func>
 800e6e0:	3101      	adds	r1, #1
 800e6e2:	005b      	lsls	r3, r3, #1
 800e6e4:	e7ee      	b.n	800e6c4 <__lshift+0x1c>
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	f100 0114 	add.w	r1, r0, #20
 800e6ec:	f100 0210 	add.w	r2, r0, #16
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	4553      	cmp	r3, sl
 800e6f4:	db33      	blt.n	800e75e <__lshift+0xb6>
 800e6f6:	6920      	ldr	r0, [r4, #16]
 800e6f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6fc:	f104 0314 	add.w	r3, r4, #20
 800e700:	f019 091f 	ands.w	r9, r9, #31
 800e704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e708:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e70c:	d02b      	beq.n	800e766 <__lshift+0xbe>
 800e70e:	f1c9 0e20 	rsb	lr, r9, #32
 800e712:	468a      	mov	sl, r1
 800e714:	2200      	movs	r2, #0
 800e716:	6818      	ldr	r0, [r3, #0]
 800e718:	fa00 f009 	lsl.w	r0, r0, r9
 800e71c:	4310      	orrs	r0, r2
 800e71e:	f84a 0b04 	str.w	r0, [sl], #4
 800e722:	f853 2b04 	ldr.w	r2, [r3], #4
 800e726:	459c      	cmp	ip, r3
 800e728:	fa22 f20e 	lsr.w	r2, r2, lr
 800e72c:	d8f3      	bhi.n	800e716 <__lshift+0x6e>
 800e72e:	ebac 0304 	sub.w	r3, ip, r4
 800e732:	3b15      	subs	r3, #21
 800e734:	f023 0303 	bic.w	r3, r3, #3
 800e738:	3304      	adds	r3, #4
 800e73a:	f104 0015 	add.w	r0, r4, #21
 800e73e:	4584      	cmp	ip, r0
 800e740:	bf38      	it	cc
 800e742:	2304      	movcc	r3, #4
 800e744:	50ca      	str	r2, [r1, r3]
 800e746:	b10a      	cbz	r2, 800e74c <__lshift+0xa4>
 800e748:	f108 0602 	add.w	r6, r8, #2
 800e74c:	3e01      	subs	r6, #1
 800e74e:	4638      	mov	r0, r7
 800e750:	612e      	str	r6, [r5, #16]
 800e752:	4621      	mov	r1, r4
 800e754:	f7ff fd90 	bl	800e278 <_Bfree>
 800e758:	4628      	mov	r0, r5
 800e75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e75e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e762:	3301      	adds	r3, #1
 800e764:	e7c5      	b.n	800e6f2 <__lshift+0x4a>
 800e766:	3904      	subs	r1, #4
 800e768:	f853 2b04 	ldr.w	r2, [r3], #4
 800e76c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e770:	459c      	cmp	ip, r3
 800e772:	d8f9      	bhi.n	800e768 <__lshift+0xc0>
 800e774:	e7ea      	b.n	800e74c <__lshift+0xa4>
 800e776:	bf00      	nop
 800e778:	080114f7 	.word	0x080114f7
 800e77c:	08011508 	.word	0x08011508

0800e780 <__mcmp>:
 800e780:	690a      	ldr	r2, [r1, #16]
 800e782:	4603      	mov	r3, r0
 800e784:	6900      	ldr	r0, [r0, #16]
 800e786:	1a80      	subs	r0, r0, r2
 800e788:	b530      	push	{r4, r5, lr}
 800e78a:	d10e      	bne.n	800e7aa <__mcmp+0x2a>
 800e78c:	3314      	adds	r3, #20
 800e78e:	3114      	adds	r1, #20
 800e790:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e794:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e798:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e79c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e7a0:	4295      	cmp	r5, r2
 800e7a2:	d003      	beq.n	800e7ac <__mcmp+0x2c>
 800e7a4:	d205      	bcs.n	800e7b2 <__mcmp+0x32>
 800e7a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e7aa:	bd30      	pop	{r4, r5, pc}
 800e7ac:	42a3      	cmp	r3, r4
 800e7ae:	d3f3      	bcc.n	800e798 <__mcmp+0x18>
 800e7b0:	e7fb      	b.n	800e7aa <__mcmp+0x2a>
 800e7b2:	2001      	movs	r0, #1
 800e7b4:	e7f9      	b.n	800e7aa <__mcmp+0x2a>
	...

0800e7b8 <__mdiff>:
 800e7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7bc:	4689      	mov	r9, r1
 800e7be:	4606      	mov	r6, r0
 800e7c0:	4611      	mov	r1, r2
 800e7c2:	4648      	mov	r0, r9
 800e7c4:	4614      	mov	r4, r2
 800e7c6:	f7ff ffdb 	bl	800e780 <__mcmp>
 800e7ca:	1e05      	subs	r5, r0, #0
 800e7cc:	d112      	bne.n	800e7f4 <__mdiff+0x3c>
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	f7ff fd11 	bl	800e1f8 <_Balloc>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	b928      	cbnz	r0, 800e7e6 <__mdiff+0x2e>
 800e7da:	4b3f      	ldr	r3, [pc, #252]	@ (800e8d8 <__mdiff+0x120>)
 800e7dc:	f240 2137 	movw	r1, #567	@ 0x237
 800e7e0:	483e      	ldr	r0, [pc, #248]	@ (800e8dc <__mdiff+0x124>)
 800e7e2:	f001 fe25 	bl	8010430 <__assert_func>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	b003      	add	sp, #12
 800e7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f4:	bfbc      	itt	lt
 800e7f6:	464b      	movlt	r3, r9
 800e7f8:	46a1      	movlt	r9, r4
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e800:	bfba      	itte	lt
 800e802:	461c      	movlt	r4, r3
 800e804:	2501      	movlt	r5, #1
 800e806:	2500      	movge	r5, #0
 800e808:	f7ff fcf6 	bl	800e1f8 <_Balloc>
 800e80c:	4602      	mov	r2, r0
 800e80e:	b918      	cbnz	r0, 800e818 <__mdiff+0x60>
 800e810:	4b31      	ldr	r3, [pc, #196]	@ (800e8d8 <__mdiff+0x120>)
 800e812:	f240 2145 	movw	r1, #581	@ 0x245
 800e816:	e7e3      	b.n	800e7e0 <__mdiff+0x28>
 800e818:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e81c:	6926      	ldr	r6, [r4, #16]
 800e81e:	60c5      	str	r5, [r0, #12]
 800e820:	f109 0310 	add.w	r3, r9, #16
 800e824:	f109 0514 	add.w	r5, r9, #20
 800e828:	f104 0e14 	add.w	lr, r4, #20
 800e82c:	f100 0b14 	add.w	fp, r0, #20
 800e830:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e834:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e838:	9301      	str	r3, [sp, #4]
 800e83a:	46d9      	mov	r9, fp
 800e83c:	f04f 0c00 	mov.w	ip, #0
 800e840:	9b01      	ldr	r3, [sp, #4]
 800e842:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e846:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e84a:	9301      	str	r3, [sp, #4]
 800e84c:	fa1f f38a 	uxth.w	r3, sl
 800e850:	4619      	mov	r1, r3
 800e852:	b283      	uxth	r3, r0
 800e854:	1acb      	subs	r3, r1, r3
 800e856:	0c00      	lsrs	r0, r0, #16
 800e858:	4463      	add	r3, ip
 800e85a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e85e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e862:	b29b      	uxth	r3, r3
 800e864:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e868:	4576      	cmp	r6, lr
 800e86a:	f849 3b04 	str.w	r3, [r9], #4
 800e86e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e872:	d8e5      	bhi.n	800e840 <__mdiff+0x88>
 800e874:	1b33      	subs	r3, r6, r4
 800e876:	3b15      	subs	r3, #21
 800e878:	f023 0303 	bic.w	r3, r3, #3
 800e87c:	3415      	adds	r4, #21
 800e87e:	3304      	adds	r3, #4
 800e880:	42a6      	cmp	r6, r4
 800e882:	bf38      	it	cc
 800e884:	2304      	movcc	r3, #4
 800e886:	441d      	add	r5, r3
 800e888:	445b      	add	r3, fp
 800e88a:	461e      	mov	r6, r3
 800e88c:	462c      	mov	r4, r5
 800e88e:	4544      	cmp	r4, r8
 800e890:	d30e      	bcc.n	800e8b0 <__mdiff+0xf8>
 800e892:	f108 0103 	add.w	r1, r8, #3
 800e896:	1b49      	subs	r1, r1, r5
 800e898:	f021 0103 	bic.w	r1, r1, #3
 800e89c:	3d03      	subs	r5, #3
 800e89e:	45a8      	cmp	r8, r5
 800e8a0:	bf38      	it	cc
 800e8a2:	2100      	movcc	r1, #0
 800e8a4:	440b      	add	r3, r1
 800e8a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8aa:	b191      	cbz	r1, 800e8d2 <__mdiff+0x11a>
 800e8ac:	6117      	str	r7, [r2, #16]
 800e8ae:	e79d      	b.n	800e7ec <__mdiff+0x34>
 800e8b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e8b4:	46e6      	mov	lr, ip
 800e8b6:	0c08      	lsrs	r0, r1, #16
 800e8b8:	fa1c fc81 	uxtah	ip, ip, r1
 800e8bc:	4471      	add	r1, lr
 800e8be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e8c2:	b289      	uxth	r1, r1
 800e8c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e8c8:	f846 1b04 	str.w	r1, [r6], #4
 800e8cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e8d0:	e7dd      	b.n	800e88e <__mdiff+0xd6>
 800e8d2:	3f01      	subs	r7, #1
 800e8d4:	e7e7      	b.n	800e8a6 <__mdiff+0xee>
 800e8d6:	bf00      	nop
 800e8d8:	080114f7 	.word	0x080114f7
 800e8dc:	08011508 	.word	0x08011508

0800e8e0 <__ulp>:
 800e8e0:	b082      	sub	sp, #8
 800e8e2:	ed8d 0b00 	vstr	d0, [sp]
 800e8e6:	9a01      	ldr	r2, [sp, #4]
 800e8e8:	4b0f      	ldr	r3, [pc, #60]	@ (800e928 <__ulp+0x48>)
 800e8ea:	4013      	ands	r3, r2
 800e8ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	dc08      	bgt.n	800e906 <__ulp+0x26>
 800e8f4:	425b      	negs	r3, r3
 800e8f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e8fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e8fe:	da04      	bge.n	800e90a <__ulp+0x2a>
 800e900:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e904:	4113      	asrs	r3, r2
 800e906:	2200      	movs	r2, #0
 800e908:	e008      	b.n	800e91c <__ulp+0x3c>
 800e90a:	f1a2 0314 	sub.w	r3, r2, #20
 800e90e:	2b1e      	cmp	r3, #30
 800e910:	bfda      	itte	le
 800e912:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e916:	40da      	lsrle	r2, r3
 800e918:	2201      	movgt	r2, #1
 800e91a:	2300      	movs	r3, #0
 800e91c:	4619      	mov	r1, r3
 800e91e:	4610      	mov	r0, r2
 800e920:	ec41 0b10 	vmov	d0, r0, r1
 800e924:	b002      	add	sp, #8
 800e926:	4770      	bx	lr
 800e928:	7ff00000 	.word	0x7ff00000

0800e92c <__b2d>:
 800e92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e930:	6906      	ldr	r6, [r0, #16]
 800e932:	f100 0814 	add.w	r8, r0, #20
 800e936:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e93a:	1f37      	subs	r7, r6, #4
 800e93c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e940:	4610      	mov	r0, r2
 800e942:	f7ff fd4b 	bl	800e3dc <__hi0bits>
 800e946:	f1c0 0320 	rsb	r3, r0, #32
 800e94a:	280a      	cmp	r0, #10
 800e94c:	600b      	str	r3, [r1, #0]
 800e94e:	491b      	ldr	r1, [pc, #108]	@ (800e9bc <__b2d+0x90>)
 800e950:	dc15      	bgt.n	800e97e <__b2d+0x52>
 800e952:	f1c0 0c0b 	rsb	ip, r0, #11
 800e956:	fa22 f30c 	lsr.w	r3, r2, ip
 800e95a:	45b8      	cmp	r8, r7
 800e95c:	ea43 0501 	orr.w	r5, r3, r1
 800e960:	bf34      	ite	cc
 800e962:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e966:	2300      	movcs	r3, #0
 800e968:	3015      	adds	r0, #21
 800e96a:	fa02 f000 	lsl.w	r0, r2, r0
 800e96e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e972:	4303      	orrs	r3, r0
 800e974:	461c      	mov	r4, r3
 800e976:	ec45 4b10 	vmov	d0, r4, r5
 800e97a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e97e:	45b8      	cmp	r8, r7
 800e980:	bf3a      	itte	cc
 800e982:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e986:	f1a6 0708 	subcc.w	r7, r6, #8
 800e98a:	2300      	movcs	r3, #0
 800e98c:	380b      	subs	r0, #11
 800e98e:	d012      	beq.n	800e9b6 <__b2d+0x8a>
 800e990:	f1c0 0120 	rsb	r1, r0, #32
 800e994:	fa23 f401 	lsr.w	r4, r3, r1
 800e998:	4082      	lsls	r2, r0
 800e99a:	4322      	orrs	r2, r4
 800e99c:	4547      	cmp	r7, r8
 800e99e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e9a2:	bf8c      	ite	hi
 800e9a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e9a8:	2200      	movls	r2, #0
 800e9aa:	4083      	lsls	r3, r0
 800e9ac:	40ca      	lsrs	r2, r1
 800e9ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	e7de      	b.n	800e974 <__b2d+0x48>
 800e9b6:	ea42 0501 	orr.w	r5, r2, r1
 800e9ba:	e7db      	b.n	800e974 <__b2d+0x48>
 800e9bc:	3ff00000 	.word	0x3ff00000

0800e9c0 <__d2b>:
 800e9c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9c4:	460f      	mov	r7, r1
 800e9c6:	2101      	movs	r1, #1
 800e9c8:	ec59 8b10 	vmov	r8, r9, d0
 800e9cc:	4616      	mov	r6, r2
 800e9ce:	f7ff fc13 	bl	800e1f8 <_Balloc>
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	b930      	cbnz	r0, 800e9e4 <__d2b+0x24>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	4b23      	ldr	r3, [pc, #140]	@ (800ea68 <__d2b+0xa8>)
 800e9da:	4824      	ldr	r0, [pc, #144]	@ (800ea6c <__d2b+0xac>)
 800e9dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800e9e0:	f001 fd26 	bl	8010430 <__assert_func>
 800e9e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e9e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e9ec:	b10d      	cbz	r5, 800e9f2 <__d2b+0x32>
 800e9ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	f1b8 0300 	subs.w	r3, r8, #0
 800e9f8:	d023      	beq.n	800ea42 <__d2b+0x82>
 800e9fa:	4668      	mov	r0, sp
 800e9fc:	9300      	str	r3, [sp, #0]
 800e9fe:	f7ff fd0c 	bl	800e41a <__lo0bits>
 800ea02:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea06:	b1d0      	cbz	r0, 800ea3e <__d2b+0x7e>
 800ea08:	f1c0 0320 	rsb	r3, r0, #32
 800ea0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ea10:	430b      	orrs	r3, r1
 800ea12:	40c2      	lsrs	r2, r0
 800ea14:	6163      	str	r3, [r4, #20]
 800ea16:	9201      	str	r2, [sp, #4]
 800ea18:	9b01      	ldr	r3, [sp, #4]
 800ea1a:	61a3      	str	r3, [r4, #24]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	bf0c      	ite	eq
 800ea20:	2201      	moveq	r2, #1
 800ea22:	2202      	movne	r2, #2
 800ea24:	6122      	str	r2, [r4, #16]
 800ea26:	b1a5      	cbz	r5, 800ea52 <__d2b+0x92>
 800ea28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ea2c:	4405      	add	r5, r0
 800ea2e:	603d      	str	r5, [r7, #0]
 800ea30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ea34:	6030      	str	r0, [r6, #0]
 800ea36:	4620      	mov	r0, r4
 800ea38:	b003      	add	sp, #12
 800ea3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea3e:	6161      	str	r1, [r4, #20]
 800ea40:	e7ea      	b.n	800ea18 <__d2b+0x58>
 800ea42:	a801      	add	r0, sp, #4
 800ea44:	f7ff fce9 	bl	800e41a <__lo0bits>
 800ea48:	9b01      	ldr	r3, [sp, #4]
 800ea4a:	6163      	str	r3, [r4, #20]
 800ea4c:	3020      	adds	r0, #32
 800ea4e:	2201      	movs	r2, #1
 800ea50:	e7e8      	b.n	800ea24 <__d2b+0x64>
 800ea52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ea5a:	6038      	str	r0, [r7, #0]
 800ea5c:	6918      	ldr	r0, [r3, #16]
 800ea5e:	f7ff fcbd 	bl	800e3dc <__hi0bits>
 800ea62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea66:	e7e5      	b.n	800ea34 <__d2b+0x74>
 800ea68:	080114f7 	.word	0x080114f7
 800ea6c:	08011508 	.word	0x08011508

0800ea70 <__ratio>:
 800ea70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea74:	b085      	sub	sp, #20
 800ea76:	e9cd 1000 	strd	r1, r0, [sp]
 800ea7a:	a902      	add	r1, sp, #8
 800ea7c:	f7ff ff56 	bl	800e92c <__b2d>
 800ea80:	9800      	ldr	r0, [sp, #0]
 800ea82:	a903      	add	r1, sp, #12
 800ea84:	ec55 4b10 	vmov	r4, r5, d0
 800ea88:	f7ff ff50 	bl	800e92c <__b2d>
 800ea8c:	9b01      	ldr	r3, [sp, #4]
 800ea8e:	6919      	ldr	r1, [r3, #16]
 800ea90:	9b00      	ldr	r3, [sp, #0]
 800ea92:	691b      	ldr	r3, [r3, #16]
 800ea94:	1ac9      	subs	r1, r1, r3
 800ea96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ea9a:	1a9b      	subs	r3, r3, r2
 800ea9c:	ec5b ab10 	vmov	sl, fp, d0
 800eaa0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	bfce      	itee	gt
 800eaa8:	462a      	movgt	r2, r5
 800eaaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eaae:	465a      	movle	r2, fp
 800eab0:	462f      	mov	r7, r5
 800eab2:	46d9      	mov	r9, fp
 800eab4:	bfcc      	ite	gt
 800eab6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eaba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eabe:	464b      	mov	r3, r9
 800eac0:	4652      	mov	r2, sl
 800eac2:	4620      	mov	r0, r4
 800eac4:	4639      	mov	r1, r7
 800eac6:	f7f1 fec1 	bl	800084c <__aeabi_ddiv>
 800eaca:	ec41 0b10 	vmov	d0, r0, r1
 800eace:	b005      	add	sp, #20
 800ead0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ead4 <__copybits>:
 800ead4:	3901      	subs	r1, #1
 800ead6:	b570      	push	{r4, r5, r6, lr}
 800ead8:	1149      	asrs	r1, r1, #5
 800eada:	6914      	ldr	r4, [r2, #16]
 800eadc:	3101      	adds	r1, #1
 800eade:	f102 0314 	add.w	r3, r2, #20
 800eae2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eae6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eaea:	1f05      	subs	r5, r0, #4
 800eaec:	42a3      	cmp	r3, r4
 800eaee:	d30c      	bcc.n	800eb0a <__copybits+0x36>
 800eaf0:	1aa3      	subs	r3, r4, r2
 800eaf2:	3b11      	subs	r3, #17
 800eaf4:	f023 0303 	bic.w	r3, r3, #3
 800eaf8:	3211      	adds	r2, #17
 800eafa:	42a2      	cmp	r2, r4
 800eafc:	bf88      	it	hi
 800eafe:	2300      	movhi	r3, #0
 800eb00:	4418      	add	r0, r3
 800eb02:	2300      	movs	r3, #0
 800eb04:	4288      	cmp	r0, r1
 800eb06:	d305      	bcc.n	800eb14 <__copybits+0x40>
 800eb08:	bd70      	pop	{r4, r5, r6, pc}
 800eb0a:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb0e:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb12:	e7eb      	b.n	800eaec <__copybits+0x18>
 800eb14:	f840 3b04 	str.w	r3, [r0], #4
 800eb18:	e7f4      	b.n	800eb04 <__copybits+0x30>

0800eb1a <__any_on>:
 800eb1a:	f100 0214 	add.w	r2, r0, #20
 800eb1e:	6900      	ldr	r0, [r0, #16]
 800eb20:	114b      	asrs	r3, r1, #5
 800eb22:	4298      	cmp	r0, r3
 800eb24:	b510      	push	{r4, lr}
 800eb26:	db11      	blt.n	800eb4c <__any_on+0x32>
 800eb28:	dd0a      	ble.n	800eb40 <__any_on+0x26>
 800eb2a:	f011 011f 	ands.w	r1, r1, #31
 800eb2e:	d007      	beq.n	800eb40 <__any_on+0x26>
 800eb30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb34:	fa24 f001 	lsr.w	r0, r4, r1
 800eb38:	fa00 f101 	lsl.w	r1, r0, r1
 800eb3c:	428c      	cmp	r4, r1
 800eb3e:	d10b      	bne.n	800eb58 <__any_on+0x3e>
 800eb40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d803      	bhi.n	800eb50 <__any_on+0x36>
 800eb48:	2000      	movs	r0, #0
 800eb4a:	bd10      	pop	{r4, pc}
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	e7f7      	b.n	800eb40 <__any_on+0x26>
 800eb50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb54:	2900      	cmp	r1, #0
 800eb56:	d0f5      	beq.n	800eb44 <__any_on+0x2a>
 800eb58:	2001      	movs	r0, #1
 800eb5a:	e7f6      	b.n	800eb4a <__any_on+0x30>

0800eb5c <sulp>:
 800eb5c:	b570      	push	{r4, r5, r6, lr}
 800eb5e:	4604      	mov	r4, r0
 800eb60:	460d      	mov	r5, r1
 800eb62:	ec45 4b10 	vmov	d0, r4, r5
 800eb66:	4616      	mov	r6, r2
 800eb68:	f7ff feba 	bl	800e8e0 <__ulp>
 800eb6c:	ec51 0b10 	vmov	r0, r1, d0
 800eb70:	b17e      	cbz	r6, 800eb92 <sulp+0x36>
 800eb72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eb76:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	dd09      	ble.n	800eb92 <sulp+0x36>
 800eb7e:	051b      	lsls	r3, r3, #20
 800eb80:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800eb84:	2400      	movs	r4, #0
 800eb86:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800eb8a:	4622      	mov	r2, r4
 800eb8c:	462b      	mov	r3, r5
 800eb8e:	f7f1 fd33 	bl	80005f8 <__aeabi_dmul>
 800eb92:	ec41 0b10 	vmov	d0, r0, r1
 800eb96:	bd70      	pop	{r4, r5, r6, pc}

0800eb98 <_strtod_l>:
 800eb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb9c:	b09f      	sub	sp, #124	@ 0x7c
 800eb9e:	460c      	mov	r4, r1
 800eba0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800eba2:	2200      	movs	r2, #0
 800eba4:	921a      	str	r2, [sp, #104]	@ 0x68
 800eba6:	9005      	str	r0, [sp, #20]
 800eba8:	f04f 0a00 	mov.w	sl, #0
 800ebac:	f04f 0b00 	mov.w	fp, #0
 800ebb0:	460a      	mov	r2, r1
 800ebb2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ebb4:	7811      	ldrb	r1, [r2, #0]
 800ebb6:	292b      	cmp	r1, #43	@ 0x2b
 800ebb8:	d04a      	beq.n	800ec50 <_strtod_l+0xb8>
 800ebba:	d838      	bhi.n	800ec2e <_strtod_l+0x96>
 800ebbc:	290d      	cmp	r1, #13
 800ebbe:	d832      	bhi.n	800ec26 <_strtod_l+0x8e>
 800ebc0:	2908      	cmp	r1, #8
 800ebc2:	d832      	bhi.n	800ec2a <_strtod_l+0x92>
 800ebc4:	2900      	cmp	r1, #0
 800ebc6:	d03b      	beq.n	800ec40 <_strtod_l+0xa8>
 800ebc8:	2200      	movs	r2, #0
 800ebca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ebcc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ebce:	782a      	ldrb	r2, [r5, #0]
 800ebd0:	2a30      	cmp	r2, #48	@ 0x30
 800ebd2:	f040 80b3 	bne.w	800ed3c <_strtod_l+0x1a4>
 800ebd6:	786a      	ldrb	r2, [r5, #1]
 800ebd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ebdc:	2a58      	cmp	r2, #88	@ 0x58
 800ebde:	d16e      	bne.n	800ecbe <_strtod_l+0x126>
 800ebe0:	9302      	str	r3, [sp, #8]
 800ebe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebe4:	9301      	str	r3, [sp, #4]
 800ebe6:	ab1a      	add	r3, sp, #104	@ 0x68
 800ebe8:	9300      	str	r3, [sp, #0]
 800ebea:	4a8e      	ldr	r2, [pc, #568]	@ (800ee24 <_strtod_l+0x28c>)
 800ebec:	9805      	ldr	r0, [sp, #20]
 800ebee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ebf0:	a919      	add	r1, sp, #100	@ 0x64
 800ebf2:	f001 fcb7 	bl	8010564 <__gethex>
 800ebf6:	f010 060f 	ands.w	r6, r0, #15
 800ebfa:	4604      	mov	r4, r0
 800ebfc:	d005      	beq.n	800ec0a <_strtod_l+0x72>
 800ebfe:	2e06      	cmp	r6, #6
 800ec00:	d128      	bne.n	800ec54 <_strtod_l+0xbc>
 800ec02:	3501      	adds	r5, #1
 800ec04:	2300      	movs	r3, #0
 800ec06:	9519      	str	r5, [sp, #100]	@ 0x64
 800ec08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	f040 858e 	bne.w	800f72e <_strtod_l+0xb96>
 800ec12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec14:	b1cb      	cbz	r3, 800ec4a <_strtod_l+0xb2>
 800ec16:	4652      	mov	r2, sl
 800ec18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ec1c:	ec43 2b10 	vmov	d0, r2, r3
 800ec20:	b01f      	add	sp, #124	@ 0x7c
 800ec22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec26:	2920      	cmp	r1, #32
 800ec28:	d1ce      	bne.n	800ebc8 <_strtod_l+0x30>
 800ec2a:	3201      	adds	r2, #1
 800ec2c:	e7c1      	b.n	800ebb2 <_strtod_l+0x1a>
 800ec2e:	292d      	cmp	r1, #45	@ 0x2d
 800ec30:	d1ca      	bne.n	800ebc8 <_strtod_l+0x30>
 800ec32:	2101      	movs	r1, #1
 800ec34:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ec36:	1c51      	adds	r1, r2, #1
 800ec38:	9119      	str	r1, [sp, #100]	@ 0x64
 800ec3a:	7852      	ldrb	r2, [r2, #1]
 800ec3c:	2a00      	cmp	r2, #0
 800ec3e:	d1c5      	bne.n	800ebcc <_strtod_l+0x34>
 800ec40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec42:	9419      	str	r4, [sp, #100]	@ 0x64
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f040 8570 	bne.w	800f72a <_strtod_l+0xb92>
 800ec4a:	4652      	mov	r2, sl
 800ec4c:	465b      	mov	r3, fp
 800ec4e:	e7e5      	b.n	800ec1c <_strtod_l+0x84>
 800ec50:	2100      	movs	r1, #0
 800ec52:	e7ef      	b.n	800ec34 <_strtod_l+0x9c>
 800ec54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ec56:	b13a      	cbz	r2, 800ec68 <_strtod_l+0xd0>
 800ec58:	2135      	movs	r1, #53	@ 0x35
 800ec5a:	a81c      	add	r0, sp, #112	@ 0x70
 800ec5c:	f7ff ff3a 	bl	800ead4 <__copybits>
 800ec60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ec62:	9805      	ldr	r0, [sp, #20]
 800ec64:	f7ff fb08 	bl	800e278 <_Bfree>
 800ec68:	3e01      	subs	r6, #1
 800ec6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ec6c:	2e04      	cmp	r6, #4
 800ec6e:	d806      	bhi.n	800ec7e <_strtod_l+0xe6>
 800ec70:	e8df f006 	tbb	[pc, r6]
 800ec74:	201d0314 	.word	0x201d0314
 800ec78:	14          	.byte	0x14
 800ec79:	00          	.byte	0x00
 800ec7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ec7e:	05e1      	lsls	r1, r4, #23
 800ec80:	bf48      	it	mi
 800ec82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ec86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec8a:	0d1b      	lsrs	r3, r3, #20
 800ec8c:	051b      	lsls	r3, r3, #20
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d1bb      	bne.n	800ec0a <_strtod_l+0x72>
 800ec92:	f7fe fb2f 	bl	800d2f4 <__errno>
 800ec96:	2322      	movs	r3, #34	@ 0x22
 800ec98:	6003      	str	r3, [r0, #0]
 800ec9a:	e7b6      	b.n	800ec0a <_strtod_l+0x72>
 800ec9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800eca0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800eca4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800eca8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ecac:	e7e7      	b.n	800ec7e <_strtod_l+0xe6>
 800ecae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ee2c <_strtod_l+0x294>
 800ecb2:	e7e4      	b.n	800ec7e <_strtod_l+0xe6>
 800ecb4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ecb8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ecbc:	e7df      	b.n	800ec7e <_strtod_l+0xe6>
 800ecbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecc0:	1c5a      	adds	r2, r3, #1
 800ecc2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ecc4:	785b      	ldrb	r3, [r3, #1]
 800ecc6:	2b30      	cmp	r3, #48	@ 0x30
 800ecc8:	d0f9      	beq.n	800ecbe <_strtod_l+0x126>
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d09d      	beq.n	800ec0a <_strtod_l+0x72>
 800ecce:	2301      	movs	r3, #1
 800ecd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecd4:	930c      	str	r3, [sp, #48]	@ 0x30
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	9308      	str	r3, [sp, #32]
 800ecda:	930a      	str	r3, [sp, #40]	@ 0x28
 800ecdc:	461f      	mov	r7, r3
 800ecde:	220a      	movs	r2, #10
 800ece0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ece2:	7805      	ldrb	r5, [r0, #0]
 800ece4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ece8:	b2d9      	uxtb	r1, r3
 800ecea:	2909      	cmp	r1, #9
 800ecec:	d928      	bls.n	800ed40 <_strtod_l+0x1a8>
 800ecee:	494e      	ldr	r1, [pc, #312]	@ (800ee28 <_strtod_l+0x290>)
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	f001 fb62 	bl	80103ba <strncmp>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	d032      	beq.n	800ed60 <_strtod_l+0x1c8>
 800ecfa:	2000      	movs	r0, #0
 800ecfc:	462a      	mov	r2, r5
 800ecfe:	4681      	mov	r9, r0
 800ed00:	463d      	mov	r5, r7
 800ed02:	4603      	mov	r3, r0
 800ed04:	2a65      	cmp	r2, #101	@ 0x65
 800ed06:	d001      	beq.n	800ed0c <_strtod_l+0x174>
 800ed08:	2a45      	cmp	r2, #69	@ 0x45
 800ed0a:	d114      	bne.n	800ed36 <_strtod_l+0x19e>
 800ed0c:	b91d      	cbnz	r5, 800ed16 <_strtod_l+0x17e>
 800ed0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed10:	4302      	orrs	r2, r0
 800ed12:	d095      	beq.n	800ec40 <_strtod_l+0xa8>
 800ed14:	2500      	movs	r5, #0
 800ed16:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ed18:	1c62      	adds	r2, r4, #1
 800ed1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed1c:	7862      	ldrb	r2, [r4, #1]
 800ed1e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ed20:	d077      	beq.n	800ee12 <_strtod_l+0x27a>
 800ed22:	2a2d      	cmp	r2, #45	@ 0x2d
 800ed24:	d07b      	beq.n	800ee1e <_strtod_l+0x286>
 800ed26:	f04f 0c00 	mov.w	ip, #0
 800ed2a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ed2e:	2909      	cmp	r1, #9
 800ed30:	f240 8082 	bls.w	800ee38 <_strtod_l+0x2a0>
 800ed34:	9419      	str	r4, [sp, #100]	@ 0x64
 800ed36:	f04f 0800 	mov.w	r8, #0
 800ed3a:	e0a2      	b.n	800ee82 <_strtod_l+0x2ea>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	e7c7      	b.n	800ecd0 <_strtod_l+0x138>
 800ed40:	2f08      	cmp	r7, #8
 800ed42:	bfd5      	itete	le
 800ed44:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ed46:	9908      	ldrgt	r1, [sp, #32]
 800ed48:	fb02 3301 	mlale	r3, r2, r1, r3
 800ed4c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ed50:	f100 0001 	add.w	r0, r0, #1
 800ed54:	bfd4      	ite	le
 800ed56:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ed58:	9308      	strgt	r3, [sp, #32]
 800ed5a:	3701      	adds	r7, #1
 800ed5c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ed5e:	e7bf      	b.n	800ece0 <_strtod_l+0x148>
 800ed60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed62:	1c5a      	adds	r2, r3, #1
 800ed64:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed66:	785a      	ldrb	r2, [r3, #1]
 800ed68:	b37f      	cbz	r7, 800edca <_strtod_l+0x232>
 800ed6a:	4681      	mov	r9, r0
 800ed6c:	463d      	mov	r5, r7
 800ed6e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ed72:	2b09      	cmp	r3, #9
 800ed74:	d912      	bls.n	800ed9c <_strtod_l+0x204>
 800ed76:	2301      	movs	r3, #1
 800ed78:	e7c4      	b.n	800ed04 <_strtod_l+0x16c>
 800ed7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed7c:	1c5a      	adds	r2, r3, #1
 800ed7e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed80:	785a      	ldrb	r2, [r3, #1]
 800ed82:	3001      	adds	r0, #1
 800ed84:	2a30      	cmp	r2, #48	@ 0x30
 800ed86:	d0f8      	beq.n	800ed7a <_strtod_l+0x1e2>
 800ed88:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ed8c:	2b08      	cmp	r3, #8
 800ed8e:	f200 84d3 	bhi.w	800f738 <_strtod_l+0xba0>
 800ed92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed94:	930c      	str	r3, [sp, #48]	@ 0x30
 800ed96:	4681      	mov	r9, r0
 800ed98:	2000      	movs	r0, #0
 800ed9a:	4605      	mov	r5, r0
 800ed9c:	3a30      	subs	r2, #48	@ 0x30
 800ed9e:	f100 0301 	add.w	r3, r0, #1
 800eda2:	d02a      	beq.n	800edfa <_strtod_l+0x262>
 800eda4:	4499      	add	r9, r3
 800eda6:	eb00 0c05 	add.w	ip, r0, r5
 800edaa:	462b      	mov	r3, r5
 800edac:	210a      	movs	r1, #10
 800edae:	4563      	cmp	r3, ip
 800edb0:	d10d      	bne.n	800edce <_strtod_l+0x236>
 800edb2:	1c69      	adds	r1, r5, #1
 800edb4:	4401      	add	r1, r0
 800edb6:	4428      	add	r0, r5
 800edb8:	2808      	cmp	r0, #8
 800edba:	dc16      	bgt.n	800edea <_strtod_l+0x252>
 800edbc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800edbe:	230a      	movs	r3, #10
 800edc0:	fb03 2300 	mla	r3, r3, r0, r2
 800edc4:	930a      	str	r3, [sp, #40]	@ 0x28
 800edc6:	2300      	movs	r3, #0
 800edc8:	e018      	b.n	800edfc <_strtod_l+0x264>
 800edca:	4638      	mov	r0, r7
 800edcc:	e7da      	b.n	800ed84 <_strtod_l+0x1ec>
 800edce:	2b08      	cmp	r3, #8
 800edd0:	f103 0301 	add.w	r3, r3, #1
 800edd4:	dc03      	bgt.n	800edde <_strtod_l+0x246>
 800edd6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800edd8:	434e      	muls	r6, r1
 800edda:	960a      	str	r6, [sp, #40]	@ 0x28
 800eddc:	e7e7      	b.n	800edae <_strtod_l+0x216>
 800edde:	2b10      	cmp	r3, #16
 800ede0:	bfde      	ittt	le
 800ede2:	9e08      	ldrle	r6, [sp, #32]
 800ede4:	434e      	mulle	r6, r1
 800ede6:	9608      	strle	r6, [sp, #32]
 800ede8:	e7e1      	b.n	800edae <_strtod_l+0x216>
 800edea:	280f      	cmp	r0, #15
 800edec:	dceb      	bgt.n	800edc6 <_strtod_l+0x22e>
 800edee:	9808      	ldr	r0, [sp, #32]
 800edf0:	230a      	movs	r3, #10
 800edf2:	fb03 2300 	mla	r3, r3, r0, r2
 800edf6:	9308      	str	r3, [sp, #32]
 800edf8:	e7e5      	b.n	800edc6 <_strtod_l+0x22e>
 800edfa:	4629      	mov	r1, r5
 800edfc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800edfe:	1c50      	adds	r0, r2, #1
 800ee00:	9019      	str	r0, [sp, #100]	@ 0x64
 800ee02:	7852      	ldrb	r2, [r2, #1]
 800ee04:	4618      	mov	r0, r3
 800ee06:	460d      	mov	r5, r1
 800ee08:	e7b1      	b.n	800ed6e <_strtod_l+0x1d6>
 800ee0a:	f04f 0900 	mov.w	r9, #0
 800ee0e:	2301      	movs	r3, #1
 800ee10:	e77d      	b.n	800ed0e <_strtod_l+0x176>
 800ee12:	f04f 0c00 	mov.w	ip, #0
 800ee16:	1ca2      	adds	r2, r4, #2
 800ee18:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee1a:	78a2      	ldrb	r2, [r4, #2]
 800ee1c:	e785      	b.n	800ed2a <_strtod_l+0x192>
 800ee1e:	f04f 0c01 	mov.w	ip, #1
 800ee22:	e7f8      	b.n	800ee16 <_strtod_l+0x27e>
 800ee24:	08011678 	.word	0x08011678
 800ee28:	08011660 	.word	0x08011660
 800ee2c:	7ff00000 	.word	0x7ff00000
 800ee30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee32:	1c51      	adds	r1, r2, #1
 800ee34:	9119      	str	r1, [sp, #100]	@ 0x64
 800ee36:	7852      	ldrb	r2, [r2, #1]
 800ee38:	2a30      	cmp	r2, #48	@ 0x30
 800ee3a:	d0f9      	beq.n	800ee30 <_strtod_l+0x298>
 800ee3c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ee40:	2908      	cmp	r1, #8
 800ee42:	f63f af78 	bhi.w	800ed36 <_strtod_l+0x19e>
 800ee46:	3a30      	subs	r2, #48	@ 0x30
 800ee48:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ee4e:	f04f 080a 	mov.w	r8, #10
 800ee52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee54:	1c56      	adds	r6, r2, #1
 800ee56:	9619      	str	r6, [sp, #100]	@ 0x64
 800ee58:	7852      	ldrb	r2, [r2, #1]
 800ee5a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ee5e:	f1be 0f09 	cmp.w	lr, #9
 800ee62:	d939      	bls.n	800eed8 <_strtod_l+0x340>
 800ee64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ee66:	1a76      	subs	r6, r6, r1
 800ee68:	2e08      	cmp	r6, #8
 800ee6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ee6e:	dc03      	bgt.n	800ee78 <_strtod_l+0x2e0>
 800ee70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ee72:	4588      	cmp	r8, r1
 800ee74:	bfa8      	it	ge
 800ee76:	4688      	movge	r8, r1
 800ee78:	f1bc 0f00 	cmp.w	ip, #0
 800ee7c:	d001      	beq.n	800ee82 <_strtod_l+0x2ea>
 800ee7e:	f1c8 0800 	rsb	r8, r8, #0
 800ee82:	2d00      	cmp	r5, #0
 800ee84:	d14e      	bne.n	800ef24 <_strtod_l+0x38c>
 800ee86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ee88:	4308      	orrs	r0, r1
 800ee8a:	f47f aebe 	bne.w	800ec0a <_strtod_l+0x72>
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	f47f aed6 	bne.w	800ec40 <_strtod_l+0xa8>
 800ee94:	2a69      	cmp	r2, #105	@ 0x69
 800ee96:	d028      	beq.n	800eeea <_strtod_l+0x352>
 800ee98:	dc25      	bgt.n	800eee6 <_strtod_l+0x34e>
 800ee9a:	2a49      	cmp	r2, #73	@ 0x49
 800ee9c:	d025      	beq.n	800eeea <_strtod_l+0x352>
 800ee9e:	2a4e      	cmp	r2, #78	@ 0x4e
 800eea0:	f47f aece 	bne.w	800ec40 <_strtod_l+0xa8>
 800eea4:	499b      	ldr	r1, [pc, #620]	@ (800f114 <_strtod_l+0x57c>)
 800eea6:	a819      	add	r0, sp, #100	@ 0x64
 800eea8:	f001 fd7e 	bl	80109a8 <__match>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	f43f aec7 	beq.w	800ec40 <_strtod_l+0xa8>
 800eeb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	2b28      	cmp	r3, #40	@ 0x28
 800eeb8:	d12e      	bne.n	800ef18 <_strtod_l+0x380>
 800eeba:	4997      	ldr	r1, [pc, #604]	@ (800f118 <_strtod_l+0x580>)
 800eebc:	aa1c      	add	r2, sp, #112	@ 0x70
 800eebe:	a819      	add	r0, sp, #100	@ 0x64
 800eec0:	f001 fd86 	bl	80109d0 <__hexnan>
 800eec4:	2805      	cmp	r0, #5
 800eec6:	d127      	bne.n	800ef18 <_strtod_l+0x380>
 800eec8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eeca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800eece:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800eed2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800eed6:	e698      	b.n	800ec0a <_strtod_l+0x72>
 800eed8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eeda:	fb08 2101 	mla	r1, r8, r1, r2
 800eede:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800eee2:	920e      	str	r2, [sp, #56]	@ 0x38
 800eee4:	e7b5      	b.n	800ee52 <_strtod_l+0x2ba>
 800eee6:	2a6e      	cmp	r2, #110	@ 0x6e
 800eee8:	e7da      	b.n	800eea0 <_strtod_l+0x308>
 800eeea:	498c      	ldr	r1, [pc, #560]	@ (800f11c <_strtod_l+0x584>)
 800eeec:	a819      	add	r0, sp, #100	@ 0x64
 800eeee:	f001 fd5b 	bl	80109a8 <__match>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	f43f aea4 	beq.w	800ec40 <_strtod_l+0xa8>
 800eef8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eefa:	4989      	ldr	r1, [pc, #548]	@ (800f120 <_strtod_l+0x588>)
 800eefc:	3b01      	subs	r3, #1
 800eefe:	a819      	add	r0, sp, #100	@ 0x64
 800ef00:	9319      	str	r3, [sp, #100]	@ 0x64
 800ef02:	f001 fd51 	bl	80109a8 <__match>
 800ef06:	b910      	cbnz	r0, 800ef0e <_strtod_l+0x376>
 800ef08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ef0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f130 <_strtod_l+0x598>
 800ef12:	f04f 0a00 	mov.w	sl, #0
 800ef16:	e678      	b.n	800ec0a <_strtod_l+0x72>
 800ef18:	4882      	ldr	r0, [pc, #520]	@ (800f124 <_strtod_l+0x58c>)
 800ef1a:	f001 fa81 	bl	8010420 <nan>
 800ef1e:	ec5b ab10 	vmov	sl, fp, d0
 800ef22:	e672      	b.n	800ec0a <_strtod_l+0x72>
 800ef24:	eba8 0309 	sub.w	r3, r8, r9
 800ef28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ef2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef2c:	2f00      	cmp	r7, #0
 800ef2e:	bf08      	it	eq
 800ef30:	462f      	moveq	r7, r5
 800ef32:	2d10      	cmp	r5, #16
 800ef34:	462c      	mov	r4, r5
 800ef36:	bfa8      	it	ge
 800ef38:	2410      	movge	r4, #16
 800ef3a:	f7f1 fae3 	bl	8000504 <__aeabi_ui2d>
 800ef3e:	2d09      	cmp	r5, #9
 800ef40:	4682      	mov	sl, r0
 800ef42:	468b      	mov	fp, r1
 800ef44:	dc13      	bgt.n	800ef6e <_strtod_l+0x3d6>
 800ef46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	f43f ae5e 	beq.w	800ec0a <_strtod_l+0x72>
 800ef4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef50:	dd78      	ble.n	800f044 <_strtod_l+0x4ac>
 800ef52:	2b16      	cmp	r3, #22
 800ef54:	dc5f      	bgt.n	800f016 <_strtod_l+0x47e>
 800ef56:	4974      	ldr	r1, [pc, #464]	@ (800f128 <_strtod_l+0x590>)
 800ef58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ef5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef60:	4652      	mov	r2, sl
 800ef62:	465b      	mov	r3, fp
 800ef64:	f7f1 fb48 	bl	80005f8 <__aeabi_dmul>
 800ef68:	4682      	mov	sl, r0
 800ef6a:	468b      	mov	fp, r1
 800ef6c:	e64d      	b.n	800ec0a <_strtod_l+0x72>
 800ef6e:	4b6e      	ldr	r3, [pc, #440]	@ (800f128 <_strtod_l+0x590>)
 800ef70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ef78:	f7f1 fb3e 	bl	80005f8 <__aeabi_dmul>
 800ef7c:	4682      	mov	sl, r0
 800ef7e:	9808      	ldr	r0, [sp, #32]
 800ef80:	468b      	mov	fp, r1
 800ef82:	f7f1 fabf 	bl	8000504 <__aeabi_ui2d>
 800ef86:	4602      	mov	r2, r0
 800ef88:	460b      	mov	r3, r1
 800ef8a:	4650      	mov	r0, sl
 800ef8c:	4659      	mov	r1, fp
 800ef8e:	f7f1 f97d 	bl	800028c <__adddf3>
 800ef92:	2d0f      	cmp	r5, #15
 800ef94:	4682      	mov	sl, r0
 800ef96:	468b      	mov	fp, r1
 800ef98:	ddd5      	ble.n	800ef46 <_strtod_l+0x3ae>
 800ef9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef9c:	1b2c      	subs	r4, r5, r4
 800ef9e:	441c      	add	r4, r3
 800efa0:	2c00      	cmp	r4, #0
 800efa2:	f340 8096 	ble.w	800f0d2 <_strtod_l+0x53a>
 800efa6:	f014 030f 	ands.w	r3, r4, #15
 800efaa:	d00a      	beq.n	800efc2 <_strtod_l+0x42a>
 800efac:	495e      	ldr	r1, [pc, #376]	@ (800f128 <_strtod_l+0x590>)
 800efae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800efb2:	4652      	mov	r2, sl
 800efb4:	465b      	mov	r3, fp
 800efb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efba:	f7f1 fb1d 	bl	80005f8 <__aeabi_dmul>
 800efbe:	4682      	mov	sl, r0
 800efc0:	468b      	mov	fp, r1
 800efc2:	f034 040f 	bics.w	r4, r4, #15
 800efc6:	d073      	beq.n	800f0b0 <_strtod_l+0x518>
 800efc8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800efcc:	dd48      	ble.n	800f060 <_strtod_l+0x4c8>
 800efce:	2400      	movs	r4, #0
 800efd0:	46a0      	mov	r8, r4
 800efd2:	940a      	str	r4, [sp, #40]	@ 0x28
 800efd4:	46a1      	mov	r9, r4
 800efd6:	9a05      	ldr	r2, [sp, #20]
 800efd8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f130 <_strtod_l+0x598>
 800efdc:	2322      	movs	r3, #34	@ 0x22
 800efde:	6013      	str	r3, [r2, #0]
 800efe0:	f04f 0a00 	mov.w	sl, #0
 800efe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	f43f ae0f 	beq.w	800ec0a <_strtod_l+0x72>
 800efec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800efee:	9805      	ldr	r0, [sp, #20]
 800eff0:	f7ff f942 	bl	800e278 <_Bfree>
 800eff4:	9805      	ldr	r0, [sp, #20]
 800eff6:	4649      	mov	r1, r9
 800eff8:	f7ff f93e 	bl	800e278 <_Bfree>
 800effc:	9805      	ldr	r0, [sp, #20]
 800effe:	4641      	mov	r1, r8
 800f000:	f7ff f93a 	bl	800e278 <_Bfree>
 800f004:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f006:	9805      	ldr	r0, [sp, #20]
 800f008:	f7ff f936 	bl	800e278 <_Bfree>
 800f00c:	9805      	ldr	r0, [sp, #20]
 800f00e:	4621      	mov	r1, r4
 800f010:	f7ff f932 	bl	800e278 <_Bfree>
 800f014:	e5f9      	b.n	800ec0a <_strtod_l+0x72>
 800f016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f018:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f01c:	4293      	cmp	r3, r2
 800f01e:	dbbc      	blt.n	800ef9a <_strtod_l+0x402>
 800f020:	4c41      	ldr	r4, [pc, #260]	@ (800f128 <_strtod_l+0x590>)
 800f022:	f1c5 050f 	rsb	r5, r5, #15
 800f026:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f02a:	4652      	mov	r2, sl
 800f02c:	465b      	mov	r3, fp
 800f02e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f032:	f7f1 fae1 	bl	80005f8 <__aeabi_dmul>
 800f036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f038:	1b5d      	subs	r5, r3, r5
 800f03a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f03e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f042:	e78f      	b.n	800ef64 <_strtod_l+0x3cc>
 800f044:	3316      	adds	r3, #22
 800f046:	dba8      	blt.n	800ef9a <_strtod_l+0x402>
 800f048:	4b37      	ldr	r3, [pc, #220]	@ (800f128 <_strtod_l+0x590>)
 800f04a:	eba9 0808 	sub.w	r8, r9, r8
 800f04e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f052:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f056:	4650      	mov	r0, sl
 800f058:	4659      	mov	r1, fp
 800f05a:	f7f1 fbf7 	bl	800084c <__aeabi_ddiv>
 800f05e:	e783      	b.n	800ef68 <_strtod_l+0x3d0>
 800f060:	4b32      	ldr	r3, [pc, #200]	@ (800f12c <_strtod_l+0x594>)
 800f062:	9308      	str	r3, [sp, #32]
 800f064:	2300      	movs	r3, #0
 800f066:	1124      	asrs	r4, r4, #4
 800f068:	4650      	mov	r0, sl
 800f06a:	4659      	mov	r1, fp
 800f06c:	461e      	mov	r6, r3
 800f06e:	2c01      	cmp	r4, #1
 800f070:	dc21      	bgt.n	800f0b6 <_strtod_l+0x51e>
 800f072:	b10b      	cbz	r3, 800f078 <_strtod_l+0x4e0>
 800f074:	4682      	mov	sl, r0
 800f076:	468b      	mov	fp, r1
 800f078:	492c      	ldr	r1, [pc, #176]	@ (800f12c <_strtod_l+0x594>)
 800f07a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f07e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f082:	4652      	mov	r2, sl
 800f084:	465b      	mov	r3, fp
 800f086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f08a:	f7f1 fab5 	bl	80005f8 <__aeabi_dmul>
 800f08e:	4b28      	ldr	r3, [pc, #160]	@ (800f130 <_strtod_l+0x598>)
 800f090:	460a      	mov	r2, r1
 800f092:	400b      	ands	r3, r1
 800f094:	4927      	ldr	r1, [pc, #156]	@ (800f134 <_strtod_l+0x59c>)
 800f096:	428b      	cmp	r3, r1
 800f098:	4682      	mov	sl, r0
 800f09a:	d898      	bhi.n	800efce <_strtod_l+0x436>
 800f09c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f0a0:	428b      	cmp	r3, r1
 800f0a2:	bf86      	itte	hi
 800f0a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f138 <_strtod_l+0x5a0>
 800f0a8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800f0ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	9308      	str	r3, [sp, #32]
 800f0b4:	e07a      	b.n	800f1ac <_strtod_l+0x614>
 800f0b6:	07e2      	lsls	r2, r4, #31
 800f0b8:	d505      	bpl.n	800f0c6 <_strtod_l+0x52e>
 800f0ba:	9b08      	ldr	r3, [sp, #32]
 800f0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c0:	f7f1 fa9a 	bl	80005f8 <__aeabi_dmul>
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	9a08      	ldr	r2, [sp, #32]
 800f0c8:	3208      	adds	r2, #8
 800f0ca:	3601      	adds	r6, #1
 800f0cc:	1064      	asrs	r4, r4, #1
 800f0ce:	9208      	str	r2, [sp, #32]
 800f0d0:	e7cd      	b.n	800f06e <_strtod_l+0x4d6>
 800f0d2:	d0ed      	beq.n	800f0b0 <_strtod_l+0x518>
 800f0d4:	4264      	negs	r4, r4
 800f0d6:	f014 020f 	ands.w	r2, r4, #15
 800f0da:	d00a      	beq.n	800f0f2 <_strtod_l+0x55a>
 800f0dc:	4b12      	ldr	r3, [pc, #72]	@ (800f128 <_strtod_l+0x590>)
 800f0de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0e2:	4650      	mov	r0, sl
 800f0e4:	4659      	mov	r1, fp
 800f0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ea:	f7f1 fbaf 	bl	800084c <__aeabi_ddiv>
 800f0ee:	4682      	mov	sl, r0
 800f0f0:	468b      	mov	fp, r1
 800f0f2:	1124      	asrs	r4, r4, #4
 800f0f4:	d0dc      	beq.n	800f0b0 <_strtod_l+0x518>
 800f0f6:	2c1f      	cmp	r4, #31
 800f0f8:	dd20      	ble.n	800f13c <_strtod_l+0x5a4>
 800f0fa:	2400      	movs	r4, #0
 800f0fc:	46a0      	mov	r8, r4
 800f0fe:	940a      	str	r4, [sp, #40]	@ 0x28
 800f100:	46a1      	mov	r9, r4
 800f102:	9a05      	ldr	r2, [sp, #20]
 800f104:	2322      	movs	r3, #34	@ 0x22
 800f106:	f04f 0a00 	mov.w	sl, #0
 800f10a:	f04f 0b00 	mov.w	fp, #0
 800f10e:	6013      	str	r3, [r2, #0]
 800f110:	e768      	b.n	800efe4 <_strtod_l+0x44c>
 800f112:	bf00      	nop
 800f114:	08011451 	.word	0x08011451
 800f118:	08011664 	.word	0x08011664
 800f11c:	08011449 	.word	0x08011449
 800f120:	0801147e 	.word	0x0801147e
 800f124:	08011828 	.word	0x08011828
 800f128:	08011598 	.word	0x08011598
 800f12c:	08011570 	.word	0x08011570
 800f130:	7ff00000 	.word	0x7ff00000
 800f134:	7ca00000 	.word	0x7ca00000
 800f138:	7fefffff 	.word	0x7fefffff
 800f13c:	f014 0310 	ands.w	r3, r4, #16
 800f140:	bf18      	it	ne
 800f142:	236a      	movne	r3, #106	@ 0x6a
 800f144:	4ea9      	ldr	r6, [pc, #676]	@ (800f3ec <_strtod_l+0x854>)
 800f146:	9308      	str	r3, [sp, #32]
 800f148:	4650      	mov	r0, sl
 800f14a:	4659      	mov	r1, fp
 800f14c:	2300      	movs	r3, #0
 800f14e:	07e2      	lsls	r2, r4, #31
 800f150:	d504      	bpl.n	800f15c <_strtod_l+0x5c4>
 800f152:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f156:	f7f1 fa4f 	bl	80005f8 <__aeabi_dmul>
 800f15a:	2301      	movs	r3, #1
 800f15c:	1064      	asrs	r4, r4, #1
 800f15e:	f106 0608 	add.w	r6, r6, #8
 800f162:	d1f4      	bne.n	800f14e <_strtod_l+0x5b6>
 800f164:	b10b      	cbz	r3, 800f16a <_strtod_l+0x5d2>
 800f166:	4682      	mov	sl, r0
 800f168:	468b      	mov	fp, r1
 800f16a:	9b08      	ldr	r3, [sp, #32]
 800f16c:	b1b3      	cbz	r3, 800f19c <_strtod_l+0x604>
 800f16e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f172:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f176:	2b00      	cmp	r3, #0
 800f178:	4659      	mov	r1, fp
 800f17a:	dd0f      	ble.n	800f19c <_strtod_l+0x604>
 800f17c:	2b1f      	cmp	r3, #31
 800f17e:	dd55      	ble.n	800f22c <_strtod_l+0x694>
 800f180:	2b34      	cmp	r3, #52	@ 0x34
 800f182:	bfde      	ittt	le
 800f184:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800f188:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f18c:	4093      	lslle	r3, r2
 800f18e:	f04f 0a00 	mov.w	sl, #0
 800f192:	bfcc      	ite	gt
 800f194:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f198:	ea03 0b01 	andle.w	fp, r3, r1
 800f19c:	2200      	movs	r2, #0
 800f19e:	2300      	movs	r3, #0
 800f1a0:	4650      	mov	r0, sl
 800f1a2:	4659      	mov	r1, fp
 800f1a4:	f7f1 fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d1a6      	bne.n	800f0fa <_strtod_l+0x562>
 800f1ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1ae:	9300      	str	r3, [sp, #0]
 800f1b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f1b2:	9805      	ldr	r0, [sp, #20]
 800f1b4:	462b      	mov	r3, r5
 800f1b6:	463a      	mov	r2, r7
 800f1b8:	f7ff f8c6 	bl	800e348 <__s2b>
 800f1bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800f1be:	2800      	cmp	r0, #0
 800f1c0:	f43f af05 	beq.w	800efce <_strtod_l+0x436>
 800f1c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1c6:	2a00      	cmp	r2, #0
 800f1c8:	eba9 0308 	sub.w	r3, r9, r8
 800f1cc:	bfa8      	it	ge
 800f1ce:	2300      	movge	r3, #0
 800f1d0:	9312      	str	r3, [sp, #72]	@ 0x48
 800f1d2:	2400      	movs	r4, #0
 800f1d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f1d8:	9316      	str	r3, [sp, #88]	@ 0x58
 800f1da:	46a0      	mov	r8, r4
 800f1dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1de:	9805      	ldr	r0, [sp, #20]
 800f1e0:	6859      	ldr	r1, [r3, #4]
 800f1e2:	f7ff f809 	bl	800e1f8 <_Balloc>
 800f1e6:	4681      	mov	r9, r0
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	f43f aef4 	beq.w	800efd6 <_strtod_l+0x43e>
 800f1ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1f0:	691a      	ldr	r2, [r3, #16]
 800f1f2:	3202      	adds	r2, #2
 800f1f4:	f103 010c 	add.w	r1, r3, #12
 800f1f8:	0092      	lsls	r2, r2, #2
 800f1fa:	300c      	adds	r0, #12
 800f1fc:	f001 f900 	bl	8010400 <memcpy>
 800f200:	ec4b ab10 	vmov	d0, sl, fp
 800f204:	9805      	ldr	r0, [sp, #20]
 800f206:	aa1c      	add	r2, sp, #112	@ 0x70
 800f208:	a91b      	add	r1, sp, #108	@ 0x6c
 800f20a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f20e:	f7ff fbd7 	bl	800e9c0 <__d2b>
 800f212:	901a      	str	r0, [sp, #104]	@ 0x68
 800f214:	2800      	cmp	r0, #0
 800f216:	f43f aede 	beq.w	800efd6 <_strtod_l+0x43e>
 800f21a:	9805      	ldr	r0, [sp, #20]
 800f21c:	2101      	movs	r1, #1
 800f21e:	f7ff f929 	bl	800e474 <__i2b>
 800f222:	4680      	mov	r8, r0
 800f224:	b948      	cbnz	r0, 800f23a <_strtod_l+0x6a2>
 800f226:	f04f 0800 	mov.w	r8, #0
 800f22a:	e6d4      	b.n	800efd6 <_strtod_l+0x43e>
 800f22c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f230:	fa02 f303 	lsl.w	r3, r2, r3
 800f234:	ea03 0a0a 	and.w	sl, r3, sl
 800f238:	e7b0      	b.n	800f19c <_strtod_l+0x604>
 800f23a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f23c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f23e:	2d00      	cmp	r5, #0
 800f240:	bfab      	itete	ge
 800f242:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f244:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f246:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f248:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f24a:	bfac      	ite	ge
 800f24c:	18ef      	addge	r7, r5, r3
 800f24e:	1b5e      	sublt	r6, r3, r5
 800f250:	9b08      	ldr	r3, [sp, #32]
 800f252:	1aed      	subs	r5, r5, r3
 800f254:	4415      	add	r5, r2
 800f256:	4b66      	ldr	r3, [pc, #408]	@ (800f3f0 <_strtod_l+0x858>)
 800f258:	3d01      	subs	r5, #1
 800f25a:	429d      	cmp	r5, r3
 800f25c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f260:	da50      	bge.n	800f304 <_strtod_l+0x76c>
 800f262:	1b5b      	subs	r3, r3, r5
 800f264:	2b1f      	cmp	r3, #31
 800f266:	eba2 0203 	sub.w	r2, r2, r3
 800f26a:	f04f 0101 	mov.w	r1, #1
 800f26e:	dc3d      	bgt.n	800f2ec <_strtod_l+0x754>
 800f270:	fa01 f303 	lsl.w	r3, r1, r3
 800f274:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f276:	2300      	movs	r3, #0
 800f278:	9310      	str	r3, [sp, #64]	@ 0x40
 800f27a:	18bd      	adds	r5, r7, r2
 800f27c:	9b08      	ldr	r3, [sp, #32]
 800f27e:	42af      	cmp	r7, r5
 800f280:	4416      	add	r6, r2
 800f282:	441e      	add	r6, r3
 800f284:	463b      	mov	r3, r7
 800f286:	bfa8      	it	ge
 800f288:	462b      	movge	r3, r5
 800f28a:	42b3      	cmp	r3, r6
 800f28c:	bfa8      	it	ge
 800f28e:	4633      	movge	r3, r6
 800f290:	2b00      	cmp	r3, #0
 800f292:	bfc2      	ittt	gt
 800f294:	1aed      	subgt	r5, r5, r3
 800f296:	1af6      	subgt	r6, r6, r3
 800f298:	1aff      	subgt	r7, r7, r3
 800f29a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	dd16      	ble.n	800f2ce <_strtod_l+0x736>
 800f2a0:	4641      	mov	r1, r8
 800f2a2:	9805      	ldr	r0, [sp, #20]
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	f7ff f9a5 	bl	800e5f4 <__pow5mult>
 800f2aa:	4680      	mov	r8, r0
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d0ba      	beq.n	800f226 <_strtod_l+0x68e>
 800f2b0:	4601      	mov	r1, r0
 800f2b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f2b4:	9805      	ldr	r0, [sp, #20]
 800f2b6:	f7ff f8f3 	bl	800e4a0 <__multiply>
 800f2ba:	900e      	str	r0, [sp, #56]	@ 0x38
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	f43f ae8a 	beq.w	800efd6 <_strtod_l+0x43e>
 800f2c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f2c4:	9805      	ldr	r0, [sp, #20]
 800f2c6:	f7fe ffd7 	bl	800e278 <_Bfree>
 800f2ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2ce:	2d00      	cmp	r5, #0
 800f2d0:	dc1d      	bgt.n	800f30e <_strtod_l+0x776>
 800f2d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	dd23      	ble.n	800f320 <_strtod_l+0x788>
 800f2d8:	4649      	mov	r1, r9
 800f2da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f2dc:	9805      	ldr	r0, [sp, #20]
 800f2de:	f7ff f989 	bl	800e5f4 <__pow5mult>
 800f2e2:	4681      	mov	r9, r0
 800f2e4:	b9e0      	cbnz	r0, 800f320 <_strtod_l+0x788>
 800f2e6:	f04f 0900 	mov.w	r9, #0
 800f2ea:	e674      	b.n	800efd6 <_strtod_l+0x43e>
 800f2ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f2f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f2f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f2f8:	35e2      	adds	r5, #226	@ 0xe2
 800f2fa:	fa01 f305 	lsl.w	r3, r1, r5
 800f2fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800f300:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f302:	e7ba      	b.n	800f27a <_strtod_l+0x6e2>
 800f304:	2300      	movs	r3, #0
 800f306:	9310      	str	r3, [sp, #64]	@ 0x40
 800f308:	2301      	movs	r3, #1
 800f30a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f30c:	e7b5      	b.n	800f27a <_strtod_l+0x6e2>
 800f30e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f310:	9805      	ldr	r0, [sp, #20]
 800f312:	462a      	mov	r2, r5
 800f314:	f7ff f9c8 	bl	800e6a8 <__lshift>
 800f318:	901a      	str	r0, [sp, #104]	@ 0x68
 800f31a:	2800      	cmp	r0, #0
 800f31c:	d1d9      	bne.n	800f2d2 <_strtod_l+0x73a>
 800f31e:	e65a      	b.n	800efd6 <_strtod_l+0x43e>
 800f320:	2e00      	cmp	r6, #0
 800f322:	dd07      	ble.n	800f334 <_strtod_l+0x79c>
 800f324:	4649      	mov	r1, r9
 800f326:	9805      	ldr	r0, [sp, #20]
 800f328:	4632      	mov	r2, r6
 800f32a:	f7ff f9bd 	bl	800e6a8 <__lshift>
 800f32e:	4681      	mov	r9, r0
 800f330:	2800      	cmp	r0, #0
 800f332:	d0d8      	beq.n	800f2e6 <_strtod_l+0x74e>
 800f334:	2f00      	cmp	r7, #0
 800f336:	dd08      	ble.n	800f34a <_strtod_l+0x7b2>
 800f338:	4641      	mov	r1, r8
 800f33a:	9805      	ldr	r0, [sp, #20]
 800f33c:	463a      	mov	r2, r7
 800f33e:	f7ff f9b3 	bl	800e6a8 <__lshift>
 800f342:	4680      	mov	r8, r0
 800f344:	2800      	cmp	r0, #0
 800f346:	f43f ae46 	beq.w	800efd6 <_strtod_l+0x43e>
 800f34a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f34c:	9805      	ldr	r0, [sp, #20]
 800f34e:	464a      	mov	r2, r9
 800f350:	f7ff fa32 	bl	800e7b8 <__mdiff>
 800f354:	4604      	mov	r4, r0
 800f356:	2800      	cmp	r0, #0
 800f358:	f43f ae3d 	beq.w	800efd6 <_strtod_l+0x43e>
 800f35c:	68c3      	ldr	r3, [r0, #12]
 800f35e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f360:	2300      	movs	r3, #0
 800f362:	60c3      	str	r3, [r0, #12]
 800f364:	4641      	mov	r1, r8
 800f366:	f7ff fa0b 	bl	800e780 <__mcmp>
 800f36a:	2800      	cmp	r0, #0
 800f36c:	da46      	bge.n	800f3fc <_strtod_l+0x864>
 800f36e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f370:	ea53 030a 	orrs.w	r3, r3, sl
 800f374:	d16c      	bne.n	800f450 <_strtod_l+0x8b8>
 800f376:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d168      	bne.n	800f450 <_strtod_l+0x8b8>
 800f37e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f382:	0d1b      	lsrs	r3, r3, #20
 800f384:	051b      	lsls	r3, r3, #20
 800f386:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f38a:	d961      	bls.n	800f450 <_strtod_l+0x8b8>
 800f38c:	6963      	ldr	r3, [r4, #20]
 800f38e:	b913      	cbnz	r3, 800f396 <_strtod_l+0x7fe>
 800f390:	6923      	ldr	r3, [r4, #16]
 800f392:	2b01      	cmp	r3, #1
 800f394:	dd5c      	ble.n	800f450 <_strtod_l+0x8b8>
 800f396:	4621      	mov	r1, r4
 800f398:	2201      	movs	r2, #1
 800f39a:	9805      	ldr	r0, [sp, #20]
 800f39c:	f7ff f984 	bl	800e6a8 <__lshift>
 800f3a0:	4641      	mov	r1, r8
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	f7ff f9ec 	bl	800e780 <__mcmp>
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	dd51      	ble.n	800f450 <_strtod_l+0x8b8>
 800f3ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f3b0:	9a08      	ldr	r2, [sp, #32]
 800f3b2:	0d1b      	lsrs	r3, r3, #20
 800f3b4:	051b      	lsls	r3, r3, #20
 800f3b6:	2a00      	cmp	r2, #0
 800f3b8:	d06b      	beq.n	800f492 <_strtod_l+0x8fa>
 800f3ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f3be:	d868      	bhi.n	800f492 <_strtod_l+0x8fa>
 800f3c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f3c4:	f67f ae9d 	bls.w	800f102 <_strtod_l+0x56a>
 800f3c8:	4b0a      	ldr	r3, [pc, #40]	@ (800f3f4 <_strtod_l+0x85c>)
 800f3ca:	4650      	mov	r0, sl
 800f3cc:	4659      	mov	r1, fp
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f7f1 f912 	bl	80005f8 <__aeabi_dmul>
 800f3d4:	4b08      	ldr	r3, [pc, #32]	@ (800f3f8 <_strtod_l+0x860>)
 800f3d6:	400b      	ands	r3, r1
 800f3d8:	4682      	mov	sl, r0
 800f3da:	468b      	mov	fp, r1
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f47f ae05 	bne.w	800efec <_strtod_l+0x454>
 800f3e2:	9a05      	ldr	r2, [sp, #20]
 800f3e4:	2322      	movs	r3, #34	@ 0x22
 800f3e6:	6013      	str	r3, [r2, #0]
 800f3e8:	e600      	b.n	800efec <_strtod_l+0x454>
 800f3ea:	bf00      	nop
 800f3ec:	08011690 	.word	0x08011690
 800f3f0:	fffffc02 	.word	0xfffffc02
 800f3f4:	39500000 	.word	0x39500000
 800f3f8:	7ff00000 	.word	0x7ff00000
 800f3fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f400:	d165      	bne.n	800f4ce <_strtod_l+0x936>
 800f402:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f404:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f408:	b35a      	cbz	r2, 800f462 <_strtod_l+0x8ca>
 800f40a:	4a9f      	ldr	r2, [pc, #636]	@ (800f688 <_strtod_l+0xaf0>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d12b      	bne.n	800f468 <_strtod_l+0x8d0>
 800f410:	9b08      	ldr	r3, [sp, #32]
 800f412:	4651      	mov	r1, sl
 800f414:	b303      	cbz	r3, 800f458 <_strtod_l+0x8c0>
 800f416:	4b9d      	ldr	r3, [pc, #628]	@ (800f68c <_strtod_l+0xaf4>)
 800f418:	465a      	mov	r2, fp
 800f41a:	4013      	ands	r3, r2
 800f41c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f424:	d81b      	bhi.n	800f45e <_strtod_l+0x8c6>
 800f426:	0d1b      	lsrs	r3, r3, #20
 800f428:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f42c:	fa02 f303 	lsl.w	r3, r2, r3
 800f430:	4299      	cmp	r1, r3
 800f432:	d119      	bne.n	800f468 <_strtod_l+0x8d0>
 800f434:	4b96      	ldr	r3, [pc, #600]	@ (800f690 <_strtod_l+0xaf8>)
 800f436:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f438:	429a      	cmp	r2, r3
 800f43a:	d102      	bne.n	800f442 <_strtod_l+0x8aa>
 800f43c:	3101      	adds	r1, #1
 800f43e:	f43f adca 	beq.w	800efd6 <_strtod_l+0x43e>
 800f442:	4b92      	ldr	r3, [pc, #584]	@ (800f68c <_strtod_l+0xaf4>)
 800f444:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f446:	401a      	ands	r2, r3
 800f448:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f44c:	f04f 0a00 	mov.w	sl, #0
 800f450:	9b08      	ldr	r3, [sp, #32]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d1b8      	bne.n	800f3c8 <_strtod_l+0x830>
 800f456:	e5c9      	b.n	800efec <_strtod_l+0x454>
 800f458:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f45c:	e7e8      	b.n	800f430 <_strtod_l+0x898>
 800f45e:	4613      	mov	r3, r2
 800f460:	e7e6      	b.n	800f430 <_strtod_l+0x898>
 800f462:	ea53 030a 	orrs.w	r3, r3, sl
 800f466:	d0a1      	beq.n	800f3ac <_strtod_l+0x814>
 800f468:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f46a:	b1db      	cbz	r3, 800f4a4 <_strtod_l+0x90c>
 800f46c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f46e:	4213      	tst	r3, r2
 800f470:	d0ee      	beq.n	800f450 <_strtod_l+0x8b8>
 800f472:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f474:	9a08      	ldr	r2, [sp, #32]
 800f476:	4650      	mov	r0, sl
 800f478:	4659      	mov	r1, fp
 800f47a:	b1bb      	cbz	r3, 800f4ac <_strtod_l+0x914>
 800f47c:	f7ff fb6e 	bl	800eb5c <sulp>
 800f480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f484:	ec53 2b10 	vmov	r2, r3, d0
 800f488:	f7f0 ff00 	bl	800028c <__adddf3>
 800f48c:	4682      	mov	sl, r0
 800f48e:	468b      	mov	fp, r1
 800f490:	e7de      	b.n	800f450 <_strtod_l+0x8b8>
 800f492:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f496:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f49a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f49e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f4a2:	e7d5      	b.n	800f450 <_strtod_l+0x8b8>
 800f4a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f4a6:	ea13 0f0a 	tst.w	r3, sl
 800f4aa:	e7e1      	b.n	800f470 <_strtod_l+0x8d8>
 800f4ac:	f7ff fb56 	bl	800eb5c <sulp>
 800f4b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f4b4:	ec53 2b10 	vmov	r2, r3, d0
 800f4b8:	f7f0 fee6 	bl	8000288 <__aeabi_dsub>
 800f4bc:	2200      	movs	r2, #0
 800f4be:	2300      	movs	r3, #0
 800f4c0:	4682      	mov	sl, r0
 800f4c2:	468b      	mov	fp, r1
 800f4c4:	f7f1 fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	d0c1      	beq.n	800f450 <_strtod_l+0x8b8>
 800f4cc:	e619      	b.n	800f102 <_strtod_l+0x56a>
 800f4ce:	4641      	mov	r1, r8
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	f7ff facd 	bl	800ea70 <__ratio>
 800f4d6:	ec57 6b10 	vmov	r6, r7, d0
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	4639      	mov	r1, r7
 800f4e4:	f7f1 fb04 	bl	8000af0 <__aeabi_dcmple>
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	d06f      	beq.n	800f5cc <_strtod_l+0xa34>
 800f4ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d17a      	bne.n	800f5e8 <_strtod_l+0xa50>
 800f4f2:	f1ba 0f00 	cmp.w	sl, #0
 800f4f6:	d158      	bne.n	800f5aa <_strtod_l+0xa12>
 800f4f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d15a      	bne.n	800f5b8 <_strtod_l+0xa20>
 800f502:	4b64      	ldr	r3, [pc, #400]	@ (800f694 <_strtod_l+0xafc>)
 800f504:	2200      	movs	r2, #0
 800f506:	4630      	mov	r0, r6
 800f508:	4639      	mov	r1, r7
 800f50a:	f7f1 fae7 	bl	8000adc <__aeabi_dcmplt>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d159      	bne.n	800f5c6 <_strtod_l+0xa2e>
 800f512:	4630      	mov	r0, r6
 800f514:	4639      	mov	r1, r7
 800f516:	4b60      	ldr	r3, [pc, #384]	@ (800f698 <_strtod_l+0xb00>)
 800f518:	2200      	movs	r2, #0
 800f51a:	f7f1 f86d 	bl	80005f8 <__aeabi_dmul>
 800f51e:	4606      	mov	r6, r0
 800f520:	460f      	mov	r7, r1
 800f522:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f526:	9606      	str	r6, [sp, #24]
 800f528:	9307      	str	r3, [sp, #28]
 800f52a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f52e:	4d57      	ldr	r5, [pc, #348]	@ (800f68c <_strtod_l+0xaf4>)
 800f530:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f536:	401d      	ands	r5, r3
 800f538:	4b58      	ldr	r3, [pc, #352]	@ (800f69c <_strtod_l+0xb04>)
 800f53a:	429d      	cmp	r5, r3
 800f53c:	f040 80b2 	bne.w	800f6a4 <_strtod_l+0xb0c>
 800f540:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f542:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f546:	ec4b ab10 	vmov	d0, sl, fp
 800f54a:	f7ff f9c9 	bl	800e8e0 <__ulp>
 800f54e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f552:	ec51 0b10 	vmov	r0, r1, d0
 800f556:	f7f1 f84f 	bl	80005f8 <__aeabi_dmul>
 800f55a:	4652      	mov	r2, sl
 800f55c:	465b      	mov	r3, fp
 800f55e:	f7f0 fe95 	bl	800028c <__adddf3>
 800f562:	460b      	mov	r3, r1
 800f564:	4949      	ldr	r1, [pc, #292]	@ (800f68c <_strtod_l+0xaf4>)
 800f566:	4a4e      	ldr	r2, [pc, #312]	@ (800f6a0 <_strtod_l+0xb08>)
 800f568:	4019      	ands	r1, r3
 800f56a:	4291      	cmp	r1, r2
 800f56c:	4682      	mov	sl, r0
 800f56e:	d942      	bls.n	800f5f6 <_strtod_l+0xa5e>
 800f570:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f572:	4b47      	ldr	r3, [pc, #284]	@ (800f690 <_strtod_l+0xaf8>)
 800f574:	429a      	cmp	r2, r3
 800f576:	d103      	bne.n	800f580 <_strtod_l+0x9e8>
 800f578:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f57a:	3301      	adds	r3, #1
 800f57c:	f43f ad2b 	beq.w	800efd6 <_strtod_l+0x43e>
 800f580:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f690 <_strtod_l+0xaf8>
 800f584:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f588:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f58a:	9805      	ldr	r0, [sp, #20]
 800f58c:	f7fe fe74 	bl	800e278 <_Bfree>
 800f590:	9805      	ldr	r0, [sp, #20]
 800f592:	4649      	mov	r1, r9
 800f594:	f7fe fe70 	bl	800e278 <_Bfree>
 800f598:	9805      	ldr	r0, [sp, #20]
 800f59a:	4641      	mov	r1, r8
 800f59c:	f7fe fe6c 	bl	800e278 <_Bfree>
 800f5a0:	9805      	ldr	r0, [sp, #20]
 800f5a2:	4621      	mov	r1, r4
 800f5a4:	f7fe fe68 	bl	800e278 <_Bfree>
 800f5a8:	e618      	b.n	800f1dc <_strtod_l+0x644>
 800f5aa:	f1ba 0f01 	cmp.w	sl, #1
 800f5ae:	d103      	bne.n	800f5b8 <_strtod_l+0xa20>
 800f5b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	f43f ada5 	beq.w	800f102 <_strtod_l+0x56a>
 800f5b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f668 <_strtod_l+0xad0>
 800f5bc:	4f35      	ldr	r7, [pc, #212]	@ (800f694 <_strtod_l+0xafc>)
 800f5be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f5c2:	2600      	movs	r6, #0
 800f5c4:	e7b1      	b.n	800f52a <_strtod_l+0x992>
 800f5c6:	4f34      	ldr	r7, [pc, #208]	@ (800f698 <_strtod_l+0xb00>)
 800f5c8:	2600      	movs	r6, #0
 800f5ca:	e7aa      	b.n	800f522 <_strtod_l+0x98a>
 800f5cc:	4b32      	ldr	r3, [pc, #200]	@ (800f698 <_strtod_l+0xb00>)
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	4639      	mov	r1, r7
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f7f1 f810 	bl	80005f8 <__aeabi_dmul>
 800f5d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5da:	4606      	mov	r6, r0
 800f5dc:	460f      	mov	r7, r1
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d09f      	beq.n	800f522 <_strtod_l+0x98a>
 800f5e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f5e6:	e7a0      	b.n	800f52a <_strtod_l+0x992>
 800f5e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f670 <_strtod_l+0xad8>
 800f5ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f5f0:	ec57 6b17 	vmov	r6, r7, d7
 800f5f4:	e799      	b.n	800f52a <_strtod_l+0x992>
 800f5f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f5fa:	9b08      	ldr	r3, [sp, #32]
 800f5fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f600:	2b00      	cmp	r3, #0
 800f602:	d1c1      	bne.n	800f588 <_strtod_l+0x9f0>
 800f604:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f608:	0d1b      	lsrs	r3, r3, #20
 800f60a:	051b      	lsls	r3, r3, #20
 800f60c:	429d      	cmp	r5, r3
 800f60e:	d1bb      	bne.n	800f588 <_strtod_l+0x9f0>
 800f610:	4630      	mov	r0, r6
 800f612:	4639      	mov	r1, r7
 800f614:	f7f1 fb50 	bl	8000cb8 <__aeabi_d2lz>
 800f618:	f7f0 ffc0 	bl	800059c <__aeabi_l2d>
 800f61c:	4602      	mov	r2, r0
 800f61e:	460b      	mov	r3, r1
 800f620:	4630      	mov	r0, r6
 800f622:	4639      	mov	r1, r7
 800f624:	f7f0 fe30 	bl	8000288 <__aeabi_dsub>
 800f628:	460b      	mov	r3, r1
 800f62a:	4602      	mov	r2, r0
 800f62c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f630:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f636:	ea46 060a 	orr.w	r6, r6, sl
 800f63a:	431e      	orrs	r6, r3
 800f63c:	d06f      	beq.n	800f71e <_strtod_l+0xb86>
 800f63e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f678 <_strtod_l+0xae0>)
 800f640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f644:	f7f1 fa4a 	bl	8000adc <__aeabi_dcmplt>
 800f648:	2800      	cmp	r0, #0
 800f64a:	f47f accf 	bne.w	800efec <_strtod_l+0x454>
 800f64e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f680 <_strtod_l+0xae8>)
 800f650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f658:	f7f1 fa5e 	bl	8000b18 <__aeabi_dcmpgt>
 800f65c:	2800      	cmp	r0, #0
 800f65e:	d093      	beq.n	800f588 <_strtod_l+0x9f0>
 800f660:	e4c4      	b.n	800efec <_strtod_l+0x454>
 800f662:	bf00      	nop
 800f664:	f3af 8000 	nop.w
 800f668:	00000000 	.word	0x00000000
 800f66c:	bff00000 	.word	0xbff00000
 800f670:	00000000 	.word	0x00000000
 800f674:	3ff00000 	.word	0x3ff00000
 800f678:	94a03595 	.word	0x94a03595
 800f67c:	3fdfffff 	.word	0x3fdfffff
 800f680:	35afe535 	.word	0x35afe535
 800f684:	3fe00000 	.word	0x3fe00000
 800f688:	000fffff 	.word	0x000fffff
 800f68c:	7ff00000 	.word	0x7ff00000
 800f690:	7fefffff 	.word	0x7fefffff
 800f694:	3ff00000 	.word	0x3ff00000
 800f698:	3fe00000 	.word	0x3fe00000
 800f69c:	7fe00000 	.word	0x7fe00000
 800f6a0:	7c9fffff 	.word	0x7c9fffff
 800f6a4:	9b08      	ldr	r3, [sp, #32]
 800f6a6:	b323      	cbz	r3, 800f6f2 <_strtod_l+0xb5a>
 800f6a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f6ac:	d821      	bhi.n	800f6f2 <_strtod_l+0xb5a>
 800f6ae:	a328      	add	r3, pc, #160	@ (adr r3, 800f750 <_strtod_l+0xbb8>)
 800f6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	f7f1 fa1a 	bl	8000af0 <__aeabi_dcmple>
 800f6bc:	b1a0      	cbz	r0, 800f6e8 <_strtod_l+0xb50>
 800f6be:	4639      	mov	r1, r7
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	f7f1 fa71 	bl	8000ba8 <__aeabi_d2uiz>
 800f6c6:	2801      	cmp	r0, #1
 800f6c8:	bf38      	it	cc
 800f6ca:	2001      	movcc	r0, #1
 800f6cc:	f7f0 ff1a 	bl	8000504 <__aeabi_ui2d>
 800f6d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6d2:	4606      	mov	r6, r0
 800f6d4:	460f      	mov	r7, r1
 800f6d6:	b9fb      	cbnz	r3, 800f718 <_strtod_l+0xb80>
 800f6d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f6dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800f6de:	9315      	str	r3, [sp, #84]	@ 0x54
 800f6e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f6e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f6e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f6ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f6ee:	1b5b      	subs	r3, r3, r5
 800f6f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f6f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f6f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f6fa:	f7ff f8f1 	bl	800e8e0 <__ulp>
 800f6fe:	4650      	mov	r0, sl
 800f700:	ec53 2b10 	vmov	r2, r3, d0
 800f704:	4659      	mov	r1, fp
 800f706:	f7f0 ff77 	bl	80005f8 <__aeabi_dmul>
 800f70a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f70e:	f7f0 fdbd 	bl	800028c <__adddf3>
 800f712:	4682      	mov	sl, r0
 800f714:	468b      	mov	fp, r1
 800f716:	e770      	b.n	800f5fa <_strtod_l+0xa62>
 800f718:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f71c:	e7e0      	b.n	800f6e0 <_strtod_l+0xb48>
 800f71e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f758 <_strtod_l+0xbc0>)
 800f720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f724:	f7f1 f9da 	bl	8000adc <__aeabi_dcmplt>
 800f728:	e798      	b.n	800f65c <_strtod_l+0xac4>
 800f72a:	2300      	movs	r3, #0
 800f72c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f72e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f730:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f732:	6013      	str	r3, [r2, #0]
 800f734:	f7ff ba6d 	b.w	800ec12 <_strtod_l+0x7a>
 800f738:	2a65      	cmp	r2, #101	@ 0x65
 800f73a:	f43f ab66 	beq.w	800ee0a <_strtod_l+0x272>
 800f73e:	2a45      	cmp	r2, #69	@ 0x45
 800f740:	f43f ab63 	beq.w	800ee0a <_strtod_l+0x272>
 800f744:	2301      	movs	r3, #1
 800f746:	f7ff bb9e 	b.w	800ee86 <_strtod_l+0x2ee>
 800f74a:	bf00      	nop
 800f74c:	f3af 8000 	nop.w
 800f750:	ffc00000 	.word	0xffc00000
 800f754:	41dfffff 	.word	0x41dfffff
 800f758:	94a03595 	.word	0x94a03595
 800f75c:	3fcfffff 	.word	0x3fcfffff

0800f760 <_strtod_r>:
 800f760:	4b01      	ldr	r3, [pc, #4]	@ (800f768 <_strtod_r+0x8>)
 800f762:	f7ff ba19 	b.w	800eb98 <_strtod_l>
 800f766:	bf00      	nop
 800f768:	20000204 	.word	0x20000204

0800f76c <_strtol_l.constprop.0>:
 800f76c:	2b24      	cmp	r3, #36	@ 0x24
 800f76e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f772:	4686      	mov	lr, r0
 800f774:	4690      	mov	r8, r2
 800f776:	d801      	bhi.n	800f77c <_strtol_l.constprop.0+0x10>
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d106      	bne.n	800f78a <_strtol_l.constprop.0+0x1e>
 800f77c:	f7fd fdba 	bl	800d2f4 <__errno>
 800f780:	2316      	movs	r3, #22
 800f782:	6003      	str	r3, [r0, #0]
 800f784:	2000      	movs	r0, #0
 800f786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f78a:	4834      	ldr	r0, [pc, #208]	@ (800f85c <_strtol_l.constprop.0+0xf0>)
 800f78c:	460d      	mov	r5, r1
 800f78e:	462a      	mov	r2, r5
 800f790:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f794:	5d06      	ldrb	r6, [r0, r4]
 800f796:	f016 0608 	ands.w	r6, r6, #8
 800f79a:	d1f8      	bne.n	800f78e <_strtol_l.constprop.0+0x22>
 800f79c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f79e:	d12d      	bne.n	800f7fc <_strtol_l.constprop.0+0x90>
 800f7a0:	782c      	ldrb	r4, [r5, #0]
 800f7a2:	2601      	movs	r6, #1
 800f7a4:	1c95      	adds	r5, r2, #2
 800f7a6:	f033 0210 	bics.w	r2, r3, #16
 800f7aa:	d109      	bne.n	800f7c0 <_strtol_l.constprop.0+0x54>
 800f7ac:	2c30      	cmp	r4, #48	@ 0x30
 800f7ae:	d12a      	bne.n	800f806 <_strtol_l.constprop.0+0x9a>
 800f7b0:	782a      	ldrb	r2, [r5, #0]
 800f7b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f7b6:	2a58      	cmp	r2, #88	@ 0x58
 800f7b8:	d125      	bne.n	800f806 <_strtol_l.constprop.0+0x9a>
 800f7ba:	786c      	ldrb	r4, [r5, #1]
 800f7bc:	2310      	movs	r3, #16
 800f7be:	3502      	adds	r5, #2
 800f7c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f7c4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	fbbc f9f3 	udiv	r9, ip, r3
 800f7ce:	4610      	mov	r0, r2
 800f7d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800f7d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f7d8:	2f09      	cmp	r7, #9
 800f7da:	d81b      	bhi.n	800f814 <_strtol_l.constprop.0+0xa8>
 800f7dc:	463c      	mov	r4, r7
 800f7de:	42a3      	cmp	r3, r4
 800f7e0:	dd27      	ble.n	800f832 <_strtol_l.constprop.0+0xc6>
 800f7e2:	1c57      	adds	r7, r2, #1
 800f7e4:	d007      	beq.n	800f7f6 <_strtol_l.constprop.0+0x8a>
 800f7e6:	4581      	cmp	r9, r0
 800f7e8:	d320      	bcc.n	800f82c <_strtol_l.constprop.0+0xc0>
 800f7ea:	d101      	bne.n	800f7f0 <_strtol_l.constprop.0+0x84>
 800f7ec:	45a2      	cmp	sl, r4
 800f7ee:	db1d      	blt.n	800f82c <_strtol_l.constprop.0+0xc0>
 800f7f0:	fb00 4003 	mla	r0, r0, r3, r4
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f7fa:	e7eb      	b.n	800f7d4 <_strtol_l.constprop.0+0x68>
 800f7fc:	2c2b      	cmp	r4, #43	@ 0x2b
 800f7fe:	bf04      	itt	eq
 800f800:	782c      	ldrbeq	r4, [r5, #0]
 800f802:	1c95      	addeq	r5, r2, #2
 800f804:	e7cf      	b.n	800f7a6 <_strtol_l.constprop.0+0x3a>
 800f806:	2b00      	cmp	r3, #0
 800f808:	d1da      	bne.n	800f7c0 <_strtol_l.constprop.0+0x54>
 800f80a:	2c30      	cmp	r4, #48	@ 0x30
 800f80c:	bf0c      	ite	eq
 800f80e:	2308      	moveq	r3, #8
 800f810:	230a      	movne	r3, #10
 800f812:	e7d5      	b.n	800f7c0 <_strtol_l.constprop.0+0x54>
 800f814:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f818:	2f19      	cmp	r7, #25
 800f81a:	d801      	bhi.n	800f820 <_strtol_l.constprop.0+0xb4>
 800f81c:	3c37      	subs	r4, #55	@ 0x37
 800f81e:	e7de      	b.n	800f7de <_strtol_l.constprop.0+0x72>
 800f820:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f824:	2f19      	cmp	r7, #25
 800f826:	d804      	bhi.n	800f832 <_strtol_l.constprop.0+0xc6>
 800f828:	3c57      	subs	r4, #87	@ 0x57
 800f82a:	e7d8      	b.n	800f7de <_strtol_l.constprop.0+0x72>
 800f82c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f830:	e7e1      	b.n	800f7f6 <_strtol_l.constprop.0+0x8a>
 800f832:	1c53      	adds	r3, r2, #1
 800f834:	d108      	bne.n	800f848 <_strtol_l.constprop.0+0xdc>
 800f836:	2322      	movs	r3, #34	@ 0x22
 800f838:	f8ce 3000 	str.w	r3, [lr]
 800f83c:	4660      	mov	r0, ip
 800f83e:	f1b8 0f00 	cmp.w	r8, #0
 800f842:	d0a0      	beq.n	800f786 <_strtol_l.constprop.0+0x1a>
 800f844:	1e69      	subs	r1, r5, #1
 800f846:	e006      	b.n	800f856 <_strtol_l.constprop.0+0xea>
 800f848:	b106      	cbz	r6, 800f84c <_strtol_l.constprop.0+0xe0>
 800f84a:	4240      	negs	r0, r0
 800f84c:	f1b8 0f00 	cmp.w	r8, #0
 800f850:	d099      	beq.n	800f786 <_strtol_l.constprop.0+0x1a>
 800f852:	2a00      	cmp	r2, #0
 800f854:	d1f6      	bne.n	800f844 <_strtol_l.constprop.0+0xd8>
 800f856:	f8c8 1000 	str.w	r1, [r8]
 800f85a:	e794      	b.n	800f786 <_strtol_l.constprop.0+0x1a>
 800f85c:	080116b9 	.word	0x080116b9

0800f860 <_strtol_r>:
 800f860:	f7ff bf84 	b.w	800f76c <_strtol_l.constprop.0>

0800f864 <__ssputs_r>:
 800f864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f868:	688e      	ldr	r6, [r1, #8]
 800f86a:	461f      	mov	r7, r3
 800f86c:	42be      	cmp	r6, r7
 800f86e:	680b      	ldr	r3, [r1, #0]
 800f870:	4682      	mov	sl, r0
 800f872:	460c      	mov	r4, r1
 800f874:	4690      	mov	r8, r2
 800f876:	d82d      	bhi.n	800f8d4 <__ssputs_r+0x70>
 800f878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f87c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f880:	d026      	beq.n	800f8d0 <__ssputs_r+0x6c>
 800f882:	6965      	ldr	r5, [r4, #20]
 800f884:	6909      	ldr	r1, [r1, #16]
 800f886:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f88a:	eba3 0901 	sub.w	r9, r3, r1
 800f88e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f892:	1c7b      	adds	r3, r7, #1
 800f894:	444b      	add	r3, r9
 800f896:	106d      	asrs	r5, r5, #1
 800f898:	429d      	cmp	r5, r3
 800f89a:	bf38      	it	cc
 800f89c:	461d      	movcc	r5, r3
 800f89e:	0553      	lsls	r3, r2, #21
 800f8a0:	d527      	bpl.n	800f8f2 <__ssputs_r+0x8e>
 800f8a2:	4629      	mov	r1, r5
 800f8a4:	f7fe fc1c 	bl	800e0e0 <_malloc_r>
 800f8a8:	4606      	mov	r6, r0
 800f8aa:	b360      	cbz	r0, 800f906 <__ssputs_r+0xa2>
 800f8ac:	6921      	ldr	r1, [r4, #16]
 800f8ae:	464a      	mov	r2, r9
 800f8b0:	f000 fda6 	bl	8010400 <memcpy>
 800f8b4:	89a3      	ldrh	r3, [r4, #12]
 800f8b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f8ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8be:	81a3      	strh	r3, [r4, #12]
 800f8c0:	6126      	str	r6, [r4, #16]
 800f8c2:	6165      	str	r5, [r4, #20]
 800f8c4:	444e      	add	r6, r9
 800f8c6:	eba5 0509 	sub.w	r5, r5, r9
 800f8ca:	6026      	str	r6, [r4, #0]
 800f8cc:	60a5      	str	r5, [r4, #8]
 800f8ce:	463e      	mov	r6, r7
 800f8d0:	42be      	cmp	r6, r7
 800f8d2:	d900      	bls.n	800f8d6 <__ssputs_r+0x72>
 800f8d4:	463e      	mov	r6, r7
 800f8d6:	6820      	ldr	r0, [r4, #0]
 800f8d8:	4632      	mov	r2, r6
 800f8da:	4641      	mov	r1, r8
 800f8dc:	f000 fd53 	bl	8010386 <memmove>
 800f8e0:	68a3      	ldr	r3, [r4, #8]
 800f8e2:	1b9b      	subs	r3, r3, r6
 800f8e4:	60a3      	str	r3, [r4, #8]
 800f8e6:	6823      	ldr	r3, [r4, #0]
 800f8e8:	4433      	add	r3, r6
 800f8ea:	6023      	str	r3, [r4, #0]
 800f8ec:	2000      	movs	r0, #0
 800f8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8f2:	462a      	mov	r2, r5
 800f8f4:	f001 f919 	bl	8010b2a <_realloc_r>
 800f8f8:	4606      	mov	r6, r0
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d1e0      	bne.n	800f8c0 <__ssputs_r+0x5c>
 800f8fe:	6921      	ldr	r1, [r4, #16]
 800f900:	4650      	mov	r0, sl
 800f902:	f7fe fb79 	bl	800dff8 <_free_r>
 800f906:	230c      	movs	r3, #12
 800f908:	f8ca 3000 	str.w	r3, [sl]
 800f90c:	89a3      	ldrh	r3, [r4, #12]
 800f90e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f912:	81a3      	strh	r3, [r4, #12]
 800f914:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f918:	e7e9      	b.n	800f8ee <__ssputs_r+0x8a>
	...

0800f91c <_svfiprintf_r>:
 800f91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f920:	4698      	mov	r8, r3
 800f922:	898b      	ldrh	r3, [r1, #12]
 800f924:	061b      	lsls	r3, r3, #24
 800f926:	b09d      	sub	sp, #116	@ 0x74
 800f928:	4607      	mov	r7, r0
 800f92a:	460d      	mov	r5, r1
 800f92c:	4614      	mov	r4, r2
 800f92e:	d510      	bpl.n	800f952 <_svfiprintf_r+0x36>
 800f930:	690b      	ldr	r3, [r1, #16]
 800f932:	b973      	cbnz	r3, 800f952 <_svfiprintf_r+0x36>
 800f934:	2140      	movs	r1, #64	@ 0x40
 800f936:	f7fe fbd3 	bl	800e0e0 <_malloc_r>
 800f93a:	6028      	str	r0, [r5, #0]
 800f93c:	6128      	str	r0, [r5, #16]
 800f93e:	b930      	cbnz	r0, 800f94e <_svfiprintf_r+0x32>
 800f940:	230c      	movs	r3, #12
 800f942:	603b      	str	r3, [r7, #0]
 800f944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f948:	b01d      	add	sp, #116	@ 0x74
 800f94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f94e:	2340      	movs	r3, #64	@ 0x40
 800f950:	616b      	str	r3, [r5, #20]
 800f952:	2300      	movs	r3, #0
 800f954:	9309      	str	r3, [sp, #36]	@ 0x24
 800f956:	2320      	movs	r3, #32
 800f958:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f95c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f960:	2330      	movs	r3, #48	@ 0x30
 800f962:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fb00 <_svfiprintf_r+0x1e4>
 800f966:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f96a:	f04f 0901 	mov.w	r9, #1
 800f96e:	4623      	mov	r3, r4
 800f970:	469a      	mov	sl, r3
 800f972:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f976:	b10a      	cbz	r2, 800f97c <_svfiprintf_r+0x60>
 800f978:	2a25      	cmp	r2, #37	@ 0x25
 800f97a:	d1f9      	bne.n	800f970 <_svfiprintf_r+0x54>
 800f97c:	ebba 0b04 	subs.w	fp, sl, r4
 800f980:	d00b      	beq.n	800f99a <_svfiprintf_r+0x7e>
 800f982:	465b      	mov	r3, fp
 800f984:	4622      	mov	r2, r4
 800f986:	4629      	mov	r1, r5
 800f988:	4638      	mov	r0, r7
 800f98a:	f7ff ff6b 	bl	800f864 <__ssputs_r>
 800f98e:	3001      	adds	r0, #1
 800f990:	f000 80a7 	beq.w	800fae2 <_svfiprintf_r+0x1c6>
 800f994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f996:	445a      	add	r2, fp
 800f998:	9209      	str	r2, [sp, #36]	@ 0x24
 800f99a:	f89a 3000 	ldrb.w	r3, [sl]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f000 809f 	beq.w	800fae2 <_svfiprintf_r+0x1c6>
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9ae:	f10a 0a01 	add.w	sl, sl, #1
 800f9b2:	9304      	str	r3, [sp, #16]
 800f9b4:	9307      	str	r3, [sp, #28]
 800f9b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f9ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9bc:	4654      	mov	r4, sl
 800f9be:	2205      	movs	r2, #5
 800f9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9c4:	484e      	ldr	r0, [pc, #312]	@ (800fb00 <_svfiprintf_r+0x1e4>)
 800f9c6:	f7f0 fc03 	bl	80001d0 <memchr>
 800f9ca:	9a04      	ldr	r2, [sp, #16]
 800f9cc:	b9d8      	cbnz	r0, 800fa06 <_svfiprintf_r+0xea>
 800f9ce:	06d0      	lsls	r0, r2, #27
 800f9d0:	bf44      	itt	mi
 800f9d2:	2320      	movmi	r3, #32
 800f9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9d8:	0711      	lsls	r1, r2, #28
 800f9da:	bf44      	itt	mi
 800f9dc:	232b      	movmi	r3, #43	@ 0x2b
 800f9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9e8:	d015      	beq.n	800fa16 <_svfiprintf_r+0xfa>
 800f9ea:	9a07      	ldr	r2, [sp, #28]
 800f9ec:	4654      	mov	r4, sl
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	f04f 0c0a 	mov.w	ip, #10
 800f9f4:	4621      	mov	r1, r4
 800f9f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9fa:	3b30      	subs	r3, #48	@ 0x30
 800f9fc:	2b09      	cmp	r3, #9
 800f9fe:	d94b      	bls.n	800fa98 <_svfiprintf_r+0x17c>
 800fa00:	b1b0      	cbz	r0, 800fa30 <_svfiprintf_r+0x114>
 800fa02:	9207      	str	r2, [sp, #28]
 800fa04:	e014      	b.n	800fa30 <_svfiprintf_r+0x114>
 800fa06:	eba0 0308 	sub.w	r3, r0, r8
 800fa0a:	fa09 f303 	lsl.w	r3, r9, r3
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	9304      	str	r3, [sp, #16]
 800fa12:	46a2      	mov	sl, r4
 800fa14:	e7d2      	b.n	800f9bc <_svfiprintf_r+0xa0>
 800fa16:	9b03      	ldr	r3, [sp, #12]
 800fa18:	1d19      	adds	r1, r3, #4
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	9103      	str	r1, [sp, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	bfbb      	ittet	lt
 800fa22:	425b      	neglt	r3, r3
 800fa24:	f042 0202 	orrlt.w	r2, r2, #2
 800fa28:	9307      	strge	r3, [sp, #28]
 800fa2a:	9307      	strlt	r3, [sp, #28]
 800fa2c:	bfb8      	it	lt
 800fa2e:	9204      	strlt	r2, [sp, #16]
 800fa30:	7823      	ldrb	r3, [r4, #0]
 800fa32:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa34:	d10a      	bne.n	800fa4c <_svfiprintf_r+0x130>
 800fa36:	7863      	ldrb	r3, [r4, #1]
 800fa38:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa3a:	d132      	bne.n	800faa2 <_svfiprintf_r+0x186>
 800fa3c:	9b03      	ldr	r3, [sp, #12]
 800fa3e:	1d1a      	adds	r2, r3, #4
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	9203      	str	r2, [sp, #12]
 800fa44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa48:	3402      	adds	r4, #2
 800fa4a:	9305      	str	r3, [sp, #20]
 800fa4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fb10 <_svfiprintf_r+0x1f4>
 800fa50:	7821      	ldrb	r1, [r4, #0]
 800fa52:	2203      	movs	r2, #3
 800fa54:	4650      	mov	r0, sl
 800fa56:	f7f0 fbbb 	bl	80001d0 <memchr>
 800fa5a:	b138      	cbz	r0, 800fa6c <_svfiprintf_r+0x150>
 800fa5c:	9b04      	ldr	r3, [sp, #16]
 800fa5e:	eba0 000a 	sub.w	r0, r0, sl
 800fa62:	2240      	movs	r2, #64	@ 0x40
 800fa64:	4082      	lsls	r2, r0
 800fa66:	4313      	orrs	r3, r2
 800fa68:	3401      	adds	r4, #1
 800fa6a:	9304      	str	r3, [sp, #16]
 800fa6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa70:	4824      	ldr	r0, [pc, #144]	@ (800fb04 <_svfiprintf_r+0x1e8>)
 800fa72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa76:	2206      	movs	r2, #6
 800fa78:	f7f0 fbaa 	bl	80001d0 <memchr>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d036      	beq.n	800faee <_svfiprintf_r+0x1d2>
 800fa80:	4b21      	ldr	r3, [pc, #132]	@ (800fb08 <_svfiprintf_r+0x1ec>)
 800fa82:	bb1b      	cbnz	r3, 800facc <_svfiprintf_r+0x1b0>
 800fa84:	9b03      	ldr	r3, [sp, #12]
 800fa86:	3307      	adds	r3, #7
 800fa88:	f023 0307 	bic.w	r3, r3, #7
 800fa8c:	3308      	adds	r3, #8
 800fa8e:	9303      	str	r3, [sp, #12]
 800fa90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa92:	4433      	add	r3, r6
 800fa94:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa96:	e76a      	b.n	800f96e <_svfiprintf_r+0x52>
 800fa98:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa9c:	460c      	mov	r4, r1
 800fa9e:	2001      	movs	r0, #1
 800faa0:	e7a8      	b.n	800f9f4 <_svfiprintf_r+0xd8>
 800faa2:	2300      	movs	r3, #0
 800faa4:	3401      	adds	r4, #1
 800faa6:	9305      	str	r3, [sp, #20]
 800faa8:	4619      	mov	r1, r3
 800faaa:	f04f 0c0a 	mov.w	ip, #10
 800faae:	4620      	mov	r0, r4
 800fab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fab4:	3a30      	subs	r2, #48	@ 0x30
 800fab6:	2a09      	cmp	r2, #9
 800fab8:	d903      	bls.n	800fac2 <_svfiprintf_r+0x1a6>
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d0c6      	beq.n	800fa4c <_svfiprintf_r+0x130>
 800fabe:	9105      	str	r1, [sp, #20]
 800fac0:	e7c4      	b.n	800fa4c <_svfiprintf_r+0x130>
 800fac2:	fb0c 2101 	mla	r1, ip, r1, r2
 800fac6:	4604      	mov	r4, r0
 800fac8:	2301      	movs	r3, #1
 800faca:	e7f0      	b.n	800faae <_svfiprintf_r+0x192>
 800facc:	ab03      	add	r3, sp, #12
 800face:	9300      	str	r3, [sp, #0]
 800fad0:	462a      	mov	r2, r5
 800fad2:	4b0e      	ldr	r3, [pc, #56]	@ (800fb0c <_svfiprintf_r+0x1f0>)
 800fad4:	a904      	add	r1, sp, #16
 800fad6:	4638      	mov	r0, r7
 800fad8:	f7fc fc52 	bl	800c380 <_printf_float>
 800fadc:	1c42      	adds	r2, r0, #1
 800fade:	4606      	mov	r6, r0
 800fae0:	d1d6      	bne.n	800fa90 <_svfiprintf_r+0x174>
 800fae2:	89ab      	ldrh	r3, [r5, #12]
 800fae4:	065b      	lsls	r3, r3, #25
 800fae6:	f53f af2d 	bmi.w	800f944 <_svfiprintf_r+0x28>
 800faea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800faec:	e72c      	b.n	800f948 <_svfiprintf_r+0x2c>
 800faee:	ab03      	add	r3, sp, #12
 800faf0:	9300      	str	r3, [sp, #0]
 800faf2:	462a      	mov	r2, r5
 800faf4:	4b05      	ldr	r3, [pc, #20]	@ (800fb0c <_svfiprintf_r+0x1f0>)
 800faf6:	a904      	add	r1, sp, #16
 800faf8:	4638      	mov	r0, r7
 800fafa:	f7fc fed9 	bl	800c8b0 <_printf_i>
 800fafe:	e7ed      	b.n	800fadc <_svfiprintf_r+0x1c0>
 800fb00:	080117b9 	.word	0x080117b9
 800fb04:	080117c3 	.word	0x080117c3
 800fb08:	0800c381 	.word	0x0800c381
 800fb0c:	0800f865 	.word	0x0800f865
 800fb10:	080117bf 	.word	0x080117bf

0800fb14 <_sungetc_r>:
 800fb14:	b538      	push	{r3, r4, r5, lr}
 800fb16:	1c4b      	adds	r3, r1, #1
 800fb18:	4614      	mov	r4, r2
 800fb1a:	d103      	bne.n	800fb24 <_sungetc_r+0x10>
 800fb1c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800fb20:	4628      	mov	r0, r5
 800fb22:	bd38      	pop	{r3, r4, r5, pc}
 800fb24:	8993      	ldrh	r3, [r2, #12]
 800fb26:	f023 0320 	bic.w	r3, r3, #32
 800fb2a:	8193      	strh	r3, [r2, #12]
 800fb2c:	6853      	ldr	r3, [r2, #4]
 800fb2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800fb30:	b2cd      	uxtb	r5, r1
 800fb32:	b18a      	cbz	r2, 800fb58 <_sungetc_r+0x44>
 800fb34:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800fb36:	429a      	cmp	r2, r3
 800fb38:	dd08      	ble.n	800fb4c <_sungetc_r+0x38>
 800fb3a:	6823      	ldr	r3, [r4, #0]
 800fb3c:	1e5a      	subs	r2, r3, #1
 800fb3e:	6022      	str	r2, [r4, #0]
 800fb40:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fb44:	6863      	ldr	r3, [r4, #4]
 800fb46:	3301      	adds	r3, #1
 800fb48:	6063      	str	r3, [r4, #4]
 800fb4a:	e7e9      	b.n	800fb20 <_sungetc_r+0xc>
 800fb4c:	4621      	mov	r1, r4
 800fb4e:	f000 fbe0 	bl	8010312 <__submore>
 800fb52:	2800      	cmp	r0, #0
 800fb54:	d0f1      	beq.n	800fb3a <_sungetc_r+0x26>
 800fb56:	e7e1      	b.n	800fb1c <_sungetc_r+0x8>
 800fb58:	6921      	ldr	r1, [r4, #16]
 800fb5a:	6822      	ldr	r2, [r4, #0]
 800fb5c:	b141      	cbz	r1, 800fb70 <_sungetc_r+0x5c>
 800fb5e:	4291      	cmp	r1, r2
 800fb60:	d206      	bcs.n	800fb70 <_sungetc_r+0x5c>
 800fb62:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800fb66:	42a9      	cmp	r1, r5
 800fb68:	d102      	bne.n	800fb70 <_sungetc_r+0x5c>
 800fb6a:	3a01      	subs	r2, #1
 800fb6c:	6022      	str	r2, [r4, #0]
 800fb6e:	e7ea      	b.n	800fb46 <_sungetc_r+0x32>
 800fb70:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800fb74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb78:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb7a:	2303      	movs	r3, #3
 800fb7c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800fb7e:	4623      	mov	r3, r4
 800fb80:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fb84:	6023      	str	r3, [r4, #0]
 800fb86:	2301      	movs	r3, #1
 800fb88:	e7de      	b.n	800fb48 <_sungetc_r+0x34>

0800fb8a <__ssrefill_r>:
 800fb8a:	b510      	push	{r4, lr}
 800fb8c:	460c      	mov	r4, r1
 800fb8e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800fb90:	b169      	cbz	r1, 800fbae <__ssrefill_r+0x24>
 800fb92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb96:	4299      	cmp	r1, r3
 800fb98:	d001      	beq.n	800fb9e <__ssrefill_r+0x14>
 800fb9a:	f7fe fa2d 	bl	800dff8 <_free_r>
 800fb9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fba0:	6063      	str	r3, [r4, #4]
 800fba2:	2000      	movs	r0, #0
 800fba4:	6360      	str	r0, [r4, #52]	@ 0x34
 800fba6:	b113      	cbz	r3, 800fbae <__ssrefill_r+0x24>
 800fba8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fbaa:	6023      	str	r3, [r4, #0]
 800fbac:	bd10      	pop	{r4, pc}
 800fbae:	6923      	ldr	r3, [r4, #16]
 800fbb0:	6023      	str	r3, [r4, #0]
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	6063      	str	r3, [r4, #4]
 800fbb6:	89a3      	ldrh	r3, [r4, #12]
 800fbb8:	f043 0320 	orr.w	r3, r3, #32
 800fbbc:	81a3      	strh	r3, [r4, #12]
 800fbbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fbc2:	e7f3      	b.n	800fbac <__ssrefill_r+0x22>

0800fbc4 <__ssvfiscanf_r>:
 800fbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbc8:	460c      	mov	r4, r1
 800fbca:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800fbce:	2100      	movs	r1, #0
 800fbd0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800fbd4:	49a5      	ldr	r1, [pc, #660]	@ (800fe6c <__ssvfiscanf_r+0x2a8>)
 800fbd6:	91a0      	str	r1, [sp, #640]	@ 0x280
 800fbd8:	f10d 0804 	add.w	r8, sp, #4
 800fbdc:	49a4      	ldr	r1, [pc, #656]	@ (800fe70 <__ssvfiscanf_r+0x2ac>)
 800fbde:	4fa5      	ldr	r7, [pc, #660]	@ (800fe74 <__ssvfiscanf_r+0x2b0>)
 800fbe0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800fbe4:	4606      	mov	r6, r0
 800fbe6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800fbe8:	9300      	str	r3, [sp, #0]
 800fbea:	7813      	ldrb	r3, [r2, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	f000 8158 	beq.w	800fea2 <__ssvfiscanf_r+0x2de>
 800fbf2:	5cf9      	ldrb	r1, [r7, r3]
 800fbf4:	f011 0108 	ands.w	r1, r1, #8
 800fbf8:	f102 0501 	add.w	r5, r2, #1
 800fbfc:	d019      	beq.n	800fc32 <__ssvfiscanf_r+0x6e>
 800fbfe:	6863      	ldr	r3, [r4, #4]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	dd0f      	ble.n	800fc24 <__ssvfiscanf_r+0x60>
 800fc04:	6823      	ldr	r3, [r4, #0]
 800fc06:	781a      	ldrb	r2, [r3, #0]
 800fc08:	5cba      	ldrb	r2, [r7, r2]
 800fc0a:	0712      	lsls	r2, r2, #28
 800fc0c:	d401      	bmi.n	800fc12 <__ssvfiscanf_r+0x4e>
 800fc0e:	462a      	mov	r2, r5
 800fc10:	e7eb      	b.n	800fbea <__ssvfiscanf_r+0x26>
 800fc12:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800fc14:	3201      	adds	r2, #1
 800fc16:	9245      	str	r2, [sp, #276]	@ 0x114
 800fc18:	6862      	ldr	r2, [r4, #4]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	3a01      	subs	r2, #1
 800fc1e:	6062      	str	r2, [r4, #4]
 800fc20:	6023      	str	r3, [r4, #0]
 800fc22:	e7ec      	b.n	800fbfe <__ssvfiscanf_r+0x3a>
 800fc24:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fc26:	4621      	mov	r1, r4
 800fc28:	4630      	mov	r0, r6
 800fc2a:	4798      	blx	r3
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	d0e9      	beq.n	800fc04 <__ssvfiscanf_r+0x40>
 800fc30:	e7ed      	b.n	800fc0e <__ssvfiscanf_r+0x4a>
 800fc32:	2b25      	cmp	r3, #37	@ 0x25
 800fc34:	d012      	beq.n	800fc5c <__ssvfiscanf_r+0x98>
 800fc36:	4699      	mov	r9, r3
 800fc38:	6863      	ldr	r3, [r4, #4]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	f340 8093 	ble.w	800fd66 <__ssvfiscanf_r+0x1a2>
 800fc40:	6822      	ldr	r2, [r4, #0]
 800fc42:	7813      	ldrb	r3, [r2, #0]
 800fc44:	454b      	cmp	r3, r9
 800fc46:	f040 812c 	bne.w	800fea2 <__ssvfiscanf_r+0x2de>
 800fc4a:	6863      	ldr	r3, [r4, #4]
 800fc4c:	3b01      	subs	r3, #1
 800fc4e:	6063      	str	r3, [r4, #4]
 800fc50:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800fc52:	3201      	adds	r2, #1
 800fc54:	3301      	adds	r3, #1
 800fc56:	6022      	str	r2, [r4, #0]
 800fc58:	9345      	str	r3, [sp, #276]	@ 0x114
 800fc5a:	e7d8      	b.n	800fc0e <__ssvfiscanf_r+0x4a>
 800fc5c:	9141      	str	r1, [sp, #260]	@ 0x104
 800fc5e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800fc60:	7853      	ldrb	r3, [r2, #1]
 800fc62:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc64:	bf02      	ittt	eq
 800fc66:	2310      	moveq	r3, #16
 800fc68:	1c95      	addeq	r5, r2, #2
 800fc6a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800fc6c:	220a      	movs	r2, #10
 800fc6e:	46a9      	mov	r9, r5
 800fc70:	f819 1b01 	ldrb.w	r1, [r9], #1
 800fc74:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800fc78:	2b09      	cmp	r3, #9
 800fc7a:	d91e      	bls.n	800fcba <__ssvfiscanf_r+0xf6>
 800fc7c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800fe78 <__ssvfiscanf_r+0x2b4>
 800fc80:	2203      	movs	r2, #3
 800fc82:	4650      	mov	r0, sl
 800fc84:	f7f0 faa4 	bl	80001d0 <memchr>
 800fc88:	b138      	cbz	r0, 800fc9a <__ssvfiscanf_r+0xd6>
 800fc8a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800fc8c:	eba0 000a 	sub.w	r0, r0, sl
 800fc90:	2301      	movs	r3, #1
 800fc92:	4083      	lsls	r3, r0
 800fc94:	4313      	orrs	r3, r2
 800fc96:	9341      	str	r3, [sp, #260]	@ 0x104
 800fc98:	464d      	mov	r5, r9
 800fc9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fc9e:	2b78      	cmp	r3, #120	@ 0x78
 800fca0:	d806      	bhi.n	800fcb0 <__ssvfiscanf_r+0xec>
 800fca2:	2b57      	cmp	r3, #87	@ 0x57
 800fca4:	d810      	bhi.n	800fcc8 <__ssvfiscanf_r+0x104>
 800fca6:	2b25      	cmp	r3, #37	@ 0x25
 800fca8:	d0c5      	beq.n	800fc36 <__ssvfiscanf_r+0x72>
 800fcaa:	d857      	bhi.n	800fd5c <__ssvfiscanf_r+0x198>
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d065      	beq.n	800fd7c <__ssvfiscanf_r+0x1b8>
 800fcb0:	2303      	movs	r3, #3
 800fcb2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800fcb4:	230a      	movs	r3, #10
 800fcb6:	9342      	str	r3, [sp, #264]	@ 0x108
 800fcb8:	e078      	b.n	800fdac <__ssvfiscanf_r+0x1e8>
 800fcba:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800fcbc:	fb02 1103 	mla	r1, r2, r3, r1
 800fcc0:	3930      	subs	r1, #48	@ 0x30
 800fcc2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800fcc4:	464d      	mov	r5, r9
 800fcc6:	e7d2      	b.n	800fc6e <__ssvfiscanf_r+0xaa>
 800fcc8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800fccc:	2a20      	cmp	r2, #32
 800fcce:	d8ef      	bhi.n	800fcb0 <__ssvfiscanf_r+0xec>
 800fcd0:	a101      	add	r1, pc, #4	@ (adr r1, 800fcd8 <__ssvfiscanf_r+0x114>)
 800fcd2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fcd6:	bf00      	nop
 800fcd8:	0800fd8b 	.word	0x0800fd8b
 800fcdc:	0800fcb1 	.word	0x0800fcb1
 800fce0:	0800fcb1 	.word	0x0800fcb1
 800fce4:	0800fde5 	.word	0x0800fde5
 800fce8:	0800fcb1 	.word	0x0800fcb1
 800fcec:	0800fcb1 	.word	0x0800fcb1
 800fcf0:	0800fcb1 	.word	0x0800fcb1
 800fcf4:	0800fcb1 	.word	0x0800fcb1
 800fcf8:	0800fcb1 	.word	0x0800fcb1
 800fcfc:	0800fcb1 	.word	0x0800fcb1
 800fd00:	0800fcb1 	.word	0x0800fcb1
 800fd04:	0800fdfb 	.word	0x0800fdfb
 800fd08:	0800fde1 	.word	0x0800fde1
 800fd0c:	0800fd63 	.word	0x0800fd63
 800fd10:	0800fd63 	.word	0x0800fd63
 800fd14:	0800fd63 	.word	0x0800fd63
 800fd18:	0800fcb1 	.word	0x0800fcb1
 800fd1c:	0800fd9d 	.word	0x0800fd9d
 800fd20:	0800fcb1 	.word	0x0800fcb1
 800fd24:	0800fcb1 	.word	0x0800fcb1
 800fd28:	0800fcb1 	.word	0x0800fcb1
 800fd2c:	0800fcb1 	.word	0x0800fcb1
 800fd30:	0800fe0b 	.word	0x0800fe0b
 800fd34:	0800fda5 	.word	0x0800fda5
 800fd38:	0800fd83 	.word	0x0800fd83
 800fd3c:	0800fcb1 	.word	0x0800fcb1
 800fd40:	0800fcb1 	.word	0x0800fcb1
 800fd44:	0800fe07 	.word	0x0800fe07
 800fd48:	0800fcb1 	.word	0x0800fcb1
 800fd4c:	0800fde1 	.word	0x0800fde1
 800fd50:	0800fcb1 	.word	0x0800fcb1
 800fd54:	0800fcb1 	.word	0x0800fcb1
 800fd58:	0800fd8b 	.word	0x0800fd8b
 800fd5c:	3b45      	subs	r3, #69	@ 0x45
 800fd5e:	2b02      	cmp	r3, #2
 800fd60:	d8a6      	bhi.n	800fcb0 <__ssvfiscanf_r+0xec>
 800fd62:	2305      	movs	r3, #5
 800fd64:	e021      	b.n	800fdaa <__ssvfiscanf_r+0x1e6>
 800fd66:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fd68:	4621      	mov	r1, r4
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	4798      	blx	r3
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	f43f af66 	beq.w	800fc40 <__ssvfiscanf_r+0x7c>
 800fd74:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800fd76:	2800      	cmp	r0, #0
 800fd78:	f040 808b 	bne.w	800fe92 <__ssvfiscanf_r+0x2ce>
 800fd7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd80:	e08b      	b.n	800fe9a <__ssvfiscanf_r+0x2d6>
 800fd82:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800fd84:	f042 0220 	orr.w	r2, r2, #32
 800fd88:	9241      	str	r2, [sp, #260]	@ 0x104
 800fd8a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800fd8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fd90:	9241      	str	r2, [sp, #260]	@ 0x104
 800fd92:	2210      	movs	r2, #16
 800fd94:	2b6e      	cmp	r3, #110	@ 0x6e
 800fd96:	9242      	str	r2, [sp, #264]	@ 0x108
 800fd98:	d902      	bls.n	800fda0 <__ssvfiscanf_r+0x1dc>
 800fd9a:	e005      	b.n	800fda8 <__ssvfiscanf_r+0x1e4>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	9342      	str	r3, [sp, #264]	@ 0x108
 800fda0:	2303      	movs	r3, #3
 800fda2:	e002      	b.n	800fdaa <__ssvfiscanf_r+0x1e6>
 800fda4:	2308      	movs	r3, #8
 800fda6:	9342      	str	r3, [sp, #264]	@ 0x108
 800fda8:	2304      	movs	r3, #4
 800fdaa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800fdac:	6863      	ldr	r3, [r4, #4]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	dd39      	ble.n	800fe26 <__ssvfiscanf_r+0x262>
 800fdb2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800fdb4:	0659      	lsls	r1, r3, #25
 800fdb6:	d404      	bmi.n	800fdc2 <__ssvfiscanf_r+0x1fe>
 800fdb8:	6823      	ldr	r3, [r4, #0]
 800fdba:	781a      	ldrb	r2, [r3, #0]
 800fdbc:	5cba      	ldrb	r2, [r7, r2]
 800fdbe:	0712      	lsls	r2, r2, #28
 800fdc0:	d438      	bmi.n	800fe34 <__ssvfiscanf_r+0x270>
 800fdc2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800fdc4:	2b02      	cmp	r3, #2
 800fdc6:	dc47      	bgt.n	800fe58 <__ssvfiscanf_r+0x294>
 800fdc8:	466b      	mov	r3, sp
 800fdca:	4622      	mov	r2, r4
 800fdcc:	a941      	add	r1, sp, #260	@ 0x104
 800fdce:	4630      	mov	r0, r6
 800fdd0:	f000 f86c 	bl	800feac <_scanf_chars>
 800fdd4:	2801      	cmp	r0, #1
 800fdd6:	d064      	beq.n	800fea2 <__ssvfiscanf_r+0x2de>
 800fdd8:	2802      	cmp	r0, #2
 800fdda:	f47f af18 	bne.w	800fc0e <__ssvfiscanf_r+0x4a>
 800fdde:	e7c9      	b.n	800fd74 <__ssvfiscanf_r+0x1b0>
 800fde0:	220a      	movs	r2, #10
 800fde2:	e7d7      	b.n	800fd94 <__ssvfiscanf_r+0x1d0>
 800fde4:	4629      	mov	r1, r5
 800fde6:	4640      	mov	r0, r8
 800fde8:	f000 fa5a 	bl	80102a0 <__sccl>
 800fdec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800fdee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdf2:	9341      	str	r3, [sp, #260]	@ 0x104
 800fdf4:	4605      	mov	r5, r0
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	e7d7      	b.n	800fdaa <__ssvfiscanf_r+0x1e6>
 800fdfa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800fdfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe00:	9341      	str	r3, [sp, #260]	@ 0x104
 800fe02:	2300      	movs	r3, #0
 800fe04:	e7d1      	b.n	800fdaa <__ssvfiscanf_r+0x1e6>
 800fe06:	2302      	movs	r3, #2
 800fe08:	e7cf      	b.n	800fdaa <__ssvfiscanf_r+0x1e6>
 800fe0a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800fe0c:	06c3      	lsls	r3, r0, #27
 800fe0e:	f53f aefe 	bmi.w	800fc0e <__ssvfiscanf_r+0x4a>
 800fe12:	9b00      	ldr	r3, [sp, #0]
 800fe14:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800fe16:	1d19      	adds	r1, r3, #4
 800fe18:	9100      	str	r1, [sp, #0]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	07c0      	lsls	r0, r0, #31
 800fe1e:	bf4c      	ite	mi
 800fe20:	801a      	strhmi	r2, [r3, #0]
 800fe22:	601a      	strpl	r2, [r3, #0]
 800fe24:	e6f3      	b.n	800fc0e <__ssvfiscanf_r+0x4a>
 800fe26:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fe28:	4621      	mov	r1, r4
 800fe2a:	4630      	mov	r0, r6
 800fe2c:	4798      	blx	r3
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d0bf      	beq.n	800fdb2 <__ssvfiscanf_r+0x1ee>
 800fe32:	e79f      	b.n	800fd74 <__ssvfiscanf_r+0x1b0>
 800fe34:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800fe36:	3201      	adds	r2, #1
 800fe38:	9245      	str	r2, [sp, #276]	@ 0x114
 800fe3a:	6862      	ldr	r2, [r4, #4]
 800fe3c:	3a01      	subs	r2, #1
 800fe3e:	2a00      	cmp	r2, #0
 800fe40:	6062      	str	r2, [r4, #4]
 800fe42:	dd02      	ble.n	800fe4a <__ssvfiscanf_r+0x286>
 800fe44:	3301      	adds	r3, #1
 800fe46:	6023      	str	r3, [r4, #0]
 800fe48:	e7b6      	b.n	800fdb8 <__ssvfiscanf_r+0x1f4>
 800fe4a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fe4c:	4621      	mov	r1, r4
 800fe4e:	4630      	mov	r0, r6
 800fe50:	4798      	blx	r3
 800fe52:	2800      	cmp	r0, #0
 800fe54:	d0b0      	beq.n	800fdb8 <__ssvfiscanf_r+0x1f4>
 800fe56:	e78d      	b.n	800fd74 <__ssvfiscanf_r+0x1b0>
 800fe58:	2b04      	cmp	r3, #4
 800fe5a:	dc0f      	bgt.n	800fe7c <__ssvfiscanf_r+0x2b8>
 800fe5c:	466b      	mov	r3, sp
 800fe5e:	4622      	mov	r2, r4
 800fe60:	a941      	add	r1, sp, #260	@ 0x104
 800fe62:	4630      	mov	r0, r6
 800fe64:	f000 f87c 	bl	800ff60 <_scanf_i>
 800fe68:	e7b4      	b.n	800fdd4 <__ssvfiscanf_r+0x210>
 800fe6a:	bf00      	nop
 800fe6c:	0800fb15 	.word	0x0800fb15
 800fe70:	0800fb8b 	.word	0x0800fb8b
 800fe74:	080116b9 	.word	0x080116b9
 800fe78:	080117bf 	.word	0x080117bf
 800fe7c:	4b0a      	ldr	r3, [pc, #40]	@ (800fea8 <__ssvfiscanf_r+0x2e4>)
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	f43f aec5 	beq.w	800fc0e <__ssvfiscanf_r+0x4a>
 800fe84:	466b      	mov	r3, sp
 800fe86:	4622      	mov	r2, r4
 800fe88:	a941      	add	r1, sp, #260	@ 0x104
 800fe8a:	4630      	mov	r0, r6
 800fe8c:	f7fc fe30 	bl	800caf0 <_scanf_float>
 800fe90:	e7a0      	b.n	800fdd4 <__ssvfiscanf_r+0x210>
 800fe92:	89a3      	ldrh	r3, [r4, #12]
 800fe94:	065b      	lsls	r3, r3, #25
 800fe96:	f53f af71 	bmi.w	800fd7c <__ssvfiscanf_r+0x1b8>
 800fe9a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800fe9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fea2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800fea4:	e7f9      	b.n	800fe9a <__ssvfiscanf_r+0x2d6>
 800fea6:	bf00      	nop
 800fea8:	0800caf1 	.word	0x0800caf1

0800feac <_scanf_chars>:
 800feac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feb0:	4615      	mov	r5, r2
 800feb2:	688a      	ldr	r2, [r1, #8]
 800feb4:	4680      	mov	r8, r0
 800feb6:	460c      	mov	r4, r1
 800feb8:	b932      	cbnz	r2, 800fec8 <_scanf_chars+0x1c>
 800feba:	698a      	ldr	r2, [r1, #24]
 800febc:	2a00      	cmp	r2, #0
 800febe:	bf14      	ite	ne
 800fec0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800fec4:	2201      	moveq	r2, #1
 800fec6:	608a      	str	r2, [r1, #8]
 800fec8:	6822      	ldr	r2, [r4, #0]
 800feca:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ff5c <_scanf_chars+0xb0>
 800fece:	06d1      	lsls	r1, r2, #27
 800fed0:	bf5f      	itttt	pl
 800fed2:	681a      	ldrpl	r2, [r3, #0]
 800fed4:	1d11      	addpl	r1, r2, #4
 800fed6:	6019      	strpl	r1, [r3, #0]
 800fed8:	6816      	ldrpl	r6, [r2, #0]
 800feda:	2700      	movs	r7, #0
 800fedc:	69a0      	ldr	r0, [r4, #24]
 800fede:	b188      	cbz	r0, 800ff04 <_scanf_chars+0x58>
 800fee0:	2801      	cmp	r0, #1
 800fee2:	d107      	bne.n	800fef4 <_scanf_chars+0x48>
 800fee4:	682b      	ldr	r3, [r5, #0]
 800fee6:	781a      	ldrb	r2, [r3, #0]
 800fee8:	6963      	ldr	r3, [r4, #20]
 800feea:	5c9b      	ldrb	r3, [r3, r2]
 800feec:	b953      	cbnz	r3, 800ff04 <_scanf_chars+0x58>
 800feee:	2f00      	cmp	r7, #0
 800fef0:	d031      	beq.n	800ff56 <_scanf_chars+0xaa>
 800fef2:	e022      	b.n	800ff3a <_scanf_chars+0x8e>
 800fef4:	2802      	cmp	r0, #2
 800fef6:	d120      	bne.n	800ff3a <_scanf_chars+0x8e>
 800fef8:	682b      	ldr	r3, [r5, #0]
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ff00:	071b      	lsls	r3, r3, #28
 800ff02:	d41a      	bmi.n	800ff3a <_scanf_chars+0x8e>
 800ff04:	6823      	ldr	r3, [r4, #0]
 800ff06:	06da      	lsls	r2, r3, #27
 800ff08:	bf5e      	ittt	pl
 800ff0a:	682b      	ldrpl	r3, [r5, #0]
 800ff0c:	781b      	ldrbpl	r3, [r3, #0]
 800ff0e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ff12:	682a      	ldr	r2, [r5, #0]
 800ff14:	686b      	ldr	r3, [r5, #4]
 800ff16:	3201      	adds	r2, #1
 800ff18:	602a      	str	r2, [r5, #0]
 800ff1a:	68a2      	ldr	r2, [r4, #8]
 800ff1c:	3b01      	subs	r3, #1
 800ff1e:	3a01      	subs	r2, #1
 800ff20:	606b      	str	r3, [r5, #4]
 800ff22:	3701      	adds	r7, #1
 800ff24:	60a2      	str	r2, [r4, #8]
 800ff26:	b142      	cbz	r2, 800ff3a <_scanf_chars+0x8e>
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	dcd7      	bgt.n	800fedc <_scanf_chars+0x30>
 800ff2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ff30:	4629      	mov	r1, r5
 800ff32:	4640      	mov	r0, r8
 800ff34:	4798      	blx	r3
 800ff36:	2800      	cmp	r0, #0
 800ff38:	d0d0      	beq.n	800fedc <_scanf_chars+0x30>
 800ff3a:	6823      	ldr	r3, [r4, #0]
 800ff3c:	f013 0310 	ands.w	r3, r3, #16
 800ff40:	d105      	bne.n	800ff4e <_scanf_chars+0xa2>
 800ff42:	68e2      	ldr	r2, [r4, #12]
 800ff44:	3201      	adds	r2, #1
 800ff46:	60e2      	str	r2, [r4, #12]
 800ff48:	69a2      	ldr	r2, [r4, #24]
 800ff4a:	b102      	cbz	r2, 800ff4e <_scanf_chars+0xa2>
 800ff4c:	7033      	strb	r3, [r6, #0]
 800ff4e:	6923      	ldr	r3, [r4, #16]
 800ff50:	443b      	add	r3, r7
 800ff52:	6123      	str	r3, [r4, #16]
 800ff54:	2000      	movs	r0, #0
 800ff56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff5a:	bf00      	nop
 800ff5c:	080116b9 	.word	0x080116b9

0800ff60 <_scanf_i>:
 800ff60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff64:	4698      	mov	r8, r3
 800ff66:	4b74      	ldr	r3, [pc, #464]	@ (8010138 <_scanf_i+0x1d8>)
 800ff68:	460c      	mov	r4, r1
 800ff6a:	4682      	mov	sl, r0
 800ff6c:	4616      	mov	r6, r2
 800ff6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ff72:	b087      	sub	sp, #28
 800ff74:	ab03      	add	r3, sp, #12
 800ff76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ff7a:	4b70      	ldr	r3, [pc, #448]	@ (801013c <_scanf_i+0x1dc>)
 800ff7c:	69a1      	ldr	r1, [r4, #24]
 800ff7e:	4a70      	ldr	r2, [pc, #448]	@ (8010140 <_scanf_i+0x1e0>)
 800ff80:	2903      	cmp	r1, #3
 800ff82:	bf08      	it	eq
 800ff84:	461a      	moveq	r2, r3
 800ff86:	68a3      	ldr	r3, [r4, #8]
 800ff88:	9201      	str	r2, [sp, #4]
 800ff8a:	1e5a      	subs	r2, r3, #1
 800ff8c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ff90:	bf88      	it	hi
 800ff92:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ff96:	4627      	mov	r7, r4
 800ff98:	bf82      	ittt	hi
 800ff9a:	eb03 0905 	addhi.w	r9, r3, r5
 800ff9e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ffa2:	60a3      	strhi	r3, [r4, #8]
 800ffa4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ffa8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ffac:	bf98      	it	ls
 800ffae:	f04f 0900 	movls.w	r9, #0
 800ffb2:	6023      	str	r3, [r4, #0]
 800ffb4:	463d      	mov	r5, r7
 800ffb6:	f04f 0b00 	mov.w	fp, #0
 800ffba:	6831      	ldr	r1, [r6, #0]
 800ffbc:	ab03      	add	r3, sp, #12
 800ffbe:	7809      	ldrb	r1, [r1, #0]
 800ffc0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ffc4:	2202      	movs	r2, #2
 800ffc6:	f7f0 f903 	bl	80001d0 <memchr>
 800ffca:	b328      	cbz	r0, 8010018 <_scanf_i+0xb8>
 800ffcc:	f1bb 0f01 	cmp.w	fp, #1
 800ffd0:	d159      	bne.n	8010086 <_scanf_i+0x126>
 800ffd2:	6862      	ldr	r2, [r4, #4]
 800ffd4:	b92a      	cbnz	r2, 800ffe2 <_scanf_i+0x82>
 800ffd6:	6822      	ldr	r2, [r4, #0]
 800ffd8:	2108      	movs	r1, #8
 800ffda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ffde:	6061      	str	r1, [r4, #4]
 800ffe0:	6022      	str	r2, [r4, #0]
 800ffe2:	6822      	ldr	r2, [r4, #0]
 800ffe4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ffe8:	6022      	str	r2, [r4, #0]
 800ffea:	68a2      	ldr	r2, [r4, #8]
 800ffec:	1e51      	subs	r1, r2, #1
 800ffee:	60a1      	str	r1, [r4, #8]
 800fff0:	b192      	cbz	r2, 8010018 <_scanf_i+0xb8>
 800fff2:	6832      	ldr	r2, [r6, #0]
 800fff4:	1c51      	adds	r1, r2, #1
 800fff6:	6031      	str	r1, [r6, #0]
 800fff8:	7812      	ldrb	r2, [r2, #0]
 800fffa:	f805 2b01 	strb.w	r2, [r5], #1
 800fffe:	6872      	ldr	r2, [r6, #4]
 8010000:	3a01      	subs	r2, #1
 8010002:	2a00      	cmp	r2, #0
 8010004:	6072      	str	r2, [r6, #4]
 8010006:	dc07      	bgt.n	8010018 <_scanf_i+0xb8>
 8010008:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801000c:	4631      	mov	r1, r6
 801000e:	4650      	mov	r0, sl
 8010010:	4790      	blx	r2
 8010012:	2800      	cmp	r0, #0
 8010014:	f040 8085 	bne.w	8010122 <_scanf_i+0x1c2>
 8010018:	f10b 0b01 	add.w	fp, fp, #1
 801001c:	f1bb 0f03 	cmp.w	fp, #3
 8010020:	d1cb      	bne.n	800ffba <_scanf_i+0x5a>
 8010022:	6863      	ldr	r3, [r4, #4]
 8010024:	b90b      	cbnz	r3, 801002a <_scanf_i+0xca>
 8010026:	230a      	movs	r3, #10
 8010028:	6063      	str	r3, [r4, #4]
 801002a:	6863      	ldr	r3, [r4, #4]
 801002c:	4945      	ldr	r1, [pc, #276]	@ (8010144 <_scanf_i+0x1e4>)
 801002e:	6960      	ldr	r0, [r4, #20]
 8010030:	1ac9      	subs	r1, r1, r3
 8010032:	f000 f935 	bl	80102a0 <__sccl>
 8010036:	f04f 0b00 	mov.w	fp, #0
 801003a:	68a3      	ldr	r3, [r4, #8]
 801003c:	6822      	ldr	r2, [r4, #0]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d03d      	beq.n	80100be <_scanf_i+0x15e>
 8010042:	6831      	ldr	r1, [r6, #0]
 8010044:	6960      	ldr	r0, [r4, #20]
 8010046:	f891 c000 	ldrb.w	ip, [r1]
 801004a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801004e:	2800      	cmp	r0, #0
 8010050:	d035      	beq.n	80100be <_scanf_i+0x15e>
 8010052:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8010056:	d124      	bne.n	80100a2 <_scanf_i+0x142>
 8010058:	0510      	lsls	r0, r2, #20
 801005a:	d522      	bpl.n	80100a2 <_scanf_i+0x142>
 801005c:	f10b 0b01 	add.w	fp, fp, #1
 8010060:	f1b9 0f00 	cmp.w	r9, #0
 8010064:	d003      	beq.n	801006e <_scanf_i+0x10e>
 8010066:	3301      	adds	r3, #1
 8010068:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801006c:	60a3      	str	r3, [r4, #8]
 801006e:	6873      	ldr	r3, [r6, #4]
 8010070:	3b01      	subs	r3, #1
 8010072:	2b00      	cmp	r3, #0
 8010074:	6073      	str	r3, [r6, #4]
 8010076:	dd1b      	ble.n	80100b0 <_scanf_i+0x150>
 8010078:	6833      	ldr	r3, [r6, #0]
 801007a:	3301      	adds	r3, #1
 801007c:	6033      	str	r3, [r6, #0]
 801007e:	68a3      	ldr	r3, [r4, #8]
 8010080:	3b01      	subs	r3, #1
 8010082:	60a3      	str	r3, [r4, #8]
 8010084:	e7d9      	b.n	801003a <_scanf_i+0xda>
 8010086:	f1bb 0f02 	cmp.w	fp, #2
 801008a:	d1ae      	bne.n	800ffea <_scanf_i+0x8a>
 801008c:	6822      	ldr	r2, [r4, #0]
 801008e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8010092:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8010096:	d1bf      	bne.n	8010018 <_scanf_i+0xb8>
 8010098:	2110      	movs	r1, #16
 801009a:	6061      	str	r1, [r4, #4]
 801009c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80100a0:	e7a2      	b.n	800ffe8 <_scanf_i+0x88>
 80100a2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80100a6:	6022      	str	r2, [r4, #0]
 80100a8:	780b      	ldrb	r3, [r1, #0]
 80100aa:	f805 3b01 	strb.w	r3, [r5], #1
 80100ae:	e7de      	b.n	801006e <_scanf_i+0x10e>
 80100b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80100b4:	4631      	mov	r1, r6
 80100b6:	4650      	mov	r0, sl
 80100b8:	4798      	blx	r3
 80100ba:	2800      	cmp	r0, #0
 80100bc:	d0df      	beq.n	801007e <_scanf_i+0x11e>
 80100be:	6823      	ldr	r3, [r4, #0]
 80100c0:	05d9      	lsls	r1, r3, #23
 80100c2:	d50d      	bpl.n	80100e0 <_scanf_i+0x180>
 80100c4:	42bd      	cmp	r5, r7
 80100c6:	d909      	bls.n	80100dc <_scanf_i+0x17c>
 80100c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80100cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80100d0:	4632      	mov	r2, r6
 80100d2:	4650      	mov	r0, sl
 80100d4:	4798      	blx	r3
 80100d6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80100da:	464d      	mov	r5, r9
 80100dc:	42bd      	cmp	r5, r7
 80100de:	d028      	beq.n	8010132 <_scanf_i+0x1d2>
 80100e0:	6822      	ldr	r2, [r4, #0]
 80100e2:	f012 0210 	ands.w	r2, r2, #16
 80100e6:	d113      	bne.n	8010110 <_scanf_i+0x1b0>
 80100e8:	702a      	strb	r2, [r5, #0]
 80100ea:	6863      	ldr	r3, [r4, #4]
 80100ec:	9e01      	ldr	r6, [sp, #4]
 80100ee:	4639      	mov	r1, r7
 80100f0:	4650      	mov	r0, sl
 80100f2:	47b0      	blx	r6
 80100f4:	f8d8 3000 	ldr.w	r3, [r8]
 80100f8:	6821      	ldr	r1, [r4, #0]
 80100fa:	1d1a      	adds	r2, r3, #4
 80100fc:	f8c8 2000 	str.w	r2, [r8]
 8010100:	f011 0f20 	tst.w	r1, #32
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	d00f      	beq.n	8010128 <_scanf_i+0x1c8>
 8010108:	6018      	str	r0, [r3, #0]
 801010a:	68e3      	ldr	r3, [r4, #12]
 801010c:	3301      	adds	r3, #1
 801010e:	60e3      	str	r3, [r4, #12]
 8010110:	6923      	ldr	r3, [r4, #16]
 8010112:	1bed      	subs	r5, r5, r7
 8010114:	445d      	add	r5, fp
 8010116:	442b      	add	r3, r5
 8010118:	6123      	str	r3, [r4, #16]
 801011a:	2000      	movs	r0, #0
 801011c:	b007      	add	sp, #28
 801011e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010122:	f04f 0b00 	mov.w	fp, #0
 8010126:	e7ca      	b.n	80100be <_scanf_i+0x15e>
 8010128:	07ca      	lsls	r2, r1, #31
 801012a:	bf4c      	ite	mi
 801012c:	8018      	strhmi	r0, [r3, #0]
 801012e:	6018      	strpl	r0, [r3, #0]
 8010130:	e7eb      	b.n	801010a <_scanf_i+0x1aa>
 8010132:	2001      	movs	r0, #1
 8010134:	e7f2      	b.n	801011c <_scanf_i+0x1bc>
 8010136:	bf00      	nop
 8010138:	080113f0 	.word	0x080113f0
 801013c:	0800f861 	.word	0x0800f861
 8010140:	08010c65 	.word	0x08010c65
 8010144:	080117da 	.word	0x080117da

08010148 <__sflush_r>:
 8010148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801014c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010150:	0716      	lsls	r6, r2, #28
 8010152:	4605      	mov	r5, r0
 8010154:	460c      	mov	r4, r1
 8010156:	d454      	bmi.n	8010202 <__sflush_r+0xba>
 8010158:	684b      	ldr	r3, [r1, #4]
 801015a:	2b00      	cmp	r3, #0
 801015c:	dc02      	bgt.n	8010164 <__sflush_r+0x1c>
 801015e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010160:	2b00      	cmp	r3, #0
 8010162:	dd48      	ble.n	80101f6 <__sflush_r+0xae>
 8010164:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010166:	2e00      	cmp	r6, #0
 8010168:	d045      	beq.n	80101f6 <__sflush_r+0xae>
 801016a:	2300      	movs	r3, #0
 801016c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010170:	682f      	ldr	r7, [r5, #0]
 8010172:	6a21      	ldr	r1, [r4, #32]
 8010174:	602b      	str	r3, [r5, #0]
 8010176:	d030      	beq.n	80101da <__sflush_r+0x92>
 8010178:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801017a:	89a3      	ldrh	r3, [r4, #12]
 801017c:	0759      	lsls	r1, r3, #29
 801017e:	d505      	bpl.n	801018c <__sflush_r+0x44>
 8010180:	6863      	ldr	r3, [r4, #4]
 8010182:	1ad2      	subs	r2, r2, r3
 8010184:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010186:	b10b      	cbz	r3, 801018c <__sflush_r+0x44>
 8010188:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801018a:	1ad2      	subs	r2, r2, r3
 801018c:	2300      	movs	r3, #0
 801018e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010190:	6a21      	ldr	r1, [r4, #32]
 8010192:	4628      	mov	r0, r5
 8010194:	47b0      	blx	r6
 8010196:	1c43      	adds	r3, r0, #1
 8010198:	89a3      	ldrh	r3, [r4, #12]
 801019a:	d106      	bne.n	80101aa <__sflush_r+0x62>
 801019c:	6829      	ldr	r1, [r5, #0]
 801019e:	291d      	cmp	r1, #29
 80101a0:	d82b      	bhi.n	80101fa <__sflush_r+0xb2>
 80101a2:	4a2a      	ldr	r2, [pc, #168]	@ (801024c <__sflush_r+0x104>)
 80101a4:	410a      	asrs	r2, r1
 80101a6:	07d6      	lsls	r6, r2, #31
 80101a8:	d427      	bmi.n	80101fa <__sflush_r+0xb2>
 80101aa:	2200      	movs	r2, #0
 80101ac:	6062      	str	r2, [r4, #4]
 80101ae:	04d9      	lsls	r1, r3, #19
 80101b0:	6922      	ldr	r2, [r4, #16]
 80101b2:	6022      	str	r2, [r4, #0]
 80101b4:	d504      	bpl.n	80101c0 <__sflush_r+0x78>
 80101b6:	1c42      	adds	r2, r0, #1
 80101b8:	d101      	bne.n	80101be <__sflush_r+0x76>
 80101ba:	682b      	ldr	r3, [r5, #0]
 80101bc:	b903      	cbnz	r3, 80101c0 <__sflush_r+0x78>
 80101be:	6560      	str	r0, [r4, #84]	@ 0x54
 80101c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101c2:	602f      	str	r7, [r5, #0]
 80101c4:	b1b9      	cbz	r1, 80101f6 <__sflush_r+0xae>
 80101c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101ca:	4299      	cmp	r1, r3
 80101cc:	d002      	beq.n	80101d4 <__sflush_r+0x8c>
 80101ce:	4628      	mov	r0, r5
 80101d0:	f7fd ff12 	bl	800dff8 <_free_r>
 80101d4:	2300      	movs	r3, #0
 80101d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80101d8:	e00d      	b.n	80101f6 <__sflush_r+0xae>
 80101da:	2301      	movs	r3, #1
 80101dc:	4628      	mov	r0, r5
 80101de:	47b0      	blx	r6
 80101e0:	4602      	mov	r2, r0
 80101e2:	1c50      	adds	r0, r2, #1
 80101e4:	d1c9      	bne.n	801017a <__sflush_r+0x32>
 80101e6:	682b      	ldr	r3, [r5, #0]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d0c6      	beq.n	801017a <__sflush_r+0x32>
 80101ec:	2b1d      	cmp	r3, #29
 80101ee:	d001      	beq.n	80101f4 <__sflush_r+0xac>
 80101f0:	2b16      	cmp	r3, #22
 80101f2:	d11e      	bne.n	8010232 <__sflush_r+0xea>
 80101f4:	602f      	str	r7, [r5, #0]
 80101f6:	2000      	movs	r0, #0
 80101f8:	e022      	b.n	8010240 <__sflush_r+0xf8>
 80101fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101fe:	b21b      	sxth	r3, r3
 8010200:	e01b      	b.n	801023a <__sflush_r+0xf2>
 8010202:	690f      	ldr	r7, [r1, #16]
 8010204:	2f00      	cmp	r7, #0
 8010206:	d0f6      	beq.n	80101f6 <__sflush_r+0xae>
 8010208:	0793      	lsls	r3, r2, #30
 801020a:	680e      	ldr	r6, [r1, #0]
 801020c:	bf08      	it	eq
 801020e:	694b      	ldreq	r3, [r1, #20]
 8010210:	600f      	str	r7, [r1, #0]
 8010212:	bf18      	it	ne
 8010214:	2300      	movne	r3, #0
 8010216:	eba6 0807 	sub.w	r8, r6, r7
 801021a:	608b      	str	r3, [r1, #8]
 801021c:	f1b8 0f00 	cmp.w	r8, #0
 8010220:	dde9      	ble.n	80101f6 <__sflush_r+0xae>
 8010222:	6a21      	ldr	r1, [r4, #32]
 8010224:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010226:	4643      	mov	r3, r8
 8010228:	463a      	mov	r2, r7
 801022a:	4628      	mov	r0, r5
 801022c:	47b0      	blx	r6
 801022e:	2800      	cmp	r0, #0
 8010230:	dc08      	bgt.n	8010244 <__sflush_r+0xfc>
 8010232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801023a:	81a3      	strh	r3, [r4, #12]
 801023c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010244:	4407      	add	r7, r0
 8010246:	eba8 0800 	sub.w	r8, r8, r0
 801024a:	e7e7      	b.n	801021c <__sflush_r+0xd4>
 801024c:	dfbffffe 	.word	0xdfbffffe

08010250 <_fflush_r>:
 8010250:	b538      	push	{r3, r4, r5, lr}
 8010252:	690b      	ldr	r3, [r1, #16]
 8010254:	4605      	mov	r5, r0
 8010256:	460c      	mov	r4, r1
 8010258:	b913      	cbnz	r3, 8010260 <_fflush_r+0x10>
 801025a:	2500      	movs	r5, #0
 801025c:	4628      	mov	r0, r5
 801025e:	bd38      	pop	{r3, r4, r5, pc}
 8010260:	b118      	cbz	r0, 801026a <_fflush_r+0x1a>
 8010262:	6a03      	ldr	r3, [r0, #32]
 8010264:	b90b      	cbnz	r3, 801026a <_fflush_r+0x1a>
 8010266:	f7fc fee3 	bl	800d030 <__sinit>
 801026a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d0f3      	beq.n	801025a <_fflush_r+0xa>
 8010272:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010274:	07d0      	lsls	r0, r2, #31
 8010276:	d404      	bmi.n	8010282 <_fflush_r+0x32>
 8010278:	0599      	lsls	r1, r3, #22
 801027a:	d402      	bmi.n	8010282 <_fflush_r+0x32>
 801027c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801027e:	f7fd f864 	bl	800d34a <__retarget_lock_acquire_recursive>
 8010282:	4628      	mov	r0, r5
 8010284:	4621      	mov	r1, r4
 8010286:	f7ff ff5f 	bl	8010148 <__sflush_r>
 801028a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801028c:	07da      	lsls	r2, r3, #31
 801028e:	4605      	mov	r5, r0
 8010290:	d4e4      	bmi.n	801025c <_fflush_r+0xc>
 8010292:	89a3      	ldrh	r3, [r4, #12]
 8010294:	059b      	lsls	r3, r3, #22
 8010296:	d4e1      	bmi.n	801025c <_fflush_r+0xc>
 8010298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801029a:	f7fd f857 	bl	800d34c <__retarget_lock_release_recursive>
 801029e:	e7dd      	b.n	801025c <_fflush_r+0xc>

080102a0 <__sccl>:
 80102a0:	b570      	push	{r4, r5, r6, lr}
 80102a2:	780b      	ldrb	r3, [r1, #0]
 80102a4:	4604      	mov	r4, r0
 80102a6:	2b5e      	cmp	r3, #94	@ 0x5e
 80102a8:	bf0b      	itete	eq
 80102aa:	784b      	ldrbeq	r3, [r1, #1]
 80102ac:	1c4a      	addne	r2, r1, #1
 80102ae:	1c8a      	addeq	r2, r1, #2
 80102b0:	2100      	movne	r1, #0
 80102b2:	bf08      	it	eq
 80102b4:	2101      	moveq	r1, #1
 80102b6:	3801      	subs	r0, #1
 80102b8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80102bc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80102c0:	42a8      	cmp	r0, r5
 80102c2:	d1fb      	bne.n	80102bc <__sccl+0x1c>
 80102c4:	b90b      	cbnz	r3, 80102ca <__sccl+0x2a>
 80102c6:	1e50      	subs	r0, r2, #1
 80102c8:	bd70      	pop	{r4, r5, r6, pc}
 80102ca:	f081 0101 	eor.w	r1, r1, #1
 80102ce:	54e1      	strb	r1, [r4, r3]
 80102d0:	4610      	mov	r0, r2
 80102d2:	4602      	mov	r2, r0
 80102d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80102d8:	2d2d      	cmp	r5, #45	@ 0x2d
 80102da:	d005      	beq.n	80102e8 <__sccl+0x48>
 80102dc:	2d5d      	cmp	r5, #93	@ 0x5d
 80102de:	d016      	beq.n	801030e <__sccl+0x6e>
 80102e0:	2d00      	cmp	r5, #0
 80102e2:	d0f1      	beq.n	80102c8 <__sccl+0x28>
 80102e4:	462b      	mov	r3, r5
 80102e6:	e7f2      	b.n	80102ce <__sccl+0x2e>
 80102e8:	7846      	ldrb	r6, [r0, #1]
 80102ea:	2e5d      	cmp	r6, #93	@ 0x5d
 80102ec:	d0fa      	beq.n	80102e4 <__sccl+0x44>
 80102ee:	42b3      	cmp	r3, r6
 80102f0:	dcf8      	bgt.n	80102e4 <__sccl+0x44>
 80102f2:	3002      	adds	r0, #2
 80102f4:	461a      	mov	r2, r3
 80102f6:	3201      	adds	r2, #1
 80102f8:	4296      	cmp	r6, r2
 80102fa:	54a1      	strb	r1, [r4, r2]
 80102fc:	dcfb      	bgt.n	80102f6 <__sccl+0x56>
 80102fe:	1af2      	subs	r2, r6, r3
 8010300:	3a01      	subs	r2, #1
 8010302:	1c5d      	adds	r5, r3, #1
 8010304:	42b3      	cmp	r3, r6
 8010306:	bfa8      	it	ge
 8010308:	2200      	movge	r2, #0
 801030a:	18ab      	adds	r3, r5, r2
 801030c:	e7e1      	b.n	80102d2 <__sccl+0x32>
 801030e:	4610      	mov	r0, r2
 8010310:	e7da      	b.n	80102c8 <__sccl+0x28>

08010312 <__submore>:
 8010312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010316:	460c      	mov	r4, r1
 8010318:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801031a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801031e:	4299      	cmp	r1, r3
 8010320:	d11d      	bne.n	801035e <__submore+0x4c>
 8010322:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010326:	f7fd fedb 	bl	800e0e0 <_malloc_r>
 801032a:	b918      	cbnz	r0, 8010334 <__submore+0x22>
 801032c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010338:	63a3      	str	r3, [r4, #56]	@ 0x38
 801033a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801033e:	6360      	str	r0, [r4, #52]	@ 0x34
 8010340:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8010344:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010348:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801034c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010350:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8010354:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8010358:	6020      	str	r0, [r4, #0]
 801035a:	2000      	movs	r0, #0
 801035c:	e7e8      	b.n	8010330 <__submore+0x1e>
 801035e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8010360:	0077      	lsls	r7, r6, #1
 8010362:	463a      	mov	r2, r7
 8010364:	f000 fbe1 	bl	8010b2a <_realloc_r>
 8010368:	4605      	mov	r5, r0
 801036a:	2800      	cmp	r0, #0
 801036c:	d0de      	beq.n	801032c <__submore+0x1a>
 801036e:	eb00 0806 	add.w	r8, r0, r6
 8010372:	4601      	mov	r1, r0
 8010374:	4632      	mov	r2, r6
 8010376:	4640      	mov	r0, r8
 8010378:	f000 f842 	bl	8010400 <memcpy>
 801037c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8010380:	f8c4 8000 	str.w	r8, [r4]
 8010384:	e7e9      	b.n	801035a <__submore+0x48>

08010386 <memmove>:
 8010386:	4288      	cmp	r0, r1
 8010388:	b510      	push	{r4, lr}
 801038a:	eb01 0402 	add.w	r4, r1, r2
 801038e:	d902      	bls.n	8010396 <memmove+0x10>
 8010390:	4284      	cmp	r4, r0
 8010392:	4623      	mov	r3, r4
 8010394:	d807      	bhi.n	80103a6 <memmove+0x20>
 8010396:	1e43      	subs	r3, r0, #1
 8010398:	42a1      	cmp	r1, r4
 801039a:	d008      	beq.n	80103ae <memmove+0x28>
 801039c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103a4:	e7f8      	b.n	8010398 <memmove+0x12>
 80103a6:	4402      	add	r2, r0
 80103a8:	4601      	mov	r1, r0
 80103aa:	428a      	cmp	r2, r1
 80103ac:	d100      	bne.n	80103b0 <memmove+0x2a>
 80103ae:	bd10      	pop	{r4, pc}
 80103b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103b8:	e7f7      	b.n	80103aa <memmove+0x24>

080103ba <strncmp>:
 80103ba:	b510      	push	{r4, lr}
 80103bc:	b16a      	cbz	r2, 80103da <strncmp+0x20>
 80103be:	3901      	subs	r1, #1
 80103c0:	1884      	adds	r4, r0, r2
 80103c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d103      	bne.n	80103d6 <strncmp+0x1c>
 80103ce:	42a0      	cmp	r0, r4
 80103d0:	d001      	beq.n	80103d6 <strncmp+0x1c>
 80103d2:	2a00      	cmp	r2, #0
 80103d4:	d1f5      	bne.n	80103c2 <strncmp+0x8>
 80103d6:	1ad0      	subs	r0, r2, r3
 80103d8:	bd10      	pop	{r4, pc}
 80103da:	4610      	mov	r0, r2
 80103dc:	e7fc      	b.n	80103d8 <strncmp+0x1e>
	...

080103e0 <_sbrk_r>:
 80103e0:	b538      	push	{r3, r4, r5, lr}
 80103e2:	4d06      	ldr	r5, [pc, #24]	@ (80103fc <_sbrk_r+0x1c>)
 80103e4:	2300      	movs	r3, #0
 80103e6:	4604      	mov	r4, r0
 80103e8:	4608      	mov	r0, r1
 80103ea:	602b      	str	r3, [r5, #0]
 80103ec:	f7f1 fb74 	bl	8001ad8 <_sbrk>
 80103f0:	1c43      	adds	r3, r0, #1
 80103f2:	d102      	bne.n	80103fa <_sbrk_r+0x1a>
 80103f4:	682b      	ldr	r3, [r5, #0]
 80103f6:	b103      	cbz	r3, 80103fa <_sbrk_r+0x1a>
 80103f8:	6023      	str	r3, [r4, #0]
 80103fa:	bd38      	pop	{r3, r4, r5, pc}
 80103fc:	200023a4 	.word	0x200023a4

08010400 <memcpy>:
 8010400:	440a      	add	r2, r1
 8010402:	4291      	cmp	r1, r2
 8010404:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010408:	d100      	bne.n	801040c <memcpy+0xc>
 801040a:	4770      	bx	lr
 801040c:	b510      	push	{r4, lr}
 801040e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010416:	4291      	cmp	r1, r2
 8010418:	d1f9      	bne.n	801040e <memcpy+0xe>
 801041a:	bd10      	pop	{r4, pc}
 801041c:	0000      	movs	r0, r0
	...

08010420 <nan>:
 8010420:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010428 <nan+0x8>
 8010424:	4770      	bx	lr
 8010426:	bf00      	nop
 8010428:	00000000 	.word	0x00000000
 801042c:	7ff80000 	.word	0x7ff80000

08010430 <__assert_func>:
 8010430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010432:	4614      	mov	r4, r2
 8010434:	461a      	mov	r2, r3
 8010436:	4b09      	ldr	r3, [pc, #36]	@ (801045c <__assert_func+0x2c>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4605      	mov	r5, r0
 801043c:	68d8      	ldr	r0, [r3, #12]
 801043e:	b954      	cbnz	r4, 8010456 <__assert_func+0x26>
 8010440:	4b07      	ldr	r3, [pc, #28]	@ (8010460 <__assert_func+0x30>)
 8010442:	461c      	mov	r4, r3
 8010444:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010448:	9100      	str	r1, [sp, #0]
 801044a:	462b      	mov	r3, r5
 801044c:	4905      	ldr	r1, [pc, #20]	@ (8010464 <__assert_func+0x34>)
 801044e:	f000 fc19 	bl	8010c84 <fiprintf>
 8010452:	f000 fc29 	bl	8010ca8 <abort>
 8010456:	4b04      	ldr	r3, [pc, #16]	@ (8010468 <__assert_func+0x38>)
 8010458:	e7f4      	b.n	8010444 <__assert_func+0x14>
 801045a:	bf00      	nop
 801045c:	200001b4 	.word	0x200001b4
 8010460:	08011828 	.word	0x08011828
 8010464:	080117fa 	.word	0x080117fa
 8010468:	080117ed 	.word	0x080117ed

0801046c <_calloc_r>:
 801046c:	b570      	push	{r4, r5, r6, lr}
 801046e:	fba1 5402 	umull	r5, r4, r1, r2
 8010472:	b93c      	cbnz	r4, 8010484 <_calloc_r+0x18>
 8010474:	4629      	mov	r1, r5
 8010476:	f7fd fe33 	bl	800e0e0 <_malloc_r>
 801047a:	4606      	mov	r6, r0
 801047c:	b928      	cbnz	r0, 801048a <_calloc_r+0x1e>
 801047e:	2600      	movs	r6, #0
 8010480:	4630      	mov	r0, r6
 8010482:	bd70      	pop	{r4, r5, r6, pc}
 8010484:	220c      	movs	r2, #12
 8010486:	6002      	str	r2, [r0, #0]
 8010488:	e7f9      	b.n	801047e <_calloc_r+0x12>
 801048a:	462a      	mov	r2, r5
 801048c:	4621      	mov	r1, r4
 801048e:	f7fc fec8 	bl	800d222 <memset>
 8010492:	e7f5      	b.n	8010480 <_calloc_r+0x14>

08010494 <rshift>:
 8010494:	6903      	ldr	r3, [r0, #16]
 8010496:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801049a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801049e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80104a2:	f100 0414 	add.w	r4, r0, #20
 80104a6:	dd45      	ble.n	8010534 <rshift+0xa0>
 80104a8:	f011 011f 	ands.w	r1, r1, #31
 80104ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80104b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80104b4:	d10c      	bne.n	80104d0 <rshift+0x3c>
 80104b6:	f100 0710 	add.w	r7, r0, #16
 80104ba:	4629      	mov	r1, r5
 80104bc:	42b1      	cmp	r1, r6
 80104be:	d334      	bcc.n	801052a <rshift+0x96>
 80104c0:	1a9b      	subs	r3, r3, r2
 80104c2:	009b      	lsls	r3, r3, #2
 80104c4:	1eea      	subs	r2, r5, #3
 80104c6:	4296      	cmp	r6, r2
 80104c8:	bf38      	it	cc
 80104ca:	2300      	movcc	r3, #0
 80104cc:	4423      	add	r3, r4
 80104ce:	e015      	b.n	80104fc <rshift+0x68>
 80104d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80104d4:	f1c1 0820 	rsb	r8, r1, #32
 80104d8:	40cf      	lsrs	r7, r1
 80104da:	f105 0e04 	add.w	lr, r5, #4
 80104de:	46a1      	mov	r9, r4
 80104e0:	4576      	cmp	r6, lr
 80104e2:	46f4      	mov	ip, lr
 80104e4:	d815      	bhi.n	8010512 <rshift+0x7e>
 80104e6:	1a9a      	subs	r2, r3, r2
 80104e8:	0092      	lsls	r2, r2, #2
 80104ea:	3a04      	subs	r2, #4
 80104ec:	3501      	adds	r5, #1
 80104ee:	42ae      	cmp	r6, r5
 80104f0:	bf38      	it	cc
 80104f2:	2200      	movcc	r2, #0
 80104f4:	18a3      	adds	r3, r4, r2
 80104f6:	50a7      	str	r7, [r4, r2]
 80104f8:	b107      	cbz	r7, 80104fc <rshift+0x68>
 80104fa:	3304      	adds	r3, #4
 80104fc:	1b1a      	subs	r2, r3, r4
 80104fe:	42a3      	cmp	r3, r4
 8010500:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010504:	bf08      	it	eq
 8010506:	2300      	moveq	r3, #0
 8010508:	6102      	str	r2, [r0, #16]
 801050a:	bf08      	it	eq
 801050c:	6143      	streq	r3, [r0, #20]
 801050e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010512:	f8dc c000 	ldr.w	ip, [ip]
 8010516:	fa0c fc08 	lsl.w	ip, ip, r8
 801051a:	ea4c 0707 	orr.w	r7, ip, r7
 801051e:	f849 7b04 	str.w	r7, [r9], #4
 8010522:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010526:	40cf      	lsrs	r7, r1
 8010528:	e7da      	b.n	80104e0 <rshift+0x4c>
 801052a:	f851 cb04 	ldr.w	ip, [r1], #4
 801052e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010532:	e7c3      	b.n	80104bc <rshift+0x28>
 8010534:	4623      	mov	r3, r4
 8010536:	e7e1      	b.n	80104fc <rshift+0x68>

08010538 <__hexdig_fun>:
 8010538:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801053c:	2b09      	cmp	r3, #9
 801053e:	d802      	bhi.n	8010546 <__hexdig_fun+0xe>
 8010540:	3820      	subs	r0, #32
 8010542:	b2c0      	uxtb	r0, r0
 8010544:	4770      	bx	lr
 8010546:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801054a:	2b05      	cmp	r3, #5
 801054c:	d801      	bhi.n	8010552 <__hexdig_fun+0x1a>
 801054e:	3847      	subs	r0, #71	@ 0x47
 8010550:	e7f7      	b.n	8010542 <__hexdig_fun+0xa>
 8010552:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010556:	2b05      	cmp	r3, #5
 8010558:	d801      	bhi.n	801055e <__hexdig_fun+0x26>
 801055a:	3827      	subs	r0, #39	@ 0x27
 801055c:	e7f1      	b.n	8010542 <__hexdig_fun+0xa>
 801055e:	2000      	movs	r0, #0
 8010560:	4770      	bx	lr
	...

08010564 <__gethex>:
 8010564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010568:	b085      	sub	sp, #20
 801056a:	468a      	mov	sl, r1
 801056c:	9302      	str	r3, [sp, #8]
 801056e:	680b      	ldr	r3, [r1, #0]
 8010570:	9001      	str	r0, [sp, #4]
 8010572:	4690      	mov	r8, r2
 8010574:	1c9c      	adds	r4, r3, #2
 8010576:	46a1      	mov	r9, r4
 8010578:	f814 0b01 	ldrb.w	r0, [r4], #1
 801057c:	2830      	cmp	r0, #48	@ 0x30
 801057e:	d0fa      	beq.n	8010576 <__gethex+0x12>
 8010580:	eba9 0303 	sub.w	r3, r9, r3
 8010584:	f1a3 0b02 	sub.w	fp, r3, #2
 8010588:	f7ff ffd6 	bl	8010538 <__hexdig_fun>
 801058c:	4605      	mov	r5, r0
 801058e:	2800      	cmp	r0, #0
 8010590:	d168      	bne.n	8010664 <__gethex+0x100>
 8010592:	49a0      	ldr	r1, [pc, #640]	@ (8010814 <__gethex+0x2b0>)
 8010594:	2201      	movs	r2, #1
 8010596:	4648      	mov	r0, r9
 8010598:	f7ff ff0f 	bl	80103ba <strncmp>
 801059c:	4607      	mov	r7, r0
 801059e:	2800      	cmp	r0, #0
 80105a0:	d167      	bne.n	8010672 <__gethex+0x10e>
 80105a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80105a6:	4626      	mov	r6, r4
 80105a8:	f7ff ffc6 	bl	8010538 <__hexdig_fun>
 80105ac:	2800      	cmp	r0, #0
 80105ae:	d062      	beq.n	8010676 <__gethex+0x112>
 80105b0:	4623      	mov	r3, r4
 80105b2:	7818      	ldrb	r0, [r3, #0]
 80105b4:	2830      	cmp	r0, #48	@ 0x30
 80105b6:	4699      	mov	r9, r3
 80105b8:	f103 0301 	add.w	r3, r3, #1
 80105bc:	d0f9      	beq.n	80105b2 <__gethex+0x4e>
 80105be:	f7ff ffbb 	bl	8010538 <__hexdig_fun>
 80105c2:	fab0 f580 	clz	r5, r0
 80105c6:	096d      	lsrs	r5, r5, #5
 80105c8:	f04f 0b01 	mov.w	fp, #1
 80105cc:	464a      	mov	r2, r9
 80105ce:	4616      	mov	r6, r2
 80105d0:	3201      	adds	r2, #1
 80105d2:	7830      	ldrb	r0, [r6, #0]
 80105d4:	f7ff ffb0 	bl	8010538 <__hexdig_fun>
 80105d8:	2800      	cmp	r0, #0
 80105da:	d1f8      	bne.n	80105ce <__gethex+0x6a>
 80105dc:	498d      	ldr	r1, [pc, #564]	@ (8010814 <__gethex+0x2b0>)
 80105de:	2201      	movs	r2, #1
 80105e0:	4630      	mov	r0, r6
 80105e2:	f7ff feea 	bl	80103ba <strncmp>
 80105e6:	2800      	cmp	r0, #0
 80105e8:	d13f      	bne.n	801066a <__gethex+0x106>
 80105ea:	b944      	cbnz	r4, 80105fe <__gethex+0x9a>
 80105ec:	1c74      	adds	r4, r6, #1
 80105ee:	4622      	mov	r2, r4
 80105f0:	4616      	mov	r6, r2
 80105f2:	3201      	adds	r2, #1
 80105f4:	7830      	ldrb	r0, [r6, #0]
 80105f6:	f7ff ff9f 	bl	8010538 <__hexdig_fun>
 80105fa:	2800      	cmp	r0, #0
 80105fc:	d1f8      	bne.n	80105f0 <__gethex+0x8c>
 80105fe:	1ba4      	subs	r4, r4, r6
 8010600:	00a7      	lsls	r7, r4, #2
 8010602:	7833      	ldrb	r3, [r6, #0]
 8010604:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010608:	2b50      	cmp	r3, #80	@ 0x50
 801060a:	d13e      	bne.n	801068a <__gethex+0x126>
 801060c:	7873      	ldrb	r3, [r6, #1]
 801060e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010610:	d033      	beq.n	801067a <__gethex+0x116>
 8010612:	2b2d      	cmp	r3, #45	@ 0x2d
 8010614:	d034      	beq.n	8010680 <__gethex+0x11c>
 8010616:	1c71      	adds	r1, r6, #1
 8010618:	2400      	movs	r4, #0
 801061a:	7808      	ldrb	r0, [r1, #0]
 801061c:	f7ff ff8c 	bl	8010538 <__hexdig_fun>
 8010620:	1e43      	subs	r3, r0, #1
 8010622:	b2db      	uxtb	r3, r3
 8010624:	2b18      	cmp	r3, #24
 8010626:	d830      	bhi.n	801068a <__gethex+0x126>
 8010628:	f1a0 0210 	sub.w	r2, r0, #16
 801062c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010630:	f7ff ff82 	bl	8010538 <__hexdig_fun>
 8010634:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8010638:	fa5f fc8c 	uxtb.w	ip, ip
 801063c:	f1bc 0f18 	cmp.w	ip, #24
 8010640:	f04f 030a 	mov.w	r3, #10
 8010644:	d91e      	bls.n	8010684 <__gethex+0x120>
 8010646:	b104      	cbz	r4, 801064a <__gethex+0xe6>
 8010648:	4252      	negs	r2, r2
 801064a:	4417      	add	r7, r2
 801064c:	f8ca 1000 	str.w	r1, [sl]
 8010650:	b1ed      	cbz	r5, 801068e <__gethex+0x12a>
 8010652:	f1bb 0f00 	cmp.w	fp, #0
 8010656:	bf0c      	ite	eq
 8010658:	2506      	moveq	r5, #6
 801065a:	2500      	movne	r5, #0
 801065c:	4628      	mov	r0, r5
 801065e:	b005      	add	sp, #20
 8010660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010664:	2500      	movs	r5, #0
 8010666:	462c      	mov	r4, r5
 8010668:	e7b0      	b.n	80105cc <__gethex+0x68>
 801066a:	2c00      	cmp	r4, #0
 801066c:	d1c7      	bne.n	80105fe <__gethex+0x9a>
 801066e:	4627      	mov	r7, r4
 8010670:	e7c7      	b.n	8010602 <__gethex+0x9e>
 8010672:	464e      	mov	r6, r9
 8010674:	462f      	mov	r7, r5
 8010676:	2501      	movs	r5, #1
 8010678:	e7c3      	b.n	8010602 <__gethex+0x9e>
 801067a:	2400      	movs	r4, #0
 801067c:	1cb1      	adds	r1, r6, #2
 801067e:	e7cc      	b.n	801061a <__gethex+0xb6>
 8010680:	2401      	movs	r4, #1
 8010682:	e7fb      	b.n	801067c <__gethex+0x118>
 8010684:	fb03 0002 	mla	r0, r3, r2, r0
 8010688:	e7ce      	b.n	8010628 <__gethex+0xc4>
 801068a:	4631      	mov	r1, r6
 801068c:	e7de      	b.n	801064c <__gethex+0xe8>
 801068e:	eba6 0309 	sub.w	r3, r6, r9
 8010692:	3b01      	subs	r3, #1
 8010694:	4629      	mov	r1, r5
 8010696:	2b07      	cmp	r3, #7
 8010698:	dc0a      	bgt.n	80106b0 <__gethex+0x14c>
 801069a:	9801      	ldr	r0, [sp, #4]
 801069c:	f7fd fdac 	bl	800e1f8 <_Balloc>
 80106a0:	4604      	mov	r4, r0
 80106a2:	b940      	cbnz	r0, 80106b6 <__gethex+0x152>
 80106a4:	4b5c      	ldr	r3, [pc, #368]	@ (8010818 <__gethex+0x2b4>)
 80106a6:	4602      	mov	r2, r0
 80106a8:	21e4      	movs	r1, #228	@ 0xe4
 80106aa:	485c      	ldr	r0, [pc, #368]	@ (801081c <__gethex+0x2b8>)
 80106ac:	f7ff fec0 	bl	8010430 <__assert_func>
 80106b0:	3101      	adds	r1, #1
 80106b2:	105b      	asrs	r3, r3, #1
 80106b4:	e7ef      	b.n	8010696 <__gethex+0x132>
 80106b6:	f100 0a14 	add.w	sl, r0, #20
 80106ba:	2300      	movs	r3, #0
 80106bc:	4655      	mov	r5, sl
 80106be:	469b      	mov	fp, r3
 80106c0:	45b1      	cmp	r9, r6
 80106c2:	d337      	bcc.n	8010734 <__gethex+0x1d0>
 80106c4:	f845 bb04 	str.w	fp, [r5], #4
 80106c8:	eba5 050a 	sub.w	r5, r5, sl
 80106cc:	10ad      	asrs	r5, r5, #2
 80106ce:	6125      	str	r5, [r4, #16]
 80106d0:	4658      	mov	r0, fp
 80106d2:	f7fd fe83 	bl	800e3dc <__hi0bits>
 80106d6:	016d      	lsls	r5, r5, #5
 80106d8:	f8d8 6000 	ldr.w	r6, [r8]
 80106dc:	1a2d      	subs	r5, r5, r0
 80106de:	42b5      	cmp	r5, r6
 80106e0:	dd54      	ble.n	801078c <__gethex+0x228>
 80106e2:	1bad      	subs	r5, r5, r6
 80106e4:	4629      	mov	r1, r5
 80106e6:	4620      	mov	r0, r4
 80106e8:	f7fe fa17 	bl	800eb1a <__any_on>
 80106ec:	4681      	mov	r9, r0
 80106ee:	b178      	cbz	r0, 8010710 <__gethex+0x1ac>
 80106f0:	1e6b      	subs	r3, r5, #1
 80106f2:	1159      	asrs	r1, r3, #5
 80106f4:	f003 021f 	and.w	r2, r3, #31
 80106f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80106fc:	f04f 0901 	mov.w	r9, #1
 8010700:	fa09 f202 	lsl.w	r2, r9, r2
 8010704:	420a      	tst	r2, r1
 8010706:	d003      	beq.n	8010710 <__gethex+0x1ac>
 8010708:	454b      	cmp	r3, r9
 801070a:	dc36      	bgt.n	801077a <__gethex+0x216>
 801070c:	f04f 0902 	mov.w	r9, #2
 8010710:	4629      	mov	r1, r5
 8010712:	4620      	mov	r0, r4
 8010714:	f7ff febe 	bl	8010494 <rshift>
 8010718:	442f      	add	r7, r5
 801071a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801071e:	42bb      	cmp	r3, r7
 8010720:	da42      	bge.n	80107a8 <__gethex+0x244>
 8010722:	9801      	ldr	r0, [sp, #4]
 8010724:	4621      	mov	r1, r4
 8010726:	f7fd fda7 	bl	800e278 <_Bfree>
 801072a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801072c:	2300      	movs	r3, #0
 801072e:	6013      	str	r3, [r2, #0]
 8010730:	25a3      	movs	r5, #163	@ 0xa3
 8010732:	e793      	b.n	801065c <__gethex+0xf8>
 8010734:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010738:	2a2e      	cmp	r2, #46	@ 0x2e
 801073a:	d012      	beq.n	8010762 <__gethex+0x1fe>
 801073c:	2b20      	cmp	r3, #32
 801073e:	d104      	bne.n	801074a <__gethex+0x1e6>
 8010740:	f845 bb04 	str.w	fp, [r5], #4
 8010744:	f04f 0b00 	mov.w	fp, #0
 8010748:	465b      	mov	r3, fp
 801074a:	7830      	ldrb	r0, [r6, #0]
 801074c:	9303      	str	r3, [sp, #12]
 801074e:	f7ff fef3 	bl	8010538 <__hexdig_fun>
 8010752:	9b03      	ldr	r3, [sp, #12]
 8010754:	f000 000f 	and.w	r0, r0, #15
 8010758:	4098      	lsls	r0, r3
 801075a:	ea4b 0b00 	orr.w	fp, fp, r0
 801075e:	3304      	adds	r3, #4
 8010760:	e7ae      	b.n	80106c0 <__gethex+0x15c>
 8010762:	45b1      	cmp	r9, r6
 8010764:	d8ea      	bhi.n	801073c <__gethex+0x1d8>
 8010766:	492b      	ldr	r1, [pc, #172]	@ (8010814 <__gethex+0x2b0>)
 8010768:	9303      	str	r3, [sp, #12]
 801076a:	2201      	movs	r2, #1
 801076c:	4630      	mov	r0, r6
 801076e:	f7ff fe24 	bl	80103ba <strncmp>
 8010772:	9b03      	ldr	r3, [sp, #12]
 8010774:	2800      	cmp	r0, #0
 8010776:	d1e1      	bne.n	801073c <__gethex+0x1d8>
 8010778:	e7a2      	b.n	80106c0 <__gethex+0x15c>
 801077a:	1ea9      	subs	r1, r5, #2
 801077c:	4620      	mov	r0, r4
 801077e:	f7fe f9cc 	bl	800eb1a <__any_on>
 8010782:	2800      	cmp	r0, #0
 8010784:	d0c2      	beq.n	801070c <__gethex+0x1a8>
 8010786:	f04f 0903 	mov.w	r9, #3
 801078a:	e7c1      	b.n	8010710 <__gethex+0x1ac>
 801078c:	da09      	bge.n	80107a2 <__gethex+0x23e>
 801078e:	1b75      	subs	r5, r6, r5
 8010790:	4621      	mov	r1, r4
 8010792:	9801      	ldr	r0, [sp, #4]
 8010794:	462a      	mov	r2, r5
 8010796:	f7fd ff87 	bl	800e6a8 <__lshift>
 801079a:	1b7f      	subs	r7, r7, r5
 801079c:	4604      	mov	r4, r0
 801079e:	f100 0a14 	add.w	sl, r0, #20
 80107a2:	f04f 0900 	mov.w	r9, #0
 80107a6:	e7b8      	b.n	801071a <__gethex+0x1b6>
 80107a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80107ac:	42bd      	cmp	r5, r7
 80107ae:	dd6f      	ble.n	8010890 <__gethex+0x32c>
 80107b0:	1bed      	subs	r5, r5, r7
 80107b2:	42ae      	cmp	r6, r5
 80107b4:	dc34      	bgt.n	8010820 <__gethex+0x2bc>
 80107b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80107ba:	2b02      	cmp	r3, #2
 80107bc:	d022      	beq.n	8010804 <__gethex+0x2a0>
 80107be:	2b03      	cmp	r3, #3
 80107c0:	d024      	beq.n	801080c <__gethex+0x2a8>
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d115      	bne.n	80107f2 <__gethex+0x28e>
 80107c6:	42ae      	cmp	r6, r5
 80107c8:	d113      	bne.n	80107f2 <__gethex+0x28e>
 80107ca:	2e01      	cmp	r6, #1
 80107cc:	d10b      	bne.n	80107e6 <__gethex+0x282>
 80107ce:	9a02      	ldr	r2, [sp, #8]
 80107d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80107d4:	6013      	str	r3, [r2, #0]
 80107d6:	2301      	movs	r3, #1
 80107d8:	6123      	str	r3, [r4, #16]
 80107da:	f8ca 3000 	str.w	r3, [sl]
 80107de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107e0:	2562      	movs	r5, #98	@ 0x62
 80107e2:	601c      	str	r4, [r3, #0]
 80107e4:	e73a      	b.n	801065c <__gethex+0xf8>
 80107e6:	1e71      	subs	r1, r6, #1
 80107e8:	4620      	mov	r0, r4
 80107ea:	f7fe f996 	bl	800eb1a <__any_on>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	d1ed      	bne.n	80107ce <__gethex+0x26a>
 80107f2:	9801      	ldr	r0, [sp, #4]
 80107f4:	4621      	mov	r1, r4
 80107f6:	f7fd fd3f 	bl	800e278 <_Bfree>
 80107fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80107fc:	2300      	movs	r3, #0
 80107fe:	6013      	str	r3, [r2, #0]
 8010800:	2550      	movs	r5, #80	@ 0x50
 8010802:	e72b      	b.n	801065c <__gethex+0xf8>
 8010804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010806:	2b00      	cmp	r3, #0
 8010808:	d1f3      	bne.n	80107f2 <__gethex+0x28e>
 801080a:	e7e0      	b.n	80107ce <__gethex+0x26a>
 801080c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801080e:	2b00      	cmp	r3, #0
 8010810:	d1dd      	bne.n	80107ce <__gethex+0x26a>
 8010812:	e7ee      	b.n	80107f2 <__gethex+0x28e>
 8010814:	08011660 	.word	0x08011660
 8010818:	080114f7 	.word	0x080114f7
 801081c:	08011829 	.word	0x08011829
 8010820:	1e6f      	subs	r7, r5, #1
 8010822:	f1b9 0f00 	cmp.w	r9, #0
 8010826:	d130      	bne.n	801088a <__gethex+0x326>
 8010828:	b127      	cbz	r7, 8010834 <__gethex+0x2d0>
 801082a:	4639      	mov	r1, r7
 801082c:	4620      	mov	r0, r4
 801082e:	f7fe f974 	bl	800eb1a <__any_on>
 8010832:	4681      	mov	r9, r0
 8010834:	117a      	asrs	r2, r7, #5
 8010836:	2301      	movs	r3, #1
 8010838:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801083c:	f007 071f 	and.w	r7, r7, #31
 8010840:	40bb      	lsls	r3, r7
 8010842:	4213      	tst	r3, r2
 8010844:	4629      	mov	r1, r5
 8010846:	4620      	mov	r0, r4
 8010848:	bf18      	it	ne
 801084a:	f049 0902 	orrne.w	r9, r9, #2
 801084e:	f7ff fe21 	bl	8010494 <rshift>
 8010852:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010856:	1b76      	subs	r6, r6, r5
 8010858:	2502      	movs	r5, #2
 801085a:	f1b9 0f00 	cmp.w	r9, #0
 801085e:	d047      	beq.n	80108f0 <__gethex+0x38c>
 8010860:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010864:	2b02      	cmp	r3, #2
 8010866:	d015      	beq.n	8010894 <__gethex+0x330>
 8010868:	2b03      	cmp	r3, #3
 801086a:	d017      	beq.n	801089c <__gethex+0x338>
 801086c:	2b01      	cmp	r3, #1
 801086e:	d109      	bne.n	8010884 <__gethex+0x320>
 8010870:	f019 0f02 	tst.w	r9, #2
 8010874:	d006      	beq.n	8010884 <__gethex+0x320>
 8010876:	f8da 3000 	ldr.w	r3, [sl]
 801087a:	ea49 0903 	orr.w	r9, r9, r3
 801087e:	f019 0f01 	tst.w	r9, #1
 8010882:	d10e      	bne.n	80108a2 <__gethex+0x33e>
 8010884:	f045 0510 	orr.w	r5, r5, #16
 8010888:	e032      	b.n	80108f0 <__gethex+0x38c>
 801088a:	f04f 0901 	mov.w	r9, #1
 801088e:	e7d1      	b.n	8010834 <__gethex+0x2d0>
 8010890:	2501      	movs	r5, #1
 8010892:	e7e2      	b.n	801085a <__gethex+0x2f6>
 8010894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010896:	f1c3 0301 	rsb	r3, r3, #1
 801089a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801089c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d0f0      	beq.n	8010884 <__gethex+0x320>
 80108a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80108a6:	f104 0314 	add.w	r3, r4, #20
 80108aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80108ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80108b2:	f04f 0c00 	mov.w	ip, #0
 80108b6:	4618      	mov	r0, r3
 80108b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80108bc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80108c0:	d01b      	beq.n	80108fa <__gethex+0x396>
 80108c2:	3201      	adds	r2, #1
 80108c4:	6002      	str	r2, [r0, #0]
 80108c6:	2d02      	cmp	r5, #2
 80108c8:	f104 0314 	add.w	r3, r4, #20
 80108cc:	d13c      	bne.n	8010948 <__gethex+0x3e4>
 80108ce:	f8d8 2000 	ldr.w	r2, [r8]
 80108d2:	3a01      	subs	r2, #1
 80108d4:	42b2      	cmp	r2, r6
 80108d6:	d109      	bne.n	80108ec <__gethex+0x388>
 80108d8:	1171      	asrs	r1, r6, #5
 80108da:	2201      	movs	r2, #1
 80108dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80108e0:	f006 061f 	and.w	r6, r6, #31
 80108e4:	fa02 f606 	lsl.w	r6, r2, r6
 80108e8:	421e      	tst	r6, r3
 80108ea:	d13a      	bne.n	8010962 <__gethex+0x3fe>
 80108ec:	f045 0520 	orr.w	r5, r5, #32
 80108f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108f2:	601c      	str	r4, [r3, #0]
 80108f4:	9b02      	ldr	r3, [sp, #8]
 80108f6:	601f      	str	r7, [r3, #0]
 80108f8:	e6b0      	b.n	801065c <__gethex+0xf8>
 80108fa:	4299      	cmp	r1, r3
 80108fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8010900:	d8d9      	bhi.n	80108b6 <__gethex+0x352>
 8010902:	68a3      	ldr	r3, [r4, #8]
 8010904:	459b      	cmp	fp, r3
 8010906:	db17      	blt.n	8010938 <__gethex+0x3d4>
 8010908:	6861      	ldr	r1, [r4, #4]
 801090a:	9801      	ldr	r0, [sp, #4]
 801090c:	3101      	adds	r1, #1
 801090e:	f7fd fc73 	bl	800e1f8 <_Balloc>
 8010912:	4681      	mov	r9, r0
 8010914:	b918      	cbnz	r0, 801091e <__gethex+0x3ba>
 8010916:	4b1a      	ldr	r3, [pc, #104]	@ (8010980 <__gethex+0x41c>)
 8010918:	4602      	mov	r2, r0
 801091a:	2184      	movs	r1, #132	@ 0x84
 801091c:	e6c5      	b.n	80106aa <__gethex+0x146>
 801091e:	6922      	ldr	r2, [r4, #16]
 8010920:	3202      	adds	r2, #2
 8010922:	f104 010c 	add.w	r1, r4, #12
 8010926:	0092      	lsls	r2, r2, #2
 8010928:	300c      	adds	r0, #12
 801092a:	f7ff fd69 	bl	8010400 <memcpy>
 801092e:	4621      	mov	r1, r4
 8010930:	9801      	ldr	r0, [sp, #4]
 8010932:	f7fd fca1 	bl	800e278 <_Bfree>
 8010936:	464c      	mov	r4, r9
 8010938:	6923      	ldr	r3, [r4, #16]
 801093a:	1c5a      	adds	r2, r3, #1
 801093c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010940:	6122      	str	r2, [r4, #16]
 8010942:	2201      	movs	r2, #1
 8010944:	615a      	str	r2, [r3, #20]
 8010946:	e7be      	b.n	80108c6 <__gethex+0x362>
 8010948:	6922      	ldr	r2, [r4, #16]
 801094a:	455a      	cmp	r2, fp
 801094c:	dd0b      	ble.n	8010966 <__gethex+0x402>
 801094e:	2101      	movs	r1, #1
 8010950:	4620      	mov	r0, r4
 8010952:	f7ff fd9f 	bl	8010494 <rshift>
 8010956:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801095a:	3701      	adds	r7, #1
 801095c:	42bb      	cmp	r3, r7
 801095e:	f6ff aee0 	blt.w	8010722 <__gethex+0x1be>
 8010962:	2501      	movs	r5, #1
 8010964:	e7c2      	b.n	80108ec <__gethex+0x388>
 8010966:	f016 061f 	ands.w	r6, r6, #31
 801096a:	d0fa      	beq.n	8010962 <__gethex+0x3fe>
 801096c:	4453      	add	r3, sl
 801096e:	f1c6 0620 	rsb	r6, r6, #32
 8010972:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010976:	f7fd fd31 	bl	800e3dc <__hi0bits>
 801097a:	42b0      	cmp	r0, r6
 801097c:	dbe7      	blt.n	801094e <__gethex+0x3ea>
 801097e:	e7f0      	b.n	8010962 <__gethex+0x3fe>
 8010980:	080114f7 	.word	0x080114f7

08010984 <L_shift>:
 8010984:	f1c2 0208 	rsb	r2, r2, #8
 8010988:	0092      	lsls	r2, r2, #2
 801098a:	b570      	push	{r4, r5, r6, lr}
 801098c:	f1c2 0620 	rsb	r6, r2, #32
 8010990:	6843      	ldr	r3, [r0, #4]
 8010992:	6804      	ldr	r4, [r0, #0]
 8010994:	fa03 f506 	lsl.w	r5, r3, r6
 8010998:	432c      	orrs	r4, r5
 801099a:	40d3      	lsrs	r3, r2
 801099c:	6004      	str	r4, [r0, #0]
 801099e:	f840 3f04 	str.w	r3, [r0, #4]!
 80109a2:	4288      	cmp	r0, r1
 80109a4:	d3f4      	bcc.n	8010990 <L_shift+0xc>
 80109a6:	bd70      	pop	{r4, r5, r6, pc}

080109a8 <__match>:
 80109a8:	b530      	push	{r4, r5, lr}
 80109aa:	6803      	ldr	r3, [r0, #0]
 80109ac:	3301      	adds	r3, #1
 80109ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109b2:	b914      	cbnz	r4, 80109ba <__match+0x12>
 80109b4:	6003      	str	r3, [r0, #0]
 80109b6:	2001      	movs	r0, #1
 80109b8:	bd30      	pop	{r4, r5, pc}
 80109ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80109c2:	2d19      	cmp	r5, #25
 80109c4:	bf98      	it	ls
 80109c6:	3220      	addls	r2, #32
 80109c8:	42a2      	cmp	r2, r4
 80109ca:	d0f0      	beq.n	80109ae <__match+0x6>
 80109cc:	2000      	movs	r0, #0
 80109ce:	e7f3      	b.n	80109b8 <__match+0x10>

080109d0 <__hexnan>:
 80109d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d4:	680b      	ldr	r3, [r1, #0]
 80109d6:	6801      	ldr	r1, [r0, #0]
 80109d8:	115e      	asrs	r6, r3, #5
 80109da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80109de:	f013 031f 	ands.w	r3, r3, #31
 80109e2:	b087      	sub	sp, #28
 80109e4:	bf18      	it	ne
 80109e6:	3604      	addne	r6, #4
 80109e8:	2500      	movs	r5, #0
 80109ea:	1f37      	subs	r7, r6, #4
 80109ec:	4682      	mov	sl, r0
 80109ee:	4690      	mov	r8, r2
 80109f0:	9301      	str	r3, [sp, #4]
 80109f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80109f6:	46b9      	mov	r9, r7
 80109f8:	463c      	mov	r4, r7
 80109fa:	9502      	str	r5, [sp, #8]
 80109fc:	46ab      	mov	fp, r5
 80109fe:	784a      	ldrb	r2, [r1, #1]
 8010a00:	1c4b      	adds	r3, r1, #1
 8010a02:	9303      	str	r3, [sp, #12]
 8010a04:	b342      	cbz	r2, 8010a58 <__hexnan+0x88>
 8010a06:	4610      	mov	r0, r2
 8010a08:	9105      	str	r1, [sp, #20]
 8010a0a:	9204      	str	r2, [sp, #16]
 8010a0c:	f7ff fd94 	bl	8010538 <__hexdig_fun>
 8010a10:	2800      	cmp	r0, #0
 8010a12:	d151      	bne.n	8010ab8 <__hexnan+0xe8>
 8010a14:	9a04      	ldr	r2, [sp, #16]
 8010a16:	9905      	ldr	r1, [sp, #20]
 8010a18:	2a20      	cmp	r2, #32
 8010a1a:	d818      	bhi.n	8010a4e <__hexnan+0x7e>
 8010a1c:	9b02      	ldr	r3, [sp, #8]
 8010a1e:	459b      	cmp	fp, r3
 8010a20:	dd13      	ble.n	8010a4a <__hexnan+0x7a>
 8010a22:	454c      	cmp	r4, r9
 8010a24:	d206      	bcs.n	8010a34 <__hexnan+0x64>
 8010a26:	2d07      	cmp	r5, #7
 8010a28:	dc04      	bgt.n	8010a34 <__hexnan+0x64>
 8010a2a:	462a      	mov	r2, r5
 8010a2c:	4649      	mov	r1, r9
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f7ff ffa8 	bl	8010984 <L_shift>
 8010a34:	4544      	cmp	r4, r8
 8010a36:	d952      	bls.n	8010ade <__hexnan+0x10e>
 8010a38:	2300      	movs	r3, #0
 8010a3a:	f1a4 0904 	sub.w	r9, r4, #4
 8010a3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a42:	f8cd b008 	str.w	fp, [sp, #8]
 8010a46:	464c      	mov	r4, r9
 8010a48:	461d      	mov	r5, r3
 8010a4a:	9903      	ldr	r1, [sp, #12]
 8010a4c:	e7d7      	b.n	80109fe <__hexnan+0x2e>
 8010a4e:	2a29      	cmp	r2, #41	@ 0x29
 8010a50:	d157      	bne.n	8010b02 <__hexnan+0x132>
 8010a52:	3102      	adds	r1, #2
 8010a54:	f8ca 1000 	str.w	r1, [sl]
 8010a58:	f1bb 0f00 	cmp.w	fp, #0
 8010a5c:	d051      	beq.n	8010b02 <__hexnan+0x132>
 8010a5e:	454c      	cmp	r4, r9
 8010a60:	d206      	bcs.n	8010a70 <__hexnan+0xa0>
 8010a62:	2d07      	cmp	r5, #7
 8010a64:	dc04      	bgt.n	8010a70 <__hexnan+0xa0>
 8010a66:	462a      	mov	r2, r5
 8010a68:	4649      	mov	r1, r9
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	f7ff ff8a 	bl	8010984 <L_shift>
 8010a70:	4544      	cmp	r4, r8
 8010a72:	d936      	bls.n	8010ae2 <__hexnan+0x112>
 8010a74:	f1a8 0204 	sub.w	r2, r8, #4
 8010a78:	4623      	mov	r3, r4
 8010a7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8010a7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010a82:	429f      	cmp	r7, r3
 8010a84:	d2f9      	bcs.n	8010a7a <__hexnan+0xaa>
 8010a86:	1b3b      	subs	r3, r7, r4
 8010a88:	f023 0303 	bic.w	r3, r3, #3
 8010a8c:	3304      	adds	r3, #4
 8010a8e:	3401      	adds	r4, #1
 8010a90:	3e03      	subs	r6, #3
 8010a92:	42b4      	cmp	r4, r6
 8010a94:	bf88      	it	hi
 8010a96:	2304      	movhi	r3, #4
 8010a98:	4443      	add	r3, r8
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	f843 2b04 	str.w	r2, [r3], #4
 8010aa0:	429f      	cmp	r7, r3
 8010aa2:	d2fb      	bcs.n	8010a9c <__hexnan+0xcc>
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	b91b      	cbnz	r3, 8010ab0 <__hexnan+0xe0>
 8010aa8:	4547      	cmp	r7, r8
 8010aaa:	d128      	bne.n	8010afe <__hexnan+0x12e>
 8010aac:	2301      	movs	r3, #1
 8010aae:	603b      	str	r3, [r7, #0]
 8010ab0:	2005      	movs	r0, #5
 8010ab2:	b007      	add	sp, #28
 8010ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab8:	3501      	adds	r5, #1
 8010aba:	2d08      	cmp	r5, #8
 8010abc:	f10b 0b01 	add.w	fp, fp, #1
 8010ac0:	dd06      	ble.n	8010ad0 <__hexnan+0x100>
 8010ac2:	4544      	cmp	r4, r8
 8010ac4:	d9c1      	bls.n	8010a4a <__hexnan+0x7a>
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	f844 3c04 	str.w	r3, [r4, #-4]
 8010acc:	2501      	movs	r5, #1
 8010ace:	3c04      	subs	r4, #4
 8010ad0:	6822      	ldr	r2, [r4, #0]
 8010ad2:	f000 000f 	and.w	r0, r0, #15
 8010ad6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010ada:	6020      	str	r0, [r4, #0]
 8010adc:	e7b5      	b.n	8010a4a <__hexnan+0x7a>
 8010ade:	2508      	movs	r5, #8
 8010ae0:	e7b3      	b.n	8010a4a <__hexnan+0x7a>
 8010ae2:	9b01      	ldr	r3, [sp, #4]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d0dd      	beq.n	8010aa4 <__hexnan+0xd4>
 8010ae8:	f1c3 0320 	rsb	r3, r3, #32
 8010aec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010af0:	40da      	lsrs	r2, r3
 8010af2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010af6:	4013      	ands	r3, r2
 8010af8:	f846 3c04 	str.w	r3, [r6, #-4]
 8010afc:	e7d2      	b.n	8010aa4 <__hexnan+0xd4>
 8010afe:	3f04      	subs	r7, #4
 8010b00:	e7d0      	b.n	8010aa4 <__hexnan+0xd4>
 8010b02:	2004      	movs	r0, #4
 8010b04:	e7d5      	b.n	8010ab2 <__hexnan+0xe2>

08010b06 <__ascii_mbtowc>:
 8010b06:	b082      	sub	sp, #8
 8010b08:	b901      	cbnz	r1, 8010b0c <__ascii_mbtowc+0x6>
 8010b0a:	a901      	add	r1, sp, #4
 8010b0c:	b142      	cbz	r2, 8010b20 <__ascii_mbtowc+0x1a>
 8010b0e:	b14b      	cbz	r3, 8010b24 <__ascii_mbtowc+0x1e>
 8010b10:	7813      	ldrb	r3, [r2, #0]
 8010b12:	600b      	str	r3, [r1, #0]
 8010b14:	7812      	ldrb	r2, [r2, #0]
 8010b16:	1e10      	subs	r0, r2, #0
 8010b18:	bf18      	it	ne
 8010b1a:	2001      	movne	r0, #1
 8010b1c:	b002      	add	sp, #8
 8010b1e:	4770      	bx	lr
 8010b20:	4610      	mov	r0, r2
 8010b22:	e7fb      	b.n	8010b1c <__ascii_mbtowc+0x16>
 8010b24:	f06f 0001 	mvn.w	r0, #1
 8010b28:	e7f8      	b.n	8010b1c <__ascii_mbtowc+0x16>

08010b2a <_realloc_r>:
 8010b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b2e:	4680      	mov	r8, r0
 8010b30:	4615      	mov	r5, r2
 8010b32:	460c      	mov	r4, r1
 8010b34:	b921      	cbnz	r1, 8010b40 <_realloc_r+0x16>
 8010b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b3a:	4611      	mov	r1, r2
 8010b3c:	f7fd bad0 	b.w	800e0e0 <_malloc_r>
 8010b40:	b92a      	cbnz	r2, 8010b4e <_realloc_r+0x24>
 8010b42:	f7fd fa59 	bl	800dff8 <_free_r>
 8010b46:	2400      	movs	r4, #0
 8010b48:	4620      	mov	r0, r4
 8010b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b4e:	f000 f8b2 	bl	8010cb6 <_malloc_usable_size_r>
 8010b52:	4285      	cmp	r5, r0
 8010b54:	4606      	mov	r6, r0
 8010b56:	d802      	bhi.n	8010b5e <_realloc_r+0x34>
 8010b58:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010b5c:	d8f4      	bhi.n	8010b48 <_realloc_r+0x1e>
 8010b5e:	4629      	mov	r1, r5
 8010b60:	4640      	mov	r0, r8
 8010b62:	f7fd fabd 	bl	800e0e0 <_malloc_r>
 8010b66:	4607      	mov	r7, r0
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d0ec      	beq.n	8010b46 <_realloc_r+0x1c>
 8010b6c:	42b5      	cmp	r5, r6
 8010b6e:	462a      	mov	r2, r5
 8010b70:	4621      	mov	r1, r4
 8010b72:	bf28      	it	cs
 8010b74:	4632      	movcs	r2, r6
 8010b76:	f7ff fc43 	bl	8010400 <memcpy>
 8010b7a:	4621      	mov	r1, r4
 8010b7c:	4640      	mov	r0, r8
 8010b7e:	f7fd fa3b 	bl	800dff8 <_free_r>
 8010b82:	463c      	mov	r4, r7
 8010b84:	e7e0      	b.n	8010b48 <_realloc_r+0x1e>
	...

08010b88 <_strtoul_l.constprop.0>:
 8010b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b8c:	4e34      	ldr	r6, [pc, #208]	@ (8010c60 <_strtoul_l.constprop.0+0xd8>)
 8010b8e:	4686      	mov	lr, r0
 8010b90:	460d      	mov	r5, r1
 8010b92:	4628      	mov	r0, r5
 8010b94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b98:	5d37      	ldrb	r7, [r6, r4]
 8010b9a:	f017 0708 	ands.w	r7, r7, #8
 8010b9e:	d1f8      	bne.n	8010b92 <_strtoul_l.constprop.0+0xa>
 8010ba0:	2c2d      	cmp	r4, #45	@ 0x2d
 8010ba2:	d12f      	bne.n	8010c04 <_strtoul_l.constprop.0+0x7c>
 8010ba4:	782c      	ldrb	r4, [r5, #0]
 8010ba6:	2701      	movs	r7, #1
 8010ba8:	1c85      	adds	r5, r0, #2
 8010baa:	f033 0010 	bics.w	r0, r3, #16
 8010bae:	d109      	bne.n	8010bc4 <_strtoul_l.constprop.0+0x3c>
 8010bb0:	2c30      	cmp	r4, #48	@ 0x30
 8010bb2:	d12c      	bne.n	8010c0e <_strtoul_l.constprop.0+0x86>
 8010bb4:	7828      	ldrb	r0, [r5, #0]
 8010bb6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010bba:	2858      	cmp	r0, #88	@ 0x58
 8010bbc:	d127      	bne.n	8010c0e <_strtoul_l.constprop.0+0x86>
 8010bbe:	786c      	ldrb	r4, [r5, #1]
 8010bc0:	2310      	movs	r3, #16
 8010bc2:	3502      	adds	r5, #2
 8010bc4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010bc8:	2600      	movs	r6, #0
 8010bca:	fbb8 f8f3 	udiv	r8, r8, r3
 8010bce:	fb03 f908 	mul.w	r9, r3, r8
 8010bd2:	ea6f 0909 	mvn.w	r9, r9
 8010bd6:	4630      	mov	r0, r6
 8010bd8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010bdc:	f1bc 0f09 	cmp.w	ip, #9
 8010be0:	d81c      	bhi.n	8010c1c <_strtoul_l.constprop.0+0x94>
 8010be2:	4664      	mov	r4, ip
 8010be4:	42a3      	cmp	r3, r4
 8010be6:	dd2a      	ble.n	8010c3e <_strtoul_l.constprop.0+0xb6>
 8010be8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8010bec:	d007      	beq.n	8010bfe <_strtoul_l.constprop.0+0x76>
 8010bee:	4580      	cmp	r8, r0
 8010bf0:	d322      	bcc.n	8010c38 <_strtoul_l.constprop.0+0xb0>
 8010bf2:	d101      	bne.n	8010bf8 <_strtoul_l.constprop.0+0x70>
 8010bf4:	45a1      	cmp	r9, r4
 8010bf6:	db1f      	blt.n	8010c38 <_strtoul_l.constprop.0+0xb0>
 8010bf8:	fb00 4003 	mla	r0, r0, r3, r4
 8010bfc:	2601      	movs	r6, #1
 8010bfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010c02:	e7e9      	b.n	8010bd8 <_strtoul_l.constprop.0+0x50>
 8010c04:	2c2b      	cmp	r4, #43	@ 0x2b
 8010c06:	bf04      	itt	eq
 8010c08:	782c      	ldrbeq	r4, [r5, #0]
 8010c0a:	1c85      	addeq	r5, r0, #2
 8010c0c:	e7cd      	b.n	8010baa <_strtoul_l.constprop.0+0x22>
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d1d8      	bne.n	8010bc4 <_strtoul_l.constprop.0+0x3c>
 8010c12:	2c30      	cmp	r4, #48	@ 0x30
 8010c14:	bf0c      	ite	eq
 8010c16:	2308      	moveq	r3, #8
 8010c18:	230a      	movne	r3, #10
 8010c1a:	e7d3      	b.n	8010bc4 <_strtoul_l.constprop.0+0x3c>
 8010c1c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010c20:	f1bc 0f19 	cmp.w	ip, #25
 8010c24:	d801      	bhi.n	8010c2a <_strtoul_l.constprop.0+0xa2>
 8010c26:	3c37      	subs	r4, #55	@ 0x37
 8010c28:	e7dc      	b.n	8010be4 <_strtoul_l.constprop.0+0x5c>
 8010c2a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010c2e:	f1bc 0f19 	cmp.w	ip, #25
 8010c32:	d804      	bhi.n	8010c3e <_strtoul_l.constprop.0+0xb6>
 8010c34:	3c57      	subs	r4, #87	@ 0x57
 8010c36:	e7d5      	b.n	8010be4 <_strtoul_l.constprop.0+0x5c>
 8010c38:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8010c3c:	e7df      	b.n	8010bfe <_strtoul_l.constprop.0+0x76>
 8010c3e:	1c73      	adds	r3, r6, #1
 8010c40:	d106      	bne.n	8010c50 <_strtoul_l.constprop.0+0xc8>
 8010c42:	2322      	movs	r3, #34	@ 0x22
 8010c44:	f8ce 3000 	str.w	r3, [lr]
 8010c48:	4630      	mov	r0, r6
 8010c4a:	b932      	cbnz	r2, 8010c5a <_strtoul_l.constprop.0+0xd2>
 8010c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c50:	b107      	cbz	r7, 8010c54 <_strtoul_l.constprop.0+0xcc>
 8010c52:	4240      	negs	r0, r0
 8010c54:	2a00      	cmp	r2, #0
 8010c56:	d0f9      	beq.n	8010c4c <_strtoul_l.constprop.0+0xc4>
 8010c58:	b106      	cbz	r6, 8010c5c <_strtoul_l.constprop.0+0xd4>
 8010c5a:	1e69      	subs	r1, r5, #1
 8010c5c:	6011      	str	r1, [r2, #0]
 8010c5e:	e7f5      	b.n	8010c4c <_strtoul_l.constprop.0+0xc4>
 8010c60:	080116b9 	.word	0x080116b9

08010c64 <_strtoul_r>:
 8010c64:	f7ff bf90 	b.w	8010b88 <_strtoul_l.constprop.0>

08010c68 <__ascii_wctomb>:
 8010c68:	4603      	mov	r3, r0
 8010c6a:	4608      	mov	r0, r1
 8010c6c:	b141      	cbz	r1, 8010c80 <__ascii_wctomb+0x18>
 8010c6e:	2aff      	cmp	r2, #255	@ 0xff
 8010c70:	d904      	bls.n	8010c7c <__ascii_wctomb+0x14>
 8010c72:	228a      	movs	r2, #138	@ 0x8a
 8010c74:	601a      	str	r2, [r3, #0]
 8010c76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c7a:	4770      	bx	lr
 8010c7c:	700a      	strb	r2, [r1, #0]
 8010c7e:	2001      	movs	r0, #1
 8010c80:	4770      	bx	lr
	...

08010c84 <fiprintf>:
 8010c84:	b40e      	push	{r1, r2, r3}
 8010c86:	b503      	push	{r0, r1, lr}
 8010c88:	4601      	mov	r1, r0
 8010c8a:	ab03      	add	r3, sp, #12
 8010c8c:	4805      	ldr	r0, [pc, #20]	@ (8010ca4 <fiprintf+0x20>)
 8010c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c92:	6800      	ldr	r0, [r0, #0]
 8010c94:	9301      	str	r3, [sp, #4]
 8010c96:	f000 f83f 	bl	8010d18 <_vfiprintf_r>
 8010c9a:	b002      	add	sp, #8
 8010c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ca0:	b003      	add	sp, #12
 8010ca2:	4770      	bx	lr
 8010ca4:	200001b4 	.word	0x200001b4

08010ca8 <abort>:
 8010ca8:	b508      	push	{r3, lr}
 8010caa:	2006      	movs	r0, #6
 8010cac:	f000 fa08 	bl	80110c0 <raise>
 8010cb0:	2001      	movs	r0, #1
 8010cb2:	f7f0 fe99 	bl	80019e8 <_exit>

08010cb6 <_malloc_usable_size_r>:
 8010cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cba:	1f18      	subs	r0, r3, #4
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	bfbc      	itt	lt
 8010cc0:	580b      	ldrlt	r3, [r1, r0]
 8010cc2:	18c0      	addlt	r0, r0, r3
 8010cc4:	4770      	bx	lr

08010cc6 <__sfputc_r>:
 8010cc6:	6893      	ldr	r3, [r2, #8]
 8010cc8:	3b01      	subs	r3, #1
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	b410      	push	{r4}
 8010cce:	6093      	str	r3, [r2, #8]
 8010cd0:	da08      	bge.n	8010ce4 <__sfputc_r+0x1e>
 8010cd2:	6994      	ldr	r4, [r2, #24]
 8010cd4:	42a3      	cmp	r3, r4
 8010cd6:	db01      	blt.n	8010cdc <__sfputc_r+0x16>
 8010cd8:	290a      	cmp	r1, #10
 8010cda:	d103      	bne.n	8010ce4 <__sfputc_r+0x1e>
 8010cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ce0:	f000 b932 	b.w	8010f48 <__swbuf_r>
 8010ce4:	6813      	ldr	r3, [r2, #0]
 8010ce6:	1c58      	adds	r0, r3, #1
 8010ce8:	6010      	str	r0, [r2, #0]
 8010cea:	7019      	strb	r1, [r3, #0]
 8010cec:	4608      	mov	r0, r1
 8010cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cf2:	4770      	bx	lr

08010cf4 <__sfputs_r>:
 8010cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cf6:	4606      	mov	r6, r0
 8010cf8:	460f      	mov	r7, r1
 8010cfa:	4614      	mov	r4, r2
 8010cfc:	18d5      	adds	r5, r2, r3
 8010cfe:	42ac      	cmp	r4, r5
 8010d00:	d101      	bne.n	8010d06 <__sfputs_r+0x12>
 8010d02:	2000      	movs	r0, #0
 8010d04:	e007      	b.n	8010d16 <__sfputs_r+0x22>
 8010d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d0a:	463a      	mov	r2, r7
 8010d0c:	4630      	mov	r0, r6
 8010d0e:	f7ff ffda 	bl	8010cc6 <__sfputc_r>
 8010d12:	1c43      	adds	r3, r0, #1
 8010d14:	d1f3      	bne.n	8010cfe <__sfputs_r+0xa>
 8010d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010d18 <_vfiprintf_r>:
 8010d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d1c:	460d      	mov	r5, r1
 8010d1e:	b09d      	sub	sp, #116	@ 0x74
 8010d20:	4614      	mov	r4, r2
 8010d22:	4698      	mov	r8, r3
 8010d24:	4606      	mov	r6, r0
 8010d26:	b118      	cbz	r0, 8010d30 <_vfiprintf_r+0x18>
 8010d28:	6a03      	ldr	r3, [r0, #32]
 8010d2a:	b90b      	cbnz	r3, 8010d30 <_vfiprintf_r+0x18>
 8010d2c:	f7fc f980 	bl	800d030 <__sinit>
 8010d30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d32:	07d9      	lsls	r1, r3, #31
 8010d34:	d405      	bmi.n	8010d42 <_vfiprintf_r+0x2a>
 8010d36:	89ab      	ldrh	r3, [r5, #12]
 8010d38:	059a      	lsls	r2, r3, #22
 8010d3a:	d402      	bmi.n	8010d42 <_vfiprintf_r+0x2a>
 8010d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d3e:	f7fc fb04 	bl	800d34a <__retarget_lock_acquire_recursive>
 8010d42:	89ab      	ldrh	r3, [r5, #12]
 8010d44:	071b      	lsls	r3, r3, #28
 8010d46:	d501      	bpl.n	8010d4c <_vfiprintf_r+0x34>
 8010d48:	692b      	ldr	r3, [r5, #16]
 8010d4a:	b99b      	cbnz	r3, 8010d74 <_vfiprintf_r+0x5c>
 8010d4c:	4629      	mov	r1, r5
 8010d4e:	4630      	mov	r0, r6
 8010d50:	f000 f938 	bl	8010fc4 <__swsetup_r>
 8010d54:	b170      	cbz	r0, 8010d74 <_vfiprintf_r+0x5c>
 8010d56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d58:	07dc      	lsls	r4, r3, #31
 8010d5a:	d504      	bpl.n	8010d66 <_vfiprintf_r+0x4e>
 8010d5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d60:	b01d      	add	sp, #116	@ 0x74
 8010d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d66:	89ab      	ldrh	r3, [r5, #12]
 8010d68:	0598      	lsls	r0, r3, #22
 8010d6a:	d4f7      	bmi.n	8010d5c <_vfiprintf_r+0x44>
 8010d6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d6e:	f7fc faed 	bl	800d34c <__retarget_lock_release_recursive>
 8010d72:	e7f3      	b.n	8010d5c <_vfiprintf_r+0x44>
 8010d74:	2300      	movs	r3, #0
 8010d76:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d78:	2320      	movs	r3, #32
 8010d7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d82:	2330      	movs	r3, #48	@ 0x30
 8010d84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010f34 <_vfiprintf_r+0x21c>
 8010d88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d8c:	f04f 0901 	mov.w	r9, #1
 8010d90:	4623      	mov	r3, r4
 8010d92:	469a      	mov	sl, r3
 8010d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d98:	b10a      	cbz	r2, 8010d9e <_vfiprintf_r+0x86>
 8010d9a:	2a25      	cmp	r2, #37	@ 0x25
 8010d9c:	d1f9      	bne.n	8010d92 <_vfiprintf_r+0x7a>
 8010d9e:	ebba 0b04 	subs.w	fp, sl, r4
 8010da2:	d00b      	beq.n	8010dbc <_vfiprintf_r+0xa4>
 8010da4:	465b      	mov	r3, fp
 8010da6:	4622      	mov	r2, r4
 8010da8:	4629      	mov	r1, r5
 8010daa:	4630      	mov	r0, r6
 8010dac:	f7ff ffa2 	bl	8010cf4 <__sfputs_r>
 8010db0:	3001      	adds	r0, #1
 8010db2:	f000 80a7 	beq.w	8010f04 <_vfiprintf_r+0x1ec>
 8010db6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010db8:	445a      	add	r2, fp
 8010dba:	9209      	str	r2, [sp, #36]	@ 0x24
 8010dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	f000 809f 	beq.w	8010f04 <_vfiprintf_r+0x1ec>
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dd0:	f10a 0a01 	add.w	sl, sl, #1
 8010dd4:	9304      	str	r3, [sp, #16]
 8010dd6:	9307      	str	r3, [sp, #28]
 8010dd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010ddc:	931a      	str	r3, [sp, #104]	@ 0x68
 8010dde:	4654      	mov	r4, sl
 8010de0:	2205      	movs	r2, #5
 8010de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010de6:	4853      	ldr	r0, [pc, #332]	@ (8010f34 <_vfiprintf_r+0x21c>)
 8010de8:	f7ef f9f2 	bl	80001d0 <memchr>
 8010dec:	9a04      	ldr	r2, [sp, #16]
 8010dee:	b9d8      	cbnz	r0, 8010e28 <_vfiprintf_r+0x110>
 8010df0:	06d1      	lsls	r1, r2, #27
 8010df2:	bf44      	itt	mi
 8010df4:	2320      	movmi	r3, #32
 8010df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dfa:	0713      	lsls	r3, r2, #28
 8010dfc:	bf44      	itt	mi
 8010dfe:	232b      	movmi	r3, #43	@ 0x2b
 8010e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e04:	f89a 3000 	ldrb.w	r3, [sl]
 8010e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e0a:	d015      	beq.n	8010e38 <_vfiprintf_r+0x120>
 8010e0c:	9a07      	ldr	r2, [sp, #28]
 8010e0e:	4654      	mov	r4, sl
 8010e10:	2000      	movs	r0, #0
 8010e12:	f04f 0c0a 	mov.w	ip, #10
 8010e16:	4621      	mov	r1, r4
 8010e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e1c:	3b30      	subs	r3, #48	@ 0x30
 8010e1e:	2b09      	cmp	r3, #9
 8010e20:	d94b      	bls.n	8010eba <_vfiprintf_r+0x1a2>
 8010e22:	b1b0      	cbz	r0, 8010e52 <_vfiprintf_r+0x13a>
 8010e24:	9207      	str	r2, [sp, #28]
 8010e26:	e014      	b.n	8010e52 <_vfiprintf_r+0x13a>
 8010e28:	eba0 0308 	sub.w	r3, r0, r8
 8010e2c:	fa09 f303 	lsl.w	r3, r9, r3
 8010e30:	4313      	orrs	r3, r2
 8010e32:	9304      	str	r3, [sp, #16]
 8010e34:	46a2      	mov	sl, r4
 8010e36:	e7d2      	b.n	8010dde <_vfiprintf_r+0xc6>
 8010e38:	9b03      	ldr	r3, [sp, #12]
 8010e3a:	1d19      	adds	r1, r3, #4
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	9103      	str	r1, [sp, #12]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	bfbb      	ittet	lt
 8010e44:	425b      	neglt	r3, r3
 8010e46:	f042 0202 	orrlt.w	r2, r2, #2
 8010e4a:	9307      	strge	r3, [sp, #28]
 8010e4c:	9307      	strlt	r3, [sp, #28]
 8010e4e:	bfb8      	it	lt
 8010e50:	9204      	strlt	r2, [sp, #16]
 8010e52:	7823      	ldrb	r3, [r4, #0]
 8010e54:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e56:	d10a      	bne.n	8010e6e <_vfiprintf_r+0x156>
 8010e58:	7863      	ldrb	r3, [r4, #1]
 8010e5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e5c:	d132      	bne.n	8010ec4 <_vfiprintf_r+0x1ac>
 8010e5e:	9b03      	ldr	r3, [sp, #12]
 8010e60:	1d1a      	adds	r2, r3, #4
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	9203      	str	r2, [sp, #12]
 8010e66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e6a:	3402      	adds	r4, #2
 8010e6c:	9305      	str	r3, [sp, #20]
 8010e6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010f44 <_vfiprintf_r+0x22c>
 8010e72:	7821      	ldrb	r1, [r4, #0]
 8010e74:	2203      	movs	r2, #3
 8010e76:	4650      	mov	r0, sl
 8010e78:	f7ef f9aa 	bl	80001d0 <memchr>
 8010e7c:	b138      	cbz	r0, 8010e8e <_vfiprintf_r+0x176>
 8010e7e:	9b04      	ldr	r3, [sp, #16]
 8010e80:	eba0 000a 	sub.w	r0, r0, sl
 8010e84:	2240      	movs	r2, #64	@ 0x40
 8010e86:	4082      	lsls	r2, r0
 8010e88:	4313      	orrs	r3, r2
 8010e8a:	3401      	adds	r4, #1
 8010e8c:	9304      	str	r3, [sp, #16]
 8010e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e92:	4829      	ldr	r0, [pc, #164]	@ (8010f38 <_vfiprintf_r+0x220>)
 8010e94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e98:	2206      	movs	r2, #6
 8010e9a:	f7ef f999 	bl	80001d0 <memchr>
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	d03f      	beq.n	8010f22 <_vfiprintf_r+0x20a>
 8010ea2:	4b26      	ldr	r3, [pc, #152]	@ (8010f3c <_vfiprintf_r+0x224>)
 8010ea4:	bb1b      	cbnz	r3, 8010eee <_vfiprintf_r+0x1d6>
 8010ea6:	9b03      	ldr	r3, [sp, #12]
 8010ea8:	3307      	adds	r3, #7
 8010eaa:	f023 0307 	bic.w	r3, r3, #7
 8010eae:	3308      	adds	r3, #8
 8010eb0:	9303      	str	r3, [sp, #12]
 8010eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010eb4:	443b      	add	r3, r7
 8010eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010eb8:	e76a      	b.n	8010d90 <_vfiprintf_r+0x78>
 8010eba:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ebe:	460c      	mov	r4, r1
 8010ec0:	2001      	movs	r0, #1
 8010ec2:	e7a8      	b.n	8010e16 <_vfiprintf_r+0xfe>
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	3401      	adds	r4, #1
 8010ec8:	9305      	str	r3, [sp, #20]
 8010eca:	4619      	mov	r1, r3
 8010ecc:	f04f 0c0a 	mov.w	ip, #10
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ed6:	3a30      	subs	r2, #48	@ 0x30
 8010ed8:	2a09      	cmp	r2, #9
 8010eda:	d903      	bls.n	8010ee4 <_vfiprintf_r+0x1cc>
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d0c6      	beq.n	8010e6e <_vfiprintf_r+0x156>
 8010ee0:	9105      	str	r1, [sp, #20]
 8010ee2:	e7c4      	b.n	8010e6e <_vfiprintf_r+0x156>
 8010ee4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ee8:	4604      	mov	r4, r0
 8010eea:	2301      	movs	r3, #1
 8010eec:	e7f0      	b.n	8010ed0 <_vfiprintf_r+0x1b8>
 8010eee:	ab03      	add	r3, sp, #12
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	462a      	mov	r2, r5
 8010ef4:	4b12      	ldr	r3, [pc, #72]	@ (8010f40 <_vfiprintf_r+0x228>)
 8010ef6:	a904      	add	r1, sp, #16
 8010ef8:	4630      	mov	r0, r6
 8010efa:	f7fb fa41 	bl	800c380 <_printf_float>
 8010efe:	4607      	mov	r7, r0
 8010f00:	1c78      	adds	r0, r7, #1
 8010f02:	d1d6      	bne.n	8010eb2 <_vfiprintf_r+0x19a>
 8010f04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f06:	07d9      	lsls	r1, r3, #31
 8010f08:	d405      	bmi.n	8010f16 <_vfiprintf_r+0x1fe>
 8010f0a:	89ab      	ldrh	r3, [r5, #12]
 8010f0c:	059a      	lsls	r2, r3, #22
 8010f0e:	d402      	bmi.n	8010f16 <_vfiprintf_r+0x1fe>
 8010f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f12:	f7fc fa1b 	bl	800d34c <__retarget_lock_release_recursive>
 8010f16:	89ab      	ldrh	r3, [r5, #12]
 8010f18:	065b      	lsls	r3, r3, #25
 8010f1a:	f53f af1f 	bmi.w	8010d5c <_vfiprintf_r+0x44>
 8010f1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f20:	e71e      	b.n	8010d60 <_vfiprintf_r+0x48>
 8010f22:	ab03      	add	r3, sp, #12
 8010f24:	9300      	str	r3, [sp, #0]
 8010f26:	462a      	mov	r2, r5
 8010f28:	4b05      	ldr	r3, [pc, #20]	@ (8010f40 <_vfiprintf_r+0x228>)
 8010f2a:	a904      	add	r1, sp, #16
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	f7fb fcbf 	bl	800c8b0 <_printf_i>
 8010f32:	e7e4      	b.n	8010efe <_vfiprintf_r+0x1e6>
 8010f34:	080117b9 	.word	0x080117b9
 8010f38:	080117c3 	.word	0x080117c3
 8010f3c:	0800c381 	.word	0x0800c381
 8010f40:	08010cf5 	.word	0x08010cf5
 8010f44:	080117bf 	.word	0x080117bf

08010f48 <__swbuf_r>:
 8010f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f4a:	460e      	mov	r6, r1
 8010f4c:	4614      	mov	r4, r2
 8010f4e:	4605      	mov	r5, r0
 8010f50:	b118      	cbz	r0, 8010f5a <__swbuf_r+0x12>
 8010f52:	6a03      	ldr	r3, [r0, #32]
 8010f54:	b90b      	cbnz	r3, 8010f5a <__swbuf_r+0x12>
 8010f56:	f7fc f86b 	bl	800d030 <__sinit>
 8010f5a:	69a3      	ldr	r3, [r4, #24]
 8010f5c:	60a3      	str	r3, [r4, #8]
 8010f5e:	89a3      	ldrh	r3, [r4, #12]
 8010f60:	071a      	lsls	r2, r3, #28
 8010f62:	d501      	bpl.n	8010f68 <__swbuf_r+0x20>
 8010f64:	6923      	ldr	r3, [r4, #16]
 8010f66:	b943      	cbnz	r3, 8010f7a <__swbuf_r+0x32>
 8010f68:	4621      	mov	r1, r4
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	f000 f82a 	bl	8010fc4 <__swsetup_r>
 8010f70:	b118      	cbz	r0, 8010f7a <__swbuf_r+0x32>
 8010f72:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010f76:	4638      	mov	r0, r7
 8010f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f7a:	6823      	ldr	r3, [r4, #0]
 8010f7c:	6922      	ldr	r2, [r4, #16]
 8010f7e:	1a98      	subs	r0, r3, r2
 8010f80:	6963      	ldr	r3, [r4, #20]
 8010f82:	b2f6      	uxtb	r6, r6
 8010f84:	4283      	cmp	r3, r0
 8010f86:	4637      	mov	r7, r6
 8010f88:	dc05      	bgt.n	8010f96 <__swbuf_r+0x4e>
 8010f8a:	4621      	mov	r1, r4
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	f7ff f95f 	bl	8010250 <_fflush_r>
 8010f92:	2800      	cmp	r0, #0
 8010f94:	d1ed      	bne.n	8010f72 <__swbuf_r+0x2a>
 8010f96:	68a3      	ldr	r3, [r4, #8]
 8010f98:	3b01      	subs	r3, #1
 8010f9a:	60a3      	str	r3, [r4, #8]
 8010f9c:	6823      	ldr	r3, [r4, #0]
 8010f9e:	1c5a      	adds	r2, r3, #1
 8010fa0:	6022      	str	r2, [r4, #0]
 8010fa2:	701e      	strb	r6, [r3, #0]
 8010fa4:	6962      	ldr	r2, [r4, #20]
 8010fa6:	1c43      	adds	r3, r0, #1
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d004      	beq.n	8010fb6 <__swbuf_r+0x6e>
 8010fac:	89a3      	ldrh	r3, [r4, #12]
 8010fae:	07db      	lsls	r3, r3, #31
 8010fb0:	d5e1      	bpl.n	8010f76 <__swbuf_r+0x2e>
 8010fb2:	2e0a      	cmp	r6, #10
 8010fb4:	d1df      	bne.n	8010f76 <__swbuf_r+0x2e>
 8010fb6:	4621      	mov	r1, r4
 8010fb8:	4628      	mov	r0, r5
 8010fba:	f7ff f949 	bl	8010250 <_fflush_r>
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	d0d9      	beq.n	8010f76 <__swbuf_r+0x2e>
 8010fc2:	e7d6      	b.n	8010f72 <__swbuf_r+0x2a>

08010fc4 <__swsetup_r>:
 8010fc4:	b538      	push	{r3, r4, r5, lr}
 8010fc6:	4b29      	ldr	r3, [pc, #164]	@ (801106c <__swsetup_r+0xa8>)
 8010fc8:	4605      	mov	r5, r0
 8010fca:	6818      	ldr	r0, [r3, #0]
 8010fcc:	460c      	mov	r4, r1
 8010fce:	b118      	cbz	r0, 8010fd8 <__swsetup_r+0x14>
 8010fd0:	6a03      	ldr	r3, [r0, #32]
 8010fd2:	b90b      	cbnz	r3, 8010fd8 <__swsetup_r+0x14>
 8010fd4:	f7fc f82c 	bl	800d030 <__sinit>
 8010fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fdc:	0719      	lsls	r1, r3, #28
 8010fde:	d422      	bmi.n	8011026 <__swsetup_r+0x62>
 8010fe0:	06da      	lsls	r2, r3, #27
 8010fe2:	d407      	bmi.n	8010ff4 <__swsetup_r+0x30>
 8010fe4:	2209      	movs	r2, #9
 8010fe6:	602a      	str	r2, [r5, #0]
 8010fe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fec:	81a3      	strh	r3, [r4, #12]
 8010fee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ff2:	e033      	b.n	801105c <__swsetup_r+0x98>
 8010ff4:	0758      	lsls	r0, r3, #29
 8010ff6:	d512      	bpl.n	801101e <__swsetup_r+0x5a>
 8010ff8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010ffa:	b141      	cbz	r1, 801100e <__swsetup_r+0x4a>
 8010ffc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011000:	4299      	cmp	r1, r3
 8011002:	d002      	beq.n	801100a <__swsetup_r+0x46>
 8011004:	4628      	mov	r0, r5
 8011006:	f7fc fff7 	bl	800dff8 <_free_r>
 801100a:	2300      	movs	r3, #0
 801100c:	6363      	str	r3, [r4, #52]	@ 0x34
 801100e:	89a3      	ldrh	r3, [r4, #12]
 8011010:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011014:	81a3      	strh	r3, [r4, #12]
 8011016:	2300      	movs	r3, #0
 8011018:	6063      	str	r3, [r4, #4]
 801101a:	6923      	ldr	r3, [r4, #16]
 801101c:	6023      	str	r3, [r4, #0]
 801101e:	89a3      	ldrh	r3, [r4, #12]
 8011020:	f043 0308 	orr.w	r3, r3, #8
 8011024:	81a3      	strh	r3, [r4, #12]
 8011026:	6923      	ldr	r3, [r4, #16]
 8011028:	b94b      	cbnz	r3, 801103e <__swsetup_r+0x7a>
 801102a:	89a3      	ldrh	r3, [r4, #12]
 801102c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011034:	d003      	beq.n	801103e <__swsetup_r+0x7a>
 8011036:	4621      	mov	r1, r4
 8011038:	4628      	mov	r0, r5
 801103a:	f000 f883 	bl	8011144 <__smakebuf_r>
 801103e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011042:	f013 0201 	ands.w	r2, r3, #1
 8011046:	d00a      	beq.n	801105e <__swsetup_r+0x9a>
 8011048:	2200      	movs	r2, #0
 801104a:	60a2      	str	r2, [r4, #8]
 801104c:	6962      	ldr	r2, [r4, #20]
 801104e:	4252      	negs	r2, r2
 8011050:	61a2      	str	r2, [r4, #24]
 8011052:	6922      	ldr	r2, [r4, #16]
 8011054:	b942      	cbnz	r2, 8011068 <__swsetup_r+0xa4>
 8011056:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801105a:	d1c5      	bne.n	8010fe8 <__swsetup_r+0x24>
 801105c:	bd38      	pop	{r3, r4, r5, pc}
 801105e:	0799      	lsls	r1, r3, #30
 8011060:	bf58      	it	pl
 8011062:	6962      	ldrpl	r2, [r4, #20]
 8011064:	60a2      	str	r2, [r4, #8]
 8011066:	e7f4      	b.n	8011052 <__swsetup_r+0x8e>
 8011068:	2000      	movs	r0, #0
 801106a:	e7f7      	b.n	801105c <__swsetup_r+0x98>
 801106c:	200001b4 	.word	0x200001b4

08011070 <_raise_r>:
 8011070:	291f      	cmp	r1, #31
 8011072:	b538      	push	{r3, r4, r5, lr}
 8011074:	4605      	mov	r5, r0
 8011076:	460c      	mov	r4, r1
 8011078:	d904      	bls.n	8011084 <_raise_r+0x14>
 801107a:	2316      	movs	r3, #22
 801107c:	6003      	str	r3, [r0, #0]
 801107e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011082:	bd38      	pop	{r3, r4, r5, pc}
 8011084:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011086:	b112      	cbz	r2, 801108e <_raise_r+0x1e>
 8011088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801108c:	b94b      	cbnz	r3, 80110a2 <_raise_r+0x32>
 801108e:	4628      	mov	r0, r5
 8011090:	f000 f830 	bl	80110f4 <_getpid_r>
 8011094:	4622      	mov	r2, r4
 8011096:	4601      	mov	r1, r0
 8011098:	4628      	mov	r0, r5
 801109a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801109e:	f000 b817 	b.w	80110d0 <_kill_r>
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	d00a      	beq.n	80110bc <_raise_r+0x4c>
 80110a6:	1c59      	adds	r1, r3, #1
 80110a8:	d103      	bne.n	80110b2 <_raise_r+0x42>
 80110aa:	2316      	movs	r3, #22
 80110ac:	6003      	str	r3, [r0, #0]
 80110ae:	2001      	movs	r0, #1
 80110b0:	e7e7      	b.n	8011082 <_raise_r+0x12>
 80110b2:	2100      	movs	r1, #0
 80110b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80110b8:	4620      	mov	r0, r4
 80110ba:	4798      	blx	r3
 80110bc:	2000      	movs	r0, #0
 80110be:	e7e0      	b.n	8011082 <_raise_r+0x12>

080110c0 <raise>:
 80110c0:	4b02      	ldr	r3, [pc, #8]	@ (80110cc <raise+0xc>)
 80110c2:	4601      	mov	r1, r0
 80110c4:	6818      	ldr	r0, [r3, #0]
 80110c6:	f7ff bfd3 	b.w	8011070 <_raise_r>
 80110ca:	bf00      	nop
 80110cc:	200001b4 	.word	0x200001b4

080110d0 <_kill_r>:
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	4d07      	ldr	r5, [pc, #28]	@ (80110f0 <_kill_r+0x20>)
 80110d4:	2300      	movs	r3, #0
 80110d6:	4604      	mov	r4, r0
 80110d8:	4608      	mov	r0, r1
 80110da:	4611      	mov	r1, r2
 80110dc:	602b      	str	r3, [r5, #0]
 80110de:	f7f0 fc73 	bl	80019c8 <_kill>
 80110e2:	1c43      	adds	r3, r0, #1
 80110e4:	d102      	bne.n	80110ec <_kill_r+0x1c>
 80110e6:	682b      	ldr	r3, [r5, #0]
 80110e8:	b103      	cbz	r3, 80110ec <_kill_r+0x1c>
 80110ea:	6023      	str	r3, [r4, #0]
 80110ec:	bd38      	pop	{r3, r4, r5, pc}
 80110ee:	bf00      	nop
 80110f0:	200023a4 	.word	0x200023a4

080110f4 <_getpid_r>:
 80110f4:	f7f0 bc60 	b.w	80019b8 <_getpid>

080110f8 <__swhatbuf_r>:
 80110f8:	b570      	push	{r4, r5, r6, lr}
 80110fa:	460c      	mov	r4, r1
 80110fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011100:	2900      	cmp	r1, #0
 8011102:	b096      	sub	sp, #88	@ 0x58
 8011104:	4615      	mov	r5, r2
 8011106:	461e      	mov	r6, r3
 8011108:	da0d      	bge.n	8011126 <__swhatbuf_r+0x2e>
 801110a:	89a3      	ldrh	r3, [r4, #12]
 801110c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011110:	f04f 0100 	mov.w	r1, #0
 8011114:	bf14      	ite	ne
 8011116:	2340      	movne	r3, #64	@ 0x40
 8011118:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801111c:	2000      	movs	r0, #0
 801111e:	6031      	str	r1, [r6, #0]
 8011120:	602b      	str	r3, [r5, #0]
 8011122:	b016      	add	sp, #88	@ 0x58
 8011124:	bd70      	pop	{r4, r5, r6, pc}
 8011126:	466a      	mov	r2, sp
 8011128:	f000 f848 	bl	80111bc <_fstat_r>
 801112c:	2800      	cmp	r0, #0
 801112e:	dbec      	blt.n	801110a <__swhatbuf_r+0x12>
 8011130:	9901      	ldr	r1, [sp, #4]
 8011132:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011136:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801113a:	4259      	negs	r1, r3
 801113c:	4159      	adcs	r1, r3
 801113e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011142:	e7eb      	b.n	801111c <__swhatbuf_r+0x24>

08011144 <__smakebuf_r>:
 8011144:	898b      	ldrh	r3, [r1, #12]
 8011146:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011148:	079d      	lsls	r5, r3, #30
 801114a:	4606      	mov	r6, r0
 801114c:	460c      	mov	r4, r1
 801114e:	d507      	bpl.n	8011160 <__smakebuf_r+0x1c>
 8011150:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011154:	6023      	str	r3, [r4, #0]
 8011156:	6123      	str	r3, [r4, #16]
 8011158:	2301      	movs	r3, #1
 801115a:	6163      	str	r3, [r4, #20]
 801115c:	b003      	add	sp, #12
 801115e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011160:	ab01      	add	r3, sp, #4
 8011162:	466a      	mov	r2, sp
 8011164:	f7ff ffc8 	bl	80110f8 <__swhatbuf_r>
 8011168:	9f00      	ldr	r7, [sp, #0]
 801116a:	4605      	mov	r5, r0
 801116c:	4639      	mov	r1, r7
 801116e:	4630      	mov	r0, r6
 8011170:	f7fc ffb6 	bl	800e0e0 <_malloc_r>
 8011174:	b948      	cbnz	r0, 801118a <__smakebuf_r+0x46>
 8011176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801117a:	059a      	lsls	r2, r3, #22
 801117c:	d4ee      	bmi.n	801115c <__smakebuf_r+0x18>
 801117e:	f023 0303 	bic.w	r3, r3, #3
 8011182:	f043 0302 	orr.w	r3, r3, #2
 8011186:	81a3      	strh	r3, [r4, #12]
 8011188:	e7e2      	b.n	8011150 <__smakebuf_r+0xc>
 801118a:	89a3      	ldrh	r3, [r4, #12]
 801118c:	6020      	str	r0, [r4, #0]
 801118e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011192:	81a3      	strh	r3, [r4, #12]
 8011194:	9b01      	ldr	r3, [sp, #4]
 8011196:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801119a:	b15b      	cbz	r3, 80111b4 <__smakebuf_r+0x70>
 801119c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111a0:	4630      	mov	r0, r6
 80111a2:	f000 f81d 	bl	80111e0 <_isatty_r>
 80111a6:	b128      	cbz	r0, 80111b4 <__smakebuf_r+0x70>
 80111a8:	89a3      	ldrh	r3, [r4, #12]
 80111aa:	f023 0303 	bic.w	r3, r3, #3
 80111ae:	f043 0301 	orr.w	r3, r3, #1
 80111b2:	81a3      	strh	r3, [r4, #12]
 80111b4:	89a3      	ldrh	r3, [r4, #12]
 80111b6:	431d      	orrs	r5, r3
 80111b8:	81a5      	strh	r5, [r4, #12]
 80111ba:	e7cf      	b.n	801115c <__smakebuf_r+0x18>

080111bc <_fstat_r>:
 80111bc:	b538      	push	{r3, r4, r5, lr}
 80111be:	4d07      	ldr	r5, [pc, #28]	@ (80111dc <_fstat_r+0x20>)
 80111c0:	2300      	movs	r3, #0
 80111c2:	4604      	mov	r4, r0
 80111c4:	4608      	mov	r0, r1
 80111c6:	4611      	mov	r1, r2
 80111c8:	602b      	str	r3, [r5, #0]
 80111ca:	f7f0 fc5d 	bl	8001a88 <_fstat>
 80111ce:	1c43      	adds	r3, r0, #1
 80111d0:	d102      	bne.n	80111d8 <_fstat_r+0x1c>
 80111d2:	682b      	ldr	r3, [r5, #0]
 80111d4:	b103      	cbz	r3, 80111d8 <_fstat_r+0x1c>
 80111d6:	6023      	str	r3, [r4, #0]
 80111d8:	bd38      	pop	{r3, r4, r5, pc}
 80111da:	bf00      	nop
 80111dc:	200023a4 	.word	0x200023a4

080111e0 <_isatty_r>:
 80111e0:	b538      	push	{r3, r4, r5, lr}
 80111e2:	4d06      	ldr	r5, [pc, #24]	@ (80111fc <_isatty_r+0x1c>)
 80111e4:	2300      	movs	r3, #0
 80111e6:	4604      	mov	r4, r0
 80111e8:	4608      	mov	r0, r1
 80111ea:	602b      	str	r3, [r5, #0]
 80111ec:	f7f0 fc5c 	bl	8001aa8 <_isatty>
 80111f0:	1c43      	adds	r3, r0, #1
 80111f2:	d102      	bne.n	80111fa <_isatty_r+0x1a>
 80111f4:	682b      	ldr	r3, [r5, #0]
 80111f6:	b103      	cbz	r3, 80111fa <_isatty_r+0x1a>
 80111f8:	6023      	str	r3, [r4, #0]
 80111fa:	bd38      	pop	{r3, r4, r5, pc}
 80111fc:	200023a4 	.word	0x200023a4

08011200 <fmaxf>:
 8011200:	b508      	push	{r3, lr}
 8011202:	ed2d 8b02 	vpush	{d8}
 8011206:	eeb0 8a40 	vmov.f32	s16, s0
 801120a:	eef0 8a60 	vmov.f32	s17, s1
 801120e:	f000 f831 	bl	8011274 <__fpclassifyf>
 8011212:	b930      	cbnz	r0, 8011222 <fmaxf+0x22>
 8011214:	eeb0 8a68 	vmov.f32	s16, s17
 8011218:	eeb0 0a48 	vmov.f32	s0, s16
 801121c:	ecbd 8b02 	vpop	{d8}
 8011220:	bd08      	pop	{r3, pc}
 8011222:	eeb0 0a68 	vmov.f32	s0, s17
 8011226:	f000 f825 	bl	8011274 <__fpclassifyf>
 801122a:	2800      	cmp	r0, #0
 801122c:	d0f4      	beq.n	8011218 <fmaxf+0x18>
 801122e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011236:	dded      	ble.n	8011214 <fmaxf+0x14>
 8011238:	e7ee      	b.n	8011218 <fmaxf+0x18>

0801123a <fminf>:
 801123a:	b508      	push	{r3, lr}
 801123c:	ed2d 8b02 	vpush	{d8}
 8011240:	eeb0 8a40 	vmov.f32	s16, s0
 8011244:	eef0 8a60 	vmov.f32	s17, s1
 8011248:	f000 f814 	bl	8011274 <__fpclassifyf>
 801124c:	b930      	cbnz	r0, 801125c <fminf+0x22>
 801124e:	eeb0 8a68 	vmov.f32	s16, s17
 8011252:	eeb0 0a48 	vmov.f32	s0, s16
 8011256:	ecbd 8b02 	vpop	{d8}
 801125a:	bd08      	pop	{r3, pc}
 801125c:	eeb0 0a68 	vmov.f32	s0, s17
 8011260:	f000 f808 	bl	8011274 <__fpclassifyf>
 8011264:	2800      	cmp	r0, #0
 8011266:	d0f4      	beq.n	8011252 <fminf+0x18>
 8011268:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011270:	d5ed      	bpl.n	801124e <fminf+0x14>
 8011272:	e7ee      	b.n	8011252 <fminf+0x18>

08011274 <__fpclassifyf>:
 8011274:	ee10 3a10 	vmov	r3, s0
 8011278:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801127c:	d00d      	beq.n	801129a <__fpclassifyf+0x26>
 801127e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8011282:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8011286:	d30a      	bcc.n	801129e <__fpclassifyf+0x2a>
 8011288:	4b07      	ldr	r3, [pc, #28]	@ (80112a8 <__fpclassifyf+0x34>)
 801128a:	1e42      	subs	r2, r0, #1
 801128c:	429a      	cmp	r2, r3
 801128e:	d908      	bls.n	80112a2 <__fpclassifyf+0x2e>
 8011290:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8011294:	4258      	negs	r0, r3
 8011296:	4158      	adcs	r0, r3
 8011298:	4770      	bx	lr
 801129a:	2002      	movs	r0, #2
 801129c:	4770      	bx	lr
 801129e:	2004      	movs	r0, #4
 80112a0:	4770      	bx	lr
 80112a2:	2003      	movs	r0, #3
 80112a4:	4770      	bx	lr
 80112a6:	bf00      	nop
 80112a8:	007ffffe 	.word	0x007ffffe

080112ac <_init>:
 80112ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ae:	bf00      	nop
 80112b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112b2:	bc08      	pop	{r3}
 80112b4:	469e      	mov	lr, r3
 80112b6:	4770      	bx	lr

080112b8 <_fini>:
 80112b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ba:	bf00      	nop
 80112bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112be:	bc08      	pop	{r3}
 80112c0:	469e      	mov	lr, r3
 80112c2:	4770      	bx	lr
