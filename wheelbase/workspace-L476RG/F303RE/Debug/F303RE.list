
F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a71c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800a8b0  0800a8b0  0000b8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a930  0800a930  0000c17c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a930  0800a930  0000c17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a930  0800a930  0000c17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a930  0800a930  0000b930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a934  0800a934  0000b934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800a938  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c17c  2**0
                  CONTENTS
 10 .bss          000013ac  2000017c  2000017c  0000c17c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001528  20001528  0000c17c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c11  00000000  00000000  0000c1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040d0  00000000  00000000  00025dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001580  00000000  00000000  00029e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001087  00000000  00000000  0002b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b11  00000000  00000000  0002c497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d9ba  00000000  00000000  00050fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1430  00000000  00000000  0006e962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fd92  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005894  00000000  00000000  0013fdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0014566c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000017c 	.word	0x2000017c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800a898 	.word	0x0800a898

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000180 	.word	0x20000180
 80001d0:	0800a898 	.word	0x0800a898

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	@ 0x28
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b40      	ldr	r3, [pc, #256]	@ (80002ec <MX_GPIO_Init+0x118>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a3f      	ldr	r2, [pc, #252]	@ (80002ec <MX_GPIO_Init+0x118>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b3d      	ldr	r3, [pc, #244]	@ (80002ec <MX_GPIO_Init+0x118>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000202:	4b3a      	ldr	r3, [pc, #232]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a39      	ldr	r2, [pc, #228]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b37      	ldr	r3, [pc, #220]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b34      	ldr	r3, [pc, #208]	@ (80002ec <MX_GPIO_Init+0x118>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a33      	ldr	r2, [pc, #204]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b31      	ldr	r3, [pc, #196]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b2e      	ldr	r3, [pc, #184]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a2d      	ldr	r2, [pc, #180]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b2b      	ldr	r3, [pc, #172]	@ (80002ec <MX_GPIO_Init+0x118>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_LED_Pin|debug_Pin|CS_ENC_2_Pin|CS_ENC_1_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	f242 3108 	movw	r1, #8968	@ 0x2308
 8000250:	4827      	ldr	r0, [pc, #156]	@ (80002f0 <MX_GPIO_Init+0x11c>)
 8000252:	f000 fffd 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	2110      	movs	r1, #16
 800025a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800025e:	f000 fff7 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR3_DIR_Pin|nBRAKE_Pin|MOTOR1_DIR_Pin|CS_ENC_3_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	f641 0106 	movw	r1, #6150	@ 0x1806
 8000268:	4822      	ldr	r0, [pc, #136]	@ (80002f4 <MX_GPIO_Init+0x120>)
 800026a:	f000 fff1 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin debug_Pin CS_ENC_2_Pin CS_ENC_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|debug_Pin|CS_ENC_2_Pin|CS_ENC_1_Pin;
 800026e:	f242 3308 	movw	r3, #8968	@ 0x2308
 8000272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000274:	2301      	movs	r3, #1
 8000276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000278:	2300      	movs	r3, #0
 800027a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027c:	2300      	movs	r3, #0
 800027e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	4619      	mov	r1, r3
 8000286:	481a      	ldr	r0, [pc, #104]	@ (80002f0 <MX_GPIO_Init+0x11c>)
 8000288:	f000 fe58 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR2_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR2_DIR_Pin;
 800028c:	2310      	movs	r3, #16
 800028e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000290:	2301      	movs	r3, #1
 8000292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000294:	2300      	movs	r3, #0
 8000296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000298:	2300      	movs	r3, #0
 800029a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR2_DIR_GPIO_Port, &GPIO_InitStruct);
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	4619      	mov	r1, r3
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a6:	f000 fe49 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR3_DIR_Pin nBRAKE_Pin MOTOR1_DIR_Pin CS_ENC_3_Pin */
  GPIO_InitStruct.Pin = MOTOR3_DIR_Pin|nBRAKE_Pin|MOTOR1_DIR_Pin|CS_ENC_3_Pin;
 80002aa:	f641 0306 	movw	r3, #6150	@ 0x1806
 80002ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b0:	2301      	movs	r3, #1
 80002b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b8:	2300      	movs	r3, #0
 80002ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002bc:	f107 0314 	add.w	r3, r7, #20
 80002c0:	4619      	mov	r1, r3
 80002c2:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <MX_GPIO_Init+0x120>)
 80002c4:	f000 fe3a 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80002c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ce:	2300      	movs	r3, #0
 80002d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d2:	2300      	movs	r3, #0
 80002d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	4619      	mov	r1, r3
 80002dc:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <MX_GPIO_Init+0x120>)
 80002de:	f000 fe2d 	bl	8000f3c <HAL_GPIO_Init>

}
 80002e2:	bf00      	nop
 80002e4:	3728      	adds	r7, #40	@ 0x28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40021000 	.word	0x40021000
 80002f0:	48000800 	.word	0x48000800
 80002f4:	48000400 	.word	0x48000400

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fc:	f000 fc2a 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000300:	f000 f810 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000304:	f7ff ff66 	bl	80001d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000308:	f000 f974 	bl	80005f4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800030c:	f000 fa00 	bl	8000710 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000310:	f000 fa58 	bl	80007c4 <MX_TIM4_Init>
  MX_SPI2_Init();
 8000314:	f000 f872 	bl	80003fc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000318:	f000 fb78 	bl	8000a0c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800031c:	f009 fe12 	bl	8009f44 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <main+0x28>

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b0a6      	sub	sp, #152	@ 0x98
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800032e:	2228      	movs	r2, #40	@ 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f00a fa84 	bl	800a840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2258      	movs	r2, #88	@ 0x58
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f00a fa76 	bl	800a840 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000354:	2301      	movs	r3, #1
 8000356:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000358:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800035c:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035e:	2301      	movs	r3, #1
 8000360:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000368:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800036c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000370:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000374:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000378:	2301      	movs	r3, #1
 800037a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000382:	4618      	mov	r0, r3
 8000384:	f002 fc30 	bl	8002be8 <HAL_RCC_OscConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800038e:	f000 f82f 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000392:	230f      	movs	r3, #15
 8000394:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000396:	2302      	movs	r3, #2
 8000398:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003ac:	2102      	movs	r1, #2
 80003ae:	4618      	mov	r0, r3
 80003b0:	f003 fc6e 	bl	8003c90 <HAL_RCC_ClockConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ba:	f000 f819 	bl	80003f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 80003be:	4b0b      	ldr	r3, [pc, #44]	@ (80003ec <SystemClock_Config+0xc8>)
 80003c0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003c6:	2300      	movs	r3, #0
 80003c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003ca:	2300      	movs	r3, #0
 80003cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80003ce:	2300      	movs	r3, #0
 80003d0:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	4618      	mov	r0, r3
 80003d6:	f003 fe7d 	bl	80040d4 <HAL_RCCEx_PeriphCLKConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80003e0:	f000 f806 	bl	80003f0 <Error_Handler>
  }
}
 80003e4:	bf00      	nop
 80003e6:	3798      	adds	r7, #152	@ 0x98
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	00221002 	.word	0x00221002

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <Error_Handler+0x8>

080003fc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000400:	4b1b      	ldr	r3, [pc, #108]	@ (8000470 <MX_SPI2_Init+0x74>)
 8000402:	4a1c      	ldr	r2, [pc, #112]	@ (8000474 <MX_SPI2_Init+0x78>)
 8000404:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000406:	4b1a      	ldr	r3, [pc, #104]	@ (8000470 <MX_SPI2_Init+0x74>)
 8000408:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800040c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800040e:	4b18      	ldr	r3, [pc, #96]	@ (8000470 <MX_SPI2_Init+0x74>)
 8000410:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000414:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000416:	4b16      	ldr	r3, [pc, #88]	@ (8000470 <MX_SPI2_Init+0x74>)
 8000418:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800041c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800041e:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <MX_SPI2_Init+0x74>)
 8000420:	2202      	movs	r2, #2
 8000422:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000424:	4b12      	ldr	r3, [pc, #72]	@ (8000470 <MX_SPI2_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800042a:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_SPI2_Init+0x74>)
 800042c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000430:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000432:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <MX_SPI2_Init+0x74>)
 8000434:	2228      	movs	r2, #40	@ 0x28
 8000436:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000438:	4b0d      	ldr	r3, [pc, #52]	@ (8000470 <MX_SPI2_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <MX_SPI2_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000444:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <MX_SPI2_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_SPI2_Init+0x74>)
 800044c:	2207      	movs	r2, #7
 800044e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000450:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <MX_SPI2_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000456:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MX_SPI2_Init+0x74>)
 8000458:	2208      	movs	r2, #8
 800045a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800045c:	4804      	ldr	r0, [pc, #16]	@ (8000470 <MX_SPI2_Init+0x74>)
 800045e:	f004 f857 	bl	8004510 <HAL_SPI_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000468:	f7ff ffc2 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000198 	.word	0x20000198
 8000474:	40003800 	.word	0x40003800

08000478 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	@ 0x28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a17      	ldr	r2, [pc, #92]	@ (80004f4 <HAL_SPI_MspInit+0x7c>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d128      	bne.n	80004ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800049a:	4b17      	ldr	r3, [pc, #92]	@ (80004f8 <HAL_SPI_MspInit+0x80>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a16      	ldr	r2, [pc, #88]	@ (80004f8 <HAL_SPI_MspInit+0x80>)
 80004a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <HAL_SPI_MspInit+0x80>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b2:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <HAL_SPI_MspInit+0x80>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a10      	ldr	r2, [pc, #64]	@ (80004f8 <HAL_SPI_MspInit+0x80>)
 80004b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <HAL_SPI_MspInit+0x80>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80004ca:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80004ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d0:	2302      	movs	r3, #2
 80004d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d8:	2303      	movs	r3, #3
 80004da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80004dc:	2305      	movs	r3, #5
 80004de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	4619      	mov	r1, r3
 80004e6:	4805      	ldr	r0, [pc, #20]	@ (80004fc <HAL_SPI_MspInit+0x84>)
 80004e8:	f000 fd28 	bl	8000f3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80004ec:	bf00      	nop
 80004ee:	3728      	adds	r7, #40	@ 0x28
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40003800 	.word	0x40003800
 80004f8:	40021000 	.word	0x40021000
 80004fc:	48000400 	.word	0x48000400

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <HAL_MspInit+0x44>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a0e      	ldr	r2, [pc, #56]	@ (8000544 <HAL_MspInit+0x44>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <HAL_MspInit+0x44>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <HAL_MspInit+0x44>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a08      	ldr	r2, [pc, #32]	@ (8000544 <HAL_MspInit+0x44>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <HAL_MspInit+0x44>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <NMI_Handler+0x4>

08000550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <MemManage_Handler+0x4>

08000560 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <BusFault_Handler+0x4>

08000568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <UsageFault_Handler+0x4>

08000570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059e:	f000 fb1f 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80005ae:	f000 ff54 	bl	800145a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20001034 	.word	0x20001034

080005bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <USART2_IRQHandler+0x10>)
 80005c2:	f004 fecb 	bl	800535c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200002e0 	.word	0x200002e0

080005d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <SystemInit+0x20>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005da:	4a05      	ldr	r2, [pc, #20]	@ (80005f0 <SystemInit+0x20>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b096      	sub	sp, #88	@ 0x58
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000606:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]
 8000616:	615a      	str	r2, [r3, #20]
 8000618:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	222c      	movs	r2, #44	@ 0x2c
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f00a f90d 	bl	800a840 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000626:	4b38      	ldr	r3, [pc, #224]	@ (8000708 <MX_TIM1_Init+0x114>)
 8000628:	4a38      	ldr	r2, [pc, #224]	@ (800070c <MX_TIM1_Init+0x118>)
 800062a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800062c:	4b36      	ldr	r3, [pc, #216]	@ (8000708 <MX_TIM1_Init+0x114>)
 800062e:	2247      	movs	r2, #71	@ 0x47
 8000630:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b35      	ldr	r3, [pc, #212]	@ (8000708 <MX_TIM1_Init+0x114>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000638:	4b33      	ldr	r3, [pc, #204]	@ (8000708 <MX_TIM1_Init+0x114>)
 800063a:	2263      	movs	r2, #99	@ 0x63
 800063c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063e:	4b32      	ldr	r3, [pc, #200]	@ (8000708 <MX_TIM1_Init+0x114>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000644:	4b30      	ldr	r3, [pc, #192]	@ (8000708 <MX_TIM1_Init+0x114>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064a:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <MX_TIM1_Init+0x114>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000650:	482d      	ldr	r0, [pc, #180]	@ (8000708 <MX_TIM1_Init+0x114>)
 8000652:	f004 f808 	bl	8004666 <HAL_TIM_PWM_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800065c:	f7ff fec8 	bl	80003f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000660:	2300      	movs	r3, #0
 8000662:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000664:	2300      	movs	r3, #0
 8000666:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000668:	2300      	movs	r3, #0
 800066a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800066c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000670:	4619      	mov	r1, r3
 8000672:	4825      	ldr	r0, [pc, #148]	@ (8000708 <MX_TIM1_Init+0x114>)
 8000674:	f004 fd12 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800067e:	f7ff feb7 	bl	80003f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000682:	2360      	movs	r3, #96	@ 0x60
 8000684:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068a:	2300      	movs	r3, #0
 800068c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800068e:	2300      	movs	r3, #0
 8000690:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000696:	2300      	movs	r3, #0
 8000698:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	4818      	ldr	r0, [pc, #96]	@ (8000708 <MX_TIM1_Init+0x114>)
 80006a8:	f004 f834 	bl	8004714 <HAL_TIM_PWM_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80006b2:	f7ff fe9d 	bl	80003f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4807      	ldr	r0, [pc, #28]	@ (8000708 <MX_TIM1_Init+0x114>)
 80006ec:	f004 fd62 	bl	80051b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80006f6:	f7ff fe7b 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006fa:	4803      	ldr	r0, [pc, #12]	@ (8000708 <MX_TIM1_Init+0x114>)
 80006fc:	f000 f904 	bl	8000908 <HAL_TIM_MspPostInit>

}
 8000700:	bf00      	nop
 8000702:	3758      	adds	r7, #88	@ 0x58
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200001fc 	.word	0x200001fc
 800070c:	40012c00 	.word	0x40012c00

08000710 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]
 8000732:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000734:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <MX_TIM3_Init+0xac>)
 8000736:	4a22      	ldr	r2, [pc, #136]	@ (80007c0 <MX_TIM3_Init+0xb0>)
 8000738:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800073a:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <MX_TIM3_Init+0xac>)
 800073c:	2247      	movs	r2, #71	@ 0x47
 800073e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_TIM3_Init+0xac>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_TIM3_Init+0xac>)
 8000748:	2263      	movs	r2, #99	@ 0x63
 800074a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074c:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_TIM3_Init+0xac>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_TIM3_Init+0xac>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000758:	4818      	ldr	r0, [pc, #96]	@ (80007bc <MX_TIM3_Init+0xac>)
 800075a:	f003 ff84 	bl	8004666 <HAL_TIM_PWM_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000764:	f7ff fe44 	bl	80003f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4811      	ldr	r0, [pc, #68]	@ (80007bc <MX_TIM3_Init+0xac>)
 8000778:	f004 fc90 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000782:	f7ff fe35 	bl	80003f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000786:	2360      	movs	r3, #96	@ 0x60
 8000788:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	4619      	mov	r1, r3
 800079c:	4807      	ldr	r0, [pc, #28]	@ (80007bc <MX_TIM3_Init+0xac>)
 800079e:	f003 ffb9 	bl	8004714 <HAL_TIM_PWM_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80007a8:	f7ff fe22 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007ac:	4803      	ldr	r0, [pc, #12]	@ (80007bc <MX_TIM3_Init+0xac>)
 80007ae:	f000 f8ab 	bl	8000908 <HAL_TIM_MspPostInit>

}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	@ 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000248 	.word	0x20000248
 80007c0:	40000400 	.word	0x40000400

080007c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
 80007e4:	615a      	str	r2, [r3, #20]
 80007e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_TIM4_Init+0xac>)
 80007ea:	4a22      	ldr	r2, [pc, #136]	@ (8000874 <MX_TIM4_Init+0xb0>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <MX_TIM4_Init+0xac>)
 80007f0:	2247      	movs	r2, #71	@ 0x47
 80007f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_TIM4_Init+0xac>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <MX_TIM4_Init+0xac>)
 80007fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000800:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_TIM4_Init+0xac>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_TIM4_Init+0xac>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800080e:	4818      	ldr	r0, [pc, #96]	@ (8000870 <MX_TIM4_Init+0xac>)
 8000810:	f003 ff29 	bl	8004666 <HAL_TIM_PWM_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800081a:	f7ff fde9 	bl	80003f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4810      	ldr	r0, [pc, #64]	@ (8000870 <MX_TIM4_Init+0xac>)
 800082e:	f004 fc35 	bl	800509c <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000838:	f7ff fdda 	bl	80003f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083c:	2360      	movs	r3, #96	@ 0x60
 800083e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	4807      	ldr	r0, [pc, #28]	@ (8000870 <MX_TIM4_Init+0xac>)
 8000854:	f003 ff5e 	bl	8004714 <HAL_TIM_PWM_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800085e:	f7ff fdc7 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000862:	4803      	ldr	r0, [pc, #12]	@ (8000870 <MX_TIM4_Init+0xac>)
 8000864:	f000 f850 	bl	8000908 <HAL_TIM_MspPostInit>

}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	@ 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000294 	.word	0x20000294
 8000874:	40000800 	.word	0x40000800

08000878 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a1c      	ldr	r2, [pc, #112]	@ (80008f8 <HAL_TIM_PWM_MspInit+0x80>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d10c      	bne.n	80008a4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800088a:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <HAL_TIM_PWM_MspInit+0x84>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	4a1b      	ldr	r2, [pc, #108]	@ (80008fc <HAL_TIM_PWM_MspInit+0x84>)
 8000890:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000894:	6193      	str	r3, [r2, #24]
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <HAL_TIM_PWM_MspInit+0x84>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80008a2:	e022      	b.n	80008ea <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a15      	ldr	r2, [pc, #84]	@ (8000900 <HAL_TIM_PWM_MspInit+0x88>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d10c      	bne.n	80008c8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <HAL_TIM_PWM_MspInit+0x84>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <HAL_TIM_PWM_MspInit+0x84>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <HAL_TIM_PWM_MspInit+0x84>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
}
 80008c6:	e010      	b.n	80008ea <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <HAL_TIM_PWM_MspInit+0x8c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d10b      	bne.n	80008ea <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <HAL_TIM_PWM_MspInit+0x84>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a09      	ldr	r2, [pc, #36]	@ (80008fc <HAL_TIM_PWM_MspInit+0x84>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <HAL_TIM_PWM_MspInit+0x84>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
}
 80008ea:	bf00      	nop
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40012c00 	.word	0x40012c00
 80008fc:	40021000 	.word	0x40021000
 8000900:	40000400 	.word	0x40000400
 8000904:	40000800 	.word	0x40000800

08000908 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a33      	ldr	r2, [pc, #204]	@ (80009f4 <HAL_TIM_MspPostInit+0xec>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d11c      	bne.n	8000964 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b33      	ldr	r3, [pc, #204]	@ (80009f8 <HAL_TIM_MspPostInit+0xf0>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a32      	ldr	r2, [pc, #200]	@ (80009f8 <HAL_TIM_MspPostInit+0xf0>)
 8000930:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b30      	ldr	r3, [pc, #192]	@ (80009f8 <HAL_TIM_MspPostInit+0xf0>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000952:	2302      	movs	r3, #2
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR1_PWM_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	4827      	ldr	r0, [pc, #156]	@ (80009fc <HAL_TIM_MspPostInit+0xf4>)
 800095e:	f000 faed 	bl	8000f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000962:	e043      	b.n	80009ec <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a25      	ldr	r2, [pc, #148]	@ (8000a00 <HAL_TIM_MspPostInit+0xf8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d11d      	bne.n	80009aa <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b22      	ldr	r3, [pc, #136]	@ (80009f8 <HAL_TIM_MspPostInit+0xf0>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a21      	ldr	r2, [pc, #132]	@ (80009f8 <HAL_TIM_MspPostInit+0xf0>)
 8000974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <HAL_TIM_MspPostInit+0xf0>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR2_PWM_Pin;
 8000986:	2340      	movs	r3, #64	@ 0x40
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000996:	2302      	movs	r3, #2
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR2_PWM_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a4:	f000 faca 	bl	8000f3c <HAL_GPIO_Init>
}
 80009a8:	e020      	b.n	80009ec <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM4)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a15      	ldr	r2, [pc, #84]	@ (8000a04 <HAL_TIM_MspPostInit+0xfc>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d11b      	bne.n	80009ec <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <HAL_TIM_MspPostInit+0xf0>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	4a0f      	ldr	r2, [pc, #60]	@ (80009f8 <HAL_TIM_MspPostInit+0xf0>)
 80009ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009be:	6153      	str	r3, [r2, #20]
 80009c0:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <HAL_TIM_MspPostInit+0xf0>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR3_PWM_Pin;
 80009cc:	2340      	movs	r3, #64	@ 0x40
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80009dc:	2302      	movs	r3, #2
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR3_PWM_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4808      	ldr	r0, [pc, #32]	@ (8000a08 <HAL_TIM_MspPostInit+0x100>)
 80009e8:	f000 faa8 	bl	8000f3c <HAL_GPIO_Init>
}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	@ 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40012c00 	.word	0x40012c00
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48000800 	.word	0x48000800
 8000a00:	40000400 	.word	0x40000400
 8000a04:	40000800 	.word	0x40000800
 8000a08:	48000400 	.word	0x48000400

08000a0c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a10:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a12:	4a15      	ldr	r2, [pc, #84]	@ (8000a68 <MX_USART2_UART_Init+0x5c>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a16:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a18:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a50:	f004 fc36 	bl	80052c0 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a5a:	f7ff fcc9 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200002e0 	.word	0x200002e0
 8000a68:	40004400 	.word	0x40004400

08000a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	@ 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a1b      	ldr	r2, [pc, #108]	@ (8000af8 <HAL_UART_MspInit+0x8c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d130      	bne.n	8000af0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <HAL_UART_MspInit+0x90>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a1a      	ldr	r2, [pc, #104]	@ (8000afc <HAL_UART_MspInit+0x90>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <HAL_UART_MspInit+0x90>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_UART_MspInit+0x90>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <HAL_UART_MspInit+0x90>)
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab0:	6153      	str	r3, [r2, #20]
 8000ab2:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_UART_MspInit+0x90>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000adc:	f000 fa2e 	bl	8000f3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2026      	movs	r0, #38	@ 0x26
 8000ae6:	f000 f976 	bl	8000dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aea:	2026      	movs	r0, #38	@ 0x26
 8000aec:	f000 f98f 	bl	8000e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	@ 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40004400 	.word	0x40004400
 8000afc:	40021000 	.word	0x40021000

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b38 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b04:	f7ff fd64 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	@ (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	@ (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f009 fe8f 	bl	800a850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fbe1 	bl	80002f8 <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000b44:	0800a938 	.word	0x0800a938
  ldr r2, =_sbss
 8000b48:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000b4c:	20001528 	.word	0x20001528

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_Init+0x28>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	@ (8000b7c <HAL_Init+0x28>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f92b 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fcc6 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f943 	bl	8000e2a <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 f90b 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	@ (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000368 	.word	0x20000368

08000c08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c0c:	4b03      	ldr	r3, [pc, #12]	@ (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000368 	.word	0x20000368

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	@ (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	@ (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	@ (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	@ 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	@ 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000da0:	f7ff ff8e 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff29 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff3e 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff8e 	bl	8000d14 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff31 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffa2 	bl	8000d7c <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d101      	bne.n	8000e54 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e02e      	b.n	8000eb2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d008      	beq.n	8000e70 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2204      	movs	r2, #4
 8000e62:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e020      	b.n	8000eb2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 020e 	bic.w	r2, r2, #14
 8000e7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0201 	bic.w	r2, r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e98:	2101      	movs	r1, #1
 8000e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d005      	beq.n	8000ee0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e027      	b.n	8000f30 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 020e 	bic.w	r2, r2, #14
 8000eee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0201 	bic.w	r2, r2, #1
 8000efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f08:	2101      	movs	r1, #1
 8000f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	4798      	blx	r3
    }
  }
  return status;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e160      	b.n	800120e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	2101      	movs	r1, #1
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 8152 	beq.w	8001208 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d005      	beq.n	8000f7c <HAL_GPIO_Init+0x40>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d130      	bne.n	8000fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f003 0201 	and.w	r2, r3, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d017      	beq.n	800101a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d123      	bne.n	800106e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	6939      	ldr	r1, [r7, #16]
 800106a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0203 	and.w	r2, r3, #3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 80ac 	beq.w	8001208 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b0:	4b5e      	ldr	r3, [pc, #376]	@ (800122c <HAL_GPIO_Init+0x2f0>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a5d      	ldr	r2, [pc, #372]	@ (800122c <HAL_GPIO_Init+0x2f0>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b5b      	ldr	r3, [pc, #364]	@ (800122c <HAL_GPIO_Init+0x2f0>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c8:	4a59      	ldr	r2, [pc, #356]	@ (8001230 <HAL_GPIO_Init+0x2f4>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010f2:	d025      	beq.n	8001140 <HAL_GPIO_Init+0x204>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a4f      	ldr	r2, [pc, #316]	@ (8001234 <HAL_GPIO_Init+0x2f8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d01f      	beq.n	800113c <HAL_GPIO_Init+0x200>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001238 <HAL_GPIO_Init+0x2fc>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d019      	beq.n	8001138 <HAL_GPIO_Init+0x1fc>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a4d      	ldr	r2, [pc, #308]	@ (800123c <HAL_GPIO_Init+0x300>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d013      	beq.n	8001134 <HAL_GPIO_Init+0x1f8>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a4c      	ldr	r2, [pc, #304]	@ (8001240 <HAL_GPIO_Init+0x304>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00d      	beq.n	8001130 <HAL_GPIO_Init+0x1f4>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a4b      	ldr	r2, [pc, #300]	@ (8001244 <HAL_GPIO_Init+0x308>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d007      	beq.n	800112c <HAL_GPIO_Init+0x1f0>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a4a      	ldr	r2, [pc, #296]	@ (8001248 <HAL_GPIO_Init+0x30c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d101      	bne.n	8001128 <HAL_GPIO_Init+0x1ec>
 8001124:	2306      	movs	r3, #6
 8001126:	e00c      	b.n	8001142 <HAL_GPIO_Init+0x206>
 8001128:	2307      	movs	r3, #7
 800112a:	e00a      	b.n	8001142 <HAL_GPIO_Init+0x206>
 800112c:	2305      	movs	r3, #5
 800112e:	e008      	b.n	8001142 <HAL_GPIO_Init+0x206>
 8001130:	2304      	movs	r3, #4
 8001132:	e006      	b.n	8001142 <HAL_GPIO_Init+0x206>
 8001134:	2303      	movs	r3, #3
 8001136:	e004      	b.n	8001142 <HAL_GPIO_Init+0x206>
 8001138:	2302      	movs	r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x206>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <HAL_GPIO_Init+0x206>
 8001140:	2300      	movs	r3, #0
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	f002 0203 	and.w	r2, r2, #3
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	4093      	lsls	r3, r2
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001152:	4937      	ldr	r1, [pc, #220]	@ (8001230 <HAL_GPIO_Init+0x2f4>)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001160:	4b3a      	ldr	r3, [pc, #232]	@ (800124c <HAL_GPIO_Init+0x310>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001184:	4a31      	ldr	r2, [pc, #196]	@ (800124c <HAL_GPIO_Init+0x310>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800118a:	4b30      	ldr	r3, [pc, #192]	@ (800124c <HAL_GPIO_Init+0x310>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011ae:	4a27      	ldr	r2, [pc, #156]	@ (800124c <HAL_GPIO_Init+0x310>)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <HAL_GPIO_Init+0x310>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011d8:	4a1c      	ldr	r2, [pc, #112]	@ (800124c <HAL_GPIO_Init+0x310>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011de:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <HAL_GPIO_Init+0x310>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001202:	4a12      	ldr	r2, [pc, #72]	@ (800124c <HAL_GPIO_Init+0x310>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	fa22 f303 	lsr.w	r3, r2, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	f47f ae97 	bne.w	8000f4c <HAL_GPIO_Init+0x10>
  }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000
 8001234:	48000400 	.word	0x48000400
 8001238:	48000800 	.word	0x48000800
 800123c:	48000c00 	.word	0x48000c00
 8001240:	48001000 	.word	0x48001000
 8001244:	48001400 	.word	0x48001400
 8001248:	48001800 	.word	0x48001800
 800124c:	40010400 	.word	0x40010400

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800126c:	e002      	b.n	8001274 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0b9      	b.n	8001406 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d106      	bne.n	80012ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f009 f81a 	bl	800a2e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2203      	movs	r2, #3
 80012b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 ffa5 	bl	8006208 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e03e      	b.n	8001342 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	3311      	adds	r3, #17
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	3310      	adds	r3, #16
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	440b      	add	r3, r1
 80012fa:	3313      	adds	r3, #19
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	440b      	add	r3, r1
 800130e:	3320      	adds	r3, #32
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	440b      	add	r3, r1
 8001322:	3324      	adds	r3, #36	@ 0x24
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	440b      	add	r3, r1
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	3301      	adds	r3, #1
 8001340:	73fb      	strb	r3, [r7, #15]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	791b      	ldrb	r3, [r3, #4]
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	429a      	cmp	r2, r3
 800134a:	d3bb      	bcc.n	80012c4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e044      	b.n	80013dc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	440b      	add	r3, r1
 8001360:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	440b      	add	r3, r1
 8001376:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	440b      	add	r3, r1
 800138c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	440b      	add	r3, r1
 80013a2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	440b      	add	r3, r1
 80013b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	3301      	adds	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	791b      	ldrb	r3, [r3, #4]
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d3b5      	bcc.n	8001352 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3304      	adds	r3, #4
 80013ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013f2:	f004 ff24 	bl	800623e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_PCD_Start+0x16>
 8001420:	2302      	movs	r3, #2
 8001422:	e016      	b.n	8001452 <HAL_PCD_Start+0x44>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f004 fed2 	bl	80061da <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001436:	2101      	movs	r1, #1
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f009 f9c9 	bl	800a7d0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f007 f990 	bl	8008768 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f007 f989 	bl	800877e <USB_ReadInterrupts>
 800146c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fab1 	bl	80019e0 <PCD_EP_ISR_Handler>

    return;
 800147e:	e0bd      	b.n	80015fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001486:	2b00      	cmp	r3, #0
 8001488:	d013      	beq.n	80014b2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001492:	b29a      	uxth	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800149c:	b292      	uxth	r2, r2
 800149e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f008 ff97 	bl	800a3d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80014a8:	2100      	movs	r1, #0
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f8a9 	bl	8001602 <HAL_PCD_SetAddress>

    return;
 80014b0:	e0a4      	b.n	80015fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00c      	beq.n	80014d6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80014ce:	b292      	uxth	r2, r2
 80014d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80014d4:	e092      	b.n	80015fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00c      	beq.n	80014fa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80014f2:	b292      	uxth	r2, r2
 80014f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80014f8:	e080      	b.n	80015fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d027      	beq.n	8001554 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800150c:	b29a      	uxth	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0204 	bic.w	r2, r2, #4
 8001516:	b292      	uxth	r2, r2
 8001518:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001524:	b29a      	uxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0208 	bic.w	r2, r2, #8
 800152e:	b292      	uxth	r2, r2
 8001530:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f008 ff87 	bl	800a448 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001542:	b29a      	uxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800154c:	b292      	uxth	r2, r2
 800154e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001552:	e053      	b.n	80015fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800155a:	2b00      	cmp	r3, #0
 800155c:	d027      	beq.n	80015ae <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001566:	b29a      	uxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0208 	orr.w	r2, r2, #8
 8001570:	b292      	uxth	r2, r2
 8001572:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800157e:	b29a      	uxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001588:	b292      	uxth	r2, r2
 800158a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001596:	b29a      	uxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0204 	orr.w	r2, r2, #4
 80015a0:	b292      	uxth	r2, r2
 80015a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f008 ff34 	bl	800a414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015ac:	e026      	b.n	80015fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00f      	beq.n	80015d8 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015ca:	b292      	uxth	r2, r2
 80015cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f008 fef2 	bl	800a3ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015d6:	e011      	b.n	80015fc <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00c      	beq.n	80015fc <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015f4:	b292      	uxth	r2, r2
 80015f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80015fa:	bf00      	nop
  }
}
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	460b      	mov	r3, r1
 800160c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_PCD_SetAddress+0x1a>
 8001618:	2302      	movs	r3, #2
 800161a:	e012      	b.n	8001642 <HAL_PCD_SetAddress+0x40>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	78fa      	ldrb	r2, [r7, #3]
 8001628:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f007 f884 	bl	8008740 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	4608      	mov	r0, r1
 8001654:	4611      	mov	r1, r2
 8001656:	461a      	mov	r2, r3
 8001658:	4603      	mov	r3, r0
 800165a:	70fb      	strb	r3, [r7, #3]
 800165c:	460b      	mov	r3, r1
 800165e:	803b      	strh	r3, [r7, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800166c:	2b00      	cmp	r3, #0
 800166e:	da0e      	bge.n	800168e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	f003 0207 	and.w	r2, r3, #7
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	3310      	adds	r3, #16
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2201      	movs	r2, #1
 800168a:	705a      	strb	r2, [r3, #1]
 800168c:	e00e      	b.n	80016ac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	f003 0207 	and.w	r2, r3, #7
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016b8:	883a      	ldrh	r2, [r7, #0]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	78ba      	ldrb	r2, [r7, #2]
 80016c2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016c4:	78bb      	ldrb	r3, [r7, #2]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d102      	bne.n	80016d0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_PCD_EP_Open+0x94>
 80016da:	2302      	movs	r3, #2
 80016dc:	e00e      	b.n	80016fc <HAL_PCD_EP_Open+0xb2>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68f9      	ldr	r1, [r7, #12]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f004 fdc5 	bl	800627c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80016fa:	7afb      	ldrb	r3, [r7, #11]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001714:	2b00      	cmp	r3, #0
 8001716:	da0e      	bge.n	8001736 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	f003 0207 	and.w	r2, r3, #7
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	3310      	adds	r3, #16
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	705a      	strb	r2, [r3, #1]
 8001734:	e00e      	b.n	8001754 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	f003 0207 	and.w	r2, r3, #7
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	b2da      	uxtb	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_PCD_EP_Close+0x6a>
 800176a:	2302      	movs	r3, #2
 800176c:	e00e      	b.n	800178c <HAL_PCD_EP_Close+0x88>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68f9      	ldr	r1, [r7, #12]
 800177c:	4618      	mov	r0, r3
 800177e:	f005 f941 	bl	8006a04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	460b      	mov	r3, r1
 80017a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017a4:	7afb      	ldrb	r3, [r7, #11]
 80017a6:	f003 0207 	and.w	r2, r3, #7
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2200      	movs	r2, #0
 80017d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6979      	ldr	r1, [r7, #20]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f005 faf9 	bl	8006dde <USB_EPStartXfer>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	460b      	mov	r3, r1
 8001800:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	f003 0207 	and.w	r2, r3, #7
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001818:	681b      	ldr	r3, [r3, #0]
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	460b      	mov	r3, r1
 8001834:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001836:	7afb      	ldrb	r3, [r7, #11]
 8001838:	f003 0207 	and.w	r2, r3, #7
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	3310      	adds	r3, #16
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4413      	add	r3, r2
 800184a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2201      	movs	r2, #1
 8001870:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001872:	7afb      	ldrb	r3, [r7, #11]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	b2da      	uxtb	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6979      	ldr	r1, [r7, #20]
 8001884:	4618      	mov	r0, r3
 8001886:	f005 faaa 	bl	8006dde <USB_EPStartXfer>

  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	7912      	ldrb	r2, [r2, #4]
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e03e      	b.n	8001930 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	da0e      	bge.n	80018d8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	f003 0207 	and.w	r2, r3, #7
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	3310      	adds	r3, #16
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2201      	movs	r2, #1
 80018d4:	705a      	strb	r2, [r3, #1]
 80018d6:	e00c      	b.n	80018f2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_PCD_EP_SetStall+0x7e>
 800190e:	2302      	movs	r3, #2
 8001910:	e00e      	b.n	8001930 <HAL_PCD_EP_SetStall+0x9c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68f9      	ldr	r1, [r7, #12]
 8001920:	4618      	mov	r0, r3
 8001922:	f006 fe0e 	bl	8008542 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	7912      	ldrb	r2, [r2, #4]
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e040      	b.n	80019d8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800195a:	2b00      	cmp	r3, #0
 800195c:	da0e      	bge.n	800197c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	f003 0207 	and.w	r2, r3, #7
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	3310      	adds	r3, #16
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	705a      	strb	r2, [r3, #1]
 800197a:	e00e      	b.n	800199a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	f003 0207 	and.w	r2, r3, #7
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_PCD_EP_ClrStall+0x82>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e00e      	b.n	80019d8 <HAL_PCD_EP_ClrStall+0xa0>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68f9      	ldr	r1, [r7, #12]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f006 fe0b 	bl	80085e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b096      	sub	sp, #88	@ 0x58
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019e8:	e3ad      	b.n	8002146 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019f2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8001a04:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f040 816f 	bne.w	8001cec <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d14c      	bne.n	8001ab4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a2a:	81fb      	strh	r3, [r7, #14]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3310      	adds	r3, #16
 8001a42:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4413      	add	r3, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	441a      	add	r2, r3
 8001a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a78:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f008 fc82 	bl	800a386 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7b1b      	ldrb	r3, [r3, #12]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 835c 	beq.w	8002146 <PCD_EP_ISR_Handler+0x766>
 8001a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 8357 	bne.w	8002146 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7b1b      	ldrb	r3, [r3, #12]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	731a      	strb	r2, [r3, #12]
 8001ab2:	e348      	b.n	8002146 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001aba:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001aca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d032      	beq.n	8001b38 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b06:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	f006 fe88 	bl	8008822 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b1e:	4013      	ands	r3, r2
 8001b20:	823b      	strh	r3, [r7, #16]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	8a3a      	ldrh	r2, [r7, #16]
 8001b28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b2c:	b292      	uxth	r2, r2
 8001b2e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f008 fbfb 	bl	800a32c <HAL_PCD_SetupStageCallback>
 8001b36:	e306      	b.n	8002146 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b38:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f280 8302 	bge.w	8002146 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001b4e:	4013      	ands	r3, r2
 8001b50:	83fb      	strh	r3, [r7, #30]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	8bfa      	ldrh	r2, [r7, #30]
 8001b58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b86:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d019      	beq.n	8001bc4 <PCD_EP_ISR_Handler+0x1e4>
 8001b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d015      	beq.n	8001bc4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9e:	6959      	ldr	r1, [r3, #20]
 8001ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f006 fe3a 	bl	8008822 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	441a      	add	r2, r3
 8001bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f008 fbc6 	bl	800a350 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001bce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 82b5 	bne.w	8002146 <PCD_EP_ISR_Handler+0x766>
 8001bdc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001be0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001be4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001be8:	f000 82ad 	beq.w	8002146 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4413      	add	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	801a      	strh	r2, [r3, #0]
 8001c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10a      	bne.n	8001c3a <PCD_EP_ISR_Handler+0x25a>
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	e039      	b.n	8001cae <PCD_EP_ISR_Handler+0x2ce>
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c40:	d818      	bhi.n	8001c74 <PCD_EP_ISR_Handler+0x294>
 8001c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <PCD_EP_ISR_Handler+0x27c>
 8001c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c58:	3301      	adds	r3, #1
 8001c5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	e01c      	b.n	8001cae <PCD_EP_ISR_Handler+0x2ce>
 8001c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <PCD_EP_ISR_Handler+0x2ae>
 8001c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	029b      	lsls	r3, r3, #10
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cbe:	827b      	strh	r3, [r7, #18]
 8001cc0:	8a7b      	ldrh	r3, [r7, #18]
 8001cc2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001cc6:	827b      	strh	r3, [r7, #18]
 8001cc8:	8a7b      	ldrh	r3, [r7, #18]
 8001cca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001cce:	827b      	strh	r3, [r7, #18]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	8a7b      	ldrh	r3, [r7, #18]
 8001cd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001cda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	8013      	strh	r3, [r2, #0]
 8001cea:	e22c      	b.n	8002146 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d00:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f280 80f6 	bge.w	8001ef6 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001d20:	4013      	ands	r3, r2
 8001d22:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001d38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d3c:	b292      	uxth	r2, r2
 8001d3e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d40:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d58:	7b1b      	ldrb	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d123      	bne.n	8001da6 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d82:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001d86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 808e 	beq.w	8001eac <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d96:	6959      	ldr	r1, [r3, #20]
 8001d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d9a:	88da      	ldrh	r2, [r3, #6]
 8001d9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001da0:	f006 fd3f 	bl	8008822 <USB_ReadPMA>
 8001da4:	e082      	b.n	8001eac <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da8:	78db      	ldrb	r3, [r3, #3]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d10a      	bne.n	8001dc4 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001dae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001db2:	461a      	mov	r2, r3
 8001db4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f9d3 	bl	8002162 <HAL_PCD_EP_DB_Receive>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001dc2:	e073      	b.n	8001eac <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dde:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	441a      	add	r2, r3
 8001df0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001df4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001df8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001dfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d022      	beq.n	8001e68 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e46:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001e4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d02c      	beq.n	8001eac <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e58:	6959      	ldr	r1, [r3, #20]
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5c:	891a      	ldrh	r2, [r3, #8]
 8001e5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e62:	f006 fcde 	bl	8008822 <USB_ReadPMA>
 8001e66:	e021      	b.n	8001eac <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e8c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001e90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d009      	beq.n	8001eac <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9e:	6959      	ldr	r1, [r3, #20]
 8001ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea2:	895a      	ldrh	r2, [r3, #10]
 8001ea4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ea8:	f006 fcbb 	bl	8008822 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eae:	69da      	ldr	r2, [r3, #28]
 8001eb0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001eb4:	441a      	add	r2, r3
 8001eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001ec2:	441a      	add	r2, r3
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <PCD_EP_ISR_Handler+0x4fc>
 8001ed0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d206      	bcs.n	8001eea <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f008 fa34 	bl	800a350 <HAL_PCD_DataOutStageCallback>
 8001ee8:	e005      	b.n	8001ef6 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f004 ff74 	bl	8006dde <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ef6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8121 	beq.w	8002146 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f04:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	3310      	adds	r3, #16
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	441a      	add	r2, r3
 8001f44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f56:	78db      	ldrb	r3, [r3, #3]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	f040 80a2 	bne.w	80020a2 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8001f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f66:	7b1b      	ldrb	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8093 	beq.w	8002094 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d046      	beq.n	8002008 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f7c:	785b      	ldrb	r3, [r3, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d126      	bne.n	8001fd0 <PCD_EP_ISR_Handler+0x5f0>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	4413      	add	r3, r2
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	00da      	lsls	r2, r3, #3
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001fa8:	623b      	str	r3, [r7, #32]
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	801a      	strh	r2, [r3, #0]
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	801a      	strh	r2, [r3, #0]
 8001fce:	e061      	b.n	8002094 <PCD_EP_ISR_Handler+0x6b4>
 8001fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fd2:	785b      	ldrb	r3, [r3, #1]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d15d      	bne.n	8002094 <PCD_EP_ISR_Handler+0x6b4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fec:	4413      	add	r3, r2
 8001fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	00da      	lsls	r2, r3, #3
 8001ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002002:	2200      	movs	r2, #0
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	e045      	b.n	8002094 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800200e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002010:	785b      	ldrb	r3, [r3, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d126      	bne.n	8002064 <PCD_EP_ISR_Handler+0x684>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	637b      	str	r3, [r7, #52]	@ 0x34
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800202a:	4413      	add	r3, r2
 800202c:	637b      	str	r3, [r7, #52]	@ 0x34
 800202e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	00da      	lsls	r2, r3, #3
 8002034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002036:	4413      	add	r3, r2
 8002038:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800203c:	633b      	str	r3, [r7, #48]	@ 0x30
 800203e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002048:	b29a      	uxth	r2, r3
 800204a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800204c:	801a      	strh	r2, [r3, #0]
 800204e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800205c:	b29a      	uxth	r2, r3
 800205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002060:	801a      	strh	r2, [r3, #0]
 8002062:	e017      	b.n	8002094 <PCD_EP_ISR_Handler+0x6b4>
 8002064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002066:	785b      	ldrb	r3, [r3, #1]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d113      	bne.n	8002094 <PCD_EP_ISR_Handler+0x6b4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002074:	b29b      	uxth	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800207a:	4413      	add	r3, r2
 800207c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800207e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	00da      	lsls	r2, r3, #3
 8002084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002086:	4413      	add	r3, r2
 8002088:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800208c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800208e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002090:	2200      	movs	r2, #0
 8002092:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f008 f973 	bl	800a386 <HAL_PCD_DataInStageCallback>
 80020a0:	e051      	b.n	8002146 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80020a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80020a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d144      	bne.n	8002138 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80020d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020de:	429a      	cmp	r2, r3
 80020e0:	d907      	bls.n	80020f2 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80020e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80020ea:	1ad2      	subs	r2, r2, r3
 80020ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ee:	619a      	str	r2, [r3, #24]
 80020f0:	e002      	b.n	80020f8 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80020f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80020f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f008 f93d 	bl	800a386 <HAL_PCD_DataInStageCallback>
 800210c:	e01b      	b.n	8002146 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800210e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002116:	441a      	add	r2, r3
 8002118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800211c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211e:	69da      	ldr	r2, [r3, #28]
 8002120:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002124:	441a      	add	r2, r3
 8002126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002128:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002130:	4618      	mov	r0, r3
 8002132:	f004 fe54 	bl	8006dde <USB_EPStartXfer>
 8002136:	e006      	b.n	8002146 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002138:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800213c:	461a      	mov	r2, r3
 800213e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f917 	bl	8002374 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800214e:	b29b      	uxth	r3, r3
 8002150:	b21b      	sxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	f6ff ac49 	blt.w	80019ea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3758      	adds	r7, #88	@ 0x58
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b088      	sub	sp, #32
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	4613      	mov	r3, r2
 800216e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d07c      	beq.n	8002274 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002182:	b29b      	uxth	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	4413      	add	r3, r2
 8002194:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800219e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	8b7b      	ldrh	r3, [r7, #26]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d306      	bcc.n	80021b8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	8b7b      	ldrh	r3, [r7, #26]
 80021b0:	1ad2      	subs	r2, r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	619a      	str	r2, [r3, #24]
 80021b6:	e002      	b.n	80021be <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2200      	movs	r2, #0
 80021bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d123      	bne.n	800220e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021e0:	833b      	strh	r3, [r7, #24]
 80021e2:	8b3b      	ldrh	r3, [r7, #24]
 80021e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80021e8:	833b      	strh	r3, [r7, #24]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	441a      	add	r2, r3
 80021f8:	8b3b      	ldrh	r3, [r7, #24]
 80021fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800220a:	b29b      	uxth	r3, r3
 800220c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01f      	beq.n	8002258 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800222e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002232:	82fb      	strh	r3, [r7, #22]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	8afb      	ldrh	r3, [r7, #22]
 8002244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800224c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002250:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002254:	b29b      	uxth	r3, r3
 8002256:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002258:	8b7b      	ldrh	r3, [r7, #26]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8085 	beq.w	800236a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	6959      	ldr	r1, [r3, #20]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	891a      	ldrh	r2, [r3, #8]
 800226c:	8b7b      	ldrh	r3, [r7, #26]
 800226e:	f006 fad8 	bl	8008822 <USB_ReadPMA>
 8002272:	e07a      	b.n	800236a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800227c:	b29b      	uxth	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	4413      	add	r3, r2
 800228e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002298:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	8b7b      	ldrh	r3, [r7, #26]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d306      	bcc.n	80022b2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	8b7b      	ldrh	r3, [r7, #26]
 80022aa:	1ad2      	subs	r2, r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	619a      	str	r2, [r3, #24]
 80022b0:	e002      	b.n	80022b8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d123      	bne.n	8002308 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022da:	83fb      	strh	r3, [r7, #30]
 80022dc:	8bfb      	ldrh	r3, [r7, #30]
 80022de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80022e2:	83fb      	strh	r3, [r7, #30]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	441a      	add	r2, r3
 80022f2:	8bfb      	ldrh	r3, [r7, #30]
 80022f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002304:	b29b      	uxth	r3, r3
 8002306:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11f      	bne.n	8002352 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800232c:	83bb      	strh	r3, [r7, #28]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	441a      	add	r2, r3
 800233c:	8bbb      	ldrh	r3, [r7, #28]
 800233e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800234a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800234e:	b29b      	uxth	r3, r3
 8002350:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002352:	8b7b      	ldrh	r3, [r7, #26]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	6959      	ldr	r1, [r3, #20]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	895a      	ldrh	r2, [r3, #10]
 8002364:	8b7b      	ldrh	r3, [r7, #26]
 8002366:	f006 fa5c 	bl	8008822 <USB_ReadPMA>
    }
  }

  return count;
 800236a:	8b7b      	ldrh	r3, [r7, #26]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3720      	adds	r7, #32
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b0a4      	sub	sp, #144	@ 0x90
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 81db 	beq.w	8002744 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002396:	b29b      	uxth	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80023be:	429a      	cmp	r2, r3
 80023c0:	d907      	bls.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80023ca:	1ad2      	subs	r2, r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	619a      	str	r2, [r3, #24]
 80023d0:	e002      	b.n	80023d8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f040 80b9 	bne.w	8002554 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	785b      	ldrb	r3, [r3, #1]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d126      	bne.n	8002438 <HAL_PCD_EP_DB_Transmit+0xc4>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fe:	4413      	add	r3, r2
 8002400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	00da      	lsls	r2, r3, #3
 8002408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240a:	4413      	add	r3, r2
 800240c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241c:	b29a      	uxth	r2, r3
 800241e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002420:	801a      	strh	r2, [r3, #0]
 8002422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002430:	b29a      	uxth	r2, r3
 8002432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	e01a      	b.n	800246e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d116      	bne.n	800246e <HAL_PCD_EP_DB_Transmit+0xfa>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	637b      	str	r3, [r7, #52]	@ 0x34
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002454:	4413      	add	r3, r2
 8002456:	637b      	str	r3, [r7, #52]	@ 0x34
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	00da      	lsls	r2, r3, #3
 800245e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002460:	4413      	add	r3, r2
 8002462:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002466:	633b      	str	r3, [r7, #48]	@ 0x30
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	2200      	movs	r2, #0
 800246c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	785b      	ldrb	r3, [r3, #1]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d126      	bne.n	80024ca <HAL_PCD_EP_DB_Transmit+0x156>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800248a:	b29b      	uxth	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	4413      	add	r3, r2
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	00da      	lsls	r2, r3, #3
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4413      	add	r3, r2
 800249e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	801a      	strh	r2, [r3, #0]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	801a      	strh	r2, [r3, #0]
 80024c8:	e017      	b.n	80024fa <HAL_PCD_EP_DB_Transmit+0x186>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	785b      	ldrb	r3, [r3, #1]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d113      	bne.n	80024fa <HAL_PCD_EP_DB_Transmit+0x186>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	4413      	add	r3, r2
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	00da      	lsls	r2, r3, #3
 80024ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ec:	4413      	add	r3, r2
 80024ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80024f2:	623b      	str	r3, [r7, #32]
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	2200      	movs	r2, #0
 80024f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	4619      	mov	r1, r3
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f007 ff40 	bl	800a386 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 82fa 	beq.w	8002b06 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800252c:	82fb      	strh	r3, [r7, #22]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	441a      	add	r2, r3
 800253c:	8afb      	ldrh	r3, [r7, #22]
 800253e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002546:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800254a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800254e:	b29b      	uxth	r3, r3
 8002550:	8013      	strh	r3, [r2, #0]
 8002552:	e2d8      	b.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d021      	beq.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002578:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	441a      	add	r2, r3
 800258a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800258e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002596:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800259a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800259e:	b29b      	uxth	r3, r3
 80025a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	f040 82ac 	bne.w	8002b06 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025b6:	441a      	add	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	69da      	ldr	r2, [r3, #28]
 80025c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025c4:	441a      	add	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	6a1a      	ldr	r2, [r3, #32]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d30b      	bcc.n	80025ee <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6a1a      	ldr	r2, [r3, #32]
 80025e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e6:	1ad2      	subs	r2, r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	621a      	str	r2, [r3, #32]
 80025ec:	e017      	b.n	800261e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d108      	bne.n	8002608 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80025f6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002606:	e00a      	b.n	800261e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2200      	movs	r2, #0
 800261c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d165      	bne.n	80026f2 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002634:	b29b      	uxth	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800263a:	4413      	add	r3, r2
 800263c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	00da      	lsls	r2, r3, #3
 8002644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002646:	4413      	add	r3, r2
 8002648:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800264c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800264e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002658:	b29a      	uxth	r2, r3
 800265a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <HAL_PCD_EP_DB_Transmit+0x308>
 8002666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002674:	b29a      	uxth	r2, r3
 8002676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	e057      	b.n	800272c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800267c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002680:	2b3e      	cmp	r3, #62	@ 0x3e
 8002682:	d818      	bhi.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x342>
 8002684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800268c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_PCD_EP_DB_Transmit+0x32a>
 8002698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800269a:	3301      	adds	r3, #1
 800269c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800269e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	029b      	lsls	r3, r3, #10
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4313      	orrs	r3, r2
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	e03a      	b.n	800272c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80026b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <HAL_PCD_EP_DB_Transmit+0x35c>
 80026ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026cc:	3b01      	subs	r3, #1
 80026ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026d8:	b29b      	uxth	r3, r3
 80026da:	029b      	lsls	r3, r3, #10
 80026dc:	b29b      	uxth	r3, r3
 80026de:	4313      	orrs	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ee:	801a      	strh	r2, [r3, #0]
 80026f0:	e01c      	b.n	800272c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	785b      	ldrb	r3, [r3, #1]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d118      	bne.n	800272c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002708:	b29b      	uxth	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800270e:	4413      	add	r3, r2
 8002710:	647b      	str	r3, [r7, #68]	@ 0x44
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	00da      	lsls	r2, r3, #3
 8002718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800271a:	4413      	add	r3, r2
 800271c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002720:	643b      	str	r3, [r7, #64]	@ 0x40
 8002722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002726:	b29a      	uxth	r2, r3
 8002728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800272a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6959      	ldr	r1, [r3, #20]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	891a      	ldrh	r2, [r3, #8]
 8002738:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800273c:	b29b      	uxth	r3, r3
 800273e:	f006 f82e 	bl	800879e <USB_WritePMA>
 8002742:	e1e0      	b.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800274c:	b29b      	uxth	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	4413      	add	r3, r2
 800275e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002768:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	699a      	ldr	r2, [r3, #24]
 8002770:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002774:	429a      	cmp	r2, r3
 8002776:	d307      	bcc.n	8002788 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002780:	1ad2      	subs	r2, r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	619a      	str	r2, [r3, #24]
 8002786:	e002      	b.n	800278e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 80c0 	bne.w	8002918 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d126      	bne.n	80027ee <HAL_PCD_EP_DB_Transmit+0x47a>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027b4:	4413      	add	r3, r2
 80027b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	00da      	lsls	r2, r3, #3
 80027be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027c0:	4413      	add	r3, r2
 80027c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80027c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027d6:	801a      	strh	r2, [r3, #0]
 80027d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	e01a      	b.n	8002824 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d116      	bne.n	8002824 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800280a:	4413      	add	r3, r2
 800280c:	667b      	str	r3, [r7, #100]	@ 0x64
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	00da      	lsls	r2, r3, #3
 8002814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002816:	4413      	add	r3, r2
 8002818:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800281c:	663b      	str	r3, [r7, #96]	@ 0x60
 800281e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002820:	2200      	movs	r2, #0
 8002822:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	677b      	str	r3, [r7, #116]	@ 0x74
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d12b      	bne.n	800288a <HAL_PCD_EP_DB_Transmit+0x516>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002840:	b29b      	uxth	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002846:	4413      	add	r3, r2
 8002848:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	00da      	lsls	r2, r3, #3
 8002850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002852:	4413      	add	r3, r2
 8002854:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002858:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800285c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b29b      	uxth	r3, r3
 8002864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002868:	b29a      	uxth	r2, r3
 800286a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800286e:	801a      	strh	r2, [r3, #0]
 8002870:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800287c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002880:	b29a      	uxth	r2, r3
 8002882:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002886:	801a      	strh	r2, [r3, #0]
 8002888:	e017      	b.n	80028ba <HAL_PCD_EP_DB_Transmit+0x546>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	785b      	ldrb	r3, [r3, #1]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d113      	bne.n	80028ba <HAL_PCD_EP_DB_Transmit+0x546>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028a0:	4413      	add	r3, r2
 80028a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	00da      	lsls	r2, r3, #3
 80028aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028ac:	4413      	add	r3, r2
 80028ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80028b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80028b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028b6:	2200      	movs	r2, #0
 80028b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	4619      	mov	r1, r3
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f007 fd60 	bl	800a386 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 811a 	bne.w	8002b06 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ec:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	441a      	add	r2, r3
 80028fe:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8002902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800290a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800290e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002912:	b29b      	uxth	r3, r3
 8002914:	8013      	strh	r3, [r2, #0]
 8002916:	e0f6      	b.n	8002b06 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d121      	bne.n	8002966 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800293c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	441a      	add	r2, r3
 800294e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002956:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800295a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800295e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002962:	b29b      	uxth	r3, r3
 8002964:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800296c:	2b01      	cmp	r3, #1
 800296e:	f040 80ca 	bne.w	8002b06 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800297a:	441a      	add	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	69da      	ldr	r2, [r3, #28]
 8002984:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002988:	441a      	add	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	6a1a      	ldr	r2, [r3, #32]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	429a      	cmp	r2, r3
 8002998:	d30b      	bcc.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	6a1a      	ldr	r2, [r3, #32]
 80029a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	621a      	str	r2, [r3, #32]
 80029b0:	e017      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d108      	bne.n	80029cc <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80029ba:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80029be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80029ca:	e00a      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2200      	movs	r2, #0
 80029d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	785b      	ldrb	r3, [r3, #1]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d165      	bne.n	8002abc <HAL_PCD_EP_DB_Transmit+0x748>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a04:	4413      	add	r3, r2
 8002a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	00da      	lsls	r2, r3, #3
 8002a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a10:	4413      	add	r3, r2
 8002a12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002a16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a26:	801a      	strh	r2, [r3, #0]
 8002a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8002a30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a42:	801a      	strh	r2, [r3, #0]
 8002a44:	e054      	b.n	8002af0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a4c:	d818      	bhi.n	8002a80 <HAL_PCD_EP_DB_Transmit+0x70c>
 8002a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a52:	085b      	lsrs	r3, r3, #1
 8002a54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8002a62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a64:	3301      	adds	r3, #1
 8002a66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	029b      	lsls	r3, r3, #10
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4313      	orrs	r3, r2
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a7c:	801a      	strh	r2, [r3, #0]
 8002a7e:	e037      	b.n	8002af0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x726>
 8002a94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a96:	3b01      	subs	r3, #1
 8002a98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	029b      	lsls	r3, r3, #10
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	e019      	b.n	8002af0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	785b      	ldrb	r3, [r3, #1]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d115      	bne.n	8002af0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad2:	4413      	add	r3, r2
 8002ad4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	00da      	lsls	r2, r3, #3
 8002adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ade:	4413      	add	r3, r2
 8002ae0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002ae4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	6959      	ldr	r1, [r3, #20]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	895a      	ldrh	r2, [r3, #10]
 8002afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f005 fe4c 	bl	800879e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b20:	82bb      	strh	r3, [r7, #20]
 8002b22:	8abb      	ldrh	r3, [r7, #20]
 8002b24:	f083 0310 	eor.w	r3, r3, #16
 8002b28:	82bb      	strh	r3, [r7, #20]
 8002b2a:	8abb      	ldrh	r3, [r7, #20]
 8002b2c:	f083 0320 	eor.w	r3, r3, #32
 8002b30:	82bb      	strh	r3, [r7, #20]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	441a      	add	r2, r3
 8002b40:	8abb      	ldrh	r3, [r7, #20]
 8002b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3790      	adds	r7, #144	@ 0x90
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	817b      	strh	r3, [r7, #10]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	897b      	ldrh	r3, [r7, #10]
 8002b80:	f003 0207 	and.w	r2, r3, #7
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	3310      	adds	r3, #16
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4413      	add	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	e009      	b.n	8002baa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b96:	897a      	ldrh	r2, [r7, #10]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002baa:	893b      	ldrh	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d107      	bne.n	8002bc0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	80da      	strh	r2, [r3, #6]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bf8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bfe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f001 b83a 	b.w	8003c82 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 816f 	beq.w	8002f02 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c24:	4bb5      	ldr	r3, [pc, #724]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d00c      	beq.n	8002c4a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c30:	4bb2      	ldr	r3, [pc, #712]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d15c      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x10e>
 8002c3c:	4baf      	ldr	r3, [pc, #700]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c48:	d155      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x10e>
 8002c4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c4e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d102      	bne.n	8002c7c <HAL_RCC_OscConfig+0x94>
 8002c76:	4ba1      	ldr	r3, [pc, #644]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	e015      	b.n	8002ca8 <HAL_RCC_OscConfig+0xc0>
 8002c7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c80:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002c90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c94:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002c98:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002ca4:	4b95      	ldr	r3, [pc, #596]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cac:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002cb0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002cb4:	fa92 f2a2 	rbit	r2, r2
 8002cb8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002cbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002cc0:	fab2 f282 	clz	r2, r2
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	f042 0220 	orr.w	r2, r2, #32
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f002 021f 	and.w	r2, r2, #31
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8111 	beq.w	8002f00 <HAL_RCC_OscConfig+0x318>
 8002cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 8108 	bne.w	8002f00 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f000 bfc6 	b.w	8003c82 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cfa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x12e>
 8002d08:	4b7c      	ldr	r3, [pc, #496]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a7b      	ldr	r2, [pc, #492]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e036      	b.n	8002d84 <HAL_RCC_OscConfig+0x19c>
 8002d16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x158>
 8002d26:	4b75      	ldr	r3, [pc, #468]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a74      	ldr	r2, [pc, #464]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b72      	ldr	r3, [pc, #456]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a71      	ldr	r2, [pc, #452]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e021      	b.n	8002d84 <HAL_RCC_OscConfig+0x19c>
 8002d40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x184>
 8002d52:	4b6a      	ldr	r3, [pc, #424]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a69      	ldr	r2, [pc, #420]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b67      	ldr	r3, [pc, #412]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a66      	ldr	r2, [pc, #408]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0x19c>
 8002d6c:	4b63      	ldr	r3, [pc, #396]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a62      	ldr	r2, [pc, #392]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b60      	ldr	r3, [pc, #384]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a5f      	ldr	r2, [pc, #380]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d82:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d059      	beq.n	8002e48 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7fd ff38 	bl	8000c08 <HAL_GetTick>
 8002d98:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9e:	f7fd ff33 	bl	8000c08 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	@ 0x64
 8002dac:	d902      	bls.n	8002db4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	f000 bf67 	b.w	8003c82 <HAL_RCC_OscConfig+0x109a>
 8002db4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002db8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002dc8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d102      	bne.n	8002de6 <HAL_RCC_OscConfig+0x1fe>
 8002de0:	4b46      	ldr	r3, [pc, #280]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	e015      	b.n	8002e12 <HAL_RCC_OscConfig+0x22a>
 8002de6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002dfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dfe:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002e02:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e16:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002e1a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002e1e:	fa92 f2a2 	rbit	r2, r2
 8002e22:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002e26:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002e2a:	fab2 f282 	clz	r2, r2
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	f042 0220 	orr.w	r2, r2, #32
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	f002 021f 	and.w	r2, r2, #31
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0ab      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1b6>
 8002e46:	e05c      	b.n	8002f02 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fd fede 	bl	8000c08 <HAL_GetTick>
 8002e4c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e52:	f7fd fed9 	bl	8000c08 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	@ 0x64
 8002e60:	d902      	bls.n	8002e68 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	f000 bf0d 	b.w	8003c82 <HAL_RCC_OscConfig+0x109a>
 8002e68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e6c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002e7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d102      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2b2>
 8002e94:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	e015      	b.n	8002ec6 <HAL_RCC_OscConfig+0x2de>
 8002e9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e9e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002eae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002eb2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002eb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8002efc <HAL_RCC_OscConfig+0x314>)
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002eca:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002ece:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002ed2:	fa92 f2a2 	rbit	r2, r2
 8002ed6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002eda:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002ede:	fab2 f282 	clz	r2, r2
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	f042 0220 	orr.w	r2, r2, #32
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	f002 021f 	and.w	r2, r2, #31
 8002eee:	2101      	movs	r1, #1
 8002ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1ab      	bne.n	8002e52 <HAL_RCC_OscConfig+0x26a>
 8002efa:	e002      	b.n	8002f02 <HAL_RCC_OscConfig+0x31a>
 8002efc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f06:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 817f 	beq.w	8003216 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f18:	4ba7      	ldr	r3, [pc, #668]	@ (80031b8 <HAL_RCC_OscConfig+0x5d0>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00c      	beq.n	8002f3e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f24:	4ba4      	ldr	r3, [pc, #656]	@ (80031b8 <HAL_RCC_OscConfig+0x5d0>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 030c 	and.w	r3, r3, #12
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d173      	bne.n	8003018 <HAL_RCC_OscConfig+0x430>
 8002f30:	4ba1      	ldr	r3, [pc, #644]	@ (80031b8 <HAL_RCC_OscConfig+0x5d0>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f3c:	d16c      	bne.n	8003018 <HAL_RCC_OscConfig+0x430>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f44:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002f50:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d102      	bne.n	8002f6e <HAL_RCC_OscConfig+0x386>
 8002f68:	4b93      	ldr	r3, [pc, #588]	@ (80031b8 <HAL_RCC_OscConfig+0x5d0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	e013      	b.n	8002f96 <HAL_RCC_OscConfig+0x3ae>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002f80:	2302      	movs	r3, #2
 8002f82:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002f86:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002f92:	4b89      	ldr	r3, [pc, #548]	@ (80031b8 <HAL_RCC_OscConfig+0x5d0>)
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	2202      	movs	r2, #2
 8002f98:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002f9c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002fa0:	fa92 f2a2 	rbit	r2, r2
 8002fa4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002fa8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002fac:	fab2 f282 	clz	r2, r2
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	f042 0220 	orr.w	r2, r2, #32
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	f002 021f 	and.w	r2, r2, #31
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCC_OscConfig+0x3f6>
 8002fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fcc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d002      	beq.n	8002fde <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f000 be52 	b.w	8003c82 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fde:	4b76      	ldr	r3, [pc, #472]	@ (80031b8 <HAL_RCC_OscConfig+0x5d0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	21f8      	movs	r1, #248	@ 0xf8
 8002ff4:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002ffc:	fa91 f1a1 	rbit	r1, r1
 8003000:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003004:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003008:	fab1 f181 	clz	r1, r1
 800300c:	b2c9      	uxtb	r1, r1
 800300e:	408b      	lsls	r3, r1
 8003010:	4969      	ldr	r1, [pc, #420]	@ (80031b8 <HAL_RCC_OscConfig+0x5d0>)
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	e0fe      	b.n	8003216 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800301c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8088 	beq.w	800313a <HAL_RCC_OscConfig+0x552>
 800302a:	2301      	movs	r3, #1
 800302c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800303c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003040:	fab3 f383 	clz	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800304a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	461a      	mov	r2, r3
 8003052:	2301      	movs	r3, #1
 8003054:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7fd fdd7 	bl	8000c08 <HAL_GetTick>
 800305a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003060:	f7fd fdd2 	bl	8000c08 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d902      	bls.n	8003076 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	f000 be06 	b.w	8003c82 <HAL_RCC_OscConfig+0x109a>
 8003076:	2302      	movs	r3, #2
 8003078:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003088:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d102      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4be>
 80030a0:	4b45      	ldr	r3, [pc, #276]	@ (80031b8 <HAL_RCC_OscConfig+0x5d0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	e013      	b.n	80030ce <HAL_RCC_OscConfig+0x4e6>
 80030a6:	2302      	movs	r3, #2
 80030a8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80030b8:	2302      	movs	r3, #2
 80030ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80030be:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80030ca:	4b3b      	ldr	r3, [pc, #236]	@ (80031b8 <HAL_RCC_OscConfig+0x5d0>)
 80030cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ce:	2202      	movs	r2, #2
 80030d0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80030d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80030d8:	fa92 f2a2 	rbit	r2, r2
 80030dc:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80030e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80030e4:	fab2 f282 	clz	r2, r2
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f042 0220 	orr.w	r2, r2, #32
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	f002 021f 	and.w	r2, r2, #31
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f202 	lsl.w	r2, r1, r2
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0af      	beq.n	8003060 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003100:	4b2d      	ldr	r3, [pc, #180]	@ (80031b8 <HAL_RCC_OscConfig+0x5d0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003108:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800310c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	21f8      	movs	r1, #248	@ 0xf8
 8003116:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800311e:	fa91 f1a1 	rbit	r1, r1
 8003122:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003126:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800312a:	fab1 f181 	clz	r1, r1
 800312e:	b2c9      	uxtb	r1, r1
 8003130:	408b      	lsls	r3, r1
 8003132:	4921      	ldr	r1, [pc, #132]	@ (80031b8 <HAL_RCC_OscConfig+0x5d0>)
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]
 8003138:	e06d      	b.n	8003216 <HAL_RCC_OscConfig+0x62e>
 800313a:	2301      	movs	r3, #1
 800313c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800314c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800315a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	461a      	mov	r2, r3
 8003162:	2300      	movs	r3, #0
 8003164:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fd fd4f 	bl	8000c08 <HAL_GetTick>
 800316a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003170:	f7fd fd4a 	bl	8000c08 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d902      	bls.n	8003186 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	f000 bd7e 	b.w	8003c82 <HAL_RCC_OscConfig+0x109a>
 8003186:	2302      	movs	r3, #2
 8003188:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003198:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <HAL_RCC_OscConfig+0x5d4>
 80031b0:	4b01      	ldr	r3, [pc, #4]	@ (80031b8 <HAL_RCC_OscConfig+0x5d0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	e016      	b.n	80031e4 <HAL_RCC_OscConfig+0x5fc>
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
 80031bc:	2302      	movs	r3, #2
 80031be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80031ce:	2302      	movs	r3, #2
 80031d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80031d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80031e0:	4bbf      	ldr	r3, [pc, #764]	@ (80034e0 <HAL_RCC_OscConfig+0x8f8>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	2202      	movs	r2, #2
 80031e6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80031ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80031ee:	fa92 f2a2 	rbit	r2, r2
 80031f2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80031f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80031fa:	fab2 f282 	clz	r2, r2
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	f042 0220 	orr.w	r2, r2, #32
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	f002 021f 	and.w	r2, r2, #31
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f202 	lsl.w	r2, r1, r2
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1ac      	bne.n	8003170 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800321a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8113 	beq.w	8003452 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800322c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003230:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d07c      	beq.n	8003336 <HAL_RCC_OscConfig+0x74e>
 800323c:	2301      	movs	r3, #1
 800323e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800324e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	4ba2      	ldr	r3, [pc, #648]	@ (80034e4 <HAL_RCC_OscConfig+0x8fc>)
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	461a      	mov	r2, r3
 8003262:	2301      	movs	r3, #1
 8003264:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fd fccf 	bl	8000c08 <HAL_GetTick>
 800326a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003270:	f7fd fcca 	bl	8000c08 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d902      	bls.n	8003286 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	f000 bcfe 	b.w	8003c82 <HAL_RCC_OscConfig+0x109a>
 8003286:	2302      	movs	r3, #2
 8003288:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003290:	fa93 f2a3 	rbit	r2, r3
 8003294:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003298:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032a6:	2202      	movs	r2, #2
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	fa93 f2a3 	rbit	r2, r3
 80032b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032ca:	2202      	movs	r2, #2
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fa93 f2a3 	rbit	r2, r3
 80032dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e6:	4b7e      	ldr	r3, [pc, #504]	@ (80034e0 <HAL_RCC_OscConfig+0x8f8>)
 80032e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80032f2:	2102      	movs	r1, #2
 80032f4:	6019      	str	r1, [r3, #0]
 80032f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f1a3 	rbit	r1, r3
 8003304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003308:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800330c:	6019      	str	r1, [r3, #0]
  return result;
 800330e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003312:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	2101      	movs	r1, #1
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d09d      	beq.n	8003270 <HAL_RCC_OscConfig+0x688>
 8003334:	e08d      	b.n	8003452 <HAL_RCC_OscConfig+0x86a>
 8003336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800333a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003346:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	fa93 f2a3 	rbit	r2, r3
 8003350:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003354:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003358:	601a      	str	r2, [r3, #0]
  return result;
 800335a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800335e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003362:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	4b5d      	ldr	r3, [pc, #372]	@ (80034e4 <HAL_RCC_OscConfig+0x8fc>)
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	461a      	mov	r2, r3
 8003374:	2300      	movs	r3, #0
 8003376:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003378:	f7fd fc46 	bl	8000c08 <HAL_GetTick>
 800337c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003382:	f7fd fc41 	bl	8000c08 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d902      	bls.n	8003398 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	f000 bc75 	b.w	8003c82 <HAL_RCC_OscConfig+0x109a>
 8003398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800339c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80033a0:	2202      	movs	r2, #2
 80033a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	fa93 f2a3 	rbit	r2, r3
 80033b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80033c4:	2202      	movs	r2, #2
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	fa93 f2a3 	rbit	r2, r3
 80033d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80033e8:	2202      	movs	r2, #2
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003402:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	4b36      	ldr	r3, [pc, #216]	@ (80034e0 <HAL_RCC_OscConfig+0x8f8>)
 8003406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003408:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800340c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003410:	2102      	movs	r1, #2
 8003412:	6019      	str	r1, [r3, #0]
 8003414:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003418:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	fa93 f1a3 	rbit	r1, r3
 8003422:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003426:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800342a:	6019      	str	r1, [r3, #0]
  return result;
 800342c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003430:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d197      	bne.n	8003382 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003456:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 81a5 	beq.w	80037b2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346e:	4b1c      	ldr	r3, [pc, #112]	@ (80034e0 <HAL_RCC_OscConfig+0x8f8>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d116      	bne.n	80034a8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <HAL_RCC_OscConfig+0x8f8>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	4a18      	ldr	r2, [pc, #96]	@ (80034e0 <HAL_RCC_OscConfig+0x8f8>)
 8003480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003484:	61d3      	str	r3, [r2, #28]
 8003486:	4b16      	ldr	r3, [pc, #88]	@ (80034e0 <HAL_RCC_OscConfig+0x8f8>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800348e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003492:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800349c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	4b0f      	ldr	r3, [pc, #60]	@ (80034e8 <HAL_RCC_OscConfig+0x900>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d121      	bne.n	80034f8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b4:	4b0c      	ldr	r3, [pc, #48]	@ (80034e8 <HAL_RCC_OscConfig+0x900>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a0b      	ldr	r2, [pc, #44]	@ (80034e8 <HAL_RCC_OscConfig+0x900>)
 80034ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c0:	f7fd fba2 	bl	8000c08 <HAL_GetTick>
 80034c4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	e010      	b.n	80034ec <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7fd fb9d 	bl	8000c08 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	@ 0x64
 80034d8:	d908      	bls.n	80034ec <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e3d1      	b.n	8003c82 <HAL_RCC_OscConfig+0x109a>
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000
 80034e4:	10908120 	.word	0x10908120
 80034e8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	4b8d      	ldr	r3, [pc, #564]	@ (8003724 <HAL_RCC_OscConfig+0xb3c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0e8      	beq.n	80034ca <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d106      	bne.n	8003516 <HAL_RCC_OscConfig+0x92e>
 8003508:	4b87      	ldr	r3, [pc, #540]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4a86      	ldr	r2, [pc, #536]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	e035      	b.n	8003582 <HAL_RCC_OscConfig+0x99a>
 8003516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800351a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0x958>
 8003526:	4b80      	ldr	r3, [pc, #512]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	4a7f      	ldr	r2, [pc, #508]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	6213      	str	r3, [r2, #32]
 8003532:	4b7d      	ldr	r3, [pc, #500]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	4a7c      	ldr	r2, [pc, #496]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 8003538:	f023 0304 	bic.w	r3, r3, #4
 800353c:	6213      	str	r3, [r2, #32]
 800353e:	e020      	b.n	8003582 <HAL_RCC_OscConfig+0x99a>
 8003540:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003544:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b05      	cmp	r3, #5
 800354e:	d10c      	bne.n	800356a <HAL_RCC_OscConfig+0x982>
 8003550:	4b75      	ldr	r3, [pc, #468]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4a74      	ldr	r2, [pc, #464]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 8003556:	f043 0304 	orr.w	r3, r3, #4
 800355a:	6213      	str	r3, [r2, #32]
 800355c:	4b72      	ldr	r3, [pc, #456]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4a71      	ldr	r2, [pc, #452]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6213      	str	r3, [r2, #32]
 8003568:	e00b      	b.n	8003582 <HAL_RCC_OscConfig+0x99a>
 800356a:	4b6f      	ldr	r3, [pc, #444]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a6e      	ldr	r2, [pc, #440]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	6213      	str	r3, [r2, #32]
 8003576:	4b6c      	ldr	r3, [pc, #432]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a6b      	ldr	r2, [pc, #428]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003586:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 8081 	beq.w	8003696 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003594:	f7fd fb38 	bl	8000c08 <HAL_GetTick>
 8003598:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00b      	b.n	80035b6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fd fb33 	bl	8000c08 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e365      	b.n	8003c82 <HAL_RCC_OscConfig+0x109a>
 80035b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80035be:	2202      	movs	r2, #2
 80035c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	fa93 f2a3 	rbit	r2, r3
 80035d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035d4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80035e2:	2202      	movs	r2, #2
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	fa93 f2a3 	rbit	r2, r3
 80035f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035f8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80035fc:	601a      	str	r2, [r3, #0]
  return result;
 80035fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003602:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003606:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003608:	fab3 f383 	clz	r3, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d102      	bne.n	8003622 <HAL_RCC_OscConfig+0xa3a>
 800361c:	4b42      	ldr	r3, [pc, #264]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	e013      	b.n	800364a <HAL_RCC_OscConfig+0xa62>
 8003622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003626:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800362a:	2202      	movs	r2, #2
 800362c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003632:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	fa93 f2a3 	rbit	r2, r3
 800363c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003640:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	4b38      	ldr	r3, [pc, #224]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800364e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003652:	2102      	movs	r1, #2
 8003654:	6011      	str	r1, [r2, #0]
 8003656:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800365a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	fa92 f1a2 	rbit	r1, r2
 8003664:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003668:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800366c:	6011      	str	r1, [r2, #0]
  return result;
 800366e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003672:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	fab2 f282 	clz	r2, r2
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	f002 021f 	and.w	r2, r2, #31
 8003688:	2101      	movs	r1, #1
 800368a:	fa01 f202 	lsl.w	r2, r1, r2
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d084      	beq.n	800359e <HAL_RCC_OscConfig+0x9b6>
 8003694:	e083      	b.n	800379e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003696:	f7fd fab7 	bl	8000c08 <HAL_GetTick>
 800369a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369e:	e00b      	b.n	80036b8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fd fab2 	bl	8000c08 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e2e4      	b.n	8003c82 <HAL_RCC_OscConfig+0x109a>
 80036b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036bc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80036c0:	2202      	movs	r2, #2
 80036c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	fa93 f2a3 	rbit	r2, r3
 80036d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036d6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036e0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80036e4:	2202      	movs	r2, #2
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	fa93 f2a3 	rbit	r2, r3
 80036f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036fa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80036fe:	601a      	str	r2, [r3, #0]
  return result;
 8003700:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003704:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003708:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d106      	bne.n	800372c <HAL_RCC_OscConfig+0xb44>
 800371e:	4b02      	ldr	r3, [pc, #8]	@ (8003728 <HAL_RCC_OscConfig+0xb40>)
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	e017      	b.n	8003754 <HAL_RCC_OscConfig+0xb6c>
 8003724:	40007000 	.word	0x40007000
 8003728:	40021000 	.word	0x40021000
 800372c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003730:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003734:	2202      	movs	r2, #2
 8003736:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800373c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	fa93 f2a3 	rbit	r2, r3
 8003746:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800374a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	4bb3      	ldr	r3, [pc, #716]	@ (8003a20 <HAL_RCC_OscConfig+0xe38>)
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003758:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800375c:	2102      	movs	r1, #2
 800375e:	6011      	str	r1, [r2, #0]
 8003760:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003764:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	fa92 f1a2 	rbit	r1, r2
 800376e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003772:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003776:	6011      	str	r1, [r2, #0]
  return result;
 8003778:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800377c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	fab2 f282 	clz	r2, r2
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	f002 021f 	and.w	r2, r2, #31
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f202 	lsl.w	r2, r1, r2
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d180      	bne.n	80036a0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800379e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b9e      	ldr	r3, [pc, #632]	@ (8003a20 <HAL_RCC_OscConfig+0xe38>)
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	4a9d      	ldr	r2, [pc, #628]	@ (8003a20 <HAL_RCC_OscConfig+0xe38>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037b0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 825e 	beq.w	8003c80 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c4:	4b96      	ldr	r3, [pc, #600]	@ (8003a20 <HAL_RCC_OscConfig+0xe38>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	f000 821f 	beq.w	8003c10 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	f040 8170 	bne.w	8003ac4 <HAL_RCC_OscConfig+0xedc>
 80037e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037e8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80037ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	fa93 f2a3 	rbit	r2, r3
 8003800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003804:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003808:	601a      	str	r2, [r3, #0]
  return result;
 800380a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800380e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003812:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800381e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	461a      	mov	r2, r3
 8003826:	2300      	movs	r3, #0
 8003828:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fd f9ed 	bl	8000c08 <HAL_GetTick>
 800382e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003832:	e009      	b.n	8003848 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003834:	f7fd f9e8 	bl	8000c08 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e21c      	b.n	8003c82 <HAL_RCC_OscConfig+0x109a>
 8003848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800384c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003850:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800385a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	fa93 f2a3 	rbit	r2, r3
 8003864:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003868:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800386c:	601a      	str	r2, [r3, #0]
  return result;
 800386e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003872:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003876:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003878:	fab3 f383 	clz	r3, r3
 800387c:	b2db      	uxtb	r3, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d102      	bne.n	8003892 <HAL_RCC_OscConfig+0xcaa>
 800388c:	4b64      	ldr	r3, [pc, #400]	@ (8003a20 <HAL_RCC_OscConfig+0xe38>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	e027      	b.n	80038e2 <HAL_RCC_OscConfig+0xcfa>
 8003892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003896:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800389a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800389e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038a4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	fa93 f2a3 	rbit	r2, r3
 80038ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038bc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80038c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ca:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	fa93 f2a3 	rbit	r2, r3
 80038d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038d8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	4b50      	ldr	r3, [pc, #320]	@ (8003a20 <HAL_RCC_OscConfig+0xe38>)
 80038e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038e6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80038ea:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80038ee:	6011      	str	r1, [r2, #0]
 80038f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80038f4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	fa92 f1a2 	rbit	r1, r2
 80038fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003902:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003906:	6011      	str	r1, [r2, #0]
  return result;
 8003908:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800390c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	fab2 f282 	clz	r2, r2
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	f042 0220 	orr.w	r2, r2, #32
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	f002 021f 	and.w	r2, r2, #31
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f202 	lsl.w	r2, r1, r2
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d182      	bne.n	8003834 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800392e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a20 <HAL_RCC_OscConfig+0xe38>)
 8003930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003932:	f023 020f 	bic.w	r2, r3, #15
 8003936:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800393a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	4937      	ldr	r1, [pc, #220]	@ (8003a20 <HAL_RCC_OscConfig+0xe38>)
 8003944:	4313      	orrs	r3, r2
 8003946:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003948:	4b35      	ldr	r3, [pc, #212]	@ (8003a20 <HAL_RCC_OscConfig+0xe38>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003954:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6a19      	ldr	r1, [r3, #32]
 800395c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003960:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	430b      	orrs	r3, r1
 800396a:	492d      	ldr	r1, [pc, #180]	@ (8003a20 <HAL_RCC_OscConfig+0xe38>)
 800396c:	4313      	orrs	r3, r2
 800396e:	604b      	str	r3, [r1, #4]
 8003970:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003974:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003978:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800397c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003982:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	fa93 f2a3 	rbit	r2, r3
 800398c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003990:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003994:	601a      	str	r2, [r3, #0]
  return result;
 8003996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800399a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800399e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	461a      	mov	r2, r3
 80039b2:	2301      	movs	r3, #1
 80039b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fd f927 	bl	8000c08 <HAL_GetTick>
 80039ba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039be:	e009      	b.n	80039d4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fd f922 	bl	8000c08 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e156      	b.n	8003c82 <HAL_RCC_OscConfig+0x109a>
 80039d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80039dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039e6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	fa93 f2a3 	rbit	r2, r3
 80039f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039f4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80039f8:	601a      	str	r2, [r3, #0]
  return result;
 80039fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039fe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003a02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a04:	fab3 f383 	clz	r3, r3
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_RCC_OscConfig+0xe3c>
 8003a18:	4b01      	ldr	r3, [pc, #4]	@ (8003a20 <HAL_RCC_OscConfig+0xe38>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	e02a      	b.n	8003a74 <HAL_RCC_OscConfig+0xe8c>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003a2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a36:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	fa93 f2a3 	rbit	r2, r3
 8003a40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a44:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a4e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003a52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a5c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	fa93 f2a3 	rbit	r2, r3
 8003a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a6a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	4b86      	ldr	r3, [pc, #536]	@ (8003c8c <HAL_RCC_OscConfig+0x10a4>)
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a78:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003a7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003a80:	6011      	str	r1, [r2, #0]
 8003a82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a86:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	fa92 f1a2 	rbit	r1, r2
 8003a90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a94:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003a98:	6011      	str	r1, [r2, #0]
  return result;
 8003a9a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a9e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	fab2 f282 	clz	r2, r2
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	f042 0220 	orr.w	r2, r2, #32
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	f002 021f 	and.w	r2, r2, #31
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f43f af7f 	beq.w	80039c0 <HAL_RCC_OscConfig+0xdd8>
 8003ac2:	e0dd      	b.n	8003c80 <HAL_RCC_OscConfig+0x1098>
 8003ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ac8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003acc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ad6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	fa93 f2a3 	rbit	r2, r3
 8003ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003ae8:	601a      	str	r2, [r3, #0]
  return result;
 8003aea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003af2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003afe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	461a      	mov	r2, r3
 8003b06:	2300      	movs	r3, #0
 8003b08:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fd f87d 	bl	8000c08 <HAL_GetTick>
 8003b0e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b12:	e009      	b.n	8003b28 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b14:	f7fd f878 	bl	8000c08 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e0ac      	b.n	8003c82 <HAL_RCC_OscConfig+0x109a>
 8003b28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b2c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003b30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b3a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	fa93 f2a3 	rbit	r2, r3
 8003b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003b4c:	601a      	str	r2, [r3, #0]
  return result;
 8003b4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b52:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003b56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d102      	bne.n	8003b72 <HAL_RCC_OscConfig+0xf8a>
 8003b6c:	4b47      	ldr	r3, [pc, #284]	@ (8003c8c <HAL_RCC_OscConfig+0x10a4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	e027      	b.n	8003bc2 <HAL_RCC_OscConfig+0xfda>
 8003b72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b76:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003b7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b84:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	fa93 f2a3 	rbit	r2, r3
 8003b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b92:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b9c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003ba0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003baa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	fa93 f2a3 	rbit	r2, r3
 8003bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	4b33      	ldr	r3, [pc, #204]	@ (8003c8c <HAL_RCC_OscConfig+0x10a4>)
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bc6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003bca:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003bce:	6011      	str	r1, [r2, #0]
 8003bd0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bd4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	fa92 f1a2 	rbit	r1, r2
 8003bde:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003be2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003be6:	6011      	str	r1, [r2, #0]
  return result;
 8003be8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bec:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	fab2 f282 	clz	r2, r2
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	f042 0220 	orr.w	r2, r2, #32
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	f002 021f 	and.w	r2, r2, #31
 8003c02:	2101      	movs	r1, #1
 8003c04:	fa01 f202 	lsl.w	r2, r1, r2
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d182      	bne.n	8003b14 <HAL_RCC_OscConfig+0xf2c>
 8003c0e:	e037      	b.n	8003c80 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e02e      	b.n	8003c82 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c24:	4b19      	ldr	r3, [pc, #100]	@ (8003c8c <HAL_RCC_OscConfig+0x10a4>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003c2c:	4b17      	ldr	r3, [pc, #92]	@ (8003c8c <HAL_RCC_OscConfig+0x10a4>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c30:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c38:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d117      	bne.n	8003c7c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003c50:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d10b      	bne.n	8003c7c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c68:	f003 020f 	and.w	r2, r3, #15
 8003c6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000

08003c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b09e      	sub	sp, #120	@ 0x78
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e162      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b90      	ldr	r3, [pc, #576]	@ (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d910      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b8d      	ldr	r3, [pc, #564]	@ (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 0207 	bic.w	r2, r3, #7
 8003cbe:	498b      	ldr	r1, [pc, #556]	@ (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b89      	ldr	r3, [pc, #548]	@ (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e14a      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce4:	4b82      	ldr	r3, [pc, #520]	@ (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	497f      	ldr	r1, [pc, #508]	@ (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80dc 	beq.w	8003ebc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d13c      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xf6>
 8003d0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1c:	fab3 f383 	clz	r3, r3
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d102      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xa6>
 8003d30:	4b6f      	ldr	r3, [pc, #444]	@ (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	e00f      	b.n	8003d56 <HAL_RCC_ClockConfig+0xc6>
 8003d36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d3e:	fa93 f3a3 	rbit	r3, r3
 8003d42:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d48:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d4c:	fa93 f3a3 	rbit	r3, r3
 8003d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d52:	4b67      	ldr	r3, [pc, #412]	@ (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d5e:	fa92 f2a2 	rbit	r2, r2
 8003d62:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003d64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d66:	fab2 f282 	clz	r2, r2
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	f042 0220 	orr.w	r2, r2, #32
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	f002 021f 	and.w	r2, r2, #31
 8003d76:	2101      	movs	r1, #1
 8003d78:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d17b      	bne.n	8003e7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0f3      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d13c      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x178>
 8003d8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9e:	fab3 f383 	clz	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x128>
 8003db2:	4b4f      	ldr	r3, [pc, #316]	@ (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	e00f      	b.n	8003dd8 <HAL_RCC_ClockConfig+0x148>
 8003db8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dca:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dd4:	4b46      	ldr	r3, [pc, #280]	@ (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ddc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003dde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003de0:	fa92 f2a2 	rbit	r2, r2
 8003de4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003de6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003de8:	fab2 f282 	clz	r2, r2
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	f042 0220 	orr.w	r2, r2, #32
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	f002 021f 	and.w	r2, r2, #31
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d13a      	bne.n	8003e7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0b2      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0e:	fa93 f3a3 	rbit	r3, r3
 8003e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d102      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x1a0>
 8003e2a:	4b31      	ldr	r3, [pc, #196]	@ (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	e00d      	b.n	8003e4c <HAL_RCC_ClockConfig+0x1bc>
 8003e30:	2302      	movs	r3, #2
 8003e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e36:	fa93 f3a3 	rbit	r3, r3
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	623b      	str	r3, [r7, #32]
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	4b29      	ldr	r3, [pc, #164]	@ (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	61ba      	str	r2, [r7, #24]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	fa92 f2a2 	rbit	r2, r2
 8003e56:	617a      	str	r2, [r7, #20]
  return result;
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	fab2 f282 	clz	r2, r2
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	f042 0220 	orr.w	r2, r2, #32
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	f002 021f 	and.w	r2, r2, #31
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e079      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	491a      	ldr	r1, [pc, #104]	@ (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e8c:	f7fc febc 	bl	8000c08 <HAL_GetTick>
 8003e90:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7fc feb8 	bl	8000c08 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e061      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	4b11      	ldr	r3, [pc, #68]	@ (8003ef0 <HAL_RCC_ClockConfig+0x260>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 020c 	and.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1eb      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d214      	bcs.n	8003ef4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b08      	ldr	r3, [pc, #32]	@ (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 0207 	bic.w	r2, r3, #7
 8003ed2:	4906      	ldr	r1, [pc, #24]	@ (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b04      	ldr	r3, [pc, #16]	@ (8003eec <HAL_RCC_ClockConfig+0x25c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e040      	b.n	8003f6e <HAL_RCC_ClockConfig+0x2de>
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f00:	4b1d      	ldr	r3, [pc, #116]	@ (8003f78 <HAL_RCC_ClockConfig+0x2e8>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	491a      	ldr	r1, [pc, #104]	@ (8003f78 <HAL_RCC_ClockConfig+0x2e8>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f1e:	4b16      	ldr	r3, [pc, #88]	@ (8003f78 <HAL_RCC_ClockConfig+0x2e8>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4912      	ldr	r1, [pc, #72]	@ (8003f78 <HAL_RCC_ClockConfig+0x2e8>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f32:	f000 f829 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003f36:	4601      	mov	r1, r0
 8003f38:	4b0f      	ldr	r3, [pc, #60]	@ (8003f78 <HAL_RCC_ClockConfig+0x2e8>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f40:	22f0      	movs	r2, #240	@ 0xf0
 8003f42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	fa92 f2a2 	rbit	r2, r2
 8003f4a:	60fa      	str	r2, [r7, #12]
  return result;
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	fab2 f282 	clz	r2, r2
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	40d3      	lsrs	r3, r2
 8003f56:	4a09      	ldr	r2, [pc, #36]	@ (8003f7c <HAL_RCC_ClockConfig+0x2ec>)
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f5e:	4a08      	ldr	r2, [pc, #32]	@ (8003f80 <HAL_RCC_ClockConfig+0x2f0>)
 8003f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f62:	4b08      	ldr	r3, [pc, #32]	@ (8003f84 <HAL_RCC_ClockConfig+0x2f4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc fe0a 	bl	8000b80 <HAL_InitTick>
  
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3778      	adds	r7, #120	@ 0x78
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	0800a8f8 	.word	0x0800a8f8
 8003f80:	20000000 	.word	0x20000000
 8003f84:	20000004 	.word	0x20000004

08003f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d002      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x30>
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x36>
 8003fb6:	e029      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fba:	613b      	str	r3, [r7, #16]
      break;
 8003fbc:	e029      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	0c9b      	lsrs	r3, r3, #18
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	4a18      	ldr	r2, [pc, #96]	@ (8004028 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fc8:	5cd3      	ldrb	r3, [r2, r3]
 8003fca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003fcc:	4b14      	ldr	r3, [pc, #80]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	4a15      	ldr	r2, [pc, #84]	@ (800402c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fd6:	5cd3      	ldrb	r3, [r2, r3]
 8003fd8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	e007      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8004030 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	613b      	str	r3, [r7, #16]
      break;
 800400a:	e002      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800400c:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <HAL_RCC_GetSysClockFreq+0xa8>)
 800400e:	613b      	str	r3, [r7, #16]
      break;
 8004010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004012:	693b      	ldr	r3, [r7, #16]
}
 8004014:	4618      	mov	r0, r3
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40021000 	.word	0x40021000
 8004024:	00f42400 	.word	0x00f42400
 8004028:	0800a910 	.word	0x0800a910
 800402c:	0800a920 	.word	0x0800a920
 8004030:	007a1200 	.word	0x007a1200

08004034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004038:	4b03      	ldr	r3, [pc, #12]	@ (8004048 <HAL_RCC_GetHCLKFreq+0x14>)
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000000 	.word	0x20000000

0800404c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004052:	f7ff ffef 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8004056:	4601      	mov	r1, r0
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004060:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004064:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	fa92 f2a2 	rbit	r2, r2
 800406c:	603a      	str	r2, [r7, #0]
  return result;
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	fab2 f282 	clz	r2, r2
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	40d3      	lsrs	r3, r2
 8004078:	4a04      	ldr	r2, [pc, #16]	@ (800408c <HAL_RCC_GetPCLK1Freq+0x40>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40021000 	.word	0x40021000
 800408c:	0800a908 	.word	0x0800a908

08004090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004096:	f7ff ffcd 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 800409a:	4601      	mov	r1, r0
 800409c:	4b0b      	ldr	r3, [pc, #44]	@ (80040cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80040a4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80040a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	fa92 f2a2 	rbit	r2, r2
 80040b0:	603a      	str	r2, [r7, #0]
  return result;
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	fab2 f282 	clz	r2, r2
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	40d3      	lsrs	r3, r2
 80040bc:	4a04      	ldr	r2, [pc, #16]	@ (80040d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80040be:	5cd3      	ldrb	r3, [r2, r3]
 80040c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	0800a908 	.word	0x0800a908

080040d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b092      	sub	sp, #72	@ 0x48
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 80d4 	beq.w	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f8:	4b4e      	ldr	r3, [pc, #312]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10e      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004104:	4b4b      	ldr	r3, [pc, #300]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	4a4a      	ldr	r2, [pc, #296]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410e:	61d3      	str	r3, [r2, #28]
 8004110:	4b48      	ldr	r3, [pc, #288]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004122:	4b45      	ldr	r3, [pc, #276]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d118      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412e:	4b42      	ldr	r3, [pc, #264]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a41      	ldr	r2, [pc, #260]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004138:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413a:	f7fc fd65 	bl	8000c08 <HAL_GetTick>
 800413e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004140:	e008      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004142:	f7fc fd61 	bl	8000c08 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b64      	cmp	r3, #100	@ 0x64
 800414e:	d901      	bls.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e1d6      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	4b38      	ldr	r3, [pc, #224]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004160:	4b34      	ldr	r3, [pc, #208]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004168:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800416a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8084 	beq.w	800427a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800417a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800417c:	429a      	cmp	r2, r3
 800417e:	d07c      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004180:	4b2c      	ldr	r3, [pc, #176]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800418a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800418e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800419a:	fab3 f383 	clz	r3, r3
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b26      	ldr	r3, [pc, #152]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	461a      	mov	r2, r3
 80041aa:	2301      	movs	r3, #1
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80041b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80041bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	4b1d      	ldr	r3, [pc, #116]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	461a      	mov	r2, r3
 80041ce:	2300      	movs	r3, #0
 80041d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041d2:	4a18      	ldr	r2, [pc, #96]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d04b      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e2:	f7fc fd11 	bl	8000c08 <HAL_GetTick>
 80041e6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e8:	e00a      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ea:	f7fc fd0d 	bl	8000c08 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e180      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004200:	2302      	movs	r3, #2
 8004202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
 800420c:	2302      	movs	r3, #2
 800420e:	623b      	str	r3, [r7, #32]
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	61fb      	str	r3, [r7, #28]
  return result;
 8004218:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f043 0302 	orr.w	r3, r3, #2
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d108      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800422e:	4b01      	ldr	r3, [pc, #4]	@ (8004234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	e00d      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004234:	40021000 	.word	0x40021000
 8004238:	40007000 	.word	0x40007000
 800423c:	10908100 	.word	0x10908100
 8004240:	2302      	movs	r3, #2
 8004242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	4b9a      	ldr	r3, [pc, #616]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	2202      	movs	r2, #2
 8004252:	613a      	str	r2, [r7, #16]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	fa92 f2a2 	rbit	r2, r2
 800425a:	60fa      	str	r2, [r7, #12]
  return result;
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	fab2 f282 	clz	r2, r2
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	f002 021f 	and.w	r2, r2, #31
 800426e:	2101      	movs	r1, #1
 8004270:	fa01 f202 	lsl.w	r2, r1, r2
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0b7      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800427a:	4b8f      	ldr	r3, [pc, #572]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	498c      	ldr	r1, [pc, #560]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004288:	4313      	orrs	r3, r2
 800428a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800428c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004290:	2b01      	cmp	r3, #1
 8004292:	d105      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004294:	4b88      	ldr	r3, [pc, #544]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	4a87      	ldr	r2, [pc, #540]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800429a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800429e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042ac:	4b82      	ldr	r3, [pc, #520]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b0:	f023 0203 	bic.w	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	497f      	ldr	r1, [pc, #508]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042ca:	4b7b      	ldr	r3, [pc, #492]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ce:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	4978      	ldr	r1, [pc, #480]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042e8:	4b73      	ldr	r3, [pc, #460]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	4970      	ldr	r1, [pc, #448]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004306:	4b6c      	ldr	r3, [pc, #432]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	f023 0210 	bic.w	r2, r3, #16
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	4969      	ldr	r1, [pc, #420]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004314:	4313      	orrs	r3, r2
 8004316:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004324:	4b64      	ldr	r3, [pc, #400]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004330:	4961      	ldr	r1, [pc, #388]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004342:	4b5d      	ldr	r3, [pc, #372]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004346:	f023 0220 	bic.w	r2, r3, #32
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	495a      	ldr	r1, [pc, #360]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004350:	4313      	orrs	r3, r2
 8004352:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004360:	4b55      	ldr	r3, [pc, #340]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004364:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436c:	4952      	ldr	r1, [pc, #328]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800436e:	4313      	orrs	r3, r2
 8004370:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800437e:	4b4e      	ldr	r3, [pc, #312]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004382:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	494b      	ldr	r1, [pc, #300]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800438c:	4313      	orrs	r3, r2
 800438e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800439c:	4b46      	ldr	r3, [pc, #280]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800439e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	4943      	ldr	r1, [pc, #268]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043ba:	4b3f      	ldr	r3, [pc, #252]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c6:	493c      	ldr	r1, [pc, #240]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043d8:	4b37      	ldr	r3, [pc, #220]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	4934      	ldr	r1, [pc, #208]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80043f6:	4b30      	ldr	r3, [pc, #192]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004402:	492d      	ldr	r1, [pc, #180]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004404:	4313      	orrs	r3, r2
 8004406:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004414:	4b28      	ldr	r3, [pc, #160]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004420:	4925      	ldr	r1, [pc, #148]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004422:	4313      	orrs	r3, r2
 8004424:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004432:	4b21      	ldr	r3, [pc, #132]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004436:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	491e      	ldr	r1, [pc, #120]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004440:	4313      	orrs	r3, r2
 8004442:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004450:	4b19      	ldr	r3, [pc, #100]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445c:	4916      	ldr	r1, [pc, #88]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800445e:	4313      	orrs	r3, r2
 8004460:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800446e:	4b12      	ldr	r3, [pc, #72]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447a:	490f      	ldr	r1, [pc, #60]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800447c:	4313      	orrs	r3, r2
 800447e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d008      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800448c:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004490:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004498:	4907      	ldr	r1, [pc, #28]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00c      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80044aa:	4b03      	ldr	r3, [pc, #12]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	e002      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044be:	4913      	ldr	r1, [pc, #76]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80044d0:	4b0e      	ldr	r3, [pc, #56]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044dc:	490b      	ldr	r1, [pc, #44]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80044ee:	4b07      	ldr	r3, [pc, #28]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044fa:	4904      	ldr	r1, [pc, #16]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3748      	adds	r7, #72	@ 0x48
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000

08004510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e09d      	b.n	800465e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	2b00      	cmp	r3, #0
 8004528:	d108      	bne.n	800453c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004532:	d009      	beq.n	8004548 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	61da      	str	r2, [r3, #28]
 800453a:	e005      	b.n	8004548 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fb ff88 	bl	8000478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800457e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004588:	d902      	bls.n	8004590 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	e002      	b.n	8004596 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004594:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800459e:	d007      	beq.n	80045b0 <HAL_SPI_Init+0xa0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045a8:	d002      	beq.n	80045b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f2:	ea42 0103 	orr.w	r1, r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	0c1b      	lsrs	r3, r3, #16
 800460c:	f003 0204 	and.w	r2, r3, #4
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800462c:	ea42 0103 	orr.w	r1, r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800464c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e049      	b.n	800470c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7fc f8f3 	bl	8000878 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f000 f949 	bl	800493c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800472e:	2302      	movs	r3, #2
 8004730:	e0ff      	b.n	8004932 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b14      	cmp	r3, #20
 800473e:	f200 80f0 	bhi.w	8004922 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004742:	a201      	add	r2, pc, #4	@ (adr r2, 8004748 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	0800479d 	.word	0x0800479d
 800474c:	08004923 	.word	0x08004923
 8004750:	08004923 	.word	0x08004923
 8004754:	08004923 	.word	0x08004923
 8004758:	080047dd 	.word	0x080047dd
 800475c:	08004923 	.word	0x08004923
 8004760:	08004923 	.word	0x08004923
 8004764:	08004923 	.word	0x08004923
 8004768:	0800481f 	.word	0x0800481f
 800476c:	08004923 	.word	0x08004923
 8004770:	08004923 	.word	0x08004923
 8004774:	08004923 	.word	0x08004923
 8004778:	0800485f 	.word	0x0800485f
 800477c:	08004923 	.word	0x08004923
 8004780:	08004923 	.word	0x08004923
 8004784:	08004923 	.word	0x08004923
 8004788:	080048a1 	.word	0x080048a1
 800478c:	08004923 	.word	0x08004923
 8004790:	08004923 	.word	0x08004923
 8004794:	08004923 	.word	0x08004923
 8004798:	080048e1 	.word	0x080048e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f974 	bl	8004a90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0208 	orr.w	r2, r2, #8
 80047b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0204 	bic.w	r2, r2, #4
 80047c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6999      	ldr	r1, [r3, #24]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	619a      	str	r2, [r3, #24]
      break;
 80047da:	e0a5      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f9ee 	bl	8004bc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6999      	ldr	r1, [r3, #24]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	021a      	lsls	r2, r3, #8
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	619a      	str	r2, [r3, #24]
      break;
 800481c:	e084      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fa61 	bl	8004cec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0208 	orr.w	r2, r2, #8
 8004838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0204 	bic.w	r2, r2, #4
 8004848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69d9      	ldr	r1, [r3, #28]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	61da      	str	r2, [r3, #28]
      break;
 800485c:	e064      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fad3 	bl	8004e10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69d9      	ldr	r1, [r3, #28]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	021a      	lsls	r2, r3, #8
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	61da      	str	r2, [r3, #28]
      break;
 800489e:	e043      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fb22 	bl	8004ef0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0208 	orr.w	r2, r2, #8
 80048ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0204 	bic.w	r2, r2, #4
 80048ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80048de:	e023      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fb6c 	bl	8004fc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800490a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	021a      	lsls	r2, r3, #8
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004920:	e002      	b.n	8004928 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
      break;
 8004926:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004930:	7dfb      	ldrb	r3, [r7, #23]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop

0800493c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a48      	ldr	r2, [pc, #288]	@ (8004a70 <TIM_Base_SetConfig+0x134>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800495a:	d00f      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a45      	ldr	r2, [pc, #276]	@ (8004a74 <TIM_Base_SetConfig+0x138>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00b      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a44      	ldr	r2, [pc, #272]	@ (8004a78 <TIM_Base_SetConfig+0x13c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a43      	ldr	r2, [pc, #268]	@ (8004a7c <TIM_Base_SetConfig+0x140>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a42      	ldr	r2, [pc, #264]	@ (8004a80 <TIM_Base_SetConfig+0x144>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d108      	bne.n	800498e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4313      	orrs	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a37      	ldr	r2, [pc, #220]	@ (8004a70 <TIM_Base_SetConfig+0x134>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01f      	beq.n	80049d6 <TIM_Base_SetConfig+0x9a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499c:	d01b      	beq.n	80049d6 <TIM_Base_SetConfig+0x9a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a34      	ldr	r2, [pc, #208]	@ (8004a74 <TIM_Base_SetConfig+0x138>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d017      	beq.n	80049d6 <TIM_Base_SetConfig+0x9a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a33      	ldr	r2, [pc, #204]	@ (8004a78 <TIM_Base_SetConfig+0x13c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <TIM_Base_SetConfig+0x9a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a32      	ldr	r2, [pc, #200]	@ (8004a7c <TIM_Base_SetConfig+0x140>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00f      	beq.n	80049d6 <TIM_Base_SetConfig+0x9a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a32      	ldr	r2, [pc, #200]	@ (8004a84 <TIM_Base_SetConfig+0x148>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00b      	beq.n	80049d6 <TIM_Base_SetConfig+0x9a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a31      	ldr	r2, [pc, #196]	@ (8004a88 <TIM_Base_SetConfig+0x14c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d007      	beq.n	80049d6 <TIM_Base_SetConfig+0x9a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a30      	ldr	r2, [pc, #192]	@ (8004a8c <TIM_Base_SetConfig+0x150>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_Base_SetConfig+0x9a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004a80 <TIM_Base_SetConfig+0x144>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d108      	bne.n	80049e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a18      	ldr	r2, [pc, #96]	@ (8004a70 <TIM_Base_SetConfig+0x134>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d013      	beq.n	8004a3c <TIM_Base_SetConfig+0x100>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a19      	ldr	r2, [pc, #100]	@ (8004a7c <TIM_Base_SetConfig+0x140>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00f      	beq.n	8004a3c <TIM_Base_SetConfig+0x100>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a19      	ldr	r2, [pc, #100]	@ (8004a84 <TIM_Base_SetConfig+0x148>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <TIM_Base_SetConfig+0x100>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a18      	ldr	r2, [pc, #96]	@ (8004a88 <TIM_Base_SetConfig+0x14c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d007      	beq.n	8004a3c <TIM_Base_SetConfig+0x100>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a17      	ldr	r2, [pc, #92]	@ (8004a8c <TIM_Base_SetConfig+0x150>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_Base_SetConfig+0x100>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a12      	ldr	r2, [pc, #72]	@ (8004a80 <TIM_Base_SetConfig+0x144>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d103      	bne.n	8004a44 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f023 0201 	bic.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	611a      	str	r2, [r3, #16]
  }
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40013400 	.word	0x40013400
 8004a80:	40015000 	.word	0x40015000
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800

08004a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f023 0201 	bic.w	r2, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f023 0302 	bic.w	r3, r3, #2
 8004adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a30      	ldr	r2, [pc, #192]	@ (8004bac <TIM_OC1_SetConfig+0x11c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <TIM_OC1_SetConfig+0x88>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a2f      	ldr	r2, [pc, #188]	@ (8004bb0 <TIM_OC1_SetConfig+0x120>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00f      	beq.n	8004b18 <TIM_OC1_SetConfig+0x88>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb4 <TIM_OC1_SetConfig+0x124>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00b      	beq.n	8004b18 <TIM_OC1_SetConfig+0x88>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb8 <TIM_OC1_SetConfig+0x128>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d007      	beq.n	8004b18 <TIM_OC1_SetConfig+0x88>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004bbc <TIM_OC1_SetConfig+0x12c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_OC1_SetConfig+0x88>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc0 <TIM_OC1_SetConfig+0x130>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d10c      	bne.n	8004b32 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0308 	bic.w	r3, r3, #8
 8004b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 0304 	bic.w	r3, r3, #4
 8004b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a1d      	ldr	r2, [pc, #116]	@ (8004bac <TIM_OC1_SetConfig+0x11c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d013      	beq.n	8004b62 <TIM_OC1_SetConfig+0xd2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb0 <TIM_OC1_SetConfig+0x120>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00f      	beq.n	8004b62 <TIM_OC1_SetConfig+0xd2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb4 <TIM_OC1_SetConfig+0x124>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00b      	beq.n	8004b62 <TIM_OC1_SetConfig+0xd2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb8 <TIM_OC1_SetConfig+0x128>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d007      	beq.n	8004b62 <TIM_OC1_SetConfig+0xd2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a19      	ldr	r2, [pc, #100]	@ (8004bbc <TIM_OC1_SetConfig+0x12c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_OC1_SetConfig+0xd2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a18      	ldr	r2, [pc, #96]	@ (8004bc0 <TIM_OC1_SetConfig+0x130>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d111      	bne.n	8004b86 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40013400 	.word	0x40013400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	40014800 	.word	0x40014800
 8004bc0:	40015000 	.word	0x40015000

08004bc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f023 0210 	bic.w	r2, r3, #16
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0320 	bic.w	r3, r3, #32
 8004c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a2c      	ldr	r2, [pc, #176]	@ (8004cd4 <TIM_OC2_SetConfig+0x110>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d007      	beq.n	8004c38 <TIM_OC2_SetConfig+0x74>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a2b      	ldr	r2, [pc, #172]	@ (8004cd8 <TIM_OC2_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <TIM_OC2_SetConfig+0x74>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a2a      	ldr	r2, [pc, #168]	@ (8004cdc <TIM_OC2_SetConfig+0x118>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d10d      	bne.n	8004c54 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd4 <TIM_OC2_SetConfig+0x110>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <TIM_OC2_SetConfig+0xc0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd8 <TIM_OC2_SetConfig+0x114>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00f      	beq.n	8004c84 <TIM_OC2_SetConfig+0xc0>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce0 <TIM_OC2_SetConfig+0x11c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00b      	beq.n	8004c84 <TIM_OC2_SetConfig+0xc0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce4 <TIM_OC2_SetConfig+0x120>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d007      	beq.n	8004c84 <TIM_OC2_SetConfig+0xc0>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce8 <TIM_OC2_SetConfig+0x124>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d003      	beq.n	8004c84 <TIM_OC2_SetConfig+0xc0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a17      	ldr	r2, [pc, #92]	@ (8004cdc <TIM_OC2_SetConfig+0x118>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d113      	bne.n	8004cac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c8a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c92:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40013400 	.word	0x40013400
 8004cdc:	40015000 	.word	0x40015000
 8004ce0:	40014000 	.word	0x40014000
 8004ce4:	40014400 	.word	0x40014400
 8004ce8:	40014800 	.word	0x40014800

08004cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2b      	ldr	r2, [pc, #172]	@ (8004df8 <TIM_OC3_SetConfig+0x10c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d007      	beq.n	8004d5e <TIM_OC3_SetConfig+0x72>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2a      	ldr	r2, [pc, #168]	@ (8004dfc <TIM_OC3_SetConfig+0x110>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d003      	beq.n	8004d5e <TIM_OC3_SetConfig+0x72>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a29      	ldr	r2, [pc, #164]	@ (8004e00 <TIM_OC3_SetConfig+0x114>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d10d      	bne.n	8004d7a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d78:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004df8 <TIM_OC3_SetConfig+0x10c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <TIM_OC3_SetConfig+0xbe>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a1d      	ldr	r2, [pc, #116]	@ (8004dfc <TIM_OC3_SetConfig+0x110>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00f      	beq.n	8004daa <TIM_OC3_SetConfig+0xbe>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004e04 <TIM_OC3_SetConfig+0x118>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00b      	beq.n	8004daa <TIM_OC3_SetConfig+0xbe>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a1c      	ldr	r2, [pc, #112]	@ (8004e08 <TIM_OC3_SetConfig+0x11c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d007      	beq.n	8004daa <TIM_OC3_SetConfig+0xbe>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e0c <TIM_OC3_SetConfig+0x120>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d003      	beq.n	8004daa <TIM_OC3_SetConfig+0xbe>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a16      	ldr	r2, [pc, #88]	@ (8004e00 <TIM_OC3_SetConfig+0x114>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d113      	bne.n	8004dd2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	621a      	str	r2, [r3, #32]
}
 8004dec:	bf00      	nop
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40013400 	.word	0x40013400
 8004e00:	40015000 	.word	0x40015000
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800

08004e10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	031b      	lsls	r3, r3, #12
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed8 <TIM_OC4_SetConfig+0xc8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d013      	beq.n	8004e9c <TIM_OC4_SetConfig+0x8c>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a19      	ldr	r2, [pc, #100]	@ (8004edc <TIM_OC4_SetConfig+0xcc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00f      	beq.n	8004e9c <TIM_OC4_SetConfig+0x8c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a18      	ldr	r2, [pc, #96]	@ (8004ee0 <TIM_OC4_SetConfig+0xd0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <TIM_OC4_SetConfig+0x8c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a17      	ldr	r2, [pc, #92]	@ (8004ee4 <TIM_OC4_SetConfig+0xd4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d007      	beq.n	8004e9c <TIM_OC4_SetConfig+0x8c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a16      	ldr	r2, [pc, #88]	@ (8004ee8 <TIM_OC4_SetConfig+0xd8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_OC4_SetConfig+0x8c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a15      	ldr	r2, [pc, #84]	@ (8004eec <TIM_OC4_SetConfig+0xdc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d109      	bne.n	8004eb0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ea2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	019b      	lsls	r3, r3, #6
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40013400 	.word	0x40013400
 8004ee0:	40014000 	.word	0x40014000
 8004ee4:	40014400 	.word	0x40014400
 8004ee8:	40014800 	.word	0x40014800
 8004eec:	40015000 	.word	0x40015000

08004ef0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a19      	ldr	r2, [pc, #100]	@ (8004fac <TIM_OC5_SetConfig+0xbc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <TIM_OC5_SetConfig+0x82>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a18      	ldr	r2, [pc, #96]	@ (8004fb0 <TIM_OC5_SetConfig+0xc0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00f      	beq.n	8004f72 <TIM_OC5_SetConfig+0x82>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a17      	ldr	r2, [pc, #92]	@ (8004fb4 <TIM_OC5_SetConfig+0xc4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00b      	beq.n	8004f72 <TIM_OC5_SetConfig+0x82>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a16      	ldr	r2, [pc, #88]	@ (8004fb8 <TIM_OC5_SetConfig+0xc8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d007      	beq.n	8004f72 <TIM_OC5_SetConfig+0x82>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a15      	ldr	r2, [pc, #84]	@ (8004fbc <TIM_OC5_SetConfig+0xcc>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d003      	beq.n	8004f72 <TIM_OC5_SetConfig+0x82>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a14      	ldr	r2, [pc, #80]	@ (8004fc0 <TIM_OC5_SetConfig+0xd0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d109      	bne.n	8004f86 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	621a      	str	r2, [r3, #32]
}
 8004fa0:	bf00      	nop
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	40012c00 	.word	0x40012c00
 8004fb0:	40013400 	.word	0x40013400
 8004fb4:	40014000 	.word	0x40014000
 8004fb8:	40014400 	.word	0x40014400
 8004fbc:	40014800 	.word	0x40014800
 8004fc0:	40015000 	.word	0x40015000

08004fc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800500a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	051b      	lsls	r3, r3, #20
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a1a      	ldr	r2, [pc, #104]	@ (8005084 <TIM_OC6_SetConfig+0xc0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d013      	beq.n	8005048 <TIM_OC6_SetConfig+0x84>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a19      	ldr	r2, [pc, #100]	@ (8005088 <TIM_OC6_SetConfig+0xc4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00f      	beq.n	8005048 <TIM_OC6_SetConfig+0x84>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a18      	ldr	r2, [pc, #96]	@ (800508c <TIM_OC6_SetConfig+0xc8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00b      	beq.n	8005048 <TIM_OC6_SetConfig+0x84>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a17      	ldr	r2, [pc, #92]	@ (8005090 <TIM_OC6_SetConfig+0xcc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d007      	beq.n	8005048 <TIM_OC6_SetConfig+0x84>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a16      	ldr	r2, [pc, #88]	@ (8005094 <TIM_OC6_SetConfig+0xd0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d003      	beq.n	8005048 <TIM_OC6_SetConfig+0x84>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a15      	ldr	r2, [pc, #84]	@ (8005098 <TIM_OC6_SetConfig+0xd4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d109      	bne.n	800505c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800504e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	029b      	lsls	r3, r3, #10
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40012c00 	.word	0x40012c00
 8005088:	40013400 	.word	0x40013400
 800508c:	40014000 	.word	0x40014000
 8005090:	40014400 	.word	0x40014400
 8005094:	40014800 	.word	0x40014800
 8005098:	40015000 	.word	0x40015000

0800509c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e06d      	b.n	8005190 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a30      	ldr	r2, [pc, #192]	@ (800519c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a2f      	ldr	r2, [pc, #188]	@ (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2d      	ldr	r2, [pc, #180]	@ (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d108      	bne.n	8005104 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80050f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800510a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1e      	ldr	r2, [pc, #120]	@ (800519c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d01d      	beq.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005130:	d018      	beq.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1c      	ldr	r2, [pc, #112]	@ (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1a      	ldr	r2, [pc, #104]	@ (80051ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a15      	ldr	r2, [pc, #84]	@ (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a16      	ldr	r2, [pc, #88]	@ (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a11      	ldr	r2, [pc, #68]	@ (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d10c      	bne.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800516a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	4313      	orrs	r3, r2
 8005174:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40012c00 	.word	0x40012c00
 80051a0:	40013400 	.word	0x40013400
 80051a4:	40015000 	.word	0x40015000
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800
 80051b0:	40014000 	.word	0x40014000

080051b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e06a      	b.n	80052a6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a19      	ldr	r2, [pc, #100]	@ (80052b4 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d009      	beq.n	8005268 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a17      	ldr	r2, [pc, #92]	@ (80052b8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a16      	ldr	r2, [pc, #88]	@ (80052bc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d115      	bne.n	8005294 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	051b      	lsls	r3, r3, #20
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	40013400 	.word	0x40013400
 80052bc:	40015000 	.word	0x40015000

080052c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e040      	b.n	8005354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fb fbc2 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2224      	movs	r2, #36	@ 0x24
 80052ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fd02 	bl	8005d10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fb2b 	bl	8005968 <UART_SetConfig>
 8005312:	4603      	mov	r3, r0
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e01b      	b.n	8005354 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800532a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800533a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fd81 	bl	8005e54 <UART_CheckIdleState>
 8005352:	4603      	mov	r3, r0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b0ba      	sub	sp, #232	@ 0xe8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005382:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005386:	f640 030f 	movw	r3, #2063	@ 0x80f
 800538a:	4013      	ands	r3, r2
 800538c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d115      	bne.n	80053c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00f      	beq.n	80053c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 82ab 	beq.w	8005910 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	4798      	blx	r3
      }
      return;
 80053c2:	e2a5      	b.n	8005910 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8117 	beq.w	80055fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80053de:	4b85      	ldr	r3, [pc, #532]	@ (80055f4 <HAL_UART_IRQHandler+0x298>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 810a 	beq.w	80055fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d011      	beq.n	8005418 <HAL_UART_IRQHandler+0xbc>
 80053f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2201      	movs	r2, #1
 8005406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800540e:	f043 0201 	orr.w	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d011      	beq.n	8005448 <HAL_UART_IRQHandler+0xec>
 8005424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00b      	beq.n	8005448 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2202      	movs	r2, #2
 8005436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800543e:	f043 0204 	orr.w	r2, r3, #4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d011      	beq.n	8005478 <HAL_UART_IRQHandler+0x11c>
 8005454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00b      	beq.n	8005478 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2204      	movs	r2, #4
 8005466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800546e:	f043 0202 	orr.w	r2, r3, #2
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d017      	beq.n	80054b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b00      	cmp	r3, #0
 800548e:	d105      	bne.n	800549c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005494:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2208      	movs	r2, #8
 80054a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054aa:	f043 0208 	orr.w	r2, r3, #8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d012      	beq.n	80054e6 <HAL_UART_IRQHandler+0x18a>
 80054c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00c      	beq.n	80054e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054dc:	f043 0220 	orr.w	r2, r3, #32
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8211 	beq.w	8005914 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00d      	beq.n	800551a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005520:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552e:	2b40      	cmp	r3, #64	@ 0x40
 8005530:	d005      	beq.n	800553e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005536:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800553a:	2b00      	cmp	r3, #0
 800553c:	d04f      	beq.n	80055de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fd9d 	bl	800607e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554e:	2b40      	cmp	r3, #64	@ 0x40
 8005550:	d141      	bne.n	80055d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3308      	adds	r3, #8
 8005558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005568:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800556c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800557e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005582:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800558a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1d9      	bne.n	8005552 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d013      	beq.n	80055ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055aa:	4a13      	ldr	r2, [pc, #76]	@ (80055f8 <HAL_UART_IRQHandler+0x29c>)
 80055ac:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fb fc83 	bl	8000ebe <HAL_DMA_Abort_IT>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d017      	beq.n	80055ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055c8:	4610      	mov	r0, r2
 80055ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055cc:	e00f      	b.n	80055ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f9b4 	bl	800593c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d4:	e00b      	b.n	80055ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f9b0 	bl	800593c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055dc:	e007      	b.n	80055ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f9ac 	bl	800593c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80055ec:	e192      	b.n	8005914 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ee:	bf00      	nop
    return;
 80055f0:	e190      	b.n	8005914 <HAL_UART_IRQHandler+0x5b8>
 80055f2:	bf00      	nop
 80055f4:	04000120 	.word	0x04000120
 80055f8:	08006147 	.word	0x08006147

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005600:	2b01      	cmp	r3, #1
 8005602:	f040 814b 	bne.w	800589c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 8144 	beq.w	800589c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 813d 	beq.w	800589c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2210      	movs	r2, #16
 8005628:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005634:	2b40      	cmp	r3, #64	@ 0x40
 8005636:	f040 80b5 	bne.w	80057a4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005646:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 8164 	beq.w	8005918 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800565a:	429a      	cmp	r2, r3
 800565c:	f080 815c 	bcs.w	8005918 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005666:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	2b20      	cmp	r3, #32
 8005672:	f000 8086 	beq.w	8005782 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800568a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800568e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005692:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80056a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80056a4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056b0:	e841 2300 	strex	r3, r2, [r1]
 80056b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1da      	bne.n	8005676 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3308      	adds	r3, #8
 80056e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056e4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056f0:	e841 2300 	strex	r3, r2, [r1]
 80056f4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e1      	bne.n	80056c0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800570c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800570e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005712:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3308      	adds	r3, #8
 800571c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005720:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005722:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005726:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800572e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e3      	bne.n	80056fc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005752:	f023 0310 	bic.w	r3, r3, #16
 8005756:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005764:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005766:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800576a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e4      	bne.n	8005742 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800577c:	4618      	mov	r0, r3
 800577e:	f7fb fb60 	bl	8000e42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2202      	movs	r2, #2
 8005786:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005794:	b29b      	uxth	r3, r3
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	b29b      	uxth	r3, r3
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f8d7 	bl	8005950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057a2:	e0b9      	b.n	8005918 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80ab 	beq.w	800591c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80057c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 80a6 	beq.w	800591c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80057f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e4      	bne.n	80057d0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	623b      	str	r3, [r7, #32]
   return(result);
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800582a:	633a      	str	r2, [r7, #48]	@ 0x30
 800582c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e3      	bne.n	8005806 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0310 	bic.w	r3, r3, #16
 8005866:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	69b9      	ldr	r1, [r7, #24]
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	617b      	str	r3, [r7, #20]
   return(result);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e4      	bne.n	8005852 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800588e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f85b 	bl	8005950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800589a:	e03f      	b.n	800591c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800589c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00e      	beq.n	80058c6 <HAL_UART_IRQHandler+0x56a>
 80058a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80058bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fc81 	bl	80061c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058c4:	e02d      	b.n	8005922 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00e      	beq.n	80058f0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d008      	beq.n	80058f0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01c      	beq.n	8005920 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	4798      	blx	r3
    }
    return;
 80058ee:	e017      	b.n	8005920 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d012      	beq.n	8005922 <HAL_UART_IRQHandler+0x5c6>
 80058fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00c      	beq.n	8005922 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fc32 	bl	8006172 <UART_EndTransmit_IT>
    return;
 800590e:	e008      	b.n	8005922 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005910:	bf00      	nop
 8005912:	e006      	b.n	8005922 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005914:	bf00      	nop
 8005916:	e004      	b.n	8005922 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005918:	bf00      	nop
 800591a:	e002      	b.n	8005922 <HAL_UART_IRQHandler+0x5c6>
      return;
 800591c:	bf00      	nop
 800591e:	e000      	b.n	8005922 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005920:	bf00      	nop
  }

}
 8005922:	37e8      	adds	r7, #232	@ 0xe8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005970:	2300      	movs	r3, #0
 8005972:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	431a      	orrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b92      	ldr	r3, [pc, #584]	@ (8005bdc <UART_SetConfig+0x274>)
 8005994:	4013      	ands	r3, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	6979      	ldr	r1, [r7, #20]
 800599c:	430b      	orrs	r3, r1
 800599e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a80      	ldr	r2, [pc, #512]	@ (8005be0 <UART_SetConfig+0x278>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d120      	bne.n	8005a26 <UART_SetConfig+0xbe>
 80059e4:	4b7f      	ldr	r3, [pc, #508]	@ (8005be4 <UART_SetConfig+0x27c>)
 80059e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d817      	bhi.n	8005a20 <UART_SetConfig+0xb8>
 80059f0:	a201      	add	r2, pc, #4	@ (adr r2, 80059f8 <UART_SetConfig+0x90>)
 80059f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f6:	bf00      	nop
 80059f8:	08005a09 	.word	0x08005a09
 80059fc:	08005a15 	.word	0x08005a15
 8005a00:	08005a1b 	.word	0x08005a1b
 8005a04:	08005a0f 	.word	0x08005a0f
 8005a08:	2301      	movs	r3, #1
 8005a0a:	77fb      	strb	r3, [r7, #31]
 8005a0c:	e0b5      	b.n	8005b7a <UART_SetConfig+0x212>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	77fb      	strb	r3, [r7, #31]
 8005a12:	e0b2      	b.n	8005b7a <UART_SetConfig+0x212>
 8005a14:	2304      	movs	r3, #4
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e0af      	b.n	8005b7a <UART_SetConfig+0x212>
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e0ac      	b.n	8005b7a <UART_SetConfig+0x212>
 8005a20:	2310      	movs	r3, #16
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e0a9      	b.n	8005b7a <UART_SetConfig+0x212>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a6f      	ldr	r2, [pc, #444]	@ (8005be8 <UART_SetConfig+0x280>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d124      	bne.n	8005a7a <UART_SetConfig+0x112>
 8005a30:	4b6c      	ldr	r3, [pc, #432]	@ (8005be4 <UART_SetConfig+0x27c>)
 8005a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a3c:	d011      	beq.n	8005a62 <UART_SetConfig+0xfa>
 8005a3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a42:	d817      	bhi.n	8005a74 <UART_SetConfig+0x10c>
 8005a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a48:	d011      	beq.n	8005a6e <UART_SetConfig+0x106>
 8005a4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a4e:	d811      	bhi.n	8005a74 <UART_SetConfig+0x10c>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <UART_SetConfig+0xf4>
 8005a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a58:	d006      	beq.n	8005a68 <UART_SetConfig+0x100>
 8005a5a:	e00b      	b.n	8005a74 <UART_SetConfig+0x10c>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e08b      	b.n	8005b7a <UART_SetConfig+0x212>
 8005a62:	2302      	movs	r3, #2
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	e088      	b.n	8005b7a <UART_SetConfig+0x212>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e085      	b.n	8005b7a <UART_SetConfig+0x212>
 8005a6e:	2308      	movs	r3, #8
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e082      	b.n	8005b7a <UART_SetConfig+0x212>
 8005a74:	2310      	movs	r3, #16
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e07f      	b.n	8005b7a <UART_SetConfig+0x212>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a5b      	ldr	r2, [pc, #364]	@ (8005bec <UART_SetConfig+0x284>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d124      	bne.n	8005ace <UART_SetConfig+0x166>
 8005a84:	4b57      	ldr	r3, [pc, #348]	@ (8005be4 <UART_SetConfig+0x27c>)
 8005a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a88:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005a8c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a90:	d011      	beq.n	8005ab6 <UART_SetConfig+0x14e>
 8005a92:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a96:	d817      	bhi.n	8005ac8 <UART_SetConfig+0x160>
 8005a98:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a9c:	d011      	beq.n	8005ac2 <UART_SetConfig+0x15a>
 8005a9e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005aa2:	d811      	bhi.n	8005ac8 <UART_SetConfig+0x160>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <UART_SetConfig+0x148>
 8005aa8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005aac:	d006      	beq.n	8005abc <UART_SetConfig+0x154>
 8005aae:	e00b      	b.n	8005ac8 <UART_SetConfig+0x160>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	e061      	b.n	8005b7a <UART_SetConfig+0x212>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	77fb      	strb	r3, [r7, #31]
 8005aba:	e05e      	b.n	8005b7a <UART_SetConfig+0x212>
 8005abc:	2304      	movs	r3, #4
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e05b      	b.n	8005b7a <UART_SetConfig+0x212>
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	77fb      	strb	r3, [r7, #31]
 8005ac6:	e058      	b.n	8005b7a <UART_SetConfig+0x212>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e055      	b.n	8005b7a <UART_SetConfig+0x212>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a47      	ldr	r2, [pc, #284]	@ (8005bf0 <UART_SetConfig+0x288>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d124      	bne.n	8005b22 <UART_SetConfig+0x1ba>
 8005ad8:	4b42      	ldr	r3, [pc, #264]	@ (8005be4 <UART_SetConfig+0x27c>)
 8005ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005adc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005ae0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ae4:	d011      	beq.n	8005b0a <UART_SetConfig+0x1a2>
 8005ae6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005aea:	d817      	bhi.n	8005b1c <UART_SetConfig+0x1b4>
 8005aec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005af0:	d011      	beq.n	8005b16 <UART_SetConfig+0x1ae>
 8005af2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005af6:	d811      	bhi.n	8005b1c <UART_SetConfig+0x1b4>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <UART_SetConfig+0x19c>
 8005afc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b00:	d006      	beq.n	8005b10 <UART_SetConfig+0x1a8>
 8005b02:	e00b      	b.n	8005b1c <UART_SetConfig+0x1b4>
 8005b04:	2300      	movs	r3, #0
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	e037      	b.n	8005b7a <UART_SetConfig+0x212>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	77fb      	strb	r3, [r7, #31]
 8005b0e:	e034      	b.n	8005b7a <UART_SetConfig+0x212>
 8005b10:	2304      	movs	r3, #4
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e031      	b.n	8005b7a <UART_SetConfig+0x212>
 8005b16:	2308      	movs	r3, #8
 8005b18:	77fb      	strb	r3, [r7, #31]
 8005b1a:	e02e      	b.n	8005b7a <UART_SetConfig+0x212>
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e02b      	b.n	8005b7a <UART_SetConfig+0x212>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a33      	ldr	r2, [pc, #204]	@ (8005bf4 <UART_SetConfig+0x28c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d124      	bne.n	8005b76 <UART_SetConfig+0x20e>
 8005b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8005be4 <UART_SetConfig+0x27c>)
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b30:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005b34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005b38:	d011      	beq.n	8005b5e <UART_SetConfig+0x1f6>
 8005b3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005b3e:	d817      	bhi.n	8005b70 <UART_SetConfig+0x208>
 8005b40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b44:	d011      	beq.n	8005b6a <UART_SetConfig+0x202>
 8005b46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b4a:	d811      	bhi.n	8005b70 <UART_SetConfig+0x208>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <UART_SetConfig+0x1f0>
 8005b50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b54:	d006      	beq.n	8005b64 <UART_SetConfig+0x1fc>
 8005b56:	e00b      	b.n	8005b70 <UART_SetConfig+0x208>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	77fb      	strb	r3, [r7, #31]
 8005b5c:	e00d      	b.n	8005b7a <UART_SetConfig+0x212>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	77fb      	strb	r3, [r7, #31]
 8005b62:	e00a      	b.n	8005b7a <UART_SetConfig+0x212>
 8005b64:	2304      	movs	r3, #4
 8005b66:	77fb      	strb	r3, [r7, #31]
 8005b68:	e007      	b.n	8005b7a <UART_SetConfig+0x212>
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	77fb      	strb	r3, [r7, #31]
 8005b6e:	e004      	b.n	8005b7a <UART_SetConfig+0x212>
 8005b70:	2310      	movs	r3, #16
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e001      	b.n	8005b7a <UART_SetConfig+0x212>
 8005b76:	2310      	movs	r3, #16
 8005b78:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b82:	d16b      	bne.n	8005c5c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005b84:	7ffb      	ldrb	r3, [r7, #31]
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d838      	bhi.n	8005bfc <UART_SetConfig+0x294>
 8005b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b90 <UART_SetConfig+0x228>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005bb5 	.word	0x08005bb5
 8005b94:	08005bbd 	.word	0x08005bbd
 8005b98:	08005bc5 	.word	0x08005bc5
 8005b9c:	08005bfd 	.word	0x08005bfd
 8005ba0:	08005bcb 	.word	0x08005bcb
 8005ba4:	08005bfd 	.word	0x08005bfd
 8005ba8:	08005bfd 	.word	0x08005bfd
 8005bac:	08005bfd 	.word	0x08005bfd
 8005bb0:	08005bd3 	.word	0x08005bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb4:	f7fe fa4a 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8005bb8:	61b8      	str	r0, [r7, #24]
        break;
 8005bba:	e024      	b.n	8005c06 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bbc:	f7fe fa68 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 8005bc0:	61b8      	str	r0, [r7, #24]
        break;
 8005bc2:	e020      	b.n	8005c06 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf8 <UART_SetConfig+0x290>)
 8005bc6:	61bb      	str	r3, [r7, #24]
        break;
 8005bc8:	e01d      	b.n	8005c06 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bca:	f7fe f9dd 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8005bce:	61b8      	str	r0, [r7, #24]
        break;
 8005bd0:	e019      	b.n	8005c06 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bd6:	61bb      	str	r3, [r7, #24]
        break;
 8005bd8:	e015      	b.n	8005c06 <UART_SetConfig+0x29e>
 8005bda:	bf00      	nop
 8005bdc:	efff69f3 	.word	0xefff69f3
 8005be0:	40013800 	.word	0x40013800
 8005be4:	40021000 	.word	0x40021000
 8005be8:	40004400 	.word	0x40004400
 8005bec:	40004800 	.word	0x40004800
 8005bf0:	40004c00 	.word	0x40004c00
 8005bf4:	40005000 	.word	0x40005000
 8005bf8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	77bb      	strb	r3, [r7, #30]
        break;
 8005c04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d073      	beq.n	8005cf4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	005a      	lsls	r2, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	085b      	lsrs	r3, r3, #1
 8005c16:	441a      	add	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	2b0f      	cmp	r3, #15
 8005c26:	d916      	bls.n	8005c56 <UART_SetConfig+0x2ee>
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c2e:	d212      	bcs.n	8005c56 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	f023 030f 	bic.w	r3, r3, #15
 8005c38:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	085b      	lsrs	r3, r3, #1
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	89fb      	ldrh	r3, [r7, #14]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	89fa      	ldrh	r2, [r7, #14]
 8005c52:	60da      	str	r2, [r3, #12]
 8005c54:	e04e      	b.n	8005cf4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	77bb      	strb	r3, [r7, #30]
 8005c5a:	e04b      	b.n	8005cf4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c5c:	7ffb      	ldrb	r3, [r7, #31]
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d827      	bhi.n	8005cb2 <UART_SetConfig+0x34a>
 8005c62:	a201      	add	r2, pc, #4	@ (adr r2, 8005c68 <UART_SetConfig+0x300>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c8d 	.word	0x08005c8d
 8005c6c:	08005c95 	.word	0x08005c95
 8005c70:	08005c9d 	.word	0x08005c9d
 8005c74:	08005cb3 	.word	0x08005cb3
 8005c78:	08005ca3 	.word	0x08005ca3
 8005c7c:	08005cb3 	.word	0x08005cb3
 8005c80:	08005cb3 	.word	0x08005cb3
 8005c84:	08005cb3 	.word	0x08005cb3
 8005c88:	08005cab 	.word	0x08005cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c8c:	f7fe f9de 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8005c90:	61b8      	str	r0, [r7, #24]
        break;
 8005c92:	e013      	b.n	8005cbc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c94:	f7fe f9fc 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 8005c98:	61b8      	str	r0, [r7, #24]
        break;
 8005c9a:	e00f      	b.n	8005cbc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d0c <UART_SetConfig+0x3a4>)
 8005c9e:	61bb      	str	r3, [r7, #24]
        break;
 8005ca0:	e00c      	b.n	8005cbc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca2:	f7fe f971 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8005ca6:	61b8      	str	r0, [r7, #24]
        break;
 8005ca8:	e008      	b.n	8005cbc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cae:	61bb      	str	r3, [r7, #24]
        break;
 8005cb0:	e004      	b.n	8005cbc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	77bb      	strb	r3, [r7, #30]
        break;
 8005cba:	bf00      	nop
    }

    if (pclk != 0U)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d018      	beq.n	8005cf4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	085a      	lsrs	r2, r3, #1
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	441a      	add	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b0f      	cmp	r3, #15
 8005cda:	d909      	bls.n	8005cf0 <UART_SetConfig+0x388>
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce2:	d205      	bcs.n	8005cf0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60da      	str	r2, [r3, #12]
 8005cee:	e001      	b.n	8005cf4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005d00:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	007a1200 	.word	0x007a1200

08005d10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01a      	beq.n	8005e26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e0e:	d10a      	bne.n	8005e26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	605a      	str	r2, [r3, #4]
  }
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b098      	sub	sp, #96	@ 0x60
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e64:	f7fa fed0 	bl	8000c08 <HAL_GetTick>
 8005e68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d12e      	bne.n	8005ed6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e80:	2200      	movs	r2, #0
 8005e82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f88c 	bl	8005fa4 <UART_WaitOnFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d021      	beq.n	8005ed6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ea6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005eb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e6      	bne.n	8005e92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e062      	b.n	8005f9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d149      	bne.n	8005f78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ee4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eec:	2200      	movs	r2, #0
 8005eee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f856 	bl	8005fa4 <UART_WaitOnFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d03c      	beq.n	8005f78 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e6      	bne.n	8005efe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3308      	adds	r3, #8
 8005f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0301 	bic.w	r3, r3, #1
 8005f46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f50:	61fa      	str	r2, [r7, #28]
 8005f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	69b9      	ldr	r1, [r7, #24]
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e5      	bne.n	8005f30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e011      	b.n	8005f9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3758      	adds	r7, #88	@ 0x58
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb4:	e04f      	b.n	8006056 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fbc:	d04b      	beq.n	8006056 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7fa fe23 	bl	8000c08 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e04e      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d037      	beq.n	8006056 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b80      	cmp	r3, #128	@ 0x80
 8005fea:	d034      	beq.n	8006056 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b40      	cmp	r3, #64	@ 0x40
 8005ff0:	d031      	beq.n	8006056 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d110      	bne.n	8006022 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2208      	movs	r2, #8
 8006006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f838 	bl	800607e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2208      	movs	r2, #8
 8006012:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e029      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800602c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006030:	d111      	bne.n	8006056 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800603a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f81e 	bl	800607e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e00f      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	4013      	ands	r3, r2
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	bf0c      	ite	eq
 8006066:	2301      	moveq	r3, #1
 8006068:	2300      	movne	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	429a      	cmp	r2, r3
 8006072:	d0a0      	beq.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800607e:	b480      	push	{r7}
 8006080:	b095      	sub	sp, #84	@ 0x54
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800609a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80060a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e6      	bne.n	8006086 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3308      	adds	r3, #8
 80060be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3308      	adds	r3, #8
 80060d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e5      	bne.n	80060b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d118      	bne.n	8006126 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	60bb      	str	r3, [r7, #8]
   return(result);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f023 0310 	bic.w	r3, r3, #16
 8006108:	647b      	str	r3, [r7, #68]	@ 0x44
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006112:	61bb      	str	r3, [r7, #24]
 8006114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6979      	ldr	r1, [r7, #20]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	613b      	str	r3, [r7, #16]
   return(result);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e6      	bne.n	80060f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800613a:	bf00      	nop
 800613c:	3754      	adds	r7, #84	@ 0x54
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006152:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f7ff fbe9 	bl	800593c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800616a:	bf00      	nop
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b088      	sub	sp, #32
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	e853 3f00 	ldrex	r3, [r3]
 8006186:	60bb      	str	r3, [r7, #8]
   return(result);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800618e:	61fb      	str	r3, [r7, #28]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	461a      	mov	r2, r3
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	6979      	ldr	r1, [r7, #20]
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	e841 2300 	strex	r3, r2, [r1]
 80061a4:	613b      	str	r3, [r7, #16]
   return(result);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e6      	bne.n	800617a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fbb5 	bl	8005928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061be:	bf00      	nop
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80061ea:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80061ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006210:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006214:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	b29b      	uxth	r3, r3
 8006222:	43db      	mvns	r3, r3
 8006224:	b29b      	uxth	r3, r3
 8006226:	4013      	ands	r3, r2
 8006228:	b29a      	uxth	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	1d3b      	adds	r3, r7, #4
 8006248:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800627c:	b480      	push	{r7}
 800627e:	b09d      	sub	sp, #116	@ 0x74
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800629e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	78db      	ldrb	r3, [r3, #3]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d81f      	bhi.n	80062ee <USB_ActivateEndpoint+0x72>
 80062ae:	a201      	add	r2, pc, #4	@ (adr r2, 80062b4 <USB_ActivateEndpoint+0x38>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	080062c5 	.word	0x080062c5
 80062b8:	080062e1 	.word	0x080062e1
 80062bc:	080062f7 	.word	0x080062f7
 80062c0:	080062d3 	.word	0x080062d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80062c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062d0:	e012      	b.n	80062f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80062d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062d6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80062da:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062de:	e00b      	b.n	80062f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80062e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80062e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80062ec:	e004      	b.n	80062f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80062f4:	e000      	b.n	80062f8 <USB_ActivateEndpoint+0x7c>
      break;
 80062f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800630a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800630e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006316:	b29b      	uxth	r3, r3
 8006318:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	b21b      	sxth	r3, r3
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800632e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006332:	b21a      	sxth	r2, r3
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	b21b      	sxth	r3, r3
 800633a:	4313      	orrs	r3, r2
 800633c:	b21b      	sxth	r3, r3
 800633e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	441a      	add	r2, r3
 800634c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800635c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006360:	b29b      	uxth	r3, r3
 8006362:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	7b1b      	ldrb	r3, [r3, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f040 8178 	bne.w	800665e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 8084 	beq.w	8006480 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006382:	b29b      	uxth	r3, r3
 8006384:	461a      	mov	r2, r3
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	4413      	add	r3, r2
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	00da      	lsls	r2, r3, #3
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	88db      	ldrh	r3, [r3, #6]
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	827b      	strh	r3, [r7, #18]
 80063ba:	8a7b      	ldrh	r3, [r7, #18]
 80063bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01b      	beq.n	80063fc <USB_ActivateEndpoint+0x180>
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063da:	823b      	strh	r3, [r7, #16]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	441a      	add	r2, r3
 80063e6:	8a3b      	ldrh	r3, [r7, #16]
 80063e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	78db      	ldrb	r3, [r3, #3]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d020      	beq.n	8006446 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800641a:	81bb      	strh	r3, [r7, #12]
 800641c:	89bb      	ldrh	r3, [r7, #12]
 800641e:	f083 0320 	eor.w	r3, r3, #32
 8006422:	81bb      	strh	r3, [r7, #12]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	89bb      	ldrh	r3, [r7, #12]
 8006430:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006434:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006438:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800643c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006440:	b29b      	uxth	r3, r3
 8006442:	8013      	strh	r3, [r2, #0]
 8006444:	e2d5      	b.n	80069f2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29b      	uxth	r3, r3
 8006454:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800645c:	81fb      	strh	r3, [r7, #14]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	441a      	add	r2, r3
 8006468:	89fb      	ldrh	r3, [r7, #14]
 800646a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800646e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800647a:	b29b      	uxth	r3, r3
 800647c:	8013      	strh	r3, [r2, #0]
 800647e:	e2b8      	b.n	80069f2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	633b      	str	r3, [r7, #48]	@ 0x30
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800648a:	b29b      	uxth	r3, r3
 800648c:	461a      	mov	r2, r3
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	4413      	add	r3, r2
 8006492:	633b      	str	r3, [r7, #48]	@ 0x30
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	00da      	lsls	r2, r3, #3
 800649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649c:	4413      	add	r3, r2
 800649e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	88db      	ldrh	r3, [r3, #6]
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064be:	b29b      	uxth	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c4:	4413      	add	r3, r2
 80064c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	00da      	lsls	r2, r3, #3
 80064ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d0:	4413      	add	r3, r2
 80064d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	801a      	strh	r2, [r3, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <USB_ActivateEndpoint+0x28a>
 80064f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	e039      	b.n	800657a <USB_ActivateEndpoint+0x2fe>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b3e      	cmp	r3, #62	@ 0x3e
 800650c:	d818      	bhi.n	8006540 <USB_ActivateEndpoint+0x2c4>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	085b      	lsrs	r3, r3, #1
 8006514:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <USB_ActivateEndpoint+0x2ac>
 8006522:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006524:	3301      	adds	r3, #1
 8006526:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29a      	uxth	r2, r3
 800652e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006530:	b29b      	uxth	r3, r3
 8006532:	029b      	lsls	r3, r3, #10
 8006534:	b29b      	uxth	r3, r3
 8006536:	4313      	orrs	r3, r2
 8006538:	b29a      	uxth	r2, r3
 800653a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653c:	801a      	strh	r2, [r3, #0]
 800653e:	e01c      	b.n	800657a <USB_ActivateEndpoint+0x2fe>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <USB_ActivateEndpoint+0x2de>
 8006554:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006556:	3b01      	subs	r3, #1
 8006558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29a      	uxth	r2, r3
 8006560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006562:	b29b      	uxth	r3, r3
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	b29b      	uxth	r3, r3
 8006568:	4313      	orrs	r3, r2
 800656a:	b29b      	uxth	r3, r3
 800656c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006574:	b29a      	uxth	r2, r3
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006588:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800658a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01b      	beq.n	80065ca <USB_ActivateEndpoint+0x34e>
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a8:	843b      	strh	r3, [r7, #32]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	441a      	add	r2, r3
 80065b4:	8c3b      	ldrh	r3, [r7, #32]
 80065b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d124      	bne.n	800661c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065e8:	83bb      	strh	r3, [r7, #28]
 80065ea:	8bbb      	ldrh	r3, [r7, #28]
 80065ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065f0:	83bb      	strh	r3, [r7, #28]
 80065f2:	8bbb      	ldrh	r3, [r7, #28]
 80065f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065f8:	83bb      	strh	r3, [r7, #28]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	441a      	add	r2, r3
 8006604:	8bbb      	ldrh	r3, [r7, #28]
 8006606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800660a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800660e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006616:	b29b      	uxth	r3, r3
 8006618:	8013      	strh	r3, [r2, #0]
 800661a:	e1ea      	b.n	80069f2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800662e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006632:	83fb      	strh	r3, [r7, #30]
 8006634:	8bfb      	ldrh	r3, [r7, #30]
 8006636:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800663a:	83fb      	strh	r3, [r7, #30]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	441a      	add	r2, r3
 8006646:	8bfb      	ldrh	r3, [r7, #30]
 8006648:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800664c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006658:	b29b      	uxth	r3, r3
 800665a:	8013      	strh	r3, [r2, #0]
 800665c:	e1c9      	b.n	80069f2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	78db      	ldrb	r3, [r3, #3]
 8006662:	2b02      	cmp	r3, #2
 8006664:	d11e      	bne.n	80066a4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800667c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	441a      	add	r2, r3
 800668a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800668e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006696:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800669a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800669e:	b29b      	uxth	r3, r3
 80066a0:	8013      	strh	r3, [r2, #0]
 80066a2:	e01d      	b.n	80066e0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80066b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ba:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	441a      	add	r2, r3
 80066c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80066cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066dc:	b29b      	uxth	r3, r3
 80066de:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066f0:	4413      	add	r3, r2
 80066f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	00da      	lsls	r2, r3, #3
 80066fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006702:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	891b      	ldrh	r3, [r3, #8]
 8006708:	085b      	lsrs	r3, r3, #1
 800670a:	b29b      	uxth	r3, r3
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	657b      	str	r3, [r7, #84]	@ 0x54
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006724:	4413      	add	r3, r2
 8006726:	657b      	str	r3, [r7, #84]	@ 0x54
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	00da      	lsls	r2, r3, #3
 800672e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006730:	4413      	add	r3, r2
 8006732:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006736:	653b      	str	r3, [r7, #80]	@ 0x50
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	895b      	ldrh	r3, [r3, #10]
 800673c:	085b      	lsrs	r3, r3, #1
 800673e:	b29b      	uxth	r3, r3
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006746:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f040 8093 	bne.w	8006878 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006762:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01b      	beq.n	80067a6 <USB_ActivateEndpoint+0x52a>
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006784:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	441a      	add	r2, r3
 8006790:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800679a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800679e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80067b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80067b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01b      	beq.n	80067f6 <USB_ActivateEndpoint+0x57a>
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d4:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	441a      	add	r2, r3
 80067e0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80067e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	4413      	add	r3, r2
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800680c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800680e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006810:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006814:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006816:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006818:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800681c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	441a      	add	r2, r3
 8006828:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800682a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800682e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800683a:	b29b      	uxth	r3, r3
 800683c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006854:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	441a      	add	r2, r3
 8006860:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800686a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800686e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006872:	b29b      	uxth	r3, r3
 8006874:	8013      	strh	r3, [r2, #0]
 8006876:	e0bc      	b.n	80069f2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006888:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800688c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01d      	beq.n	80068d0 <USB_ActivateEndpoint+0x654>
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068aa:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	441a      	add	r2, r3
 80068b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80068bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80068e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80068e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01d      	beq.n	8006928 <USB_ActivateEndpoint+0x6ac>
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006902:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	441a      	add	r2, r3
 8006910:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800691c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006920:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006924:	b29b      	uxth	r3, r3
 8006926:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	78db      	ldrb	r3, [r3, #3]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d024      	beq.n	800697a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006946:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800694a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800694e:	f083 0320 	eor.w	r3, r3, #32
 8006952:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	441a      	add	r2, r3
 8006960:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800696c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006974:	b29b      	uxth	r3, r3
 8006976:	8013      	strh	r3, [r2, #0]
 8006978:	e01d      	b.n	80069b6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006990:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	441a      	add	r2, r3
 800699e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80069a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069cc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80069de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80069f2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3774      	adds	r7, #116	@ 0x74
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop

08006a04 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b08d      	sub	sp, #52	@ 0x34
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	7b1b      	ldrb	r3, [r3, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f040 808e 	bne.w	8006b34 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d044      	beq.n	8006aaa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	81bb      	strh	r3, [r7, #12]
 8006a2e:	89bb      	ldrh	r3, [r7, #12]
 8006a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01b      	beq.n	8006a70 <USB_DeactivateEndpoint+0x6c>
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a4e:	817b      	strh	r3, [r7, #10]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	441a      	add	r2, r3
 8006a5a:	897b      	ldrh	r3, [r7, #10]
 8006a5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a86:	813b      	strh	r3, [r7, #8]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	441a      	add	r2, r3
 8006a92:	893b      	ldrh	r3, [r7, #8]
 8006a94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	8013      	strh	r3, [r2, #0]
 8006aa8:	e192      	b.n	8006dd0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	827b      	strh	r3, [r7, #18]
 8006ab8:	8a7b      	ldrh	r3, [r7, #18]
 8006aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d01b      	beq.n	8006afa <USB_DeactivateEndpoint+0xf6>
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad8:	823b      	strh	r3, [r7, #16]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	441a      	add	r2, r3
 8006ae4:	8a3b      	ldrh	r3, [r7, #16]
 8006ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b10:	81fb      	strh	r3, [r7, #14]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	441a      	add	r2, r3
 8006b1c:	89fb      	ldrh	r3, [r7, #14]
 8006b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]
 8006b32:	e14d      	b.n	8006dd0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 80a5 	bne.w	8006c88 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	843b      	strh	r3, [r7, #32]
 8006b4c:	8c3b      	ldrh	r3, [r7, #32]
 8006b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01b      	beq.n	8006b8e <USB_DeactivateEndpoint+0x18a>
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6c:	83fb      	strh	r3, [r7, #30]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	441a      	add	r2, r3
 8006b78:	8bfb      	ldrh	r3, [r7, #30]
 8006b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	83bb      	strh	r3, [r7, #28]
 8006b9c:	8bbb      	ldrh	r3, [r7, #28]
 8006b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01b      	beq.n	8006bde <USB_DeactivateEndpoint+0x1da>
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bbc:	837b      	strh	r3, [r7, #26]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	441a      	add	r2, r3
 8006bc8:	8b7b      	ldrh	r3, [r7, #26]
 8006bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf4:	833b      	strh	r3, [r7, #24]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	441a      	add	r2, r3
 8006c00:	8b3b      	ldrh	r3, [r7, #24]
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2c:	82fb      	strh	r3, [r7, #22]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	441a      	add	r2, r3
 8006c38:	8afb      	ldrh	r3, [r7, #22]
 8006c3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c64:	82bb      	strh	r3, [r7, #20]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	441a      	add	r2, r3
 8006c70:	8abb      	ldrh	r3, [r7, #20]
 8006c72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	8013      	strh	r3, [r2, #0]
 8006c86:	e0a3      	b.n	8006dd0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006c96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01b      	beq.n	8006cd8 <USB_DeactivateEndpoint+0x2d4>
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cb6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006cc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006ce6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01b      	beq.n	8006d28 <USB_DeactivateEndpoint+0x324>
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	441a      	add	r2, r3
 8006d12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	441a      	add	r2, r3
 8006d4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3734      	adds	r7, #52	@ 0x34
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b0c2      	sub	sp, #264	@ 0x108
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dec:	6018      	str	r0, [r3, #0]
 8006dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	f040 86b7 	bne.w	8007b78 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d908      	bls.n	8006e38 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006e36:	e007      	b.n	8006e48 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	7b1b      	ldrb	r3, [r3, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d13a      	bne.n	8006ece <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6959      	ldr	r1, [r3, #20]
 8006e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	88da      	ldrh	r2, [r3, #6]
 8006e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e7a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e7e:	6800      	ldr	r0, [r0, #0]
 8006e80:	f001 fc8d 	bl	800879e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	613b      	str	r3, [r7, #16]
 8006e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
 8006ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	00da      	lsls	r2, r3, #3
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	801a      	strh	r2, [r3, #0]
 8006eca:	f000 be1f 	b.w	8007b0c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	78db      	ldrb	r3, [r3, #3]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	f040 8462 	bne.w	80077a4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6a1a      	ldr	r2, [r3, #32]
 8006eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	f240 83df 	bls.w	80076bc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f24:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	441a      	add	r2, r3
 8006f42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006f46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f4e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6a1a      	ldr	r2, [r3, #32]
 8006f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6a:	1ad2      	subs	r2, r2, r3
 8006f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	881b      	ldrh	r3, [r3, #0]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 81c7 	beq.w	800732e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	785b      	ldrb	r3, [r3, #1]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d177      	bne.n	80070ac <USB_EPStartXfer+0x2ce>
 8006fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	461a      	mov	r2, r3
 8006fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fdc:	4413      	add	r3, r2
 8006fde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	00da      	lsls	r2, r3, #3
 8006fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007002:	b29a      	uxth	r2, r3
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	801a      	strh	r2, [r3, #0]
 8007008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10a      	bne.n	8007026 <USB_EPStartXfer+0x248>
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800701a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701e:	b29a      	uxth	r2, r3
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	801a      	strh	r2, [r3, #0]
 8007024:	e067      	b.n	80070f6 <USB_EPStartXfer+0x318>
 8007026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702a:	2b3e      	cmp	r3, #62	@ 0x3e
 800702c:	d81c      	bhi.n	8007068 <USB_EPStartXfer+0x28a>
 800702e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d004      	beq.n	800704e <USB_EPStartXfer+0x270>
 8007044:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007048:	3301      	adds	r3, #1
 800704a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29a      	uxth	r2, r3
 8007054:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007058:	b29b      	uxth	r3, r3
 800705a:	029b      	lsls	r3, r3, #10
 800705c:	b29b      	uxth	r3, r3
 800705e:	4313      	orrs	r3, r2
 8007060:	b29a      	uxth	r2, r3
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	801a      	strh	r2, [r3, #0]
 8007066:	e046      	b.n	80070f6 <USB_EPStartXfer+0x318>
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007076:	f003 031f 	and.w	r3, r3, #31
 800707a:	2b00      	cmp	r3, #0
 800707c:	d104      	bne.n	8007088 <USB_EPStartXfer+0x2aa>
 800707e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007082:	3b01      	subs	r3, #1
 8007084:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29a      	uxth	r2, r3
 800708e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007092:	b29b      	uxth	r3, r3
 8007094:	029b      	lsls	r3, r3, #10
 8007096:	b29b      	uxth	r3, r3
 8007098:	4313      	orrs	r3, r2
 800709a:	b29b      	uxth	r3, r3
 800709c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	801a      	strh	r2, [r3, #0]
 80070aa:	e024      	b.n	80070f6 <USB_EPStartXfer+0x318>
 80070ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d11c      	bne.n	80070f6 <USB_EPStartXfer+0x318>
 80070bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	461a      	mov	r2, r3
 80070ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d0:	4413      	add	r3, r2
 80070d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	00da      	lsls	r2, r3, #3
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	4413      	add	r3, r2
 80070e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	895b      	ldrh	r3, [r3, #10]
 8007102:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6959      	ldr	r1, [r3, #20]
 8007112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007116:	b29b      	uxth	r3, r3
 8007118:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800711c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007120:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007124:	6800      	ldr	r0, [r0, #0]
 8007126:	f001 fb3a 	bl	800879e <USB_WritePMA>
            ep->xfer_buff += len;
 800712a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695a      	ldr	r2, [r3, #20]
 8007136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713a:	441a      	add	r2, r3
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6a1a      	ldr	r2, [r3, #32]
 8007154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	429a      	cmp	r2, r3
 8007162:	d90f      	bls.n	8007184 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6a1a      	ldr	r2, [r3, #32]
 8007170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007174:	1ad2      	subs	r2, r2, r3
 8007176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	621a      	str	r2, [r3, #32]
 8007182:	e00e      	b.n	80071a2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2200      	movs	r2, #0
 80071a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d177      	bne.n	80072a2 <USB_EPStartXfer+0x4c4>
 80071b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	461a      	mov	r2, r3
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	4413      	add	r3, r2
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	00da      	lsls	r2, r3, #3
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	4413      	add	r3, r2
 80071e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	801a      	strh	r2, [r3, #0]
 80071fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <USB_EPStartXfer+0x43e>
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007214:	b29a      	uxth	r2, r3
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	801a      	strh	r2, [r3, #0]
 800721a:	e06d      	b.n	80072f8 <USB_EPStartXfer+0x51a>
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007220:	2b3e      	cmp	r3, #62	@ 0x3e
 8007222:	d81c      	bhi.n	800725e <USB_EPStartXfer+0x480>
 8007224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007228:	085b      	lsrs	r3, r3, #1
 800722a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800722e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <USB_EPStartXfer+0x466>
 800723a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800723e:	3301      	adds	r3, #1
 8007240:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	b29a      	uxth	r2, r3
 800724a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800724e:	b29b      	uxth	r3, r3
 8007250:	029b      	lsls	r3, r3, #10
 8007252:	b29b      	uxth	r3, r3
 8007254:	4313      	orrs	r3, r2
 8007256:	b29a      	uxth	r2, r3
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	801a      	strh	r2, [r3, #0]
 800725c:	e04c      	b.n	80072f8 <USB_EPStartXfer+0x51a>
 800725e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007262:	095b      	lsrs	r3, r3, #5
 8007264:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726c:	f003 031f 	and.w	r3, r3, #31
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <USB_EPStartXfer+0x4a0>
 8007274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007278:	3b01      	subs	r3, #1
 800727a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	b29a      	uxth	r2, r3
 8007284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007288:	b29b      	uxth	r3, r3
 800728a:	029b      	lsls	r3, r3, #10
 800728c:	b29b      	uxth	r3, r3
 800728e:	4313      	orrs	r3, r2
 8007290:	b29b      	uxth	r3, r3
 8007292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800729a:	b29a      	uxth	r2, r3
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	801a      	strh	r2, [r3, #0]
 80072a0:	e02a      	b.n	80072f8 <USB_EPStartXfer+0x51a>
 80072a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	785b      	ldrb	r3, [r3, #1]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d122      	bne.n	80072f8 <USB_EPStartXfer+0x51a>
 80072b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	623b      	str	r3, [r7, #32]
 80072be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	461a      	mov	r2, r3
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	4413      	add	r3, r2
 80072d4:	623b      	str	r3, [r7, #32]
 80072d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	00da      	lsls	r2, r3, #3
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	4413      	add	r3, r2
 80072e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072ec:	61fb      	str	r3, [r7, #28]
 80072ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	891b      	ldrh	r3, [r3, #8]
 8007304:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6959      	ldr	r1, [r3, #20]
 8007314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007318:	b29b      	uxth	r3, r3
 800731a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800731e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007322:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007326:	6800      	ldr	r0, [r0, #0]
 8007328:	f001 fa39 	bl	800879e <USB_WritePMA>
 800732c:	e3ee      	b.n	8007b0c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800732e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d177      	bne.n	800742e <USB_EPStartXfer+0x650>
 800733e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800734a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007358:	b29b      	uxth	r3, r3
 800735a:	461a      	mov	r2, r3
 800735c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800735e:	4413      	add	r3, r2
 8007360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	00da      	lsls	r2, r3, #3
 8007370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007372:	4413      	add	r3, r2
 8007374:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007378:	647b      	str	r3, [r7, #68]	@ 0x44
 800737a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	b29b      	uxth	r3, r3
 8007380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007384:	b29a      	uxth	r2, r3
 8007386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10a      	bne.n	80073a8 <USB_EPStartXfer+0x5ca>
 8007392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800739c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	e06d      	b.n	8007484 <USB_EPStartXfer+0x6a6>
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80073ae:	d81c      	bhi.n	80073ea <USB_EPStartXfer+0x60c>
 80073b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b4:	085b      	lsrs	r3, r3, #1
 80073b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d004      	beq.n	80073d0 <USB_EPStartXfer+0x5f2>
 80073c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073ca:	3301      	adds	r3, #1
 80073cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073da:	b29b      	uxth	r3, r3
 80073dc:	029b      	lsls	r3, r3, #10
 80073de:	b29b      	uxth	r3, r3
 80073e0:	4313      	orrs	r3, r2
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073e6:	801a      	strh	r2, [r3, #0]
 80073e8:	e04c      	b.n	8007484 <USB_EPStartXfer+0x6a6>
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ee:	095b      	lsrs	r3, r3, #5
 80073f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <USB_EPStartXfer+0x62c>
 8007400:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007404:	3b01      	subs	r3, #1
 8007406:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800740a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b29a      	uxth	r2, r3
 8007410:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007414:	b29b      	uxth	r3, r3
 8007416:	029b      	lsls	r3, r3, #10
 8007418:	b29b      	uxth	r3, r3
 800741a:	4313      	orrs	r3, r2
 800741c:	b29b      	uxth	r3, r3
 800741e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007426:	b29a      	uxth	r2, r3
 8007428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	e02a      	b.n	8007484 <USB_EPStartXfer+0x6a6>
 800742e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	785b      	ldrb	r3, [r3, #1]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d122      	bne.n	8007484 <USB_EPStartXfer+0x6a6>
 800743e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	653b      	str	r3, [r7, #80]	@ 0x50
 800744a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007458:	b29b      	uxth	r3, r3
 800745a:	461a      	mov	r2, r3
 800745c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800745e:	4413      	add	r3, r2
 8007460:	653b      	str	r3, [r7, #80]	@ 0x50
 8007462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	00da      	lsls	r2, r3, #3
 8007470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007472:	4413      	add	r3, r2
 8007474:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800747a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747e:	b29a      	uxth	r2, r3
 8007480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007482:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	891b      	ldrh	r3, [r3, #8]
 8007490:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6959      	ldr	r1, [r3, #20]
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074b2:	6800      	ldr	r0, [r0, #0]
 80074b4:	f001 f973 	bl	800879e <USB_WritePMA>
            ep->xfer_buff += len;
 80074b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695a      	ldr	r2, [r3, #20]
 80074c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c8:	441a      	add	r2, r3
 80074ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6a1a      	ldr	r2, [r3, #32]
 80074e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d90f      	bls.n	8007512 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6a1a      	ldr	r2, [r3, #32]
 80074fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007502:	1ad2      	subs	r2, r2, r3
 8007504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	621a      	str	r2, [r3, #32]
 8007510:	e00e      	b.n	8007530 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2200      	movs	r2, #0
 800752e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	643b      	str	r3, [r7, #64]	@ 0x40
 800753c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	785b      	ldrb	r3, [r3, #1]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d177      	bne.n	800763c <USB_EPStartXfer+0x85e>
 800754c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007550:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007566:	b29b      	uxth	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756c:	4413      	add	r3, r2
 800756e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	00da      	lsls	r2, r3, #3
 800757e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007580:	4413      	add	r3, r2
 8007582:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007586:	637b      	str	r3, [r7, #52]	@ 0x34
 8007588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29b      	uxth	r3, r3
 800758e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007592:	b29a      	uxth	r2, r3
 8007594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007596:	801a      	strh	r2, [r3, #0]
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10a      	bne.n	80075b6 <USB_EPStartXfer+0x7d8>
 80075a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b2:	801a      	strh	r2, [r3, #0]
 80075b4:	e067      	b.n	8007686 <USB_EPStartXfer+0x8a8>
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80075bc:	d81c      	bhi.n	80075f8 <USB_EPStartXfer+0x81a>
 80075be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c2:	085b      	lsrs	r3, r3, #1
 80075c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d004      	beq.n	80075de <USB_EPStartXfer+0x800>
 80075d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d8:	3301      	adds	r3, #1
 80075da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	029b      	lsls	r3, r3, #10
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	4313      	orrs	r3, r2
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	e046      	b.n	8007686 <USB_EPStartXfer+0x8a8>
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fc:	095b      	lsrs	r3, r3, #5
 80075fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	2b00      	cmp	r3, #0
 800760c:	d104      	bne.n	8007618 <USB_EPStartXfer+0x83a>
 800760e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007612:	3b01      	subs	r3, #1
 8007614:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	b29a      	uxth	r2, r3
 800761e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007622:	b29b      	uxth	r3, r3
 8007624:	029b      	lsls	r3, r3, #10
 8007626:	b29b      	uxth	r3, r3
 8007628:	4313      	orrs	r3, r2
 800762a:	b29b      	uxth	r3, r3
 800762c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007634:	b29a      	uxth	r2, r3
 8007636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007638:	801a      	strh	r2, [r3, #0]
 800763a:	e024      	b.n	8007686 <USB_EPStartXfer+0x8a8>
 800763c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d11c      	bne.n	8007686 <USB_EPStartXfer+0x8a8>
 800764c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800765a:	b29b      	uxth	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007660:	4413      	add	r3, r2
 8007662:	643b      	str	r3, [r7, #64]	@ 0x40
 8007664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	00da      	lsls	r2, r3, #3
 8007672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007674:	4413      	add	r3, r2
 8007676:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800767a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800767c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007680:	b29a      	uxth	r2, r3
 8007682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007684:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	895b      	ldrh	r3, [r3, #10]
 8007692:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6959      	ldr	r1, [r3, #20]
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076ac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076b0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076b4:	6800      	ldr	r0, [r0, #0]
 80076b6:	f001 f872 	bl	800879e <USB_WritePMA>
 80076ba:	e227      	b.n	8007b0c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80076bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80076cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80076ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076f2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	441a      	add	r2, r3
 8007710:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007714:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007718:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800771c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007724:	b29b      	uxth	r3, r3
 8007726:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007742:	b29b      	uxth	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007748:	4413      	add	r3, r2
 800774a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800774c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	00da      	lsls	r2, r3, #3
 800775a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800775c:	4413      	add	r3, r2
 800775e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007762:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007768:	b29a      	uxth	r2, r3
 800776a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800776c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800776e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	891b      	ldrh	r3, [r3, #8]
 800777a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800777e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6959      	ldr	r1, [r3, #20]
 800778a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778e:	b29b      	uxth	r3, r3
 8007790:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007794:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007798:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800779c:	6800      	ldr	r0, [r0, #0]
 800779e:	f000 fffe 	bl	800879e <USB_WritePMA>
 80077a2:	e1b3      	b.n	8007b0c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80077a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6a1a      	ldr	r2, [r3, #32]
 80077b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b4:	1ad2      	subs	r2, r2, r3
 80077b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 80c6 	beq.w	8007976 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80077f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	785b      	ldrb	r3, [r3, #1]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d177      	bne.n	80078f6 <USB_EPStartXfer+0xb18>
 8007806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007820:	b29b      	uxth	r3, r3
 8007822:	461a      	mov	r2, r3
 8007824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007826:	4413      	add	r3, r2
 8007828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800782a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	00da      	lsls	r2, r3, #3
 8007838:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800783a:	4413      	add	r3, r2
 800783c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007840:	667b      	str	r3, [r7, #100]	@ 0x64
 8007842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800784c:	b29a      	uxth	r2, r3
 800784e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007850:	801a      	strh	r2, [r3, #0]
 8007852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <USB_EPStartXfer+0xa92>
 800785a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b29b      	uxth	r3, r3
 8007860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007868:	b29a      	uxth	r2, r3
 800786a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800786c:	801a      	strh	r2, [r3, #0]
 800786e:	e067      	b.n	8007940 <USB_EPStartXfer+0xb62>
 8007870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007874:	2b3e      	cmp	r3, #62	@ 0x3e
 8007876:	d81c      	bhi.n	80078b2 <USB_EPStartXfer+0xad4>
 8007878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d004      	beq.n	8007898 <USB_EPStartXfer+0xaba>
 800788e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007892:	3301      	adds	r3, #1
 8007894:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007898:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29a      	uxth	r2, r3
 800789e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	029b      	lsls	r3, r3, #10
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4313      	orrs	r3, r2
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078ae:	801a      	strh	r2, [r3, #0]
 80078b0:	e046      	b.n	8007940 <USB_EPStartXfer+0xb62>
 80078b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b6:	095b      	lsrs	r3, r3, #5
 80078b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c0:	f003 031f 	and.w	r3, r3, #31
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <USB_EPStartXfer+0xaf4>
 80078c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078cc:	3b01      	subs	r3, #1
 80078ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078dc:	b29b      	uxth	r3, r3
 80078de:	029b      	lsls	r3, r3, #10
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	4313      	orrs	r3, r2
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	e024      	b.n	8007940 <USB_EPStartXfer+0xb62>
 80078f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	785b      	ldrb	r3, [r3, #1]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d11c      	bne.n	8007940 <USB_EPStartXfer+0xb62>
 8007906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007914:	b29b      	uxth	r3, r3
 8007916:	461a      	mov	r2, r3
 8007918:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800791a:	4413      	add	r3, r2
 800791c:	673b      	str	r3, [r7, #112]	@ 0x70
 800791e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	00da      	lsls	r2, r3, #3
 800792c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800792e:	4413      	add	r3, r2
 8007930:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007934:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793a:	b29a      	uxth	r2, r3
 800793c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800793e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	895b      	ldrh	r3, [r3, #10]
 800794c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6959      	ldr	r1, [r3, #20]
 800795c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007960:	b29b      	uxth	r3, r3
 8007962:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007966:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800796a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800796e:	6800      	ldr	r0, [r0, #0]
 8007970:	f000 ff15 	bl	800879e <USB_WritePMA>
 8007974:	e0ca      	b.n	8007b0c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	785b      	ldrb	r3, [r3, #1]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d177      	bne.n	8007a76 <USB_EPStartXfer+0xc98>
 8007986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007996:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	461a      	mov	r2, r3
 80079a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079a6:	4413      	add	r3, r2
 80079a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	00da      	lsls	r2, r3, #3
 80079b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079ba:	4413      	add	r3, r2
 80079bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079d0:	801a      	strh	r2, [r3, #0]
 80079d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10a      	bne.n	80079f0 <USB_EPStartXfer+0xc12>
 80079da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ec:	801a      	strh	r2, [r3, #0]
 80079ee:	e073      	b.n	8007ad8 <USB_EPStartXfer+0xcfa>
 80079f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80079f6:	d81c      	bhi.n	8007a32 <USB_EPStartXfer+0xc54>
 80079f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fc:	085b      	lsrs	r3, r3, #1
 80079fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d004      	beq.n	8007a18 <USB_EPStartXfer+0xc3a>
 8007a0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a12:	3301      	adds	r3, #1
 8007a14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	029b      	lsls	r3, r3, #10
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a2e:	801a      	strh	r2, [r3, #0]
 8007a30:	e052      	b.n	8007ad8 <USB_EPStartXfer+0xcfa>
 8007a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a40:	f003 031f 	and.w	r3, r3, #31
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <USB_EPStartXfer+0xc74>
 8007a48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	029b      	lsls	r3, r3, #10
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	4313      	orrs	r3, r2
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a72:	801a      	strh	r2, [r3, #0]
 8007a74:	e030      	b.n	8007ad8 <USB_EPStartXfer+0xcfa>
 8007a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d128      	bne.n	8007ad8 <USB_EPStartXfer+0xcfa>
 8007a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007aaa:	4413      	add	r3, r2
 8007aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	00da      	lsls	r2, r3, #3
 8007abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ad6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	891b      	ldrh	r3, [r3, #8]
 8007ae4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6959      	ldr	r1, [r3, #20]
 8007af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007afe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b02:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b06:	6800      	ldr	r0, [r0, #0]
 8007b08:	f000 fe49 	bl	800879e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b32:	817b      	strh	r3, [r7, #10]
 8007b34:	897b      	ldrh	r3, [r7, #10]
 8007b36:	f083 0310 	eor.w	r3, r3, #16
 8007b3a:	817b      	strh	r3, [r7, #10]
 8007b3c:	897b      	ldrh	r3, [r7, #10]
 8007b3e:	f083 0320 	eor.w	r3, r3, #32
 8007b42:	817b      	strh	r3, [r7, #10]
 8007b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	441a      	add	r2, r3
 8007b5e:	897b      	ldrh	r3, [r7, #10]
 8007b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	8013      	strh	r3, [r2, #0]
 8007b74:	f000 bcdf 	b.w	8008536 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	7b1b      	ldrb	r3, [r3, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f040 80bc 	bne.w	8007d02 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699a      	ldr	r2, [r3, #24]
 8007b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d917      	bls.n	8007bd6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc6:	1ad2      	subs	r2, r2, r3
 8007bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	619a      	str	r2, [r3, #24]
 8007bd4:	e00e      	b.n	8007bf4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	461a      	mov	r2, r3
 8007c14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c18:	4413      	add	r3, r2
 8007c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	00da      	lsls	r2, r3, #3
 8007c2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c30:	4413      	add	r3, r2
 8007c32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c4c:	801a      	strh	r2, [r3, #0]
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10d      	bne.n	8007c72 <USB_EPStartXfer+0xe94>
 8007c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c6c:	801a      	strh	r2, [r3, #0]
 8007c6e:	f000 bc28 	b.w	80084c2 <USB_EPStartXfer+0x16e4>
 8007c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c76:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c78:	d81f      	bhi.n	8007cba <USB_EPStartXfer+0xedc>
 8007c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d004      	beq.n	8007c9a <USB_EPStartXfer+0xebc>
 8007c90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c94:	3301      	adds	r3, #1
 8007c96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	029b      	lsls	r3, r3, #10
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	4313      	orrs	r3, r2
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cb4:	801a      	strh	r2, [r3, #0]
 8007cb6:	f000 bc04 	b.w	80084c2 <USB_EPStartXfer+0x16e4>
 8007cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cbe:	095b      	lsrs	r3, r3, #5
 8007cc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc8:	f003 031f 	and.w	r3, r3, #31
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d104      	bne.n	8007cda <USB_EPStartXfer+0xefc>
 8007cd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	029b      	lsls	r3, r3, #10
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	4313      	orrs	r3, r2
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cfe:	801a      	strh	r2, [r3, #0]
 8007d00:	e3df      	b.n	80084c2 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	78db      	ldrb	r3, [r3, #3]
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	f040 8218 	bne.w	8008144 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	785b      	ldrb	r3, [r3, #1]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f040 809d 	bne.w	8007e60 <USB_EPStartXfer+0x1082>
 8007d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	00da      	lsls	r2, r3, #3
 8007d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d62:	4413      	add	r3, r2
 8007d64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d7e:	801a      	strh	r2, [r3, #0]
 8007d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10c      	bne.n	8007daa <USB_EPStartXfer+0xfcc>
 8007d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007da6:	801a      	strh	r2, [r3, #0]
 8007da8:	e08f      	b.n	8007eca <USB_EPStartXfer+0x10ec>
 8007daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007db8:	d826      	bhi.n	8007e08 <USB_EPStartXfer+0x102a>
 8007dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	085b      	lsrs	r3, r3, #1
 8007dc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <USB_EPStartXfer+0x100c>
 8007de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007de4:	3301      	adds	r3, #1
 8007de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	029b      	lsls	r3, r3, #10
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e04:	801a      	strh	r2, [r3, #0]
 8007e06:	e060      	b.n	8007eca <USB_EPStartXfer+0x10ec>
 8007e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 031f 	and.w	r3, r3, #31
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <USB_EPStartXfer+0x105a>
 8007e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e32:	3b01      	subs	r3, #1
 8007e34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	029b      	lsls	r3, r3, #10
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	e034      	b.n	8007eca <USB_EPStartXfer+0x10ec>
 8007e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	785b      	ldrb	r3, [r3, #1]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d12c      	bne.n	8007eca <USB_EPStartXfer+0x10ec>
 8007e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e94:	4413      	add	r3, r2
 8007e96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	00da      	lsls	r2, r3, #3
 8007ea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007eac:	4413      	add	r3, r2
 8007eae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007ec8:	801a      	strh	r2, [r3, #0]
 8007eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	785b      	ldrb	r3, [r3, #1]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f040 809d 	bne.w	8008024 <USB_EPStartXfer+0x1246>
 8007eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f0e:	4413      	add	r3, r2
 8007f10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	00da      	lsls	r2, r3, #3
 8007f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f26:	4413      	add	r3, r2
 8007f28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f42:	801a      	strh	r2, [r3, #0]
 8007f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10c      	bne.n	8007f6e <USB_EPStartXfer+0x1190>
 8007f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f6a:	801a      	strh	r2, [r3, #0]
 8007f6c:	e088      	b.n	8008080 <USB_EPStartXfer+0x12a2>
 8007f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f7c:	d826      	bhi.n	8007fcc <USB_EPStartXfer+0x11ee>
 8007f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	085b      	lsrs	r3, r3, #1
 8007f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d004      	beq.n	8007fae <USB_EPStartXfer+0x11d0>
 8007fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa8:	3301      	adds	r3, #1
 8007faa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	029b      	lsls	r3, r3, #10
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fc8:	801a      	strh	r2, [r3, #0]
 8007fca:	e059      	b.n	8008080 <USB_EPStartXfer+0x12a2>
 8007fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	095b      	lsrs	r3, r3, #5
 8007fda:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	f003 031f 	and.w	r3, r3, #31
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d104      	bne.n	8007ffc <USB_EPStartXfer+0x121e>
 8007ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29a      	uxth	r2, r3
 8008004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008008:	b29b      	uxth	r3, r3
 800800a:	029b      	lsls	r3, r3, #10
 800800c:	b29b      	uxth	r3, r3
 800800e:	4313      	orrs	r3, r2
 8008010:	b29b      	uxth	r3, r3
 8008012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800801a:	b29a      	uxth	r2, r3
 800801c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008020:	801a      	strh	r2, [r3, #0]
 8008022:	e02d      	b.n	8008080 <USB_EPStartXfer+0x12a2>
 8008024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	785b      	ldrb	r3, [r3, #1]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d125      	bne.n	8008080 <USB_EPStartXfer+0x12a2>
 8008034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008042:	b29b      	uxth	r3, r3
 8008044:	461a      	mov	r2, r3
 8008046:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800804a:	4413      	add	r3, r2
 800804c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	00da      	lsls	r2, r3, #3
 800805e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008062:	4413      	add	r3, r2
 8008064:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008068:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800806c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	b29a      	uxth	r2, r3
 800807a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800807e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 8218 	beq.w	80084c2 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d005      	beq.n	80080ca <USB_EPStartXfer+0x12ec>
 80080be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10d      	bne.n	80080e6 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f040 81f5 	bne.w	80084c2 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080d8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80080dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f040 81ee 	bne.w	80084c2 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80080e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	b29b      	uxth	r3, r3
 8008104:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800810c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	441a      	add	r2, r3
 800812a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800812e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800813a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800813e:	b29b      	uxth	r3, r3
 8008140:	8013      	strh	r3, [r2, #0]
 8008142:	e1be      	b.n	80084c2 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	78db      	ldrb	r3, [r3, #3]
 8008150:	2b01      	cmp	r3, #1
 8008152:	f040 81b4 	bne.w	80084be <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	429a      	cmp	r2, r3
 8008170:	d917      	bls.n	80081a2 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8008172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	699a      	ldr	r2, [r3, #24]
 800818e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008192:	1ad2      	subs	r2, r2, r3
 8008194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	619a      	str	r2, [r3, #24]
 80081a0:	e00e      	b.n	80081c0 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80081a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80081b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2200      	movs	r2, #0
 80081be:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80081c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	785b      	ldrb	r3, [r3, #1]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f040 8085 	bne.w	80082dc <USB_EPStartXfer+0x14fe>
 80081d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	461a      	mov	r2, r3
 80081f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80081f6:	4413      	add	r3, r2
 80081f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80081fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	00da      	lsls	r2, r3, #3
 800820a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800820e:	4413      	add	r3, r2
 8008210:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008214:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008224:	b29a      	uxth	r2, r3
 8008226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800822a:	801a      	strh	r2, [r3, #0]
 800822c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10c      	bne.n	800824e <USB_EPStartXfer+0x1470>
 8008234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	b29b      	uxth	r3, r3
 800823c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008244:	b29a      	uxth	r2, r3
 8008246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800824a:	801a      	strh	r2, [r3, #0]
 800824c:	e077      	b.n	800833e <USB_EPStartXfer+0x1560>
 800824e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008252:	2b3e      	cmp	r3, #62	@ 0x3e
 8008254:	d81e      	bhi.n	8008294 <USB_EPStartXfer+0x14b6>
 8008256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800825a:	085b      	lsrs	r3, r3, #1
 800825c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	d004      	beq.n	8008276 <USB_EPStartXfer+0x1498>
 800826c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008270:	3301      	adds	r3, #1
 8008272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	b29a      	uxth	r2, r3
 800827e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008282:	b29b      	uxth	r3, r3
 8008284:	029b      	lsls	r3, r3, #10
 8008286:	b29b      	uxth	r3, r3
 8008288:	4313      	orrs	r3, r2
 800828a:	b29a      	uxth	r2, r3
 800828c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008290:	801a      	strh	r2, [r3, #0]
 8008292:	e054      	b.n	800833e <USB_EPStartXfer+0x1560>
 8008294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800829e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a2:	f003 031f 	and.w	r3, r3, #31
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d104      	bne.n	80082b4 <USB_EPStartXfer+0x14d6>
 80082aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082ae:	3b01      	subs	r3, #1
 80082b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80082b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	029b      	lsls	r3, r3, #10
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	4313      	orrs	r3, r2
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80082d8:	801a      	strh	r2, [r3, #0]
 80082da:	e030      	b.n	800833e <USB_EPStartXfer+0x1560>
 80082dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d128      	bne.n	800833e <USB_EPStartXfer+0x1560>
 80082ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80082fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008308:	b29b      	uxth	r3, r3
 800830a:	461a      	mov	r2, r3
 800830c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008310:	4413      	add	r3, r2
 8008312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	00da      	lsls	r2, r3, #3
 8008324:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008328:	4413      	add	r3, r2
 800832a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800832e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008336:	b29a      	uxth	r2, r3
 8008338:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800833c:	801a      	strh	r2, [r3, #0]
 800833e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800834c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f040 8085 	bne.w	8008468 <USB_EPStartXfer+0x168a>
 800835e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008362:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800836c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800837a:	b29b      	uxth	r3, r3
 800837c:	461a      	mov	r2, r3
 800837e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008382:	4413      	add	r3, r2
 8008384:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800838c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	00da      	lsls	r2, r3, #3
 8008396:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800839a:	4413      	add	r3, r2
 800839c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083b6:	801a      	strh	r2, [r3, #0]
 80083b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10c      	bne.n	80083da <USB_EPStartXfer+0x15fc>
 80083c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083d6:	801a      	strh	r2, [r3, #0]
 80083d8:	e073      	b.n	80084c2 <USB_EPStartXfer+0x16e4>
 80083da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083de:	2b3e      	cmp	r3, #62	@ 0x3e
 80083e0:	d81e      	bhi.n	8008420 <USB_EPStartXfer+0x1642>
 80083e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e6:	085b      	lsrs	r3, r3, #1
 80083e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d004      	beq.n	8008402 <USB_EPStartXfer+0x1624>
 80083f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083fc:	3301      	adds	r3, #1
 80083fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008402:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	b29a      	uxth	r2, r3
 800840a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800840e:	b29b      	uxth	r3, r3
 8008410:	029b      	lsls	r3, r3, #10
 8008412:	b29b      	uxth	r3, r3
 8008414:	4313      	orrs	r3, r2
 8008416:	b29a      	uxth	r2, r3
 8008418:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800841c:	801a      	strh	r2, [r3, #0]
 800841e:	e050      	b.n	80084c2 <USB_EPStartXfer+0x16e4>
 8008420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008424:	095b      	lsrs	r3, r3, #5
 8008426:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800842a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800842e:	f003 031f 	and.w	r3, r3, #31
 8008432:	2b00      	cmp	r3, #0
 8008434:	d104      	bne.n	8008440 <USB_EPStartXfer+0x1662>
 8008436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800843a:	3b01      	subs	r3, #1
 800843c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008440:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b29a      	uxth	r2, r3
 8008448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800844c:	b29b      	uxth	r3, r3
 800844e:	029b      	lsls	r3, r3, #10
 8008450:	b29b      	uxth	r3, r3
 8008452:	4313      	orrs	r3, r2
 8008454:	b29b      	uxth	r3, r3
 8008456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800845a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800845e:	b29a      	uxth	r2, r3
 8008460:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008464:	801a      	strh	r2, [r3, #0]
 8008466:	e02c      	b.n	80084c2 <USB_EPStartXfer+0x16e4>
 8008468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d124      	bne.n	80084c2 <USB_EPStartXfer+0x16e4>
 8008478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008486:	b29b      	uxth	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800848e:	4413      	add	r3, r2
 8008490:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	00da      	lsls	r2, r3, #3
 80084a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80084a6:	4413      	add	r3, r2
 80084a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	e001      	b.n	80084c2 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e03a      	b.n	8008538 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80084ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80084f0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80084f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80084f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80084fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008500:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008508:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	441a      	add	r2, r3
 800851e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800852a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800852e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008532:	b29b      	uxth	r3, r3
 8008534:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	785b      	ldrb	r3, [r3, #1]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d020      	beq.n	8008596 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	b29b      	uxth	r3, r3
 8008562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800856a:	81bb      	strh	r3, [r7, #12]
 800856c:	89bb      	ldrh	r3, [r7, #12]
 800856e:	f083 0310 	eor.w	r3, r3, #16
 8008572:	81bb      	strh	r3, [r7, #12]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	441a      	add	r2, r3
 800857e:	89bb      	ldrh	r3, [r7, #12]
 8008580:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008584:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008588:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800858c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008590:	b29b      	uxth	r3, r3
 8008592:	8013      	strh	r3, [r2, #0]
 8008594:	e01f      	b.n	80085d6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ac:	81fb      	strh	r3, [r7, #14]
 80085ae:	89fb      	ldrh	r3, [r7, #14]
 80085b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80085b4:	81fb      	strh	r3, [r7, #14]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	441a      	add	r2, r3
 80085c0:	89fb      	ldrh	r3, [r7, #14]
 80085c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	7b1b      	ldrb	r3, [r3, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f040 809d 	bne.w	8008732 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d04c      	beq.n	800869a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	823b      	strh	r3, [r7, #16]
 800860e:	8a3b      	ldrh	r3, [r7, #16]
 8008610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008614:	2b00      	cmp	r3, #0
 8008616:	d01b      	beq.n	8008650 <USB_EPClearStall+0x6c>
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	b29b      	uxth	r3, r3
 8008626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800862a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800862e:	81fb      	strh	r3, [r7, #14]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	441a      	add	r2, r3
 800863a:	89fb      	ldrh	r3, [r7, #14]
 800863c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008648:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800864c:	b29b      	uxth	r3, r3
 800864e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	78db      	ldrb	r3, [r3, #3]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d06c      	beq.n	8008732 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	b29b      	uxth	r3, r3
 8008666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800866a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800866e:	81bb      	strh	r3, [r7, #12]
 8008670:	89bb      	ldrh	r3, [r7, #12]
 8008672:	f083 0320 	eor.w	r3, r3, #32
 8008676:	81bb      	strh	r3, [r7, #12]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	441a      	add	r2, r3
 8008682:	89bb      	ldrh	r3, [r7, #12]
 8008684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800868c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008694:	b29b      	uxth	r3, r3
 8008696:	8013      	strh	r3, [r2, #0]
 8008698:	e04b      	b.n	8008732 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	82fb      	strh	r3, [r7, #22]
 80086a8:	8afb      	ldrh	r3, [r7, #22]
 80086aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d01b      	beq.n	80086ea <USB_EPClearStall+0x106>
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	881b      	ldrh	r3, [r3, #0]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086c8:	82bb      	strh	r3, [r7, #20]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	441a      	add	r2, r3
 80086d4:	8abb      	ldrh	r3, [r7, #20]
 80086d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008700:	827b      	strh	r3, [r7, #18]
 8008702:	8a7b      	ldrh	r3, [r7, #18]
 8008704:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008708:	827b      	strh	r3, [r7, #18]
 800870a:	8a7b      	ldrh	r3, [r7, #18]
 800870c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008710:	827b      	strh	r3, [r7, #18]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	441a      	add	r2, r3
 800871c:	8a7b      	ldrh	r3, [r7, #18]
 800871e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008722:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800872a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800872e:	b29b      	uxth	r3, r3
 8008730:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	371c      	adds	r7, #28
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800874c:	78fb      	ldrb	r3, [r7, #3]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2280      	movs	r2, #128	@ 0x80
 8008756:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800877e:	b480      	push	{r7}
 8008780:	b085      	sub	sp, #20
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800878c:	b29b      	uxth	r3, r3
 800878e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008790:	68fb      	ldr	r3, [r7, #12]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800879e:	b480      	push	{r7}
 80087a0:	b08b      	sub	sp, #44	@ 0x2c
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	4611      	mov	r1, r2
 80087aa:	461a      	mov	r2, r3
 80087ac:	460b      	mov	r3, r1
 80087ae:	80fb      	strh	r3, [r7, #6]
 80087b0:	4613      	mov	r3, r2
 80087b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80087b4:	88bb      	ldrh	r3, [r7, #4]
 80087b6:	3301      	adds	r3, #1
 80087b8:	085b      	lsrs	r3, r3, #1
 80087ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087c4:	88fa      	ldrh	r2, [r7, #6]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ce:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80087d4:	e01b      	b.n	800880e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	3301      	adds	r3, #1
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	021b      	lsls	r3, r3, #8
 80087e4:	b21a      	sxth	r2, r3
 80087e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	b21b      	sxth	r3, r3
 80087ee:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	8a7a      	ldrh	r2, [r7, #18]
 80087f4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	3302      	adds	r3, #2
 80087fa:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	3301      	adds	r3, #1
 8008800:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	3301      	adds	r3, #1
 8008806:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880a:	3b01      	subs	r3, #1
 800880c:	627b      	str	r3, [r7, #36]	@ 0x24
 800880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e0      	bne.n	80087d6 <USB_WritePMA+0x38>
  }
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	372c      	adds	r7, #44	@ 0x2c
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008822:	b480      	push	{r7}
 8008824:	b08b      	sub	sp, #44	@ 0x2c
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	4611      	mov	r1, r2
 800882e:	461a      	mov	r2, r3
 8008830:	460b      	mov	r3, r1
 8008832:	80fb      	strh	r3, [r7, #6]
 8008834:	4613      	mov	r3, r2
 8008836:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008838:	88bb      	ldrh	r3, [r7, #4]
 800883a:	085b      	lsrs	r3, r3, #1
 800883c:	b29b      	uxth	r3, r3
 800883e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008848:	88fa      	ldrh	r2, [r7, #6]
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	4413      	add	r3, r2
 800884e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008852:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	627b      	str	r3, [r7, #36]	@ 0x24
 8008858:	e018      	b.n	800888c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	b29b      	uxth	r3, r3
 8008860:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	3302      	adds	r3, #2
 8008866:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	b2da      	uxtb	r2, r3
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	3301      	adds	r3, #1
 8008874:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	0a1b      	lsrs	r3, r3, #8
 800887a:	b2da      	uxtb	r2, r3
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	3301      	adds	r3, #1
 8008884:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008888:	3b01      	subs	r3, #1
 800888a:	627b      	str	r3, [r7, #36]	@ 0x24
 800888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e3      	bne.n	800885a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008892:	88bb      	ldrh	r3, [r7, #4]
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	b29b      	uxth	r3, r3
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	b2da      	uxtb	r2, r3
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	701a      	strb	r2, [r3, #0]
  }
}
 80088ae:	bf00      	nop
 80088b0:	372c      	adds	r7, #44	@ 0x2c
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	460b      	mov	r3, r1
 80088c4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	7c1b      	ldrb	r3, [r3, #16]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d115      	bne.n	80088fe <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088d6:	2202      	movs	r2, #2
 80088d8:	2181      	movs	r1, #129	@ 0x81
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 fe39 	bl	800a552 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088ea:	2202      	movs	r2, #2
 80088ec:	2101      	movs	r1, #1
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 fe2f 	bl	800a552 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80088fc:	e012      	b.n	8008924 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088fe:	2340      	movs	r3, #64	@ 0x40
 8008900:	2202      	movs	r2, #2
 8008902:	2181      	movs	r1, #129	@ 0x81
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 fe24 	bl	800a552 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008910:	2340      	movs	r3, #64	@ 0x40
 8008912:	2202      	movs	r2, #2
 8008914:	2101      	movs	r1, #1
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 fe1b 	bl	800a552 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008924:	2308      	movs	r3, #8
 8008926:	2203      	movs	r2, #3
 8008928:	2182      	movs	r1, #130	@ 0x82
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 fe11 	bl	800a552 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008936:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800893a:	f001 ff31 	bl	800a7a0 <USBD_static_malloc>
 800893e:	4602      	mov	r2, r0
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800894c:	2b00      	cmp	r3, #0
 800894e:	d102      	bne.n	8008956 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]
 8008954:	e026      	b.n	80089a4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800895c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2200      	movs	r2, #0
 800896c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2200      	movs	r2, #0
 8008974:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	7c1b      	ldrb	r3, [r3, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d109      	bne.n	8008994 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008986:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800898a:	2101      	movs	r1, #1
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 fed1 	bl	800a734 <USBD_LL_PrepareReceive>
 8008992:	e007      	b.n	80089a4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800899a:	2340      	movs	r3, #64	@ 0x40
 800899c:	2101      	movs	r1, #1
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 fec8 	bl	800a734 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	460b      	mov	r3, r1
 80089b8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80089be:	2181      	movs	r1, #129	@ 0x81
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f001 fdec 	bl	800a59e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80089cc:	2101      	movs	r1, #1
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 fde5 	bl	800a59e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80089dc:	2182      	movs	r1, #130	@ 0x82
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f001 fddd 	bl	800a59e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00e      	beq.n	8008a12 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 fed9 	bl	800a7bc <USBD_static_free>
    pdev->pClassData = NULL;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a2c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d039      	beq.n	8008aba <USBD_CDC_Setup+0x9e>
 8008a46:	2b20      	cmp	r3, #32
 8008a48:	d17f      	bne.n	8008b4a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	88db      	ldrh	r3, [r3, #6]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d029      	beq.n	8008aa6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	b25b      	sxtb	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	da11      	bge.n	8008a80 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008a68:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	88d2      	ldrh	r2, [r2, #6]
 8008a6e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a70:	6939      	ldr	r1, [r7, #16]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	88db      	ldrh	r3, [r3, #6]
 8008a76:	461a      	mov	r2, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f001 f9df 	bl	8009e3c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008a7e:	e06b      	b.n	8008b58 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	785a      	ldrb	r2, [r3, #1]
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	88db      	ldrh	r3, [r3, #6]
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a96:	6939      	ldr	r1, [r7, #16]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	88db      	ldrh	r3, [r3, #6]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 f9fa 	bl	8009e98 <USBD_CtlPrepareRx>
      break;
 8008aa4:	e058      	b.n	8008b58 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	7850      	ldrb	r0, [r2, #1]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	4798      	blx	r3
      break;
 8008ab8:	e04e      	b.n	8008b58 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	785b      	ldrb	r3, [r3, #1]
 8008abe:	2b0b      	cmp	r3, #11
 8008ac0:	d02e      	beq.n	8008b20 <USBD_CDC_Setup+0x104>
 8008ac2:	2b0b      	cmp	r3, #11
 8008ac4:	dc38      	bgt.n	8008b38 <USBD_CDC_Setup+0x11c>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <USBD_CDC_Setup+0xb4>
 8008aca:	2b0a      	cmp	r3, #10
 8008acc:	d014      	beq.n	8008af8 <USBD_CDC_Setup+0xdc>
 8008ace:	e033      	b.n	8008b38 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d107      	bne.n	8008aea <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ada:	f107 030c 	add.w	r3, r7, #12
 8008ade:	2202      	movs	r2, #2
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 f9aa 	bl	8009e3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ae8:	e02e      	b.n	8008b48 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f001 f93a 	bl	8009d66 <USBD_CtlError>
            ret = USBD_FAIL;
 8008af2:	2302      	movs	r3, #2
 8008af4:	75fb      	strb	r3, [r7, #23]
          break;
 8008af6:	e027      	b.n	8008b48 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d107      	bne.n	8008b12 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b02:	f107 030f 	add.w	r3, r7, #15
 8008b06:	2201      	movs	r2, #1
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 f996 	bl	8009e3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b10:	e01a      	b.n	8008b48 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 f926 	bl	8009d66 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b1e:	e013      	b.n	8008b48 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d00d      	beq.n	8008b46 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f001 f91a 	bl	8009d66 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b32:	2302      	movs	r3, #2
 8008b34:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b36:	e006      	b.n	8008b46 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 f913 	bl	8009d66 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b40:	2302      	movs	r3, #2
 8008b42:	75fb      	strb	r3, [r7, #23]
          break;
 8008b44:	e000      	b.n	8008b48 <USBD_CDC_Setup+0x12c>
          break;
 8008b46:	bf00      	nop
      }
      break;
 8008b48:	e006      	b.n	8008b58 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 f90a 	bl	8009d66 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b52:	2302      	movs	r3, #2
 8008b54:	75fb      	strb	r3, [r7, #23]
      break;
 8008b56:	bf00      	nop
  }

  return ret;
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b74:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b7c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d03a      	beq.n	8008bfe <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	331c      	adds	r3, #28
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d029      	beq.n	8008bf2 <USBD_CDC_DataIn+0x90>
 8008b9e:	78fa      	ldrb	r2, [r7, #3]
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	331c      	adds	r3, #28
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	78f9      	ldrb	r1, [r7, #3]
 8008bb2:	68b8      	ldr	r0, [r7, #8]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	440b      	add	r3, r1
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	4403      	add	r3, r0
 8008bbe:	3320      	adds	r3, #32
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bc6:	fb01 f303 	mul.w	r3, r1, r3
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d110      	bne.n	8008bf2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008bd0:	78fa      	ldrb	r2, [r7, #3]
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	331c      	adds	r3, #28
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008be4:	78f9      	ldrb	r1, [r7, #3]
 8008be6:	2300      	movs	r3, #0
 8008be8:	2200      	movs	r2, #0
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 fd7f 	bl	800a6ee <USBD_LL_Transmit>
 8008bf0:	e003      	b.n	8008bfa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e000      	b.n	8008c00 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008bfe:	2302      	movs	r3, #2
  }
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c1c:	78fb      	ldrb	r3, [r7, #3]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 fdaa 	bl	800a77a <USBD_LL_GetRxDataSize>
 8008c26:	4602      	mov	r2, r0
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00d      	beq.n	8008c54 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4798      	blx	r3

    return USBD_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	e000      	b.n	8008c56 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008c54:	2302      	movs	r3, #2
  }
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c6c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d014      	beq.n	8008ca2 <USBD_CDC_EP0_RxReady+0x44>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008c7e:	2bff      	cmp	r3, #255	@ 0xff
 8008c80:	d00f      	beq.n	8008ca2 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	22ff      	movs	r2, #255	@ 0xff
 8008c9e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2243      	movs	r2, #67	@ 0x43
 8008cb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008cba:	4b03      	ldr	r3, [pc, #12]	@ (8008cc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	20000094 	.word	0x20000094

08008ccc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2243      	movs	r2, #67	@ 0x43
 8008cd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008cda:	4b03      	ldr	r3, [pc, #12]	@ (8008ce8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	20000050 	.word	0x20000050

08008cec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2243      	movs	r2, #67	@ 0x43
 8008cf8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008cfa:	4b03      	ldr	r3, [pc, #12]	@ (8008d08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	200000d8 	.word	0x200000d8

08008d0c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	220a      	movs	r2, #10
 8008d18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008d1a:	4b03      	ldr	r3, [pc, #12]	@ (8008d28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	2000000c 	.word	0x2000000c

08008d2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008d36:	2302      	movs	r3, #2
 8008d38:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b087      	sub	sp, #28
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	4613      	mov	r3, r2
 8008d66:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d6e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008d78:	88fa      	ldrh	r2, [r7, #6]
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b085      	sub	sp, #20
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d9e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dc4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d017      	beq.n	8008e00 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	7c1b      	ldrb	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d109      	bne.n	8008dec <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008de2:	2101      	movs	r1, #1
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f001 fca5 	bl	800a734 <USBD_LL_PrepareReceive>
 8008dea:	e007      	b.n	8008dfc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008df2:	2340      	movs	r3, #64	@ 0x40
 8008df4:	2101      	movs	r1, #1
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f001 fc9c 	bl	800a734 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	e000      	b.n	8008e02 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008e00:	2302      	movs	r3, #2
  }
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	60b9      	str	r1, [r7, #8]
 8008e14:	4613      	mov	r3, r2
 8008e16:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e1e:	2302      	movs	r3, #2
 8008e20:	e01a      	b.n	8008e58 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	79fa      	ldrb	r2, [r7, #7]
 8008e4e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f001 fb07 	bl	800a464 <USBD_LL_Init>

  return USBD_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d006      	beq.n	8008e82 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	73fb      	strb	r3, [r7, #15]
 8008e80:	e001      	b.n	8008e86 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e82:	2302      	movs	r3, #2
 8008e84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 fb3d 	bl	800a51c <USBD_LL_Start>

  return USBD_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00c      	beq.n	8008ef6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	78fa      	ldrb	r2, [r7, #3]
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	4798      	blx	r3
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	78fa      	ldrb	r2, [r7, #3]
 8008f16:	4611      	mov	r1, r2
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	4798      	blx	r3

  return USBD_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b082      	sub	sp, #8
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f36:	6839      	ldr	r1, [r7, #0]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 feda 	bl	8009cf2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f5a:	f003 031f 	and.w	r3, r3, #31
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d016      	beq.n	8008f90 <USBD_LL_SetupStage+0x6a>
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d81c      	bhi.n	8008fa0 <USBD_LL_SetupStage+0x7a>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <USBD_LL_SetupStage+0x4a>
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d008      	beq.n	8008f80 <USBD_LL_SetupStage+0x5a>
 8008f6e:	e017      	b.n	8008fa0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f9cd 	bl	8009318 <USBD_StdDevReq>
      break;
 8008f7e:	e01a      	b.n	8008fb6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fa2f 	bl	80093ec <USBD_StdItfReq>
      break;
 8008f8e:	e012      	b.n	8008fb6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fa6f 	bl	800947c <USBD_StdEPReq>
      break;
 8008f9e:	e00a      	b.n	8008fb6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008fa6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 fb14 	bl	800a5dc <USBD_LL_StallEP>
      break;
 8008fb4:	bf00      	nop
  }

  return USBD_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008fce:	7afb      	ldrb	r3, [r7, #11]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d14b      	bne.n	800906c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008fda:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	d134      	bne.n	8009050 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d919      	bls.n	8009026 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	68da      	ldr	r2, [r3, #12]
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	1ad2      	subs	r2, r2, r3
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009008:	429a      	cmp	r2, r3
 800900a:	d203      	bcs.n	8009014 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009010:	b29b      	uxth	r3, r3
 8009012:	e002      	b.n	800901a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009018:	b29b      	uxth	r3, r3
 800901a:	461a      	mov	r2, r3
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 ff58 	bl	8009ed4 <USBD_CtlContinueRx>
 8009024:	e038      	b.n	8009098 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00a      	beq.n	8009048 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009038:	2b03      	cmp	r3, #3
 800903a:	d105      	bne.n	8009048 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 ff55 	bl	8009ef8 <USBD_CtlSendStatus>
 800904e:	e023      	b.n	8009098 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009056:	2b05      	cmp	r3, #5
 8009058:	d11e      	bne.n	8009098 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009062:	2100      	movs	r1, #0
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f001 fab9 	bl	800a5dc <USBD_LL_StallEP>
 800906a:	e015      	b.n	8009098 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00d      	beq.n	8009094 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800907e:	2b03      	cmp	r3, #3
 8009080:	d108      	bne.n	8009094 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	7afa      	ldrb	r2, [r7, #11]
 800908c:	4611      	mov	r1, r2
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	4798      	blx	r3
 8009092:	e001      	b.n	8009098 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009094:	2302      	movs	r3, #2
 8009096:	e000      	b.n	800909a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b086      	sub	sp, #24
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	460b      	mov	r3, r1
 80090ac:	607a      	str	r2, [r7, #4]
 80090ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80090b0:	7afb      	ldrb	r3, [r7, #11]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d17f      	bne.n	80091b6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	3314      	adds	r3, #20
 80090ba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d15c      	bne.n	8009180 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	68da      	ldr	r2, [r3, #12]
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d915      	bls.n	80090fe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	1ad2      	subs	r2, r2, r3
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	461a      	mov	r2, r3
 80090e8:	6879      	ldr	r1, [r7, #4]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 fec2 	bl	8009e74 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090f0:	2300      	movs	r3, #0
 80090f2:	2200      	movs	r2, #0
 80090f4:	2100      	movs	r1, #0
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f001 fb1c 	bl	800a734 <USBD_LL_PrepareReceive>
 80090fc:	e04e      	b.n	800919c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	6912      	ldr	r2, [r2, #16]
 8009106:	fbb3 f1f2 	udiv	r1, r3, r2
 800910a:	fb01 f202 	mul.w	r2, r1, r2
 800910e:	1a9b      	subs	r3, r3, r2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d11c      	bne.n	800914e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	689a      	ldr	r2, [r3, #8]
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800911c:	429a      	cmp	r2, r3
 800911e:	d316      	bcc.n	800914e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800912a:	429a      	cmp	r2, r3
 800912c:	d20f      	bcs.n	800914e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800912e:	2200      	movs	r2, #0
 8009130:	2100      	movs	r1, #0
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 fe9e 	bl	8009e74 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009140:	2300      	movs	r3, #0
 8009142:	2200      	movs	r2, #0
 8009144:	2100      	movs	r1, #0
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f001 faf4 	bl	800a734 <USBD_LL_PrepareReceive>
 800914c:	e026      	b.n	800919c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009160:	2b03      	cmp	r3, #3
 8009162:	d105      	bne.n	8009170 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009170:	2180      	movs	r1, #128	@ 0x80
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f001 fa32 	bl	800a5dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 fed0 	bl	8009f1e <USBD_CtlReceiveStatus>
 800917e:	e00d      	b.n	800919c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009186:	2b04      	cmp	r3, #4
 8009188:	d004      	beq.n	8009194 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009194:	2180      	movs	r1, #128	@ 0x80
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f001 fa20 	bl	800a5dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d11d      	bne.n	80091e2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f7ff fe80 	bl	8008eac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80091b4:	e015      	b.n	80091e2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00d      	beq.n	80091de <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d108      	bne.n	80091de <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	7afa      	ldrb	r2, [r7, #11]
 80091d6:	4611      	mov	r1, r2
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	4798      	blx	r3
 80091dc:	e001      	b.n	80091e2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091de:	2302      	movs	r3, #2
 80091e0:	e000      	b.n	80091e4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091f4:	2340      	movs	r3, #64	@ 0x40
 80091f6:	2200      	movs	r2, #0
 80091f8:	2100      	movs	r1, #0
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f001 f9a9 	bl	800a552 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2240      	movs	r2, #64	@ 0x40
 800920c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009210:	2340      	movs	r3, #64	@ 0x40
 8009212:	2200      	movs	r2, #0
 8009214:	2180      	movs	r1, #128	@ 0x80
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f001 f99b 	bl	800a552 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2240      	movs	r2, #64	@ 0x40
 8009226:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d009      	beq.n	8009264 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	6852      	ldr	r2, [r2, #4]
 800925c:	b2d2      	uxtb	r2, r2
 800925e:	4611      	mov	r1, r2
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	4798      	blx	r3
  }

  return USBD_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	460b      	mov	r3, r1
 8009278:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	78fa      	ldrb	r2, [r7, #3]
 800927e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800928e:	b480      	push	{r7}
 8009290:	b083      	sub	sp, #12
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2204      	movs	r2, #4
 80092a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	d105      	bne.n	80092d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092f2:	2b03      	cmp	r3, #3
 80092f4:	d10b      	bne.n	800930e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800932e:	2b40      	cmp	r3, #64	@ 0x40
 8009330:	d005      	beq.n	800933e <USBD_StdDevReq+0x26>
 8009332:	2b40      	cmp	r3, #64	@ 0x40
 8009334:	d84f      	bhi.n	80093d6 <USBD_StdDevReq+0xbe>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d009      	beq.n	800934e <USBD_StdDevReq+0x36>
 800933a:	2b20      	cmp	r3, #32
 800933c:	d14b      	bne.n	80093d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	4798      	blx	r3
      break;
 800934c:	e048      	b.n	80093e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	785b      	ldrb	r3, [r3, #1]
 8009352:	2b09      	cmp	r3, #9
 8009354:	d839      	bhi.n	80093ca <USBD_StdDevReq+0xb2>
 8009356:	a201      	add	r2, pc, #4	@ (adr r2, 800935c <USBD_StdDevReq+0x44>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	080093ad 	.word	0x080093ad
 8009360:	080093c1 	.word	0x080093c1
 8009364:	080093cb 	.word	0x080093cb
 8009368:	080093b7 	.word	0x080093b7
 800936c:	080093cb 	.word	0x080093cb
 8009370:	0800938f 	.word	0x0800938f
 8009374:	08009385 	.word	0x08009385
 8009378:	080093cb 	.word	0x080093cb
 800937c:	080093a3 	.word	0x080093a3
 8009380:	08009399 	.word	0x08009399
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f9dc 	bl	8009744 <USBD_GetDescriptor>
          break;
 800938c:	e022      	b.n	80093d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fb3f 	bl	8009a14 <USBD_SetAddress>
          break;
 8009396:	e01d      	b.n	80093d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fb7e 	bl	8009a9c <USBD_SetConfig>
          break;
 80093a0:	e018      	b.n	80093d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fc07 	bl	8009bb8 <USBD_GetConfig>
          break;
 80093aa:	e013      	b.n	80093d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fc37 	bl	8009c22 <USBD_GetStatus>
          break;
 80093b4:	e00e      	b.n	80093d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fc65 	bl	8009c88 <USBD_SetFeature>
          break;
 80093be:	e009      	b.n	80093d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fc74 	bl	8009cb0 <USBD_ClrFeature>
          break;
 80093c8:	e004      	b.n	80093d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fcca 	bl	8009d66 <USBD_CtlError>
          break;
 80093d2:	bf00      	nop
      }
      break;
 80093d4:	e004      	b.n	80093e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fcc4 	bl	8009d66 <USBD_CtlError>
      break;
 80093de:	bf00      	nop
  }

  return ret;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop

080093ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009402:	2b40      	cmp	r3, #64	@ 0x40
 8009404:	d005      	beq.n	8009412 <USBD_StdItfReq+0x26>
 8009406:	2b40      	cmp	r3, #64	@ 0x40
 8009408:	d82e      	bhi.n	8009468 <USBD_StdItfReq+0x7c>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <USBD_StdItfReq+0x26>
 800940e:	2b20      	cmp	r3, #32
 8009410:	d12a      	bne.n	8009468 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009418:	3b01      	subs	r3, #1
 800941a:	2b02      	cmp	r3, #2
 800941c:	d81d      	bhi.n	800945a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	889b      	ldrh	r3, [r3, #4]
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b01      	cmp	r3, #1
 8009426:	d813      	bhi.n	8009450 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	4798      	blx	r3
 8009436:	4603      	mov	r3, r0
 8009438:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	88db      	ldrh	r3, [r3, #6]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d110      	bne.n	8009464 <USBD_StdItfReq+0x78>
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10d      	bne.n	8009464 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fd55 	bl	8009ef8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800944e:	e009      	b.n	8009464 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fc87 	bl	8009d66 <USBD_CtlError>
          break;
 8009458:	e004      	b.n	8009464 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fc82 	bl	8009d66 <USBD_CtlError>
          break;
 8009462:	e000      	b.n	8009466 <USBD_StdItfReq+0x7a>
          break;
 8009464:	bf00      	nop
      }
      break;
 8009466:	e004      	b.n	8009472 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fc7b 	bl	8009d66 <USBD_CtlError>
      break;
 8009470:	bf00      	nop
  }

  return USBD_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	889b      	ldrh	r3, [r3, #4]
 800948e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009498:	2b40      	cmp	r3, #64	@ 0x40
 800949a:	d007      	beq.n	80094ac <USBD_StdEPReq+0x30>
 800949c:	2b40      	cmp	r3, #64	@ 0x40
 800949e:	f200 8146 	bhi.w	800972e <USBD_StdEPReq+0x2b2>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <USBD_StdEPReq+0x40>
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	f040 8141 	bne.w	800972e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
      break;
 80094ba:	e13d      	b.n	8009738 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	d10a      	bne.n	80094de <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	4798      	blx	r3
 80094d6:	4603      	mov	r3, r0
 80094d8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80094da:	7bfb      	ldrb	r3, [r7, #15]
 80094dc:	e12d      	b.n	800973a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	785b      	ldrb	r3, [r3, #1]
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d007      	beq.n	80094f6 <USBD_StdEPReq+0x7a>
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	f300 811b 	bgt.w	8009722 <USBD_StdEPReq+0x2a6>
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d072      	beq.n	80095d6 <USBD_StdEPReq+0x15a>
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d03a      	beq.n	800956a <USBD_StdEPReq+0xee>
 80094f4:	e115      	b.n	8009722 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d002      	beq.n	8009506 <USBD_StdEPReq+0x8a>
 8009500:	2b03      	cmp	r3, #3
 8009502:	d015      	beq.n	8009530 <USBD_StdEPReq+0xb4>
 8009504:	e02b      	b.n	800955e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00c      	beq.n	8009526 <USBD_StdEPReq+0xaa>
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	2b80      	cmp	r3, #128	@ 0x80
 8009510:	d009      	beq.n	8009526 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009512:	7bbb      	ldrb	r3, [r7, #14]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 f860 	bl	800a5dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800951c:	2180      	movs	r1, #128	@ 0x80
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f001 f85c 	bl	800a5dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009524:	e020      	b.n	8009568 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fc1c 	bl	8009d66 <USBD_CtlError>
              break;
 800952e:	e01b      	b.n	8009568 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	885b      	ldrh	r3, [r3, #2]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10e      	bne.n	8009556 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009538:	7bbb      	ldrb	r3, [r7, #14]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00b      	beq.n	8009556 <USBD_StdEPReq+0xda>
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b80      	cmp	r3, #128	@ 0x80
 8009542:	d008      	beq.n	8009556 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	88db      	ldrh	r3, [r3, #6]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d104      	bne.n	8009556 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 f843 	bl	800a5dc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fcce 	bl	8009ef8 <USBD_CtlSendStatus>

              break;
 800955c:	e004      	b.n	8009568 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fc00 	bl	8009d66 <USBD_CtlError>
              break;
 8009566:	bf00      	nop
          }
          break;
 8009568:	e0e0      	b.n	800972c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009570:	2b02      	cmp	r3, #2
 8009572:	d002      	beq.n	800957a <USBD_StdEPReq+0xfe>
 8009574:	2b03      	cmp	r3, #3
 8009576:	d015      	beq.n	80095a4 <USBD_StdEPReq+0x128>
 8009578:	e026      	b.n	80095c8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00c      	beq.n	800959a <USBD_StdEPReq+0x11e>
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	2b80      	cmp	r3, #128	@ 0x80
 8009584:	d009      	beq.n	800959a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 f826 	bl	800a5dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009590:	2180      	movs	r1, #128	@ 0x80
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 f822 	bl	800a5dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009598:	e01c      	b.n	80095d4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fbe2 	bl	8009d66 <USBD_CtlError>
              break;
 80095a2:	e017      	b.n	80095d4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	885b      	ldrh	r3, [r3, #2]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d112      	bne.n	80095d2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
 80095ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f001 f82d 	bl	800a61a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fc99 	bl	8009ef8 <USBD_CtlSendStatus>
              }
              break;
 80095c6:	e004      	b.n	80095d2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fbcb 	bl	8009d66 <USBD_CtlError>
              break;
 80095d0:	e000      	b.n	80095d4 <USBD_StdEPReq+0x158>
              break;
 80095d2:	bf00      	nop
          }
          break;
 80095d4:	e0aa      	b.n	800972c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d002      	beq.n	80095e6 <USBD_StdEPReq+0x16a>
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d032      	beq.n	800964a <USBD_StdEPReq+0x1ce>
 80095e4:	e097      	b.n	8009716 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d007      	beq.n	80095fc <USBD_StdEPReq+0x180>
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
 80095ee:	2b80      	cmp	r3, #128	@ 0x80
 80095f0:	d004      	beq.n	80095fc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fbb6 	bl	8009d66 <USBD_CtlError>
                break;
 80095fa:	e091      	b.n	8009720 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009600:	2b00      	cmp	r3, #0
 8009602:	da0b      	bge.n	800961c <USBD_StdEPReq+0x1a0>
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800960a:	4613      	mov	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	3310      	adds	r3, #16
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	4413      	add	r3, r2
 8009618:	3304      	adds	r3, #4
 800961a:	e00b      	b.n	8009634 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800961c:	7bbb      	ldrb	r3, [r7, #14]
 800961e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	4413      	add	r3, r2
 8009632:	3304      	adds	r3, #4
 8009634:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2202      	movs	r2, #2
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fbfa 	bl	8009e3c <USBD_CtlSendData>
              break;
 8009648:	e06a      	b.n	8009720 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800964a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800964e:	2b00      	cmp	r3, #0
 8009650:	da11      	bge.n	8009676 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	f003 020f 	and.w	r2, r3, #15
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	4613      	mov	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	3318      	adds	r3, #24
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d117      	bne.n	800969c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fb79 	bl	8009d66 <USBD_CtlError>
                  break;
 8009674:	e054      	b.n	8009720 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009676:	7bbb      	ldrb	r3, [r7, #14]
 8009678:	f003 020f 	and.w	r2, r3, #15
 800967c:	6879      	ldr	r1, [r7, #4]
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	440b      	add	r3, r1
 8009688:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d104      	bne.n	800969c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fb66 	bl	8009d66 <USBD_CtlError>
                  break;
 800969a:	e041      	b.n	8009720 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800969c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	da0b      	bge.n	80096bc <USBD_StdEPReq+0x240>
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	3310      	adds	r3, #16
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	4413      	add	r3, r2
 80096b8:	3304      	adds	r3, #4
 80096ba:	e00b      	b.n	80096d4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	4413      	add	r3, r2
 80096d2:	3304      	adds	r3, #4
 80096d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <USBD_StdEPReq+0x266>
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	2b80      	cmp	r3, #128	@ 0x80
 80096e0:	d103      	bne.n	80096ea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	2200      	movs	r2, #0
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	e00e      	b.n	8009708 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 ffb2 	bl	800a658 <USBD_LL_IsStallEP>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2201      	movs	r2, #1
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	e002      	b.n	8009708 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2202      	movs	r2, #2
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fb94 	bl	8009e3c <USBD_CtlSendData>
              break;
 8009714:	e004      	b.n	8009720 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fb24 	bl	8009d66 <USBD_CtlError>
              break;
 800971e:	bf00      	nop
          }
          break;
 8009720:	e004      	b.n	800972c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fb1e 	bl	8009d66 <USBD_CtlError>
          break;
 800972a:	bf00      	nop
      }
      break;
 800972c:	e004      	b.n	8009738 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fb18 	bl	8009d66 <USBD_CtlError>
      break;
 8009736:	bf00      	nop
  }

  return ret;
 8009738:	7bfb      	ldrb	r3, [r7, #15]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800974e:	2300      	movs	r3, #0
 8009750:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009752:	2300      	movs	r3, #0
 8009754:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009756:	2300      	movs	r3, #0
 8009758:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	885b      	ldrh	r3, [r3, #2]
 800975e:	0a1b      	lsrs	r3, r3, #8
 8009760:	b29b      	uxth	r3, r3
 8009762:	3b01      	subs	r3, #1
 8009764:	2b06      	cmp	r3, #6
 8009766:	f200 8128 	bhi.w	80099ba <USBD_GetDescriptor+0x276>
 800976a:	a201      	add	r2, pc, #4	@ (adr r2, 8009770 <USBD_GetDescriptor+0x2c>)
 800976c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009770:	0800978d 	.word	0x0800978d
 8009774:	080097a5 	.word	0x080097a5
 8009778:	080097e5 	.word	0x080097e5
 800977c:	080099bb 	.word	0x080099bb
 8009780:	080099bb 	.word	0x080099bb
 8009784:	0800995b 	.word	0x0800995b
 8009788:	08009987 	.word	0x08009987
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	7c12      	ldrb	r2, [r2, #16]
 8009798:	f107 0108 	add.w	r1, r7, #8
 800979c:	4610      	mov	r0, r2
 800979e:	4798      	blx	r3
 80097a0:	60f8      	str	r0, [r7, #12]
      break;
 80097a2:	e112      	b.n	80099ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	7c1b      	ldrb	r3, [r3, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10d      	bne.n	80097c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b4:	f107 0208 	add.w	r2, r7, #8
 80097b8:	4610      	mov	r0, r2
 80097ba:	4798      	blx	r3
 80097bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	3301      	adds	r3, #1
 80097c2:	2202      	movs	r2, #2
 80097c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097c6:	e100      	b.n	80099ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d0:	f107 0208 	add.w	r2, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3301      	adds	r3, #1
 80097de:	2202      	movs	r2, #2
 80097e0:	701a      	strb	r2, [r3, #0]
      break;
 80097e2:	e0f2      	b.n	80099ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	885b      	ldrh	r3, [r3, #2]
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b05      	cmp	r3, #5
 80097ec:	f200 80ac 	bhi.w	8009948 <USBD_GetDescriptor+0x204>
 80097f0:	a201      	add	r2, pc, #4	@ (adr r2, 80097f8 <USBD_GetDescriptor+0xb4>)
 80097f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f6:	bf00      	nop
 80097f8:	08009811 	.word	0x08009811
 80097fc:	08009845 	.word	0x08009845
 8009800:	08009879 	.word	0x08009879
 8009804:	080098ad 	.word	0x080098ad
 8009808:	080098e1 	.word	0x080098e1
 800980c:	08009915 	.word	0x08009915
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00b      	beq.n	8009834 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	7c12      	ldrb	r2, [r2, #16]
 8009828:	f107 0108 	add.w	r1, r7, #8
 800982c:	4610      	mov	r0, r2
 800982e:	4798      	blx	r3
 8009830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009832:	e091      	b.n	8009958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fa95 	bl	8009d66 <USBD_CtlError>
            err++;
 800983c:	7afb      	ldrb	r3, [r7, #11]
 800983e:	3301      	adds	r3, #1
 8009840:	72fb      	strb	r3, [r7, #11]
          break;
 8009842:	e089      	b.n	8009958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00b      	beq.n	8009868 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	7c12      	ldrb	r2, [r2, #16]
 800985c:	f107 0108 	add.w	r1, r7, #8
 8009860:	4610      	mov	r0, r2
 8009862:	4798      	blx	r3
 8009864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009866:	e077      	b.n	8009958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fa7b 	bl	8009d66 <USBD_CtlError>
            err++;
 8009870:	7afb      	ldrb	r3, [r7, #11]
 8009872:	3301      	adds	r3, #1
 8009874:	72fb      	strb	r3, [r7, #11]
          break;
 8009876:	e06f      	b.n	8009958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00b      	beq.n	800989c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	7c12      	ldrb	r2, [r2, #16]
 8009890:	f107 0108 	add.w	r1, r7, #8
 8009894:	4610      	mov	r0, r2
 8009896:	4798      	blx	r3
 8009898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800989a:	e05d      	b.n	8009958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fa61 	bl	8009d66 <USBD_CtlError>
            err++;
 80098a4:	7afb      	ldrb	r3, [r7, #11]
 80098a6:	3301      	adds	r3, #1
 80098a8:	72fb      	strb	r3, [r7, #11]
          break;
 80098aa:	e055      	b.n	8009958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00b      	beq.n	80098d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	7c12      	ldrb	r2, [r2, #16]
 80098c4:	f107 0108 	add.w	r1, r7, #8
 80098c8:	4610      	mov	r0, r2
 80098ca:	4798      	blx	r3
 80098cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ce:	e043      	b.n	8009958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa47 	bl	8009d66 <USBD_CtlError>
            err++;
 80098d8:	7afb      	ldrb	r3, [r7, #11]
 80098da:	3301      	adds	r3, #1
 80098dc:	72fb      	strb	r3, [r7, #11]
          break;
 80098de:	e03b      	b.n	8009958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00b      	beq.n	8009904 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	7c12      	ldrb	r2, [r2, #16]
 80098f8:	f107 0108 	add.w	r1, r7, #8
 80098fc:	4610      	mov	r0, r2
 80098fe:	4798      	blx	r3
 8009900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009902:	e029      	b.n	8009958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fa2d 	bl	8009d66 <USBD_CtlError>
            err++;
 800990c:	7afb      	ldrb	r3, [r7, #11]
 800990e:	3301      	adds	r3, #1
 8009910:	72fb      	strb	r3, [r7, #11]
          break;
 8009912:	e021      	b.n	8009958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00b      	beq.n	8009938 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	7c12      	ldrb	r2, [r2, #16]
 800992c:	f107 0108 	add.w	r1, r7, #8
 8009930:	4610      	mov	r0, r2
 8009932:	4798      	blx	r3
 8009934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009936:	e00f      	b.n	8009958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fa13 	bl	8009d66 <USBD_CtlError>
            err++;
 8009940:	7afb      	ldrb	r3, [r7, #11]
 8009942:	3301      	adds	r3, #1
 8009944:	72fb      	strb	r3, [r7, #11]
          break;
 8009946:	e007      	b.n	8009958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fa0b 	bl	8009d66 <USBD_CtlError>
          err++;
 8009950:	7afb      	ldrb	r3, [r7, #11]
 8009952:	3301      	adds	r3, #1
 8009954:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009956:	e038      	b.n	80099ca <USBD_GetDescriptor+0x286>
 8009958:	e037      	b.n	80099ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	7c1b      	ldrb	r3, [r3, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d109      	bne.n	8009976 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800996a:	f107 0208 	add.w	r2, r7, #8
 800996e:	4610      	mov	r0, r2
 8009970:	4798      	blx	r3
 8009972:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009974:	e029      	b.n	80099ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f9f4 	bl	8009d66 <USBD_CtlError>
        err++;
 800997e:	7afb      	ldrb	r3, [r7, #11]
 8009980:	3301      	adds	r3, #1
 8009982:	72fb      	strb	r3, [r7, #11]
      break;
 8009984:	e021      	b.n	80099ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	7c1b      	ldrb	r3, [r3, #16]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10d      	bne.n	80099aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009996:	f107 0208 	add.w	r2, r7, #8
 800999a:	4610      	mov	r0, r2
 800999c:	4798      	blx	r3
 800999e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3301      	adds	r3, #1
 80099a4:	2207      	movs	r2, #7
 80099a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099a8:	e00f      	b.n	80099ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f9da 	bl	8009d66 <USBD_CtlError>
        err++;
 80099b2:	7afb      	ldrb	r3, [r7, #11]
 80099b4:	3301      	adds	r3, #1
 80099b6:	72fb      	strb	r3, [r7, #11]
      break;
 80099b8:	e007      	b.n	80099ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f9d2 	bl	8009d66 <USBD_CtlError>
      err++;
 80099c2:	7afb      	ldrb	r3, [r7, #11]
 80099c4:	3301      	adds	r3, #1
 80099c6:	72fb      	strb	r3, [r7, #11]
      break;
 80099c8:	bf00      	nop
  }

  if (err != 0U)
 80099ca:	7afb      	ldrb	r3, [r7, #11]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d11c      	bne.n	8009a0a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80099d0:	893b      	ldrh	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d011      	beq.n	80099fa <USBD_GetDescriptor+0x2b6>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	88db      	ldrh	r3, [r3, #6]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00d      	beq.n	80099fa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	88da      	ldrh	r2, [r3, #6]
 80099e2:	893b      	ldrh	r3, [r7, #8]
 80099e4:	4293      	cmp	r3, r2
 80099e6:	bf28      	it	cs
 80099e8:	4613      	movcs	r3, r2
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099ee:	893b      	ldrh	r3, [r7, #8]
 80099f0:	461a      	mov	r2, r3
 80099f2:	68f9      	ldr	r1, [r7, #12]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fa21 	bl	8009e3c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	88db      	ldrh	r3, [r3, #6]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d104      	bne.n	8009a0c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fa78 	bl	8009ef8 <USBD_CtlSendStatus>
 8009a08:	e000      	b.n	8009a0c <USBD_GetDescriptor+0x2c8>
    return;
 8009a0a:	bf00      	nop
    }
  }
}
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop

08009a14 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	889b      	ldrh	r3, [r3, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d130      	bne.n	8009a88 <USBD_SetAddress+0x74>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	88db      	ldrh	r3, [r3, #6]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d12c      	bne.n	8009a88 <USBD_SetAddress+0x74>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	885b      	ldrh	r3, [r3, #2]
 8009a32:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a34:	d828      	bhi.n	8009a88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	885b      	ldrh	r3, [r3, #2]
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d104      	bne.n	8009a56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f989 	bl	8009d66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a54:	e01d      	b.n	8009a92 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	7bfa      	ldrb	r2, [r7, #15]
 8009a5a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fe24 	bl	800a6b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fa45 	bl	8009ef8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d004      	beq.n	8009a7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a7c:	e009      	b.n	8009a92 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a86:	e004      	b.n	8009a92 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f96b 	bl	8009d66 <USBD_CtlError>
  }
}
 8009a90:	bf00      	nop
 8009a92:	bf00      	nop
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
	...

08009a9c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	885b      	ldrh	r3, [r3, #2]
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	4b41      	ldr	r3, [pc, #260]	@ (8009bb4 <USBD_SetConfig+0x118>)
 8009aae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ab0:	4b40      	ldr	r3, [pc, #256]	@ (8009bb4 <USBD_SetConfig+0x118>)
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d904      	bls.n	8009ac2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f953 	bl	8009d66 <USBD_CtlError>
 8009ac0:	e075      	b.n	8009bae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d002      	beq.n	8009ad2 <USBD_SetConfig+0x36>
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d023      	beq.n	8009b18 <USBD_SetConfig+0x7c>
 8009ad0:	e062      	b.n	8009b98 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009ad2:	4b38      	ldr	r3, [pc, #224]	@ (8009bb4 <USBD_SetConfig+0x118>)
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d01a      	beq.n	8009b10 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009ada:	4b36      	ldr	r3, [pc, #216]	@ (8009bb4 <USBD_SetConfig+0x118>)
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2203      	movs	r2, #3
 8009ae8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009aec:	4b31      	ldr	r3, [pc, #196]	@ (8009bb4 <USBD_SetConfig+0x118>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	4619      	mov	r1, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7ff f9e5 	bl	8008ec2 <USBD_SetClassConfig>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d104      	bne.n	8009b08 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f930 	bl	8009d66 <USBD_CtlError>
            return;
 8009b06:	e052      	b.n	8009bae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f9f5 	bl	8009ef8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b0e:	e04e      	b.n	8009bae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f9f1 	bl	8009ef8 <USBD_CtlSendStatus>
        break;
 8009b16:	e04a      	b.n	8009bae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009b18:	4b26      	ldr	r3, [pc, #152]	@ (8009bb4 <USBD_SetConfig+0x118>)
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d112      	bne.n	8009b46 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2202      	movs	r2, #2
 8009b24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009b28:	4b22      	ldr	r3, [pc, #136]	@ (8009bb4 <USBD_SetConfig+0x118>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b32:	4b20      	ldr	r3, [pc, #128]	@ (8009bb4 <USBD_SetConfig+0x118>)
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff f9e1 	bl	8008f00 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f9da 	bl	8009ef8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b44:	e033      	b.n	8009bae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b46:	4b1b      	ldr	r3, [pc, #108]	@ (8009bb4 <USBD_SetConfig+0x118>)
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d01d      	beq.n	8009b90 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff f9cf 	bl	8008f00 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b62:	4b14      	ldr	r3, [pc, #80]	@ (8009bb4 <USBD_SetConfig+0x118>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b6c:	4b11      	ldr	r3, [pc, #68]	@ (8009bb4 <USBD_SetConfig+0x118>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7ff f9a5 	bl	8008ec2 <USBD_SetClassConfig>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d104      	bne.n	8009b88 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f8f0 	bl	8009d66 <USBD_CtlError>
            return;
 8009b86:	e012      	b.n	8009bae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f9b5 	bl	8009ef8 <USBD_CtlSendStatus>
        break;
 8009b8e:	e00e      	b.n	8009bae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f9b1 	bl	8009ef8 <USBD_CtlSendStatus>
        break;
 8009b96:	e00a      	b.n	8009bae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f8e3 	bl	8009d66 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ba0:	4b04      	ldr	r3, [pc, #16]	@ (8009bb4 <USBD_SetConfig+0x118>)
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff f9aa 	bl	8008f00 <USBD_ClrClassConfig>
        break;
 8009bac:	bf00      	nop
    }
  }
}
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	2000036c 	.word	0x2000036c

08009bb8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	88db      	ldrh	r3, [r3, #6]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d004      	beq.n	8009bd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f8ca 	bl	8009d66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bd2:	e022      	b.n	8009c1a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	dc02      	bgt.n	8009be4 <USBD_GetConfig+0x2c>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	dc03      	bgt.n	8009bea <USBD_GetConfig+0x32>
 8009be2:	e015      	b.n	8009c10 <USBD_GetConfig+0x58>
 8009be4:	2b03      	cmp	r3, #3
 8009be6:	d00b      	beq.n	8009c00 <USBD_GetConfig+0x48>
 8009be8:	e012      	b.n	8009c10 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f91f 	bl	8009e3c <USBD_CtlSendData>
        break;
 8009bfe:	e00c      	b.n	8009c1a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	3304      	adds	r3, #4
 8009c04:	2201      	movs	r2, #1
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f917 	bl	8009e3c <USBD_CtlSendData>
        break;
 8009c0e:	e004      	b.n	8009c1a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f8a7 	bl	8009d66 <USBD_CtlError>
        break;
 8009c18:	bf00      	nop
}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b082      	sub	sp, #8
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c32:	3b01      	subs	r3, #1
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d81e      	bhi.n	8009c76 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	88db      	ldrh	r3, [r3, #6]
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d004      	beq.n	8009c4a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f88f 	bl	8009d66 <USBD_CtlError>
        break;
 8009c48:	e01a      	b.n	8009c80 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d005      	beq.n	8009c66 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	f043 0202 	orr.w	r2, r3, #2
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	330c      	adds	r3, #12
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f8e4 	bl	8009e3c <USBD_CtlSendData>
      break;
 8009c74:	e004      	b.n	8009c80 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f874 	bl	8009d66 <USBD_CtlError>
      break;
 8009c7e:	bf00      	nop
  }
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	885b      	ldrh	r3, [r3, #2]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d106      	bne.n	8009ca8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f928 	bl	8009ef8 <USBD_CtlSendStatus>
  }
}
 8009ca8:	bf00      	nop
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d80b      	bhi.n	8009cde <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	885b      	ldrh	r3, [r3, #2]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d10c      	bne.n	8009ce8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f90e 	bl	8009ef8 <USBD_CtlSendStatus>
      }
      break;
 8009cdc:	e004      	b.n	8009ce8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f840 	bl	8009d66 <USBD_CtlError>
      break;
 8009ce6:	e000      	b.n	8009cea <USBD_ClrFeature+0x3a>
      break;
 8009ce8:	bf00      	nop
  }
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b083      	sub	sp, #12
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781a      	ldrb	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	785a      	ldrb	r2, [r3, #1]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	3302      	adds	r3, #2
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	3303      	adds	r3, #3
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	021b      	lsls	r3, r3, #8
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	4413      	add	r3, r2
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	3304      	adds	r3, #4
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	3305      	adds	r3, #5
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	021b      	lsls	r3, r3, #8
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	4413      	add	r3, r2
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	3306      	adds	r3, #6
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	3307      	adds	r3, #7
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	021b      	lsls	r3, r3, #8
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	4413      	add	r3, r2
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	80da      	strh	r2, [r3, #6]

}
 8009d5a:	bf00      	nop
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d70:	2180      	movs	r1, #128	@ 0x80
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fc32 	bl	800a5dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d78:	2100      	movs	r1, #0
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fc2e 	bl	800a5dc <USBD_LL_StallEP>
}
 8009d80:	bf00      	nop
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d94:	2300      	movs	r3, #0
 8009d96:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d032      	beq.n	8009e04 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f000 f834 	bl	8009e0c <USBD_GetLen>
 8009da4:	4603      	mov	r3, r0
 8009da6:	3301      	adds	r3, #1
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	005b      	lsls	r3, r3, #1
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
 8009db4:	1c5a      	adds	r2, r3, #1
 8009db6:	75fa      	strb	r2, [r7, #23]
 8009db8:	461a      	mov	r2, r3
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	7812      	ldrb	r2, [r2, #0]
 8009dc2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
 8009dc6:	1c5a      	adds	r2, r3, #1
 8009dc8:	75fa      	strb	r2, [r7, #23]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	4413      	add	r3, r2
 8009dd0:	2203      	movs	r2, #3
 8009dd2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009dd4:	e012      	b.n	8009dfc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	60fa      	str	r2, [r7, #12]
 8009ddc:	7dfa      	ldrb	r2, [r7, #23]
 8009dde:	1c51      	adds	r1, r2, #1
 8009de0:	75f9      	strb	r1, [r7, #23]
 8009de2:	4611      	mov	r1, r2
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	440a      	add	r2, r1
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	75fa      	strb	r2, [r7, #23]
 8009df2:	461a      	mov	r2, r3
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	4413      	add	r3, r2
 8009df8:	2200      	movs	r2, #0
 8009dfa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1e8      	bne.n	8009dd6 <USBD_GetString+0x4e>
    }
  }
}
 8009e04:	bf00      	nop
 8009e06:	3718      	adds	r7, #24
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009e18:	e005      	b.n	8009e26 <USBD_GetLen+0x1a>
  {
    len++;
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3301      	adds	r3, #1
 8009e24:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1f5      	bne.n	8009e1a <USBD_GetLen+0xe>
  }

  return len;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	4613      	mov	r3, r2
 8009e48:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e52:	88fa      	ldrh	r2, [r7, #6]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e58:	88fa      	ldrh	r2, [r7, #6]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e5e:	88fb      	ldrh	r3, [r7, #6]
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	2100      	movs	r1, #0
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 fc42 	bl	800a6ee <USBD_LL_Transmit>

  return USBD_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e82:	88fb      	ldrh	r3, [r7, #6]
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	2100      	movs	r1, #0
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f000 fc30 	bl	800a6ee <USBD_LL_Transmit>

  return USBD_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2203      	movs	r2, #3
 8009eaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009eae:	88fa      	ldrh	r2, [r7, #6]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009eb6:	88fa      	ldrh	r2, [r7, #6]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ebe:	88fb      	ldrh	r3, [r7, #6]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f000 fc35 	bl	800a734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ee2:	88fb      	ldrh	r3, [r7, #6]
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 fc23 	bl	800a734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2204      	movs	r2, #4
 8009f04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fbed 	bl	800a6ee <USBD_LL_Transmit>

  return USBD_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b082      	sub	sp, #8
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2205      	movs	r2, #5
 8009f2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f2e:	2300      	movs	r3, #0
 8009f30:	2200      	movs	r2, #0
 8009f32:	2100      	movs	r1, #0
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fbfd 	bl	800a734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	4912      	ldr	r1, [pc, #72]	@ (8009f94 <MX_USB_DEVICE_Init+0x50>)
 8009f4c:	4812      	ldr	r0, [pc, #72]	@ (8009f98 <MX_USB_DEVICE_Init+0x54>)
 8009f4e:	f7fe ff5c 	bl	8008e0a <USBD_Init>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f58:	f7f6 fa4a 	bl	80003f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f5c:	490f      	ldr	r1, [pc, #60]	@ (8009f9c <MX_USB_DEVICE_Init+0x58>)
 8009f5e:	480e      	ldr	r0, [pc, #56]	@ (8009f98 <MX_USB_DEVICE_Init+0x54>)
 8009f60:	f7fe ff7e 	bl	8008e60 <USBD_RegisterClass>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f6a:	f7f6 fa41 	bl	80003f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f6e:	490c      	ldr	r1, [pc, #48]	@ (8009fa0 <MX_USB_DEVICE_Init+0x5c>)
 8009f70:	4809      	ldr	r0, [pc, #36]	@ (8009f98 <MX_USB_DEVICE_Init+0x54>)
 8009f72:	f7fe fedb 	bl	8008d2c <USBD_CDC_RegisterInterface>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f7c:	f7f6 fa38 	bl	80003f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f80:	4805      	ldr	r0, [pc, #20]	@ (8009f98 <MX_USB_DEVICE_Init+0x54>)
 8009f82:	f7fe ff87 	bl	8008e94 <USBD_Start>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f8c:	f7f6 fa30 	bl	80003f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f90:	bf00      	nop
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	2000012c 	.word	0x2000012c
 8009f98:	20000370 	.word	0x20000370
 8009f9c:	20000018 	.word	0x20000018
 8009fa0:	2000011c 	.word	0x2000011c

08009fa4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fa8:	2200      	movs	r2, #0
 8009faa:	4905      	ldr	r1, [pc, #20]	@ (8009fc0 <CDC_Init_FS+0x1c>)
 8009fac:	4805      	ldr	r0, [pc, #20]	@ (8009fc4 <CDC_Init_FS+0x20>)
 8009fae:	f7fe fed4 	bl	8008d5a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009fb2:	4905      	ldr	r1, [pc, #20]	@ (8009fc8 <CDC_Init_FS+0x24>)
 8009fb4:	4803      	ldr	r0, [pc, #12]	@ (8009fc4 <CDC_Init_FS+0x20>)
 8009fb6:	f7fe feea 	bl	8008d8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009fba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	20000a34 	.word	0x20000a34
 8009fc4:	20000370 	.word	0x20000370
 8009fc8:	20000634 	.word	0x20000634

08009fcc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	6039      	str	r1, [r7, #0]
 8009fe6:	71fb      	strb	r3, [r7, #7]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	2b23      	cmp	r3, #35	@ 0x23
 8009ff0:	d84a      	bhi.n	800a088 <CDC_Control_FS+0xac>
 8009ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff8 <CDC_Control_FS+0x1c>)
 8009ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff8:	0800a089 	.word	0x0800a089
 8009ffc:	0800a089 	.word	0x0800a089
 800a000:	0800a089 	.word	0x0800a089
 800a004:	0800a089 	.word	0x0800a089
 800a008:	0800a089 	.word	0x0800a089
 800a00c:	0800a089 	.word	0x0800a089
 800a010:	0800a089 	.word	0x0800a089
 800a014:	0800a089 	.word	0x0800a089
 800a018:	0800a089 	.word	0x0800a089
 800a01c:	0800a089 	.word	0x0800a089
 800a020:	0800a089 	.word	0x0800a089
 800a024:	0800a089 	.word	0x0800a089
 800a028:	0800a089 	.word	0x0800a089
 800a02c:	0800a089 	.word	0x0800a089
 800a030:	0800a089 	.word	0x0800a089
 800a034:	0800a089 	.word	0x0800a089
 800a038:	0800a089 	.word	0x0800a089
 800a03c:	0800a089 	.word	0x0800a089
 800a040:	0800a089 	.word	0x0800a089
 800a044:	0800a089 	.word	0x0800a089
 800a048:	0800a089 	.word	0x0800a089
 800a04c:	0800a089 	.word	0x0800a089
 800a050:	0800a089 	.word	0x0800a089
 800a054:	0800a089 	.word	0x0800a089
 800a058:	0800a089 	.word	0x0800a089
 800a05c:	0800a089 	.word	0x0800a089
 800a060:	0800a089 	.word	0x0800a089
 800a064:	0800a089 	.word	0x0800a089
 800a068:	0800a089 	.word	0x0800a089
 800a06c:	0800a089 	.word	0x0800a089
 800a070:	0800a089 	.word	0x0800a089
 800a074:	0800a089 	.word	0x0800a089
 800a078:	0800a089 	.word	0x0800a089
 800a07c:	0800a089 	.word	0x0800a089
 800a080:	0800a089 	.word	0x0800a089
 800a084:	0800a089 	.word	0x0800a089
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a088:	bf00      	nop
  }

  return (USBD_OK);
 800a08a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	4805      	ldr	r0, [pc, #20]	@ (800a0bc <CDC_Receive_FS+0x24>)
 800a0a6:	f7fe fe72 	bl	8008d8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a0aa:	4804      	ldr	r0, [pc, #16]	@ (800a0bc <CDC_Receive_FS+0x24>)
 800a0ac:	f7fe fe83 	bl	8008db6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a0b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20000370 	.word	0x20000370

0800a0c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	6039      	str	r1, [r7, #0]
 800a0ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2212      	movs	r2, #18
 800a0d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0d2:	4b03      	ldr	r3, [pc, #12]	@ (800a0e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	20000148 	.word	0x20000148

0800a0e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	6039      	str	r1, [r7, #0]
 800a0ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	2204      	movs	r2, #4
 800a0f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a0f6:	4b03      	ldr	r3, [pc, #12]	@ (800a104 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	2000015c 	.word	0x2000015c

0800a108 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	4603      	mov	r3, r0
 800a110:	6039      	str	r1, [r7, #0]
 800a112:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a114:	79fb      	ldrb	r3, [r7, #7]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d105      	bne.n	800a126 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	4907      	ldr	r1, [pc, #28]	@ (800a13c <USBD_FS_ProductStrDescriptor+0x34>)
 800a11e:	4808      	ldr	r0, [pc, #32]	@ (800a140 <USBD_FS_ProductStrDescriptor+0x38>)
 800a120:	f7ff fe32 	bl	8009d88 <USBD_GetString>
 800a124:	e004      	b.n	800a130 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	4904      	ldr	r1, [pc, #16]	@ (800a13c <USBD_FS_ProductStrDescriptor+0x34>)
 800a12a:	4805      	ldr	r0, [pc, #20]	@ (800a140 <USBD_FS_ProductStrDescriptor+0x38>)
 800a12c:	f7ff fe2c 	bl	8009d88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a130:	4b02      	ldr	r3, [pc, #8]	@ (800a13c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a132:	4618      	mov	r0, r3
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000e34 	.word	0x20000e34
 800a140:	0800a8b0 	.word	0x0800a8b0

0800a144 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	4603      	mov	r3, r0
 800a14c:	6039      	str	r1, [r7, #0]
 800a14e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	4904      	ldr	r1, [pc, #16]	@ (800a164 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a154:	4804      	ldr	r0, [pc, #16]	@ (800a168 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a156:	f7ff fe17 	bl	8009d88 <USBD_GetString>
  return USBD_StrDesc;
 800a15a:	4b02      	ldr	r3, [pc, #8]	@ (800a164 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	20000e34 	.word	0x20000e34
 800a168:	0800a8c8 	.word	0x0800a8c8

0800a16c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	6039      	str	r1, [r7, #0]
 800a176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	221a      	movs	r2, #26
 800a17c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a17e:	f000 f843 	bl	800a208 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a182:	4b02      	ldr	r3, [pc, #8]	@ (800a18c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20000160 	.word	0x20000160

0800a190 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	4603      	mov	r3, r0
 800a198:	6039      	str	r1, [r7, #0]
 800a19a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a19c:	79fb      	ldrb	r3, [r7, #7]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d105      	bne.n	800a1ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	4907      	ldr	r1, [pc, #28]	@ (800a1c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1a6:	4808      	ldr	r0, [pc, #32]	@ (800a1c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1a8:	f7ff fdee 	bl	8009d88 <USBD_GetString>
 800a1ac:	e004      	b.n	800a1b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	4904      	ldr	r1, [pc, #16]	@ (800a1c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1b2:	4805      	ldr	r0, [pc, #20]	@ (800a1c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1b4:	f7ff fde8 	bl	8009d88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1b8:	4b02      	ldr	r3, [pc, #8]	@ (800a1c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000e34 	.word	0x20000e34
 800a1c8:	0800a8dc 	.word	0x0800a8dc

0800a1cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	6039      	str	r1, [r7, #0]
 800a1d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d105      	bne.n	800a1ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	4907      	ldr	r1, [pc, #28]	@ (800a200 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1e2:	4808      	ldr	r0, [pc, #32]	@ (800a204 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1e4:	f7ff fdd0 	bl	8009d88 <USBD_GetString>
 800a1e8:	e004      	b.n	800a1f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	4904      	ldr	r1, [pc, #16]	@ (800a200 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1ee:	4805      	ldr	r0, [pc, #20]	@ (800a204 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1f0:	f7ff fdca 	bl	8009d88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1f4:	4b02      	ldr	r3, [pc, #8]	@ (800a200 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20000e34 	.word	0x20000e34
 800a204:	0800a8e8 	.word	0x0800a8e8

0800a208 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a20e:	4b0f      	ldr	r3, [pc, #60]	@ (800a24c <Get_SerialNum+0x44>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a214:	4b0e      	ldr	r3, [pc, #56]	@ (800a250 <Get_SerialNum+0x48>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a21a:	4b0e      	ldr	r3, [pc, #56]	@ (800a254 <Get_SerialNum+0x4c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4413      	add	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d009      	beq.n	800a242 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a22e:	2208      	movs	r2, #8
 800a230:	4909      	ldr	r1, [pc, #36]	@ (800a258 <Get_SerialNum+0x50>)
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f000 f814 	bl	800a260 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a238:	2204      	movs	r2, #4
 800a23a:	4908      	ldr	r1, [pc, #32]	@ (800a25c <Get_SerialNum+0x54>)
 800a23c:	68b8      	ldr	r0, [r7, #8]
 800a23e:	f000 f80f 	bl	800a260 <IntToUnicode>
  }
}
 800a242:	bf00      	nop
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	1ffff7ac 	.word	0x1ffff7ac
 800a250:	1ffff7b0 	.word	0x1ffff7b0
 800a254:	1ffff7b4 	.word	0x1ffff7b4
 800a258:	20000162 	.word	0x20000162
 800a25c:	20000172 	.word	0x20000172

0800a260 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	4613      	mov	r3, r2
 800a26c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a272:	2300      	movs	r3, #0
 800a274:	75fb      	strb	r3, [r7, #23]
 800a276:	e027      	b.n	800a2c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	0f1b      	lsrs	r3, r3, #28
 800a27c:	2b09      	cmp	r3, #9
 800a27e:	d80b      	bhi.n	800a298 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	0f1b      	lsrs	r3, r3, #28
 800a284:	b2da      	uxtb	r2, r3
 800a286:	7dfb      	ldrb	r3, [r7, #23]
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	4619      	mov	r1, r3
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	440b      	add	r3, r1
 800a290:	3230      	adds	r2, #48	@ 0x30
 800a292:	b2d2      	uxtb	r2, r2
 800a294:	701a      	strb	r2, [r3, #0]
 800a296:	e00a      	b.n	800a2ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	0f1b      	lsrs	r3, r3, #28
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	7dfb      	ldrb	r3, [r7, #23]
 800a2a0:	005b      	lsls	r3, r3, #1
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	440b      	add	r3, r1
 800a2a8:	3237      	adds	r2, #55	@ 0x37
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	011b      	lsls	r3, r3, #4
 800a2b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a2b4:	7dfb      	ldrb	r3, [r7, #23]
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	4413      	add	r3, r2
 800a2be:	2200      	movs	r2, #0
 800a2c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	75fb      	strb	r3, [r7, #23]
 800a2c8:	7dfa      	ldrb	r2, [r7, #23]
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d3d3      	bcc.n	800a278 <IntToUnicode+0x18>
  }
}
 800a2d0:	bf00      	nop
 800a2d2:	bf00      	nop
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
	...

0800a2e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a0d      	ldr	r2, [pc, #52]	@ (800a324 <HAL_PCD_MspInit+0x44>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d113      	bne.n	800a31a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <HAL_PCD_MspInit+0x48>)
 800a2f4:	69db      	ldr	r3, [r3, #28]
 800a2f6:	4a0c      	ldr	r2, [pc, #48]	@ (800a328 <HAL_PCD_MspInit+0x48>)
 800a2f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a2fc:	61d3      	str	r3, [r2, #28]
 800a2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a328 <HAL_PCD_MspInit+0x48>)
 800a300:	69db      	ldr	r3, [r3, #28]
 800a302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a306:	60fb      	str	r3, [r7, #12]
 800a308:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800a30a:	2200      	movs	r2, #0
 800a30c:	2100      	movs	r1, #0
 800a30e:	2014      	movs	r0, #20
 800a310:	f7f6 fd61 	bl	8000dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800a314:	2014      	movs	r0, #20
 800a316:	f7f6 fd7a 	bl	8000e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a31a:	bf00      	nop
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	40005c00 	.word	0x40005c00
 800a328:	40021000 	.word	0x40021000

0800a32c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a340:	4619      	mov	r1, r3
 800a342:	4610      	mov	r0, r2
 800a344:	f7fe fdef 	bl	8008f26 <USBD_LL_SetupStage>
}
 800a348:	bf00      	nop
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	460b      	mov	r3, r1
 800a35a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800a362:	78fa      	ldrb	r2, [r7, #3]
 800a364:	6879      	ldr	r1, [r7, #4]
 800a366:	4613      	mov	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	00db      	lsls	r3, r3, #3
 800a36e:	440b      	add	r3, r1
 800a370:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	78fb      	ldrb	r3, [r7, #3]
 800a378:	4619      	mov	r1, r3
 800a37a:	f7fe fe21 	bl	8008fc0 <USBD_LL_DataOutStage>
}
 800a37e:	bf00      	nop
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	460b      	mov	r3, r1
 800a390:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800a398:	78fa      	ldrb	r2, [r7, #3]
 800a39a:	6879      	ldr	r1, [r7, #4]
 800a39c:	4613      	mov	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	440b      	add	r3, r1
 800a3a6:	3324      	adds	r3, #36	@ 0x24
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	78fb      	ldrb	r3, [r7, #3]
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	f7fe fe78 	bl	80090a2 <USBD_LL_DataInStage>
}
 800a3b2:	bf00      	nop
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fe ff8b 	bl	80092e4 <USBD_LL_SOF>
}
 800a3ce:	bf00      	nop
 800a3d0:	3708      	adds	r7, #8
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b084      	sub	sp, #16
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	795b      	ldrb	r3, [r3, #5]
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d001      	beq.n	800a3ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a3ea:	f7f6 f801 	bl	80003f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a3f4:	7bfa      	ldrb	r2, [r7, #15]
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fe ff38 	bl	800926e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a404:	4618      	mov	r0, r3
 800a406:	f7fe fef1 	bl	80091ec <USBD_LL_Reset>
}
 800a40a:	bf00      	nop
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
	...

0800a414 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe ff33 	bl	800928e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	7a5b      	ldrb	r3, [r3, #9]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a430:	4b04      	ldr	r3, [pc, #16]	@ (800a444 <HAL_PCD_SuspendCallback+0x30>)
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	4a03      	ldr	r2, [pc, #12]	@ (800a444 <HAL_PCD_SuspendCallback+0x30>)
 800a436:	f043 0306 	orr.w	r3, r3, #6
 800a43a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	e000ed00 	.word	0xe000ed00

0800a448 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a456:	4618      	mov	r0, r3
 800a458:	f7fe ff2e 	bl	80092b8 <USBD_LL_Resume>
}
 800a45c:	bf00      	nop
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a46c:	4a29      	ldr	r2, [pc, #164]	@ (800a514 <USBD_LL_Init+0xb0>)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a27      	ldr	r2, [pc, #156]	@ (800a514 <USBD_LL_Init+0xb0>)
 800a478:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a47c:	4b25      	ldr	r3, [pc, #148]	@ (800a514 <USBD_LL_Init+0xb0>)
 800a47e:	4a26      	ldr	r2, [pc, #152]	@ (800a518 <USBD_LL_Init+0xb4>)
 800a480:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a482:	4b24      	ldr	r3, [pc, #144]	@ (800a514 <USBD_LL_Init+0xb0>)
 800a484:	2208      	movs	r2, #8
 800a486:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a488:	4b22      	ldr	r3, [pc, #136]	@ (800a514 <USBD_LL_Init+0xb0>)
 800a48a:	2202      	movs	r2, #2
 800a48c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a48e:	4b21      	ldr	r3, [pc, #132]	@ (800a514 <USBD_LL_Init+0xb0>)
 800a490:	2202      	movs	r2, #2
 800a492:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a494:	4b1f      	ldr	r3, [pc, #124]	@ (800a514 <USBD_LL_Init+0xb0>)
 800a496:	2200      	movs	r2, #0
 800a498:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a49a:	4b1e      	ldr	r3, [pc, #120]	@ (800a514 <USBD_LL_Init+0xb0>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a4a0:	4b1c      	ldr	r3, [pc, #112]	@ (800a514 <USBD_LL_Init+0xb0>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a4a6:	481b      	ldr	r0, [pc, #108]	@ (800a514 <USBD_LL_Init+0xb0>)
 800a4a8:	f7f6 feea 	bl	8001280 <HAL_PCD_Init>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 800a4b2:	f7f5 ff9d 	bl	80003f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4bc:	2318      	movs	r3, #24
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	f7f8 fb4d 	bl	8002b60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4cc:	2358      	movs	r3, #88	@ 0x58
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	2180      	movs	r1, #128	@ 0x80
 800a4d2:	f7f8 fb45 	bl	8002b60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4dc:	23c0      	movs	r3, #192	@ 0xc0
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2181      	movs	r1, #129	@ 0x81
 800a4e2:	f7f8 fb3d 	bl	8002b60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4ec:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	f7f8 fb34 	bl	8002b60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a502:	2200      	movs	r2, #0
 800a504:	2182      	movs	r1, #130	@ 0x82
 800a506:	f7f8 fb2b 	bl	8002b60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	20001034 	.word	0x20001034
 800a518:	40005c00 	.word	0x40005c00

0800a51c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a532:	4618      	mov	r0, r3
 800a534:	f7f6 ff6b 	bl	800140e <HAL_PCD_Start>
 800a538:	4603      	mov	r3, r0
 800a53a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a53c:	7bfb      	ldrb	r3, [r7, #15]
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 f952 	bl	800a7e8 <USBD_Get_USB_Status>
 800a544:	4603      	mov	r3, r0
 800a546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a548:	7bbb      	ldrb	r3, [r7, #14]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b084      	sub	sp, #16
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	4608      	mov	r0, r1
 800a55c:	4611      	mov	r1, r2
 800a55e:	461a      	mov	r2, r3
 800a560:	4603      	mov	r3, r0
 800a562:	70fb      	strb	r3, [r7, #3]
 800a564:	460b      	mov	r3, r1
 800a566:	70bb      	strb	r3, [r7, #2]
 800a568:	4613      	mov	r3, r2
 800a56a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a57a:	78bb      	ldrb	r3, [r7, #2]
 800a57c:	883a      	ldrh	r2, [r7, #0]
 800a57e:	78f9      	ldrb	r1, [r7, #3]
 800a580:	f7f7 f863 	bl	800164a <HAL_PCD_EP_Open>
 800a584:	4603      	mov	r3, r0
 800a586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 f92c 	bl	800a7e8 <USBD_Get_USB_Status>
 800a590:	4603      	mov	r3, r0
 800a592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a594:	7bbb      	ldrb	r3, [r7, #14]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5b8:	78fa      	ldrb	r2, [r7, #3]
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7f7 f8a1 	bl	8001704 <HAL_PCD_EP_Close>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5c6:	7bfb      	ldrb	r3, [r7, #15]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 f90d 	bl	800a7e8 <USBD_Get_USB_Status>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5f6:	78fa      	ldrb	r2, [r7, #3]
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7f7 f94a 	bl	8001894 <HAL_PCD_EP_SetStall>
 800a600:	4603      	mov	r3, r0
 800a602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a604:	7bfb      	ldrb	r3, [r7, #15]
 800a606:	4618      	mov	r0, r3
 800a608:	f000 f8ee 	bl	800a7e8 <USBD_Get_USB_Status>
 800a60c:	4603      	mov	r3, r0
 800a60e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a610:	7bbb      	ldrb	r3, [r7, #14]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	460b      	mov	r3, r1
 800a624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a634:	78fa      	ldrb	r2, [r7, #3]
 800a636:	4611      	mov	r1, r2
 800a638:	4618      	mov	r0, r3
 800a63a:	f7f7 f97d 	bl	8001938 <HAL_PCD_EP_ClrStall>
 800a63e:	4603      	mov	r3, r0
 800a640:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	4618      	mov	r0, r3
 800a646:	f000 f8cf 	bl	800a7e8 <USBD_Get_USB_Status>
 800a64a:	4603      	mov	r3, r0
 800a64c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a64e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a66a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a66c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a670:	2b00      	cmp	r3, #0
 800a672:	da0b      	bge.n	800a68c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a674:	78fb      	ldrb	r3, [r7, #3]
 800a676:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a67a:	68f9      	ldr	r1, [r7, #12]
 800a67c:	4613      	mov	r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	440b      	add	r3, r1
 800a686:	3312      	adds	r3, #18
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	e00b      	b.n	800a6a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a68c:	78fb      	ldrb	r3, [r7, #3]
 800a68e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a692:	68f9      	ldr	r1, [r7, #12]
 800a694:	4613      	mov	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	440b      	add	r3, r1
 800a69e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a6a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6ca:	78fa      	ldrb	r2, [r7, #3]
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7f6 ff97 	bl	8001602 <HAL_PCD_SetAddress>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 f884 	bl	800a7e8 <USBD_Get_USB_Status>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b086      	sub	sp, #24
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	60f8      	str	r0, [r7, #12]
 800a6f6:	607a      	str	r2, [r7, #4]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	72fb      	strb	r3, [r7, #11]
 800a6fe:	4613      	mov	r3, r2
 800a700:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a710:	893b      	ldrh	r3, [r7, #8]
 800a712:	7af9      	ldrb	r1, [r7, #11]
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	f7f7 f886 	bl	8001826 <HAL_PCD_EP_Transmit>
 800a71a:	4603      	mov	r3, r0
 800a71c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	4618      	mov	r0, r3
 800a722:	f000 f861 	bl	800a7e8 <USBD_Get_USB_Status>
 800a726:	4603      	mov	r3, r0
 800a728:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a72a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	607a      	str	r2, [r7, #4]
 800a73e:	461a      	mov	r2, r3
 800a740:	460b      	mov	r3, r1
 800a742:	72fb      	strb	r3, [r7, #11]
 800a744:	4613      	mov	r3, r2
 800a746:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a756:	893b      	ldrh	r3, [r7, #8]
 800a758:	7af9      	ldrb	r1, [r7, #11]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	f7f7 f81a 	bl	8001794 <HAL_PCD_EP_Receive>
 800a760:	4603      	mov	r3, r0
 800a762:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a764:	7dfb      	ldrb	r3, [r7, #23]
 800a766:	4618      	mov	r0, r3
 800a768:	f000 f83e 	bl	800a7e8 <USBD_Get_USB_Status>
 800a76c:	4603      	mov	r3, r0
 800a76e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a770:	7dbb      	ldrb	r3, [r7, #22]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b082      	sub	sp, #8
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	460b      	mov	r3, r1
 800a784:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a78c:	78fa      	ldrb	r2, [r7, #3]
 800a78e:	4611      	mov	r1, r2
 800a790:	4618      	mov	r0, r3
 800a792:	f7f7 f830 	bl	80017f6 <HAL_PCD_EP_GetRxCount>
 800a796:	4603      	mov	r3, r0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7a8:	4b03      	ldr	r3, [pc, #12]	@ (800a7b8 <USBD_static_malloc+0x18>)
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	20001308 	.word	0x20001308

0800a7bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]

}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7f6:	79fb      	ldrb	r3, [r7, #7]
 800a7f8:	2b03      	cmp	r3, #3
 800a7fa:	d817      	bhi.n	800a82c <USBD_Get_USB_Status+0x44>
 800a7fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a804 <USBD_Get_USB_Status+0x1c>)
 800a7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a802:	bf00      	nop
 800a804:	0800a815 	.word	0x0800a815
 800a808:	0800a81b 	.word	0x0800a81b
 800a80c:	0800a821 	.word	0x0800a821
 800a810:	0800a827 	.word	0x0800a827
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a814:	2300      	movs	r3, #0
 800a816:	73fb      	strb	r3, [r7, #15]
    break;
 800a818:	e00b      	b.n	800a832 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a81a:	2302      	movs	r3, #2
 800a81c:	73fb      	strb	r3, [r7, #15]
    break;
 800a81e:	e008      	b.n	800a832 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a820:	2301      	movs	r3, #1
 800a822:	73fb      	strb	r3, [r7, #15]
    break;
 800a824:	e005      	b.n	800a832 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a826:	2302      	movs	r3, #2
 800a828:	73fb      	strb	r3, [r7, #15]
    break;
 800a82a:	e002      	b.n	800a832 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a82c:	2302      	movs	r3, #2
 800a82e:	73fb      	strb	r3, [r7, #15]
    break;
 800a830:	bf00      	nop
  }
  return usb_status;
 800a832:	7bfb      	ldrb	r3, [r7, #15]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <memset>:
 800a840:	4402      	add	r2, r0
 800a842:	4603      	mov	r3, r0
 800a844:	4293      	cmp	r3, r2
 800a846:	d100      	bne.n	800a84a <memset+0xa>
 800a848:	4770      	bx	lr
 800a84a:	f803 1b01 	strb.w	r1, [r3], #1
 800a84e:	e7f9      	b.n	800a844 <memset+0x4>

0800a850 <__libc_init_array>:
 800a850:	b570      	push	{r4, r5, r6, lr}
 800a852:	4d0d      	ldr	r5, [pc, #52]	@ (800a888 <__libc_init_array+0x38>)
 800a854:	4c0d      	ldr	r4, [pc, #52]	@ (800a88c <__libc_init_array+0x3c>)
 800a856:	1b64      	subs	r4, r4, r5
 800a858:	10a4      	asrs	r4, r4, #2
 800a85a:	2600      	movs	r6, #0
 800a85c:	42a6      	cmp	r6, r4
 800a85e:	d109      	bne.n	800a874 <__libc_init_array+0x24>
 800a860:	4d0b      	ldr	r5, [pc, #44]	@ (800a890 <__libc_init_array+0x40>)
 800a862:	4c0c      	ldr	r4, [pc, #48]	@ (800a894 <__libc_init_array+0x44>)
 800a864:	f000 f818 	bl	800a898 <_init>
 800a868:	1b64      	subs	r4, r4, r5
 800a86a:	10a4      	asrs	r4, r4, #2
 800a86c:	2600      	movs	r6, #0
 800a86e:	42a6      	cmp	r6, r4
 800a870:	d105      	bne.n	800a87e <__libc_init_array+0x2e>
 800a872:	bd70      	pop	{r4, r5, r6, pc}
 800a874:	f855 3b04 	ldr.w	r3, [r5], #4
 800a878:	4798      	blx	r3
 800a87a:	3601      	adds	r6, #1
 800a87c:	e7ee      	b.n	800a85c <__libc_init_array+0xc>
 800a87e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a882:	4798      	blx	r3
 800a884:	3601      	adds	r6, #1
 800a886:	e7f2      	b.n	800a86e <__libc_init_array+0x1e>
 800a888:	0800a930 	.word	0x0800a930
 800a88c:	0800a930 	.word	0x0800a930
 800a890:	0800a930 	.word	0x0800a930
 800a894:	0800a934 	.word	0x0800a934

0800a898 <_init>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	bf00      	nop
 800a89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89e:	bc08      	pop	{r3}
 800a8a0:	469e      	mov	lr, r3
 800a8a2:	4770      	bx	lr

0800a8a4 <_fini>:
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	bf00      	nop
 800a8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8aa:	bc08      	pop	{r3}
 800a8ac:	469e      	mov	lr, r3
 800a8ae:	4770      	bx	lr
