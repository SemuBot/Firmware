
F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a678  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800a80c  0800a80c  0000b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a88c  0800a88c  0000c17c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a88c  0800a88c  0000c17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a88c  0800a88c  0000c17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a88c  0800a88c  0000b88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a890  0800a890  0000b890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800a894  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c17c  2**0
                  CONTENTS
 10 .bss          000013ac  2000017c  2000017c  0000c17c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001528  20001528  0000c17c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ab3  00000000  00000000  0000c1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004045  00000000  00000000  00025c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001580  00000000  00000000  00029ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001086  00000000  00000000  0002b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a1a  00000000  00000000  0002c2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da9a  00000000  00000000  00050cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d121d  00000000  00000000  0006e762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013f97f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005898  00000000  00000000  0013f9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0014525c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000017c 	.word	0x2000017c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800a7f4 	.word	0x0800a7f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000180 	.word	0x20000180
 80001d0:	0800a7f4 	.word	0x0800a7f4

080001d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001da:	4b1b      	ldr	r3, [pc, #108]	@ (8000248 <MX_GPIO_Init+0x74>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a1a      	ldr	r2, [pc, #104]	@ (8000248 <MX_GPIO_Init+0x74>)
 80001e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80001e4:	6153      	str	r3, [r2, #20]
 80001e6:	4b18      	ldr	r3, [pc, #96]	@ (8000248 <MX_GPIO_Init+0x74>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001f2:	4b15      	ldr	r3, [pc, #84]	@ (8000248 <MX_GPIO_Init+0x74>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	4a14      	ldr	r2, [pc, #80]	@ (8000248 <MX_GPIO_Init+0x74>)
 80001f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80001fc:	6153      	str	r3, [r2, #20]
 80001fe:	4b12      	ldr	r3, [pc, #72]	@ (8000248 <MX_GPIO_Init+0x74>)
 8000200:	695b      	ldr	r3, [r3, #20]
 8000202:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000206:	60bb      	str	r3, [r7, #8]
 8000208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020a:	4b0f      	ldr	r3, [pc, #60]	@ (8000248 <MX_GPIO_Init+0x74>)
 800020c:	695b      	ldr	r3, [r3, #20]
 800020e:	4a0e      	ldr	r2, [pc, #56]	@ (8000248 <MX_GPIO_Init+0x74>)
 8000210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000214:	6153      	str	r3, [r2, #20]
 8000216:	4b0c      	ldr	r3, [pc, #48]	@ (8000248 <MX_GPIO_Init+0x74>)
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800021e:	607b      	str	r3, [r7, #4]
 8000220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000222:	4b09      	ldr	r3, [pc, #36]	@ (8000248 <MX_GPIO_Init+0x74>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	4a08      	ldr	r2, [pc, #32]	@ (8000248 <MX_GPIO_Init+0x74>)
 8000228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800022c:	6153      	str	r3, [r2, #20]
 800022e:	4b06      	ldr	r3, [pc, #24]	@ (8000248 <MX_GPIO_Init+0x74>)
 8000230:	695b      	ldr	r3, [r3, #20]
 8000232:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000236:	603b      	str	r3, [r7, #0]
 8000238:	683b      	ldr	r3, [r7, #0]

}
 800023a:	bf00      	nop
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40021000 	.word	0x40021000

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000250:	f000 fc48 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000254:	f000 f810 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000258:	f7ff ffbc 	bl	80001d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800025c:	f000 f992 	bl	8000584 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000260:	f000 fa1e 	bl	80006a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000264:	f000 fa76 	bl	8000754 <MX_TIM4_Init>
  MX_SPI2_Init();
 8000268:	f000 f872 	bl	8000350 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800026c:	f000 fb96 	bl	800099c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000270:	f009 fe16 	bl	8009ea0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000274:	bf00      	nop
 8000276:	e7fd      	b.n	8000274 <main+0x28>

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b0a6      	sub	sp, #152	@ 0x98
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000282:	2228      	movs	r2, #40	@ 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f00a fa88 	bl	800a79c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2258      	movs	r2, #88	@ 0x58
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f00a fa7a 	bl	800a79c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a8:	2302      	movs	r3, #2
 80002aa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b0:	2310      	movs	r3, #16
 80002b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	2302      	movs	r3, #2
 80002b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002c4:	2300      	movs	r3, #0
 80002c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 fc37 	bl	8002b48 <HAL_RCC_OscConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002e0:	f000 f830 	bl	8000344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	230f      	movs	r3, #15
 80002e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e8:	2300      	movs	r3, #0
 80002ea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 fc76 	bl	8003bf0 <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800030a:	f000 f81b 	bl	8000344 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800030e:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <SystemClock_Config+0xc8>)
 8000310:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000316:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800031a:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800031c:	2300      	movs	r3, #0
 800031e:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000320:	2300      	movs	r3, #0
 8000322:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f003 fe82 	bl	8004030 <HAL_RCCEx_PeriphCLKConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000332:	f000 f807 	bl	8000344 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3798      	adds	r7, #152	@ 0x98
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	00221002 	.word	0x00221002

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	bf00      	nop
 800034e:	e7fd      	b.n	800034c <Error_Handler+0x8>

08000350 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000354:	4b1b      	ldr	r3, [pc, #108]	@ (80003c4 <MX_SPI2_Init+0x74>)
 8000356:	4a1c      	ldr	r2, [pc, #112]	@ (80003c8 <MX_SPI2_Init+0x78>)
 8000358:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800035a:	4b1a      	ldr	r3, [pc, #104]	@ (80003c4 <MX_SPI2_Init+0x74>)
 800035c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000360:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000362:	4b18      	ldr	r3, [pc, #96]	@ (80003c4 <MX_SPI2_Init+0x74>)
 8000364:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000368:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800036a:	4b16      	ldr	r3, [pc, #88]	@ (80003c4 <MX_SPI2_Init+0x74>)
 800036c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000370:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000372:	4b14      	ldr	r3, [pc, #80]	@ (80003c4 <MX_SPI2_Init+0x74>)
 8000374:	2202      	movs	r2, #2
 8000376:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000378:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <MX_SPI2_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800037e:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <MX_SPI2_Init+0x74>)
 8000380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000384:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000386:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <MX_SPI2_Init+0x74>)
 8000388:	2228      	movs	r2, #40	@ 0x28
 800038a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800038c:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <MX_SPI2_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000392:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <MX_SPI2_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000398:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <MX_SPI2_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800039e:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <MX_SPI2_Init+0x74>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003a4:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <MX_SPI2_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003aa:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <MX_SPI2_Init+0x74>)
 80003ac:	2208      	movs	r2, #8
 80003ae:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003b0:	4804      	ldr	r0, [pc, #16]	@ (80003c4 <MX_SPI2_Init+0x74>)
 80003b2:	f004 f85b 	bl	800446c <HAL_SPI_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80003bc:	f7ff ffc2 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000198 	.word	0x20000198
 80003c8:	40003800 	.word	0x40003800

080003cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	@ 0x28
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a25      	ldr	r2, [pc, #148]	@ (8000480 <HAL_SPI_MspInit+0xb4>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d144      	bne.n	8000478 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80003ee:	4b25      	ldr	r3, [pc, #148]	@ (8000484 <HAL_SPI_MspInit+0xb8>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a24      	ldr	r2, [pc, #144]	@ (8000484 <HAL_SPI_MspInit+0xb8>)
 80003f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b22      	ldr	r3, [pc, #136]	@ (8000484 <HAL_SPI_MspInit+0xb8>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000406:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <HAL_SPI_MspInit+0xb8>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a1e      	ldr	r2, [pc, #120]	@ (8000484 <HAL_SPI_MspInit+0xb8>)
 800040c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b1c      	ldr	r3, [pc, #112]	@ (8000484 <HAL_SPI_MspInit+0xb8>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800041e:	4b19      	ldr	r3, [pc, #100]	@ (8000484 <HAL_SPI_MspInit+0xb8>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a18      	ldr	r2, [pc, #96]	@ (8000484 <HAL_SPI_MspInit+0xb8>)
 8000424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b16      	ldr	r3, [pc, #88]	@ (8000484 <HAL_SPI_MspInit+0xb8>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF1-OSC_OUT     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000436:	2302      	movs	r3, #2
 8000438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043a:	2302      	movs	r3, #2
 800043c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000442:	2303      	movs	r3, #3
 8000444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000446:	2305      	movs	r3, #5
 8000448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	4619      	mov	r1, r3
 8000450:	480d      	ldr	r0, [pc, #52]	@ (8000488 <HAL_SPI_MspInit+0xbc>)
 8000452:	f000 fd3b 	bl	8000ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000456:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800045a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045c:	2302      	movs	r3, #2
 800045e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000464:	2303      	movs	r3, #3
 8000466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000468:	2305      	movs	r3, #5
 800046a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4619      	mov	r1, r3
 8000472:	4806      	ldr	r0, [pc, #24]	@ (800048c <HAL_SPI_MspInit+0xc0>)
 8000474:	f000 fd2a 	bl	8000ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000478:	bf00      	nop
 800047a:	3728      	adds	r7, #40	@ 0x28
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40003800 	.word	0x40003800
 8000484:	40021000 	.word	0x40021000
 8000488:	48001400 	.word	0x48001400
 800048c:	48000400 	.word	0x48000400

08000490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000496:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <HAL_MspInit+0x44>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a0e      	ldr	r2, [pc, #56]	@ (80004d4 <HAL_MspInit+0x44>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <HAL_MspInit+0x44>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ae:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <HAL_MspInit+0x44>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a08      	ldr	r2, [pc, #32]	@ (80004d4 <HAL_MspInit+0x44>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004b8:	61d3      	str	r3, [r2, #28]
 80004ba:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <HAL_MspInit+0x44>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <NMI_Handler+0x4>

080004e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <MemManage_Handler+0x4>

080004f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <UsageFault_Handler+0x4>

08000500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052e:	f000 fb1f 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800053c:	4802      	ldr	r0, [pc, #8]	@ (8000548 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800053e:	f000 ff3c 	bl	80013ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20001034 	.word	0x20001034

0800054c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000550:	4802      	ldr	r0, [pc, #8]	@ (800055c <USART2_IRQHandler+0x10>)
 8000552:	f004 feb1 	bl	80052b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200002e0 	.word	0x200002e0

08000560 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <SystemInit+0x20>)
 8000566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800056a:	4a05      	ldr	r2, [pc, #20]	@ (8000580 <SystemInit+0x20>)
 800056c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	@ 0x58
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000596:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]
 80005a6:	615a      	str	r2, [r3, #20]
 80005a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	222c      	movs	r2, #44	@ 0x2c
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f00a f8f3 	bl	800a79c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005b6:	4b38      	ldr	r3, [pc, #224]	@ (8000698 <MX_TIM1_Init+0x114>)
 80005b8:	4a38      	ldr	r2, [pc, #224]	@ (800069c <MX_TIM1_Init+0x118>)
 80005ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80005bc:	4b36      	ldr	r3, [pc, #216]	@ (8000698 <MX_TIM1_Init+0x114>)
 80005be:	2247      	movs	r2, #71	@ 0x47
 80005c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c2:	4b35      	ldr	r3, [pc, #212]	@ (8000698 <MX_TIM1_Init+0x114>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80005c8:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <MX_TIM1_Init+0x114>)
 80005ca:	2263      	movs	r2, #99	@ 0x63
 80005cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ce:	4b32      	ldr	r3, [pc, #200]	@ (8000698 <MX_TIM1_Init+0x114>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005d4:	4b30      	ldr	r3, [pc, #192]	@ (8000698 <MX_TIM1_Init+0x114>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005da:	4b2f      	ldr	r3, [pc, #188]	@ (8000698 <MX_TIM1_Init+0x114>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005e0:	482d      	ldr	r0, [pc, #180]	@ (8000698 <MX_TIM1_Init+0x114>)
 80005e2:	f003 ffee 	bl	80045c2 <HAL_TIM_PWM_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80005ec:	f7ff feaa 	bl	8000344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f0:	2300      	movs	r3, #0
 80005f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005f4:	2300      	movs	r3, #0
 80005f6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000600:	4619      	mov	r1, r3
 8000602:	4825      	ldr	r0, [pc, #148]	@ (8000698 <MX_TIM1_Init+0x114>)
 8000604:	f004 fcf8 	bl	8004ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800060e:	f7ff fe99 	bl	8000344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000612:	2360      	movs	r3, #96	@ 0x60
 8000614:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800061a:	2300      	movs	r3, #0
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800061e:	2300      	movs	r3, #0
 8000620:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000626:	2300      	movs	r3, #0
 8000628:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800062a:	2300      	movs	r3, #0
 800062c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800062e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	4818      	ldr	r0, [pc, #96]	@ (8000698 <MX_TIM1_Init+0x114>)
 8000638:	f004 f81a 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000642:	f7ff fe7f 	bl	8000344 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800065a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800065e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000668:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4619      	mov	r1, r3
 800067a:	4807      	ldr	r0, [pc, #28]	@ (8000698 <MX_TIM1_Init+0x114>)
 800067c:	f004 fd48 	bl	8005110 <HAL_TIMEx_ConfigBreakDeadTime>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000686:	f7ff fe5d 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800068a:	4803      	ldr	r0, [pc, #12]	@ (8000698 <MX_TIM1_Init+0x114>)
 800068c:	f000 f904 	bl	8000898 <HAL_TIM_MspPostInit>

}
 8000690:	bf00      	nop
 8000692:	3758      	adds	r7, #88	@ 0x58
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200001fc 	.word	0x200001fc
 800069c:	40012c00 	.word	0x40012c00

080006a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]
 80006c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006c4:	4b21      	ldr	r3, [pc, #132]	@ (800074c <MX_TIM3_Init+0xac>)
 80006c6:	4a22      	ldr	r2, [pc, #136]	@ (8000750 <MX_TIM3_Init+0xb0>)
 80006c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <MX_TIM3_Init+0xac>)
 80006cc:	2247      	movs	r2, #71	@ 0x47
 80006ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <MX_TIM3_Init+0xac>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <MX_TIM3_Init+0xac>)
 80006d8:	2263      	movs	r2, #99	@ 0x63
 80006da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <MX_TIM3_Init+0xac>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <MX_TIM3_Init+0xac>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006e8:	4818      	ldr	r0, [pc, #96]	@ (800074c <MX_TIM3_Init+0xac>)
 80006ea:	f003 ff6a 	bl	80045c2 <HAL_TIM_PWM_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80006f4:	f7ff fe26 	bl	8000344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4811      	ldr	r0, [pc, #68]	@ (800074c <MX_TIM3_Init+0xac>)
 8000708:	f004 fc76 	bl	8004ff8 <HAL_TIMEx_MasterConfigSynchronization>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000712:	f7ff fe17 	bl	8000344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000716:	2360      	movs	r3, #96	@ 0x60
 8000718:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	4807      	ldr	r0, [pc, #28]	@ (800074c <MX_TIM3_Init+0xac>)
 800072e:	f003 ff9f 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000738:	f7ff fe04 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800073c:	4803      	ldr	r0, [pc, #12]	@ (800074c <MX_TIM3_Init+0xac>)
 800073e:	f000 f8ab 	bl	8000898 <HAL_TIM_MspPostInit>

}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	@ 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000248 	.word	0x20000248
 8000750:	40000400 	.word	0x40000400

08000754 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
 8000774:	615a      	str	r2, [r3, #20]
 8000776:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_TIM4_Init+0xac>)
 800077a:	4a22      	ldr	r2, [pc, #136]	@ (8000804 <MX_TIM4_Init+0xb0>)
 800077c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800077e:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <MX_TIM4_Init+0xac>)
 8000780:	2247      	movs	r2, #71	@ 0x47
 8000782:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b1e      	ldr	r3, [pc, #120]	@ (8000800 <MX_TIM4_Init+0xac>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_TIM4_Init+0xac>)
 800078c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000790:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000792:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <MX_TIM4_Init+0xac>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_TIM4_Init+0xac>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800079e:	4818      	ldr	r0, [pc, #96]	@ (8000800 <MX_TIM4_Init+0xac>)
 80007a0:	f003 ff0f 	bl	80045c2 <HAL_TIM_PWM_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80007aa:	f7ff fdcb 	bl	8000344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4810      	ldr	r0, [pc, #64]	@ (8000800 <MX_TIM4_Init+0xac>)
 80007be:	f004 fc1b 	bl	8004ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80007c8:	f7ff fdbc 	bl	8000344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007cc:	2360      	movs	r3, #96	@ 0x60
 80007ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	4619      	mov	r1, r3
 80007e2:	4807      	ldr	r0, [pc, #28]	@ (8000800 <MX_TIM4_Init+0xac>)
 80007e4:	f003 ff44 	bl	8004670 <HAL_TIM_PWM_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80007ee:	f7ff fda9 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007f2:	4803      	ldr	r0, [pc, #12]	@ (8000800 <MX_TIM4_Init+0xac>)
 80007f4:	f000 f850 	bl	8000898 <HAL_TIM_MspPostInit>

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	@ 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000294 	.word	0x20000294
 8000804:	40000800 	.word	0x40000800

08000808 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000808:	b480      	push	{r7}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a1c      	ldr	r2, [pc, #112]	@ (8000888 <HAL_TIM_PWM_MspInit+0x80>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d10c      	bne.n	8000834 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <HAL_TIM_PWM_MspInit+0x84>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <HAL_TIM_PWM_MspInit+0x84>)
 8000820:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_TIM_PWM_MspInit+0x84>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000832:	e022      	b.n	800087a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a15      	ldr	r2, [pc, #84]	@ (8000890 <HAL_TIM_PWM_MspInit+0x88>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d10c      	bne.n	8000858 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <HAL_TIM_PWM_MspInit+0x84>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a12      	ldr	r2, [pc, #72]	@ (800088c <HAL_TIM_PWM_MspInit+0x84>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <HAL_TIM_PWM_MspInit+0x84>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
}
 8000856:	e010      	b.n	800087a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0d      	ldr	r2, [pc, #52]	@ (8000894 <HAL_TIM_PWM_MspInit+0x8c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d10b      	bne.n	800087a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000862:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <HAL_TIM_PWM_MspInit+0x84>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a09      	ldr	r2, [pc, #36]	@ (800088c <HAL_TIM_PWM_MspInit+0x84>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b07      	ldr	r3, [pc, #28]	@ (800088c <HAL_TIM_PWM_MspInit+0x84>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
}
 800087a:	bf00      	nop
 800087c:	371c      	adds	r7, #28
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40012c00 	.word	0x40012c00
 800088c:	40021000 	.word	0x40021000
 8000890:	40000400 	.word	0x40000400
 8000894:	40000800 	.word	0x40000800

08000898 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a33      	ldr	r2, [pc, #204]	@ (8000984 <HAL_TIM_MspPostInit+0xec>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d11c      	bne.n	80008f4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b33      	ldr	r3, [pc, #204]	@ (8000988 <HAL_TIM_MspPostInit+0xf0>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a32      	ldr	r2, [pc, #200]	@ (8000988 <HAL_TIM_MspPostInit+0xf0>)
 80008c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b30      	ldr	r3, [pc, #192]	@ (8000988 <HAL_TIM_MspPostInit+0xf0>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80008e2:	2302      	movs	r3, #2
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR1_PWM_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4827      	ldr	r0, [pc, #156]	@ (800098c <HAL_TIM_MspPostInit+0xf4>)
 80008ee:	f000 faed 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80008f2:	e043      	b.n	800097c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a25      	ldr	r2, [pc, #148]	@ (8000990 <HAL_TIM_MspPostInit+0xf8>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d11d      	bne.n	800093a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <HAL_TIM_MspPostInit+0xf0>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <HAL_TIM_MspPostInit+0xf0>)
 8000904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000908:	6153      	str	r3, [r2, #20]
 800090a:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <HAL_TIM_MspPostInit+0xf0>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR2_PWM_Pin;
 8000916:	2340      	movs	r3, #64	@ 0x40
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000926:	2302      	movs	r3, #2
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR2_PWM_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000934:	f000 faca 	bl	8000ecc <HAL_GPIO_Init>
}
 8000938:	e020      	b.n	800097c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM4)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a15      	ldr	r2, [pc, #84]	@ (8000994 <HAL_TIM_MspPostInit+0xfc>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d11b      	bne.n	800097c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <HAL_TIM_MspPostInit+0xf0>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	4a0f      	ldr	r2, [pc, #60]	@ (8000988 <HAL_TIM_MspPostInit+0xf0>)
 800094a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800094e:	6153      	str	r3, [r2, #20]
 8000950:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <HAL_TIM_MspPostInit+0xf0>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR3_PWM_Pin;
 800095c:	2340      	movs	r3, #64	@ 0x40
 800095e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800096c:	2302      	movs	r3, #2
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR3_PWM_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4808      	ldr	r0, [pc, #32]	@ (8000998 <HAL_TIM_MspPostInit+0x100>)
 8000978:	f000 faa8 	bl	8000ecc <HAL_GPIO_Init>
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	@ 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40012c00 	.word	0x40012c00
 8000988:	40021000 	.word	0x40021000
 800098c:	48000800 	.word	0x48000800
 8000990:	40000400 	.word	0x40000400
 8000994:	40000800 	.word	0x40000800
 8000998:	48000400 	.word	0x48000400

0800099c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_USART2_UART_Init+0x58>)
 80009a2:	4a15      	ldr	r2, [pc, #84]	@ (80009f8 <MX_USART2_UART_Init+0x5c>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a6:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <MX_USART2_UART_Init+0x58>)
 80009a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_USART2_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_USART2_UART_Init+0x58>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_USART2_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_USART2_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_USART2_UART_Init+0x58>)
 80009e0:	f004 fc1c 	bl	800521c <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ea:	f7ff fcab 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200002e0 	.word	0x200002e0
 80009f8:	40004400 	.word	0x40004400

080009fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1b      	ldr	r2, [pc, #108]	@ (8000a88 <HAL_UART_MspInit+0x8c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d130      	bne.n	8000a80 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <HAL_UART_MspInit+0x90>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a1a      	ldr	r2, [pc, #104]	@ (8000a8c <HAL_UART_MspInit+0x90>)
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <HAL_UART_MspInit+0x90>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <HAL_UART_MspInit+0x90>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a14      	ldr	r2, [pc, #80]	@ (8000a8c <HAL_UART_MspInit+0x90>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	6153      	str	r3, [r2, #20]
 8000a42:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <HAL_UART_MspInit+0x90>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a4e:	230c      	movs	r3, #12
 8000a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6c:	f000 fa2e 	bl	8000ecc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2026      	movs	r0, #38	@ 0x26
 8000a76:	f000 f976 	bl	8000d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a7a:	2026      	movs	r0, #38	@ 0x26
 8000a7c:	f000 f98f 	bl	8000d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	@ 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40021000 	.word	0x40021000

08000a90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ac8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a94:	f7ff fd64 	bl	8000560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9a:	490d      	ldr	r1, [pc, #52]	@ (8000ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <LoopForever+0xe>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8000adc <LoopForever+0x16>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000abe:	f009 fe75 	bl	800a7ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ac2:	f7ff fbc3 	bl	800024c <main>

08000ac6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac6:	e7fe      	b.n	8000ac6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ac8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000ad4:	0800a894 	.word	0x0800a894
  ldr r2, =_sbss
 8000ad8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000adc:	20001528 	.word	0x20001528

08000ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_2_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_Init+0x28>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <HAL_Init+0x28>)
 8000aee:	f043 0310 	orr.w	r3, r3, #16
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f92b 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	200f      	movs	r0, #15
 8000afc:	f000 f808 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff fcc6 	bl	8000490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40022000 	.word	0x40022000

08000b10 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_InitTick+0x54>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_InitTick+0x58>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f943 	bl	8000dba <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b4c:	f000 f90b 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	@ (8000b6c <HAL_InitTick+0x5c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000368 	.word	0x20000368

08000b98 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000368 	.word	0x20000368

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	@ (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff29 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff3e 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff8e 	bl	8000ca4 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5d 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff31 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffa2 	bl	8000d0c <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e02e      	b.n	8000e42 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d008      	beq.n	8000e00 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2204      	movs	r2, #4
 8000df2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e020      	b.n	8000e42 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 020e 	bic.w	r2, r2, #14
 8000e0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0201 	bic.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d005      	beq.n	8000e70 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2204      	movs	r2, #4
 8000e68:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e027      	b.n	8000ec0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 020e 	bic.w	r2, r2, #14
 8000e7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0201 	bic.w	r2, r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e98:	2101      	movs	r1, #1
 8000e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	4798      	blx	r3
    }
  }
  return status;
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eda:	e160      	b.n	800119e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 8152 	beq.w	8001198 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d005      	beq.n	8000f0c <HAL_GPIO_Init+0x40>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d130      	bne.n	8000f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f42:	2201      	movs	r2, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	f003 0201 	and.w	r2, r3, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d017      	beq.n	8000faa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d123      	bne.n	8000ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	08da      	lsrs	r2, r3, #3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3208      	adds	r2, #8
 8000fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	6939      	ldr	r1, [r7, #16]
 8000ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0203 	and.w	r2, r3, #3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 80ac 	beq.w	8001198 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001040:	4b5e      	ldr	r3, [pc, #376]	@ (80011bc <HAL_GPIO_Init+0x2f0>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a5d      	ldr	r2, [pc, #372]	@ (80011bc <HAL_GPIO_Init+0x2f0>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b5b      	ldr	r3, [pc, #364]	@ (80011bc <HAL_GPIO_Init+0x2f0>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001058:	4a59      	ldr	r2, [pc, #356]	@ (80011c0 <HAL_GPIO_Init+0x2f4>)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001082:	d025      	beq.n	80010d0 <HAL_GPIO_Init+0x204>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4f      	ldr	r2, [pc, #316]	@ (80011c4 <HAL_GPIO_Init+0x2f8>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d01f      	beq.n	80010cc <HAL_GPIO_Init+0x200>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4e      	ldr	r2, [pc, #312]	@ (80011c8 <HAL_GPIO_Init+0x2fc>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d019      	beq.n	80010c8 <HAL_GPIO_Init+0x1fc>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a4d      	ldr	r2, [pc, #308]	@ (80011cc <HAL_GPIO_Init+0x300>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d013      	beq.n	80010c4 <HAL_GPIO_Init+0x1f8>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a4c      	ldr	r2, [pc, #304]	@ (80011d0 <HAL_GPIO_Init+0x304>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d00d      	beq.n	80010c0 <HAL_GPIO_Init+0x1f4>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a4b      	ldr	r2, [pc, #300]	@ (80011d4 <HAL_GPIO_Init+0x308>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d007      	beq.n	80010bc <HAL_GPIO_Init+0x1f0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a4a      	ldr	r2, [pc, #296]	@ (80011d8 <HAL_GPIO_Init+0x30c>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d101      	bne.n	80010b8 <HAL_GPIO_Init+0x1ec>
 80010b4:	2306      	movs	r3, #6
 80010b6:	e00c      	b.n	80010d2 <HAL_GPIO_Init+0x206>
 80010b8:	2307      	movs	r3, #7
 80010ba:	e00a      	b.n	80010d2 <HAL_GPIO_Init+0x206>
 80010bc:	2305      	movs	r3, #5
 80010be:	e008      	b.n	80010d2 <HAL_GPIO_Init+0x206>
 80010c0:	2304      	movs	r3, #4
 80010c2:	e006      	b.n	80010d2 <HAL_GPIO_Init+0x206>
 80010c4:	2303      	movs	r3, #3
 80010c6:	e004      	b.n	80010d2 <HAL_GPIO_Init+0x206>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e002      	b.n	80010d2 <HAL_GPIO_Init+0x206>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <HAL_GPIO_Init+0x206>
 80010d0:	2300      	movs	r3, #0
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	f002 0203 	and.w	r2, r2, #3
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	4093      	lsls	r3, r2
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010e2:	4937      	ldr	r1, [pc, #220]	@ (80011c0 <HAL_GPIO_Init+0x2f4>)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f0:	4b3a      	ldr	r3, [pc, #232]	@ (80011dc <HAL_GPIO_Init+0x310>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001114:	4a31      	ldr	r2, [pc, #196]	@ (80011dc <HAL_GPIO_Init+0x310>)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800111a:	4b30      	ldr	r3, [pc, #192]	@ (80011dc <HAL_GPIO_Init+0x310>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800113e:	4a27      	ldr	r2, [pc, #156]	@ (80011dc <HAL_GPIO_Init+0x310>)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001144:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <HAL_GPIO_Init+0x310>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001168:	4a1c      	ldr	r2, [pc, #112]	@ (80011dc <HAL_GPIO_Init+0x310>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116e:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <HAL_GPIO_Init+0x310>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001192:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <HAL_GPIO_Init+0x310>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3301      	adds	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	fa22 f303 	lsr.w	r3, r2, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f47f ae97 	bne.w	8000edc <HAL_GPIO_Init+0x10>
  }
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	371c      	adds	r7, #28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000
 80011c4:	48000400 	.word	0x48000400
 80011c8:	48000800 	.word	0x48000800
 80011cc:	48000c00 	.word	0x48000c00
 80011d0:	48001000 	.word	0x48001000
 80011d4:	48001400 	.word	0x48001400
 80011d8:	48001800 	.word	0x48001800
 80011dc:	40010400 	.word	0x40010400

080011e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e0b9      	b.n	8001366 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d106      	bne.n	800120c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f009 f818 	bl	800a23c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2203      	movs	r2, #3
 8001210:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f004 ffa3 	bl	8006164 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e03e      	b.n	80012a2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3311      	adds	r3, #17
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	3310      	adds	r3, #16
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	3313      	adds	r3, #19
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	440b      	add	r3, r1
 800126e:	3320      	adds	r3, #32
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	440b      	add	r3, r1
 8001282:	3324      	adds	r3, #36	@ 0x24
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	440b      	add	r3, r1
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	3301      	adds	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	791b      	ldrb	r3, [r3, #4]
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d3bb      	bcc.n	8001224 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e044      	b.n	800133c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80012da:	7bfa      	ldrb	r2, [r7, #15]
 80012dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	440b      	add	r3, r1
 80012ec:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	440b      	add	r3, r1
 8001302:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800130a:	7bfa      	ldrb	r2, [r7, #15]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	3301      	adds	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	429a      	cmp	r2, r3
 8001344:	d3b5      	bcc.n	80012b2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3304      	adds	r3, #4
 800134e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001352:	f004 ff22 	bl	800619a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_PCD_Start+0x16>
 8001380:	2302      	movs	r3, #2
 8001382:	e016      	b.n	80013b2 <HAL_PCD_Start+0x44>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f004 fed0 	bl	8006136 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001396:	2101      	movs	r1, #1
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f009 f9c7 	bl	800a72c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f007 f98e 	bl	80086c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f007 f987 	bl	80086da <USB_ReadInterrupts>
 80013cc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 fab1 	bl	8001940 <PCD_EP_ISR_Handler>

    return;
 80013de:	e0bd      	b.n	800155c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d013      	beq.n	8001412 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013fc:	b292      	uxth	r2, r2
 80013fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f008 ff95 	bl	800a332 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001408:	2100      	movs	r1, #0
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f8a9 	bl	8001562 <HAL_PCD_SetAddress>

    return;
 8001410:	e0a4      	b.n	800155c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00c      	beq.n	8001436 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001424:	b29a      	uxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800142e:	b292      	uxth	r2, r2
 8001430:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001434:	e092      	b.n	800155c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00c      	beq.n	800145a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001448:	b29a      	uxth	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001452:	b292      	uxth	r2, r2
 8001454:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001458:	e080      	b.n	800155c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d027      	beq.n	80014b4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800146c:	b29a      	uxth	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0204 	bic.w	r2, r2, #4
 8001476:	b292      	uxth	r2, r2
 8001478:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001484:	b29a      	uxth	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0208 	bic.w	r2, r2, #8
 800148e:	b292      	uxth	r2, r2
 8001490:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f008 ff85 	bl	800a3a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014ac:	b292      	uxth	r2, r2
 80014ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80014b2:	e053      	b.n	800155c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d027      	beq.n	800150e <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0208 	orr.w	r2, r2, #8
 80014d0:	b292      	uxth	r2, r2
 80014d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80014de:	b29a      	uxth	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014e8:	b292      	uxth	r2, r2
 80014ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0204 	orr.w	r2, r2, #4
 8001500:	b292      	uxth	r2, r2
 8001502:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f008 ff32 	bl	800a370 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800150c:	e026      	b.n	800155c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00f      	beq.n	8001538 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800152a:	b292      	uxth	r2, r2
 800152c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f008 fef0 	bl	800a316 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001536:	e011      	b.n	800155c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00c      	beq.n	800155c <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800154a:	b29a      	uxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001554:	b292      	uxth	r2, r2
 8001556:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800155a:	bf00      	nop
  }
}
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <HAL_PCD_SetAddress+0x1a>
 8001578:	2302      	movs	r3, #2
 800157a:	e012      	b.n	80015a2 <HAL_PCD_SetAddress+0x40>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	78fa      	ldrb	r2, [r7, #3]
 8001588:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	78fa      	ldrb	r2, [r7, #3]
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f007 f882 	bl	800869c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	4608      	mov	r0, r1
 80015b4:	4611      	mov	r1, r2
 80015b6:	461a      	mov	r2, r3
 80015b8:	4603      	mov	r3, r0
 80015ba:	70fb      	strb	r3, [r7, #3]
 80015bc:	460b      	mov	r3, r1
 80015be:	803b      	strh	r3, [r7, #0]
 80015c0:	4613      	mov	r3, r2
 80015c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	da0e      	bge.n	80015ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	f003 0207 	and.w	r2, r3, #7
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	3310      	adds	r3, #16
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2201      	movs	r2, #1
 80015ea:	705a      	strb	r2, [r3, #1]
 80015ec:	e00e      	b.n	800160c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	f003 0207 	and.w	r2, r3, #7
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	b2da      	uxtb	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001618:	883a      	ldrh	r2, [r7, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	78ba      	ldrb	r2, [r7, #2]
 8001622:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001624:	78bb      	ldrb	r3, [r7, #2]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d102      	bne.n	8001630 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_PCD_EP_Open+0x94>
 800163a:	2302      	movs	r3, #2
 800163c:	e00e      	b.n	800165c <HAL_PCD_EP_Open+0xb2>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68f9      	ldr	r1, [r7, #12]
 800164c:	4618      	mov	r0, r3
 800164e:	f004 fdc3 	bl	80061d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800165a:	7afb      	ldrb	r3, [r7, #11]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001674:	2b00      	cmp	r3, #0
 8001676:	da0e      	bge.n	8001696 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f003 0207 	and.w	r2, r3, #7
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	3310      	adds	r3, #16
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2201      	movs	r2, #1
 8001692:	705a      	strb	r2, [r3, #1]
 8001694:	e00e      	b.n	80016b4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	f003 0207 	and.w	r2, r3, #7
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_PCD_EP_Close+0x6a>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e00e      	b.n	80016ec <HAL_PCD_EP_Close+0x88>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68f9      	ldr	r1, [r7, #12]
 80016dc:	4618      	mov	r0, r3
 80016de:	f005 f93f 	bl	8006960 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	460b      	mov	r3, r1
 8001702:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001704:	7afb      	ldrb	r3, [r7, #11]
 8001706:	f003 0207 	and.w	r2, r3, #7
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2200      	movs	r2, #0
 8001732:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001734:	7afb      	ldrb	r3, [r7, #11]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	b2da      	uxtb	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6979      	ldr	r1, [r7, #20]
 8001746:	4618      	mov	r0, r3
 8001748:	f005 faf7 	bl	8006d3a <USB_EPStartXfer>

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	f003 0207 	and.w	r2, r3, #7
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001778:	681b      	ldr	r3, [r3, #0]
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	460b      	mov	r3, r1
 8001794:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001796:	7afb      	ldrb	r3, [r7, #11]
 8001798:	f003 0207 	and.w	r2, r3, #7
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	3310      	adds	r3, #16
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4413      	add	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2200      	movs	r2, #0
 80017ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2201      	movs	r2, #1
 80017d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017d2:	7afb      	ldrb	r3, [r7, #11]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6979      	ldr	r1, [r7, #20]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 faa8 	bl	8006d3a <USB_EPStartXfer>

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	7912      	ldrb	r2, [r2, #4]
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e03e      	b.n	8001890 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001816:	2b00      	cmp	r3, #0
 8001818:	da0e      	bge.n	8001838 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	f003 0207 	and.w	r2, r3, #7
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	3310      	adds	r3, #16
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2201      	movs	r2, #1
 8001834:	705a      	strb	r2, [r3, #1]
 8001836:	e00c      	b.n	8001852 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2201      	movs	r2, #1
 8001856:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	b2da      	uxtb	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_PCD_EP_SetStall+0x7e>
 800186e:	2302      	movs	r3, #2
 8001870:	e00e      	b.n	8001890 <HAL_PCD_EP_SetStall+0x9c>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68f9      	ldr	r1, [r7, #12]
 8001880:	4618      	mov	r0, r3
 8001882:	f006 fe0c 	bl	800849e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	7912      	ldrb	r2, [r2, #4]
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e040      	b.n	8001938 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da0e      	bge.n	80018dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	f003 0207 	and.w	r2, r3, #7
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	3310      	adds	r3, #16
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2201      	movs	r2, #1
 80018d8:	705a      	strb	r2, [r3, #1]
 80018da:	e00e      	b.n	80018fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	f003 0207 	and.w	r2, r3, #7
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	b2da      	uxtb	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_PCD_EP_ClrStall+0x82>
 8001916:	2302      	movs	r3, #2
 8001918:	e00e      	b.n	8001938 <HAL_PCD_EP_ClrStall+0xa0>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68f9      	ldr	r1, [r7, #12]
 8001928:	4618      	mov	r0, r3
 800192a:	f006 fe09 	bl	8008540 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b096      	sub	sp, #88	@ 0x58
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001948:	e3ad      	b.n	80020a6 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001952:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001956:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8001964:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001968:	2b00      	cmp	r3, #0
 800196a:	f040 816f 	bne.w	8001c4c <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800196e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	d14c      	bne.n	8001a14 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	b29b      	uxth	r3, r3
 8001982:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800198a:	81fb      	strh	r3, [r7, #14]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	89fb      	ldrh	r3, [r7, #14]
 8001992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800199a:	b29b      	uxth	r3, r3
 800199c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3310      	adds	r3, #16
 80019a2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80019cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	441a      	add	r2, r3
 80019d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80019da:	2100      	movs	r1, #0
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f008 fc80 	bl	800a2e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7b1b      	ldrb	r3, [r3, #12]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 835c 	beq.w	80020a6 <PCD_EP_ISR_Handler+0x766>
 80019ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 8357 	bne.w	80020a6 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7b1b      	ldrb	r3, [r3, #12]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	731a      	strb	r2, [r3, #12]
 8001a12:	e348      	b.n	80020a6 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a1a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d032      	beq.n	8001a98 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4413      	add	r3, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a58:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a66:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a6a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f006 fe86 	bl	800877e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001a7e:	4013      	ands	r3, r2
 8001a80:	823b      	strh	r3, [r7, #16]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	8a3a      	ldrh	r2, [r7, #16]
 8001a88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f008 fbf9 	bl	800a288 <HAL_PCD_SetupStageCallback>
 8001a96:	e306      	b.n	80020a6 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a98:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f280 8302 	bge.w	80020a6 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001aae:	4013      	ands	r3, r2
 8001ab0:	83fb      	strh	r3, [r7, #30]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	8bfa      	ldrh	r2, [r7, #30]
 8001ab8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001abc:	b292      	uxth	r2, r2
 8001abe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d019      	beq.n	8001b24 <PCD_EP_ISR_Handler+0x1e4>
 8001af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d015      	beq.n	8001b24 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afe:	6959      	ldr	r1, [r3, #20]
 8001b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b02:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b06:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	f006 fe38 	bl	800877e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	441a      	add	r2, r3
 8001b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f008 fbc4 	bl	800a2ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001b2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 82b5 	bne.w	80020a6 <PCD_EP_ISR_Handler+0x766>
 8001b3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b40:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001b44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001b48:	f000 82ad 	beq.w	80020a6 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4413      	add	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	801a      	strh	r2, [r3, #0]
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10a      	bne.n	8001b9a <PCD_EP_ISR_Handler+0x25a>
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	801a      	strh	r2, [r3, #0]
 8001b98:	e039      	b.n	8001c0e <PCD_EP_ISR_Handler+0x2ce>
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ba0:	d818      	bhi.n	8001bd4 <PCD_EP_ISR_Handler+0x294>
 8001ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	085b      	lsrs	r3, r3, #1
 8001ba8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <PCD_EP_ISR_Handler+0x27c>
 8001bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bb8:	3301      	adds	r3, #1
 8001bba:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	029b      	lsls	r3, r3, #10
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	801a      	strh	r2, [r3, #0]
 8001bd2:	e01c      	b.n	8001c0e <PCD_EP_ISR_Handler+0x2ce>
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	095b      	lsrs	r3, r3, #5
 8001bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <PCD_EP_ISR_Handler+0x2ae>
 8001be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bea:	3b01      	subs	r3, #1
 8001bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c1e:	827b      	strh	r3, [r7, #18]
 8001c20:	8a7b      	ldrh	r3, [r7, #18]
 8001c22:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001c26:	827b      	strh	r3, [r7, #18]
 8001c28:	8a7b      	ldrh	r3, [r7, #18]
 8001c2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001c2e:	827b      	strh	r3, [r7, #18]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	8a7b      	ldrh	r3, [r7, #18]
 8001c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	8013      	strh	r3, [r2, #0]
 8001c4a:	e22c      	b.n	80020a6 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c60:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f280 80f6 	bge.w	8001e56 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001c80:	4013      	ands	r3, r2
 8001c82:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001c98:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ca0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb8:	7b1b      	ldrb	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d123      	bne.n	8001d06 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001ce6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 808e 	beq.w	8001e0c <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf6:	6959      	ldr	r1, [r3, #20]
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfa:	88da      	ldrh	r2, [r3, #6]
 8001cfc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001d00:	f006 fd3d 	bl	800877e <USB_ReadPMA>
 8001d04:	e082      	b.n	8001e0c <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d08:	78db      	ldrb	r3, [r3, #3]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d10a      	bne.n	8001d24 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001d12:	461a      	mov	r2, r3
 8001d14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f9d3 	bl	80020c2 <HAL_PCD_EP_DB_Receive>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001d22:	e073      	b.n	8001e0c <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d3e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	441a      	add	r2, r3
 8001d50:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001d54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001d58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001d5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d022      	beq.n	8001dc8 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001daa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d02c      	beq.n	8001e0c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db8:	6959      	ldr	r1, [r3, #20]
 8001dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbc:	891a      	ldrh	r2, [r3, #8]
 8001dbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001dc2:	f006 fcdc 	bl	800877e <USB_ReadPMA>
 8001dc6:	e021      	b.n	8001e0c <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	4413      	add	r3, r2
 8001de2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001df0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d009      	beq.n	8001e0c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dfe:	6959      	ldr	r1, [r3, #20]
 8001e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e02:	895a      	ldrh	r2, [r3, #10]
 8001e04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e08:	f006 fcb9 	bl	800877e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e14:	441a      	add	r2, r3
 8001e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001e22:	441a      	add	r2, r3
 8001e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e26:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <PCD_EP_ISR_Handler+0x4fc>
 8001e30:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d206      	bcs.n	8001e4a <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f008 fa32 	bl	800a2ac <HAL_PCD_DataOutStageCallback>
 8001e48:	e005      	b.n	8001e56 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e50:	4618      	mov	r0, r3
 8001e52:	f004 ff72 	bl	8006d3a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e56:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8121 	beq.w	80020a6 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e64:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	3310      	adds	r3, #16
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e92:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	441a      	add	r2, r3
 8001ea4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb6:	78db      	ldrb	r3, [r3, #3]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	f040 80a2 	bne.w	8002002 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	7b1b      	ldrb	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8093 	beq.w	8001ff4 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ece:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d046      	beq.n	8001f68 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001edc:	785b      	ldrb	r3, [r3, #1]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d126      	bne.n	8001f30 <PCD_EP_ISR_Handler+0x5f0>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	4413      	add	r3, r2
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	00da      	lsls	r2, r3, #3
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	4413      	add	r3, r2
 8001f04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001f08:	623b      	str	r3, [r7, #32]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	801a      	strh	r2, [r3, #0]
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	801a      	strh	r2, [r3, #0]
 8001f2e:	e061      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x6b4>
 8001f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f32:	785b      	ldrb	r3, [r3, #1]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d15d      	bne.n	8001ff4 <PCD_EP_ISR_Handler+0x6b4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f4c:	4413      	add	r3, r2
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	00da      	lsls	r2, r3, #3
 8001f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f58:	4413      	add	r3, r2
 8001f5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8001f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f62:	2200      	movs	r2, #0
 8001f64:	801a      	strh	r2, [r3, #0]
 8001f66:	e045      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f70:	785b      	ldrb	r3, [r3, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d126      	bne.n	8001fc4 <PCD_EP_ISR_Handler+0x684>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f8a:	4413      	add	r3, r2
 8001f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	00da      	lsls	r2, r3, #3
 8001f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f96:	4413      	add	r3, r2
 8001f98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fac:	801a      	strh	r2, [r3, #0]
 8001fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	e017      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x6b4>
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc6:	785b      	ldrb	r3, [r3, #1]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d113      	bne.n	8001ff4 <PCD_EP_ISR_Handler+0x6b4>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fda:	4413      	add	r3, r2
 8001fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	00da      	lsls	r2, r3, #3
 8001fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8001fec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f008 f971 	bl	800a2e2 <HAL_PCD_DataInStageCallback>
 8002000:	e051      	b.n	80020a6 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002002:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d144      	bne.n	8002098 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	4413      	add	r3, r2
 8002028:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002032:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800203e:	429a      	cmp	r2, r3
 8002040:	d907      	bls.n	8002052 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8002042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800204a:	1ad2      	subs	r2, r2, r3
 800204c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204e:	619a      	str	r2, [r3, #24]
 8002050:	e002      	b.n	8002058 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8002052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d106      	bne.n	800206e <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4619      	mov	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f008 f93b 	bl	800a2e2 <HAL_PCD_DataInStageCallback>
 800206c:	e01b      	b.n	80020a6 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800206e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002076:	441a      	add	r2, r3
 8002078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800207a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800207c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002084:	441a      	add	r2, r3
 8002086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002088:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002090:	4618      	mov	r0, r3
 8002092:	f004 fe52 	bl	8006d3a <USB_EPStartXfer>
 8002096:	e006      	b.n	80020a6 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002098:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800209c:	461a      	mov	r2, r3
 800209e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f917 	bl	80022d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f6ff ac49 	blt.w	800194a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3758      	adds	r7, #88	@ 0x58
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b088      	sub	sp, #32
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	4613      	mov	r3, r2
 80020ce:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d07c      	beq.n	80021d4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	8b7b      	ldrh	r3, [r7, #26]
 8002106:	429a      	cmp	r2, r3
 8002108:	d306      	bcc.n	8002118 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	8b7b      	ldrh	r3, [r7, #26]
 8002110:	1ad2      	subs	r2, r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	619a      	str	r2, [r3, #24]
 8002116:	e002      	b.n	800211e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d123      	bne.n	800216e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800213c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002140:	833b      	strh	r3, [r7, #24]
 8002142:	8b3b      	ldrh	r3, [r7, #24]
 8002144:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002148:	833b      	strh	r3, [r7, #24]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	441a      	add	r2, r3
 8002158:	8b3b      	ldrh	r3, [r7, #24]
 800215a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800215e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800216a:	b29b      	uxth	r3, r3
 800216c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01f      	beq.n	80021b8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800218e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002192:	82fb      	strh	r3, [r7, #22]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	441a      	add	r2, r3
 80021a2:	8afb      	ldrh	r3, [r7, #22]
 80021a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80021a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80021ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021b8:	8b7b      	ldrh	r3, [r7, #26]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8085 	beq.w	80022ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	6959      	ldr	r1, [r3, #20]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	891a      	ldrh	r2, [r3, #8]
 80021cc:	8b7b      	ldrh	r3, [r7, #26]
 80021ce:	f006 fad6 	bl	800877e <USB_ReadPMA>
 80021d2:	e07a      	b.n	80022ca <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021dc:	b29b      	uxth	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	8b7b      	ldrh	r3, [r7, #26]
 8002200:	429a      	cmp	r2, r3
 8002202:	d306      	bcc.n	8002212 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	699a      	ldr	r2, [r3, #24]
 8002208:	8b7b      	ldrh	r3, [r7, #26]
 800220a:	1ad2      	subs	r2, r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	619a      	str	r2, [r3, #24]
 8002210:	e002      	b.n	8002218 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d123      	bne.n	8002268 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800223a:	83fb      	strh	r3, [r7, #30]
 800223c:	8bfb      	ldrh	r3, [r7, #30]
 800223e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002242:	83fb      	strh	r3, [r7, #30]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	441a      	add	r2, r3
 8002252:	8bfb      	ldrh	r3, [r7, #30]
 8002254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800225c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002264:	b29b      	uxth	r3, r3
 8002266:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d11f      	bne.n	80022b2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800228c:	83bb      	strh	r3, [r7, #28]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	441a      	add	r2, r3
 800229c:	8bbb      	ldrh	r3, [r7, #28]
 800229e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022b2:	8b7b      	ldrh	r3, [r7, #26]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	6959      	ldr	r1, [r3, #20]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	895a      	ldrh	r2, [r3, #10]
 80022c4:	8b7b      	ldrh	r3, [r7, #26]
 80022c6:	f006 fa5a 	bl	800877e <USB_ReadPMA>
    }
  }

  return count;
 80022ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b0a4      	sub	sp, #144	@ 0x90
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	4613      	mov	r3, r2
 80022e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 81db 	beq.w	80026a4 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	4413      	add	r3, r2
 8002308:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002312:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800231e:	429a      	cmp	r2, r3
 8002320:	d907      	bls.n	8002332 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800232a:	1ad2      	subs	r2, r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	619a      	str	r2, [r3, #24]
 8002330:	e002      	b.n	8002338 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 80b9 	bne.w	80024b4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d126      	bne.n	8002398 <HAL_PCD_EP_DB_Transmit+0xc4>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235e:	4413      	add	r3, r2
 8002360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	00da      	lsls	r2, r3, #3
 8002368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236a:	4413      	add	r3, r2
 800236c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002370:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237c:	b29a      	uxth	r2, r3
 800237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002380:	801a      	strh	r2, [r3, #0]
 8002382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800238c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002390:	b29a      	uxth	r2, r3
 8002392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002394:	801a      	strh	r2, [r3, #0]
 8002396:	e01a      	b.n	80023ce <HAL_PCD_EP_DB_Transmit+0xfa>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	785b      	ldrb	r3, [r3, #1]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d116      	bne.n	80023ce <HAL_PCD_EP_DB_Transmit+0xfa>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b4:	4413      	add	r3, r2
 80023b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	00da      	lsls	r2, r3, #3
 80023be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c0:	4413      	add	r3, r2
 80023c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80023c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80023c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ca:	2200      	movs	r2, #0
 80023cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	785b      	ldrb	r3, [r3, #1]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d126      	bne.n	800242a <HAL_PCD_EP_DB_Transmit+0x156>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4413      	add	r3, r2
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	00da      	lsls	r2, r3, #3
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	4413      	add	r3, r2
 80023fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002402:	61bb      	str	r3, [r7, #24]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240e:	b29a      	uxth	r2, r3
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	801a      	strh	r2, [r3, #0]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800241e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002422:	b29a      	uxth	r2, r3
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	801a      	strh	r2, [r3, #0]
 8002428:	e017      	b.n	800245a <HAL_PCD_EP_DB_Transmit+0x186>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	785b      	ldrb	r3, [r3, #1]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d113      	bne.n	800245a <HAL_PCD_EP_DB_Transmit+0x186>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	4413      	add	r3, r2
 8002442:	627b      	str	r3, [r7, #36]	@ 0x24
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	00da      	lsls	r2, r3, #3
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	4413      	add	r3, r2
 800244e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	2200      	movs	r2, #0
 8002458:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f007 ff3e 	bl	800a2e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 82fa 	beq.w	8002a66 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800248c:	82fb      	strh	r3, [r7, #22]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	441a      	add	r2, r3
 800249c:	8afb      	ldrh	r3, [r7, #22]
 800249e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	8013      	strh	r3, [r2, #0]
 80024b2:	e2d8      	b.n	8002a66 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d021      	beq.n	8002502 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	441a      	add	r2, r3
 80024ea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80024ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024fe:	b29b      	uxth	r3, r3
 8002500:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002508:	2b01      	cmp	r3, #1
 800250a:	f040 82ac 	bne.w	8002a66 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002516:	441a      	add	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002524:	441a      	add	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	6a1a      	ldr	r2, [r3, #32]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	429a      	cmp	r2, r3
 8002534:	d30b      	bcc.n	800254e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	6a1a      	ldr	r2, [r3, #32]
 8002542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002546:	1ad2      	subs	r2, r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	621a      	str	r2, [r3, #32]
 800254c:	e017      	b.n	800257e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d108      	bne.n	8002568 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002556:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800255a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002566:	e00a      	b.n	800257e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	785b      	ldrb	r3, [r3, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d165      	bne.n	8002652 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002594:	b29b      	uxth	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800259a:	4413      	add	r3, r2
 800259c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	00da      	lsls	r2, r3, #3
 80025a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a6:	4413      	add	r3, r2
 80025a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80025ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <HAL_PCD_EP_DB_Transmit+0x308>
 80025c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	801a      	strh	r2, [r3, #0]
 80025da:	e057      	b.n	800268c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80025dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80025e2:	d818      	bhi.n	8002616 <HAL_PCD_EP_DB_Transmit+0x342>
 80025e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <HAL_PCD_EP_DB_Transmit+0x32a>
 80025f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025fa:	3301      	adds	r3, #1
 80025fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b29a      	uxth	r2, r3
 8002604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002606:	b29b      	uxth	r3, r3
 8002608:	029b      	lsls	r3, r3, #10
 800260a:	b29b      	uxth	r3, r3
 800260c:	4313      	orrs	r3, r2
 800260e:	b29a      	uxth	r2, r3
 8002610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002612:	801a      	strh	r2, [r3, #0]
 8002614:	e03a      	b.n	800268c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002616:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800261e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <HAL_PCD_EP_DB_Transmit+0x35c>
 800262a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800262c:	3b01      	subs	r3, #1
 800262e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29a      	uxth	r2, r3
 8002636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002638:	b29b      	uxth	r3, r3
 800263a:	029b      	lsls	r3, r3, #10
 800263c:	b29b      	uxth	r3, r3
 800263e:	4313      	orrs	r3, r2
 8002640:	b29b      	uxth	r3, r3
 8002642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264a:	b29a      	uxth	r2, r3
 800264c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	e01c      	b.n	800268c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	785b      	ldrb	r3, [r3, #1]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d118      	bne.n	800268c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002668:	b29b      	uxth	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800266e:	4413      	add	r3, r2
 8002670:	647b      	str	r3, [r7, #68]	@ 0x44
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	00da      	lsls	r2, r3, #3
 8002678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800267a:	4413      	add	r3, r2
 800267c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002680:	643b      	str	r3, [r7, #64]	@ 0x40
 8002682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002686:	b29a      	uxth	r2, r3
 8002688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800268a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	6959      	ldr	r1, [r3, #20]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	891a      	ldrh	r2, [r3, #8]
 8002698:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800269c:	b29b      	uxth	r3, r3
 800269e:	f006 f82c 	bl	80086fa <USB_WritePMA>
 80026a2:	e1e0      	b.n	8002a66 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	699a      	ldr	r2, [r3, #24]
 80026d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d307      	bcc.n	80026e8 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80026e0:	1ad2      	subs	r2, r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	619a      	str	r2, [r3, #24]
 80026e6:	e002      	b.n	80026ee <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2200      	movs	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 80c0 	bne.w	8002878 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	785b      	ldrb	r3, [r3, #1]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d126      	bne.n	800274e <HAL_PCD_EP_DB_Transmit+0x47a>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800270e:	b29b      	uxth	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002714:	4413      	add	r3, r2
 8002716:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	00da      	lsls	r2, r3, #3
 800271e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002720:	4413      	add	r3, r2
 8002722:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8002726:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	b29b      	uxth	r3, r3
 800272e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002732:	b29a      	uxth	r2, r3
 8002734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002736:	801a      	strh	r2, [r3, #0]
 8002738:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	b29b      	uxth	r3, r3
 800273e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002746:	b29a      	uxth	r2, r3
 8002748:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800274a:	801a      	strh	r2, [r3, #0]
 800274c:	e01a      	b.n	8002784 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	785b      	ldrb	r3, [r3, #1]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d116      	bne.n	8002784 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	667b      	str	r3, [r7, #100]	@ 0x64
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002764:	b29b      	uxth	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800276a:	4413      	add	r3, r2
 800276c:	667b      	str	r3, [r7, #100]	@ 0x64
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	00da      	lsls	r2, r3, #3
 8002774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002776:	4413      	add	r3, r2
 8002778:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800277c:	663b      	str	r3, [r7, #96]	@ 0x60
 800277e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002780:	2200      	movs	r2, #0
 8002782:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	677b      	str	r3, [r7, #116]	@ 0x74
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d12b      	bne.n	80027ea <HAL_PCD_EP_DB_Transmit+0x516>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027a6:	4413      	add	r3, r2
 80027a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	00da      	lsls	r2, r3, #3
 80027b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027b2:	4413      	add	r3, r2
 80027b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80027b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027ce:	801a      	strh	r2, [r3, #0]
 80027d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027e6:	801a      	strh	r2, [r3, #0]
 80027e8:	e017      	b.n	800281a <HAL_PCD_EP_DB_Transmit+0x546>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	785b      	ldrb	r3, [r3, #1]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d113      	bne.n	800281a <HAL_PCD_EP_DB_Transmit+0x546>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002800:	4413      	add	r3, r2
 8002802:	677b      	str	r3, [r7, #116]	@ 0x74
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	00da      	lsls	r2, r3, #3
 800280a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800280c:	4413      	add	r3, r2
 800280e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002812:	673b      	str	r3, [r7, #112]	@ 0x70
 8002814:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002816:	2200      	movs	r2, #0
 8002818:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f007 fd5e 	bl	800a2e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f040 811a 	bne.w	8002a66 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002848:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800284c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	441a      	add	r2, r3
 800285e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8002862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800286a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800286e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002872:	b29b      	uxth	r3, r3
 8002874:	8013      	strh	r3, [r2, #0]
 8002876:	e0f6      	b.n	8002a66 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d121      	bne.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800289c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	441a      	add	r2, r3
 80028ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80028b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	f040 80ca 	bne.w	8002a66 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80028da:	441a      	add	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	69da      	ldr	r2, [r3, #28]
 80028e4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80028e8:	441a      	add	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	6a1a      	ldr	r2, [r3, #32]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d30b      	bcc.n	8002912 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6a1a      	ldr	r2, [r3, #32]
 8002906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800290a:	1ad2      	subs	r2, r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	621a      	str	r2, [r3, #32]
 8002910:	e017      	b.n	8002942 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d108      	bne.n	800292c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800291a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800291e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800292a:	e00a      	b.n	8002942 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2200      	movs	r2, #0
 8002938:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	657b      	str	r3, [r7, #84]	@ 0x54
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d165      	bne.n	8002a1c <HAL_PCD_EP_DB_Transmit+0x748>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800295e:	b29b      	uxth	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002964:	4413      	add	r3, r2
 8002966:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	00da      	lsls	r2, r3, #3
 800296e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002970:	4413      	add	r3, r2
 8002972:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002976:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002982:	b29a      	uxth	r2, r3
 8002984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002986:	801a      	strh	r2, [r3, #0]
 8002988:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8002990:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800299a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299e:	b29a      	uxth	r2, r3
 80029a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	e054      	b.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x77c>
 80029a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80029ac:	d818      	bhi.n	80029e0 <HAL_PCD_EP_DB_Transmit+0x70c>
 80029ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x6f4>
 80029c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029c4:	3301      	adds	r3, #1
 80029c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	029b      	lsls	r3, r3, #10
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	4313      	orrs	r3, r2
 80029d8:	b29a      	uxth	r2, r3
 80029da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	e037      	b.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x77c>
 80029e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <HAL_PCD_EP_DB_Transmit+0x726>
 80029f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029f6:	3b01      	subs	r3, #1
 80029f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	029b      	lsls	r3, r3, #10
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a18:	801a      	strh	r2, [r3, #0]
 8002a1a:	e019      	b.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	785b      	ldrb	r3, [r3, #1]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d115      	bne.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a32:	4413      	add	r3, r2
 8002a34:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	00da      	lsls	r2, r3, #3
 8002a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a3e:	4413      	add	r3, r2
 8002a40:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8002a44:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a4e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	6959      	ldr	r1, [r3, #20]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	895a      	ldrh	r2, [r3, #10]
 8002a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	f005 fe4a 	bl	80086fa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a80:	82bb      	strh	r3, [r7, #20]
 8002a82:	8abb      	ldrh	r3, [r7, #20]
 8002a84:	f083 0310 	eor.w	r3, r3, #16
 8002a88:	82bb      	strh	r3, [r7, #20]
 8002a8a:	8abb      	ldrh	r3, [r7, #20]
 8002a8c:	f083 0320 	eor.w	r3, r3, #32
 8002a90:	82bb      	strh	r3, [r7, #20]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	441a      	add	r2, r3
 8002aa0:	8abb      	ldrh	r3, [r7, #20]
 8002aa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002aa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3790      	adds	r7, #144	@ 0x90
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	817b      	strh	r3, [r7, #10]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ad2:	897b      	ldrh	r3, [r7, #10]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ade:	897b      	ldrh	r3, [r7, #10]
 8002ae0:	f003 0207 	and.w	r2, r3, #7
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	3310      	adds	r3, #16
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4413      	add	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e009      	b.n	8002b0a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002af6:	897a      	ldrh	r2, [r7, #10]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b0a:	893b      	ldrh	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2200      	movs	r2, #0
 8002b14:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	80da      	strh	r2, [r3, #6]
 8002b1e:	e00b      	b.n	8002b38 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2201      	movs	r2, #1
 8002b24:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f001 b83a 	b.w	8003be2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 816f 	beq.w	8002e62 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b84:	4bb5      	ldr	r3, [pc, #724]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d00c      	beq.n	8002baa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b90:	4bb2      	ldr	r3, [pc, #712]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 030c 	and.w	r3, r3, #12
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d15c      	bne.n	8002c56 <HAL_RCC_OscConfig+0x10e>
 8002b9c:	4baf      	ldr	r3, [pc, #700]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba8:	d155      	bne.n	8002c56 <HAL_RCC_OscConfig+0x10e>
 8002baa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bae:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d102      	bne.n	8002bdc <HAL_RCC_OscConfig+0x94>
 8002bd6:	4ba1      	ldr	r3, [pc, #644]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	e015      	b.n	8002c08 <HAL_RCC_OscConfig+0xc0>
 8002bdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002be0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002bf0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bf4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002bf8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002c04:	4b95      	ldr	r3, [pc, #596]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c0c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002c10:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002c14:	fa92 f2a2 	rbit	r2, r2
 8002c18:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002c1c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002c20:	fab2 f282 	clz	r2, r2
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	f042 0220 	orr.w	r2, r2, #32
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	f002 021f 	and.w	r2, r2, #31
 8002c30:	2101      	movs	r1, #1
 8002c32:	fa01 f202 	lsl.w	r2, r1, r2
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8111 	beq.w	8002e60 <HAL_RCC_OscConfig+0x318>
 8002c3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 8108 	bne.w	8002e60 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f000 bfc6 	b.w	8003be2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x12e>
 8002c68:	4b7c      	ldr	r3, [pc, #496]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a7b      	ldr	r2, [pc, #492]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	e036      	b.n	8002ce4 <HAL_RCC_OscConfig+0x19c>
 8002c76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x158>
 8002c86:	4b75      	ldr	r3, [pc, #468]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a74      	ldr	r2, [pc, #464]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b72      	ldr	r3, [pc, #456]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a71      	ldr	r2, [pc, #452]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002c98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e021      	b.n	8002ce4 <HAL_RCC_OscConfig+0x19c>
 8002ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x184>
 8002cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a69      	ldr	r2, [pc, #420]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4b67      	ldr	r3, [pc, #412]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a66      	ldr	r2, [pc, #408]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e00b      	b.n	8002ce4 <HAL_RCC_OscConfig+0x19c>
 8002ccc:	4b63      	ldr	r3, [pc, #396]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a62      	ldr	r2, [pc, #392]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	4b60      	ldr	r3, [pc, #384]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a5f      	ldr	r2, [pc, #380]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ce2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d059      	beq.n	8002da8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fd ff50 	bl	8000b98 <HAL_GetTick>
 8002cf8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfe:	f7fd ff4b 	bl	8000b98 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	@ 0x64
 8002d0c:	d902      	bls.n	8002d14 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	f000 bf67 	b.w	8003be2 <HAL_RCC_OscConfig+0x109a>
 8002d14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d18:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002d28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_RCC_OscConfig+0x1fe>
 8002d40:	4b46      	ldr	r3, [pc, #280]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	e015      	b.n	8002d72 <HAL_RCC_OscConfig+0x22a>
 8002d46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d4a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002d5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d5e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d62:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d76:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002d7a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002d7e:	fa92 f2a2 	rbit	r2, r2
 8002d82:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002d86:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002d8a:	fab2 f282 	clz	r2, r2
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f042 0220 	orr.w	r2, r2, #32
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f002 021f 	and.w	r2, r2, #31
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ab      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1b6>
 8002da6:	e05c      	b.n	8002e62 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fd fef6 	bl	8000b98 <HAL_GetTick>
 8002dac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db2:	f7fd fef1 	bl	8000b98 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	@ 0x64
 8002dc0:	d902      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	f000 bf0d 	b.w	8003be2 <HAL_RCC_OscConfig+0x109a>
 8002dc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dcc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002ddc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d102      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2b2>
 8002df4:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	e015      	b.n	8002e26 <HAL_RCC_OscConfig+0x2de>
 8002dfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dfe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002e0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e12:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002e16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002e22:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <HAL_RCC_OscConfig+0x314>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e2a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002e2e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002e32:	fa92 f2a2 	rbit	r2, r2
 8002e36:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002e3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002e3e:	fab2 f282 	clz	r2, r2
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f042 0220 	orr.w	r2, r2, #32
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f002 021f 	and.w	r2, r2, #31
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f202 	lsl.w	r2, r1, r2
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ab      	bne.n	8002db2 <HAL_RCC_OscConfig+0x26a>
 8002e5a:	e002      	b.n	8002e62 <HAL_RCC_OscConfig+0x31a>
 8002e5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 817f 	beq.w	8003176 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e78:	4ba7      	ldr	r3, [pc, #668]	@ (8003118 <HAL_RCC_OscConfig+0x5d0>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e84:	4ba4      	ldr	r3, [pc, #656]	@ (8003118 <HAL_RCC_OscConfig+0x5d0>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d173      	bne.n	8002f78 <HAL_RCC_OscConfig+0x430>
 8002e90:	4ba1      	ldr	r3, [pc, #644]	@ (8003118 <HAL_RCC_OscConfig+0x5d0>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e9c:	d16c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x430>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002eb0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d102      	bne.n	8002ece <HAL_RCC_OscConfig+0x386>
 8002ec8:	4b93      	ldr	r3, [pc, #588]	@ (8003118 <HAL_RCC_OscConfig+0x5d0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	e013      	b.n	8002ef6 <HAL_RCC_OscConfig+0x3ae>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002ee6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002ef2:	4b89      	ldr	r3, [pc, #548]	@ (8003118 <HAL_RCC_OscConfig+0x5d0>)
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002efc:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002f00:	fa92 f2a2 	rbit	r2, r2
 8002f04:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002f08:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002f0c:	fab2 f282 	clz	r2, r2
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	f042 0220 	orr.w	r2, r2, #32
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	f002 021f 	and.w	r2, r2, #31
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3f6>
 8002f28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d002      	beq.n	8002f3e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f000 be52 	b.w	8003be2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3e:	4b76      	ldr	r3, [pc, #472]	@ (8003118 <HAL_RCC_OscConfig+0x5d0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	21f8      	movs	r1, #248	@ 0xf8
 8002f54:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002f5c:	fa91 f1a1 	rbit	r1, r1
 8002f60:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002f64:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002f68:	fab1 f181 	clz	r1, r1
 8002f6c:	b2c9      	uxtb	r1, r1
 8002f6e:	408b      	lsls	r3, r1
 8002f70:	4969      	ldr	r1, [pc, #420]	@ (8003118 <HAL_RCC_OscConfig+0x5d0>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	e0fe      	b.n	8003176 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8088 	beq.w	800309a <HAL_RCC_OscConfig+0x552>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002f9c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002faa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fd fdef 	bl	8000b98 <HAL_GetTick>
 8002fba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc0:	f7fd fdea 	bl	8000b98 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d902      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	f000 be06 	b.w	8003be2 <HAL_RCC_OscConfig+0x109a>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002fe8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d102      	bne.n	8003006 <HAL_RCC_OscConfig+0x4be>
 8003000:	4b45      	ldr	r3, [pc, #276]	@ (8003118 <HAL_RCC_OscConfig+0x5d0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	e013      	b.n	800302e <HAL_RCC_OscConfig+0x4e6>
 8003006:	2302      	movs	r3, #2
 8003008:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003018:	2302      	movs	r3, #2
 800301a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800301e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800302a:	4b3b      	ldr	r3, [pc, #236]	@ (8003118 <HAL_RCC_OscConfig+0x5d0>)
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	2202      	movs	r2, #2
 8003030:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003034:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003038:	fa92 f2a2 	rbit	r2, r2
 800303c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003040:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003044:	fab2 f282 	clz	r2, r2
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	f042 0220 	orr.w	r2, r2, #32
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	f002 021f 	and.w	r2, r2, #31
 8003054:	2101      	movs	r1, #1
 8003056:	fa01 f202 	lsl.w	r2, r1, r2
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0af      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003060:	4b2d      	ldr	r3, [pc, #180]	@ (8003118 <HAL_RCC_OscConfig+0x5d0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003068:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800306c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	21f8      	movs	r1, #248	@ 0xf8
 8003076:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800307e:	fa91 f1a1 	rbit	r1, r1
 8003082:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003086:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800308a:	fab1 f181 	clz	r1, r1
 800308e:	b2c9      	uxtb	r1, r1
 8003090:	408b      	lsls	r3, r1
 8003092:	4921      	ldr	r1, [pc, #132]	@ (8003118 <HAL_RCC_OscConfig+0x5d0>)
 8003094:	4313      	orrs	r3, r2
 8003096:	600b      	str	r3, [r1, #0]
 8003098:	e06d      	b.n	8003176 <HAL_RCC_OscConfig+0x62e>
 800309a:	2301      	movs	r3, #1
 800309c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80030ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	461a      	mov	r2, r3
 80030c2:	2300      	movs	r3, #0
 80030c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fd fd67 	bl	8000b98 <HAL_GetTick>
 80030ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d0:	f7fd fd62 	bl	8000b98 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d902      	bls.n	80030e6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	f000 bd7e 	b.w	8003be2 <HAL_RCC_OscConfig+0x109a>
 80030e6:	2302      	movs	r3, #2
 80030e8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80030f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCC_OscConfig+0x5d4>
 8003110:	4b01      	ldr	r3, [pc, #4]	@ (8003118 <HAL_RCC_OscConfig+0x5d0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	e016      	b.n	8003144 <HAL_RCC_OscConfig+0x5fc>
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	2302      	movs	r3, #2
 800311e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800312e:	2302      	movs	r3, #2
 8003130:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003134:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003140:	4bbf      	ldr	r3, [pc, #764]	@ (8003440 <HAL_RCC_OscConfig+0x8f8>)
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	2202      	movs	r2, #2
 8003146:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800314a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800314e:	fa92 f2a2 	rbit	r2, r2
 8003152:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003156:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800315a:	fab2 f282 	clz	r2, r2
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	f042 0220 	orr.w	r2, r2, #32
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	f002 021f 	and.w	r2, r2, #31
 800316a:	2101      	movs	r1, #1
 800316c:	fa01 f202 	lsl.w	r2, r1, r2
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1ac      	bne.n	80030d0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003176:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800317a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8113 	beq.w	80033b2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800318c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003190:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d07c      	beq.n	8003296 <HAL_RCC_OscConfig+0x74e>
 800319c:	2301      	movs	r3, #1
 800319e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80031ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	4ba2      	ldr	r3, [pc, #648]	@ (8003444 <HAL_RCC_OscConfig+0x8fc>)
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	461a      	mov	r2, r3
 80031c2:	2301      	movs	r3, #1
 80031c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c6:	f7fd fce7 	bl	8000b98 <HAL_GetTick>
 80031ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d0:	f7fd fce2 	bl	8000b98 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d902      	bls.n	80031e6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	f000 bcfe 	b.w	8003be2 <HAL_RCC_OscConfig+0x109a>
 80031e6:	2302      	movs	r3, #2
 80031e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031f0:	fa93 f2a3 	rbit	r2, r3
 80031f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003206:	2202      	movs	r2, #2
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800320e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	fa93 f2a3 	rbit	r2, r3
 8003218:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800321c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003226:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800322a:	2202      	movs	r2, #2
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003232:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	fa93 f2a3 	rbit	r2, r3
 800323c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003240:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003244:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003246:	4b7e      	ldr	r3, [pc, #504]	@ (8003440 <HAL_RCC_OscConfig+0x8f8>)
 8003248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800324a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800324e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003252:	2102      	movs	r1, #2
 8003254:	6019      	str	r1, [r3, #0]
 8003256:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800325a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	fa93 f1a3 	rbit	r1, r3
 8003264:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003268:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800326c:	6019      	str	r1, [r3, #0]
  return result;
 800326e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003272:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	2101      	movs	r1, #1
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d09d      	beq.n	80031d0 <HAL_RCC_OscConfig+0x688>
 8003294:	e08d      	b.n	80033b2 <HAL_RCC_OscConfig+0x86a>
 8003296:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800329a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	fa93 f2a3 	rbit	r2, r3
 80032b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032b4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032b8:	601a      	str	r2, [r3, #0]
  return result;
 80032ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b5d      	ldr	r3, [pc, #372]	@ (8003444 <HAL_RCC_OscConfig+0x8fc>)
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	461a      	mov	r2, r3
 80032d4:	2300      	movs	r3, #0
 80032d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d8:	f7fd fc5e 	bl	8000b98 <HAL_GetTick>
 80032dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e2:	f7fd fc59 	bl	8000b98 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d902      	bls.n	80032f8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	f000 bc75 	b.w	8003be2 <HAL_RCC_OscConfig+0x109a>
 80032f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032fc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003300:	2202      	movs	r2, #2
 8003302:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003308:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	fa93 f2a3 	rbit	r2, r3
 8003312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003316:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003320:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003324:	2202      	movs	r2, #2
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800332c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	fa93 f2a3 	rbit	r2, r3
 8003336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800333a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003344:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003348:	2202      	movs	r2, #2
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003350:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	fa93 f2a3 	rbit	r2, r3
 800335a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800335e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003362:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003364:	4b36      	ldr	r3, [pc, #216]	@ (8003440 <HAL_RCC_OscConfig+0x8f8>)
 8003366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003368:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800336c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003370:	2102      	movs	r1, #2
 8003372:	6019      	str	r1, [r3, #0]
 8003374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003378:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	fa93 f1a3 	rbit	r1, r3
 8003382:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003386:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800338a:	6019      	str	r1, [r3, #0]
  return result;
 800338c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003390:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2101      	movs	r1, #1
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d197      	bne.n	80032e2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 81a5 	beq.w	8003712 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c8:	2300      	movs	r3, #0
 80033ca:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003440 <HAL_RCC_OscConfig+0x8f8>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	4b19      	ldr	r3, [pc, #100]	@ (8003440 <HAL_RCC_OscConfig+0x8f8>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	4a18      	ldr	r2, [pc, #96]	@ (8003440 <HAL_RCC_OscConfig+0x8f8>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	61d3      	str	r3, [r2, #28]
 80033e6:	4b16      	ldr	r3, [pc, #88]	@ (8003440 <HAL_RCC_OscConfig+0x8f8>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80033ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003400:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <HAL_RCC_OscConfig+0x900>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d121      	bne.n	8003458 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003414:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <HAL_RCC_OscConfig+0x900>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0b      	ldr	r2, [pc, #44]	@ (8003448 <HAL_RCC_OscConfig+0x900>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003420:	f7fd fbba 	bl	8000b98 <HAL_GetTick>
 8003424:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	e010      	b.n	800344c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fd fbb5 	bl	8000b98 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	@ 0x64
 8003438:	d908      	bls.n	800344c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e3d1      	b.n	8003be2 <HAL_RCC_OscConfig+0x109a>
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	10908120 	.word	0x10908120
 8003448:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344c:	4b8d      	ldr	r3, [pc, #564]	@ (8003684 <HAL_RCC_OscConfig+0xb3c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0e8      	beq.n	800342a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800345c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x92e>
 8003468:	4b87      	ldr	r3, [pc, #540]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4a86      	ldr	r2, [pc, #536]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6213      	str	r3, [r2, #32]
 8003474:	e035      	b.n	80034e2 <HAL_RCC_OscConfig+0x99a>
 8003476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800347a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x958>
 8003486:	4b80      	ldr	r3, [pc, #512]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4a7f      	ldr	r2, [pc, #508]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	6213      	str	r3, [r2, #32]
 8003492:	4b7d      	ldr	r3, [pc, #500]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a7c      	ldr	r2, [pc, #496]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 8003498:	f023 0304 	bic.w	r3, r3, #4
 800349c:	6213      	str	r3, [r2, #32]
 800349e:	e020      	b.n	80034e2 <HAL_RCC_OscConfig+0x99a>
 80034a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b05      	cmp	r3, #5
 80034ae:	d10c      	bne.n	80034ca <HAL_RCC_OscConfig+0x982>
 80034b0:	4b75      	ldr	r3, [pc, #468]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4a74      	ldr	r2, [pc, #464]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 80034b6:	f043 0304 	orr.w	r3, r3, #4
 80034ba:	6213      	str	r3, [r2, #32]
 80034bc:	4b72      	ldr	r3, [pc, #456]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	4a71      	ldr	r2, [pc, #452]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6213      	str	r3, [r2, #32]
 80034c8:	e00b      	b.n	80034e2 <HAL_RCC_OscConfig+0x99a>
 80034ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	6213      	str	r3, [r2, #32]
 80034d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	4a6b      	ldr	r2, [pc, #428]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 80034dc:	f023 0304 	bic.w	r3, r3, #4
 80034e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8081 	beq.w	80035f6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f4:	f7fd fb50 	bl	8000b98 <HAL_GetTick>
 80034f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	e00b      	b.n	8003516 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fe:	f7fd fb4b 	bl	8000b98 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e365      	b.n	8003be2 <HAL_RCC_OscConfig+0x109a>
 8003516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800351a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800351e:	2202      	movs	r2, #2
 8003520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003526:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	fa93 f2a3 	rbit	r2, r3
 8003530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003534:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800353e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003542:	2202      	movs	r2, #2
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800354a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	fa93 f2a3 	rbit	r2, r3
 8003554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003558:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800355c:	601a      	str	r2, [r3, #0]
  return result;
 800355e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003562:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003566:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f043 0302 	orr.w	r3, r3, #2
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d102      	bne.n	8003582 <HAL_RCC_OscConfig+0xa3a>
 800357c:	4b42      	ldr	r3, [pc, #264]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	e013      	b.n	80035aa <HAL_RCC_OscConfig+0xa62>
 8003582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003586:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800358a:	2202      	movs	r2, #2
 800358c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003592:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	fa93 f2a3 	rbit	r2, r3
 800359c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	4b38      	ldr	r3, [pc, #224]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035ae:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035b2:	2102      	movs	r1, #2
 80035b4:	6011      	str	r1, [r2, #0]
 80035b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035ba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	fa92 f1a2 	rbit	r1, r2
 80035c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035c8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80035cc:	6011      	str	r1, [r2, #0]
  return result;
 80035ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035d2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	fab2 f282 	clz	r2, r2
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	f002 021f 	and.w	r2, r2, #31
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f202 	lsl.w	r2, r1, r2
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d084      	beq.n	80034fe <HAL_RCC_OscConfig+0x9b6>
 80035f4:	e083      	b.n	80036fe <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f6:	f7fd facf 	bl	8000b98 <HAL_GetTick>
 80035fa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fd faca 	bl	8000b98 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e2e4      	b.n	8003be2 <HAL_RCC_OscConfig+0x109a>
 8003618:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800361c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003620:	2202      	movs	r2, #2
 8003622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003628:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	fa93 f2a3 	rbit	r2, r3
 8003632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003636:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003640:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003644:	2202      	movs	r2, #2
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800364c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	fa93 f2a3 	rbit	r2, r3
 8003656:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800365a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800365e:	601a      	str	r2, [r3, #0]
  return result;
 8003660:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003664:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003668:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d106      	bne.n	800368c <HAL_RCC_OscConfig+0xb44>
 800367e:	4b02      	ldr	r3, [pc, #8]	@ (8003688 <HAL_RCC_OscConfig+0xb40>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	e017      	b.n	80036b4 <HAL_RCC_OscConfig+0xb6c>
 8003684:	40007000 	.word	0x40007000
 8003688:	40021000 	.word	0x40021000
 800368c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003690:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003694:	2202      	movs	r2, #2
 8003696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800369c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	fa93 f2a3 	rbit	r2, r3
 80036a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036aa:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	4bb3      	ldr	r3, [pc, #716]	@ (8003980 <HAL_RCC_OscConfig+0xe38>)
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036b8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036bc:	2102      	movs	r1, #2
 80036be:	6011      	str	r1, [r2, #0]
 80036c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036c4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	fa92 f1a2 	rbit	r1, r2
 80036ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036d2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80036d6:	6011      	str	r1, [r2, #0]
  return result;
 80036d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036dc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80036e0:	6812      	ldr	r2, [r2, #0]
 80036e2:	fab2 f282 	clz	r2, r2
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	f002 021f 	and.w	r2, r2, #31
 80036f2:	2101      	movs	r1, #1
 80036f4:	fa01 f202 	lsl.w	r2, r1, r2
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d180      	bne.n	8003600 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036fe:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003702:	2b01      	cmp	r3, #1
 8003704:	d105      	bne.n	8003712 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003706:	4b9e      	ldr	r3, [pc, #632]	@ (8003980 <HAL_RCC_OscConfig+0xe38>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4a9d      	ldr	r2, [pc, #628]	@ (8003980 <HAL_RCC_OscConfig+0xe38>)
 800370c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003710:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003712:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003716:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 825e 	beq.w	8003be0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003724:	4b96      	ldr	r3, [pc, #600]	@ (8003980 <HAL_RCC_OscConfig+0xe38>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	f000 821f 	beq.w	8003b70 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003732:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003736:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b02      	cmp	r3, #2
 8003740:	f040 8170 	bne.w	8003a24 <HAL_RCC_OscConfig+0xedc>
 8003744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003748:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800374c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003756:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	fa93 f2a3 	rbit	r2, r3
 8003760:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003764:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003768:	601a      	str	r2, [r3, #0]
  return result;
 800376a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800376e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003772:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003774:	fab3 f383 	clz	r3, r3
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800377e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	461a      	mov	r2, r3
 8003786:	2300      	movs	r3, #0
 8003788:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fd fa05 	bl	8000b98 <HAL_GetTick>
 800378e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003792:	e009      	b.n	80037a8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fd fa00 	bl	8000b98 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e21c      	b.n	8003be2 <HAL_RCC_OscConfig+0x109a>
 80037a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	fa93 f2a3 	rbit	r2, r3
 80037c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037cc:	601a      	str	r2, [r3, #0]
  return result;
 80037ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d8:	fab3 f383 	clz	r3, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d102      	bne.n	80037f2 <HAL_RCC_OscConfig+0xcaa>
 80037ec:	4b64      	ldr	r3, [pc, #400]	@ (8003980 <HAL_RCC_OscConfig+0xe38>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	e027      	b.n	8003842 <HAL_RCC_OscConfig+0xcfa>
 80037f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037f6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80037fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003804:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	fa93 f2a3 	rbit	r2, r3
 800380e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003812:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800381c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003820:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800382a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	fa93 f2a3 	rbit	r2, r3
 8003834:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003838:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	4b50      	ldr	r3, [pc, #320]	@ (8003980 <HAL_RCC_OscConfig+0xe38>)
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003846:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800384a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800384e:	6011      	str	r1, [r2, #0]
 8003850:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003854:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	fa92 f1a2 	rbit	r1, r2
 800385e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003862:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003866:	6011      	str	r1, [r2, #0]
  return result;
 8003868:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800386c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	fab2 f282 	clz	r2, r2
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	f042 0220 	orr.w	r2, r2, #32
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f002 021f 	and.w	r2, r2, #31
 8003882:	2101      	movs	r1, #1
 8003884:	fa01 f202 	lsl.w	r2, r1, r2
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d182      	bne.n	8003794 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388e:	4b3c      	ldr	r3, [pc, #240]	@ (8003980 <HAL_RCC_OscConfig+0xe38>)
 8003890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003892:	f023 020f 	bic.w	r2, r3, #15
 8003896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800389a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	4937      	ldr	r1, [pc, #220]	@ (8003980 <HAL_RCC_OscConfig+0xe38>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80038a8:	4b35      	ldr	r3, [pc, #212]	@ (8003980 <HAL_RCC_OscConfig+0xe38>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80038b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a19      	ldr	r1, [r3, #32]
 80038bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	492d      	ldr	r1, [pc, #180]	@ (8003980 <HAL_RCC_OscConfig+0xe38>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
 80038d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038d4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	fa93 f2a3 	rbit	r2, r3
 80038ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038f4:	601a      	str	r2, [r3, #0]
  return result;
 80038f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038fa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038fe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003900:	fab3 f383 	clz	r3, r3
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800390a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	461a      	mov	r2, r3
 8003912:	2301      	movs	r3, #1
 8003914:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fd f93f 	bl	8000b98 <HAL_GetTick>
 800391a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800391e:	e009      	b.n	8003934 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003920:	f7fd f93a 	bl	8000b98 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e156      	b.n	8003be2 <HAL_RCC_OscConfig+0x109a>
 8003934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003938:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800393c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003946:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	fa93 f2a3 	rbit	r2, r3
 8003950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003954:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003958:	601a      	str	r2, [r3, #0]
  return result;
 800395a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800395e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003962:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <HAL_RCC_OscConfig+0xe3c>
 8003978:	4b01      	ldr	r3, [pc, #4]	@ (8003980 <HAL_RCC_OscConfig+0xe38>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	e02a      	b.n	80039d4 <HAL_RCC_OscConfig+0xe8c>
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
 8003984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003988:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800398c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003996:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	fa93 f2a3 	rbit	r2, r3
 80039a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039ae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039bc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	fa93 f2a3 	rbit	r2, r3
 80039c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039ca:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	4b86      	ldr	r3, [pc, #536]	@ (8003bec <HAL_RCC_OscConfig+0x10a4>)
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039d8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039e0:	6011      	str	r1, [r2, #0]
 80039e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039e6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	fa92 f1a2 	rbit	r1, r2
 80039f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039f4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80039f8:	6011      	str	r1, [r2, #0]
  return result;
 80039fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039fe:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	fab2 f282 	clz	r2, r2
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	f042 0220 	orr.w	r2, r2, #32
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	f002 021f 	and.w	r2, r2, #31
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f43f af7f 	beq.w	8003920 <HAL_RCC_OscConfig+0xdd8>
 8003a22:	e0dd      	b.n	8003be0 <HAL_RCC_OscConfig+0x1098>
 8003a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a28:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a36:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	fa93 f2a3 	rbit	r2, r3
 8003a40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a44:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a48:	601a      	str	r2, [r3, #0]
  return result;
 8003a4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a4e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a52:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a54:	fab3 f383 	clz	r3, r3
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a5e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	461a      	mov	r2, r3
 8003a66:	2300      	movs	r3, #0
 8003a68:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fd f895 	bl	8000b98 <HAL_GetTick>
 8003a6e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a72:	e009      	b.n	8003a88 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd f890 	bl	8000b98 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e0ac      	b.n	8003be2 <HAL_RCC_OscConfig+0x109a>
 8003a88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a8c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a9a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	fa93 f2a3 	rbit	r2, r3
 8003aa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aa8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003aac:	601a      	str	r2, [r3, #0]
  return result;
 8003aae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ab2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003ab6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab8:	fab3 f383 	clz	r3, r3
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d102      	bne.n	8003ad2 <HAL_RCC_OscConfig+0xf8a>
 8003acc:	4b47      	ldr	r3, [pc, #284]	@ (8003bec <HAL_RCC_OscConfig+0x10a4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	e027      	b.n	8003b22 <HAL_RCC_OscConfig+0xfda>
 8003ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ad6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003ada:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ae4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	fa93 f2a3 	rbit	r2, r3
 8003aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003af2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003afc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003b00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b0a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	fa93 f2a3 	rbit	r2, r3
 8003b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b18:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	4b33      	ldr	r3, [pc, #204]	@ (8003bec <HAL_RCC_OscConfig+0x10a4>)
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b26:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b2a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b2e:	6011      	str	r1, [r2, #0]
 8003b30:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b34:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	fa92 f1a2 	rbit	r1, r2
 8003b3e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b42:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003b46:	6011      	str	r1, [r2, #0]
  return result;
 8003b48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b4c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	fab2 f282 	clz	r2, r2
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	f042 0220 	orr.w	r2, r2, #32
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	f002 021f 	and.w	r2, r2, #31
 8003b62:	2101      	movs	r1, #1
 8003b64:	fa01 f202 	lsl.w	r2, r1, r2
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d182      	bne.n	8003a74 <HAL_RCC_OscConfig+0xf2c>
 8003b6e:	e037      	b.n	8003be0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e02e      	b.n	8003be2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b84:	4b19      	ldr	r3, [pc, #100]	@ (8003bec <HAL_RCC_OscConfig+0x10a4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003b8c:	4b17      	ldr	r3, [pc, #92]	@ (8003bec <HAL_RCC_OscConfig+0x10a4>)
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003b98:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ba0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d117      	bne.n	8003bdc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003bac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003bb0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d10b      	bne.n	8003bdc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003bc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bc8:	f003 020f 	and.w	r2, r3, #15
 8003bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000

08003bf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b09e      	sub	sp, #120	@ 0x78
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e162      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b90      	ldr	r3, [pc, #576]	@ (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d910      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b8d      	ldr	r3, [pc, #564]	@ (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 0207 	bic.w	r2, r3, #7
 8003c1e:	498b      	ldr	r1, [pc, #556]	@ (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b89      	ldr	r3, [pc, #548]	@ (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e14a      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c44:	4b82      	ldr	r3, [pc, #520]	@ (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	497f      	ldr	r1, [pc, #508]	@ (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80dc 	beq.w	8003e1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d13c      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xf6>
 8003c6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c70:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7c:	fab3 f383 	clz	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xa6>
 8003c90:	4b6f      	ldr	r3, [pc, #444]	@ (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	e00f      	b.n	8003cb6 <HAL_RCC_ClockConfig+0xc6>
 8003c96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c9e:	fa93 f3a3 	rbit	r3, r3
 8003ca2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ca4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ca8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003caa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cac:	fa93 f3a3 	rbit	r3, r3
 8003cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cb2:	4b67      	ldr	r3, [pc, #412]	@ (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003cba:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cbe:	fa92 f2a2 	rbit	r2, r2
 8003cc2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003cc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003cc6:	fab2 f282 	clz	r2, r2
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	f042 0220 	orr.w	r2, r2, #32
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	f002 021f 	and.w	r2, r2, #31
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d17b      	bne.n	8003dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e0f3      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d13c      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x178>
 8003cee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cf2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d102      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x128>
 8003d12:	4b4f      	ldr	r3, [pc, #316]	@ (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	e00f      	b.n	8003d38 <HAL_RCC_ClockConfig+0x148>
 8003d18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2e:	fa93 f3a3 	rbit	r3, r3
 8003d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d34:	4b46      	ldr	r3, [pc, #280]	@ (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d3c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003d3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d40:	fa92 f2a2 	rbit	r2, r2
 8003d44:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d48:	fab2 f282 	clz	r2, r2
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	f042 0220 	orr.w	r2, r2, #32
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	f002 021f 	and.w	r2, r2, #31
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d13a      	bne.n	8003dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0b2      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d102      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x1a0>
 8003d8a:	4b31      	ldr	r3, [pc, #196]	@ (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	e00d      	b.n	8003dac <HAL_RCC_ClockConfig+0x1bc>
 8003d90:	2302      	movs	r3, #2
 8003d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	623b      	str	r3, [r7, #32]
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	4b29      	ldr	r3, [pc, #164]	@ (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	2202      	movs	r2, #2
 8003dae:	61ba      	str	r2, [r7, #24]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	fa92 f2a2 	rbit	r2, r2
 8003db6:	617a      	str	r2, [r7, #20]
  return result;
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	fab2 f282 	clz	r2, r2
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	f042 0220 	orr.w	r2, r2, #32
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	f002 021f 	and.w	r2, r2, #31
 8003dca:	2101      	movs	r1, #1
 8003dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e079      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dda:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	491a      	ldr	r1, [pc, #104]	@ (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dec:	f7fc fed4 	bl	8000b98 <HAL_GetTick>
 8003df0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df4:	f7fc fed0 	bl	8000b98 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e061      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	4b11      	ldr	r3, [pc, #68]	@ (8003e50 <HAL_RCC_ClockConfig+0x260>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 020c 	and.w	r2, r3, #12
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1eb      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d214      	bcs.n	8003e54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 0207 	bic.w	r2, r3, #7
 8003e32:	4906      	ldr	r1, [pc, #24]	@ (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b04      	ldr	r3, [pc, #16]	@ (8003e4c <HAL_RCC_ClockConfig+0x25c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e040      	b.n	8003ece <HAL_RCC_ClockConfig+0x2de>
 8003e4c:	40022000 	.word	0x40022000
 8003e50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e60:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	491a      	ldr	r1, [pc, #104]	@ (8003ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e7e:	4b16      	ldr	r3, [pc, #88]	@ (8003ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4912      	ldr	r1, [pc, #72]	@ (8003ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e92:	f000 f829 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8003e96:	4601      	mov	r1, r0
 8003e98:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ea0:	22f0      	movs	r2, #240	@ 0xf0
 8003ea2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	fa92 f2a2 	rbit	r2, r2
 8003eaa:	60fa      	str	r2, [r7, #12]
  return result;
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	fab2 f282 	clz	r2, r2
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	40d3      	lsrs	r3, r2
 8003eb6:	4a09      	ldr	r2, [pc, #36]	@ (8003edc <HAL_RCC_ClockConfig+0x2ec>)
 8003eb8:	5cd3      	ldrb	r3, [r2, r3]
 8003eba:	fa21 f303 	lsr.w	r3, r1, r3
 8003ebe:	4a08      	ldr	r2, [pc, #32]	@ (8003ee0 <HAL_RCC_ClockConfig+0x2f0>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ec2:	4b08      	ldr	r3, [pc, #32]	@ (8003ee4 <HAL_RCC_ClockConfig+0x2f4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fc fe22 	bl	8000b10 <HAL_InitTick>
  
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3778      	adds	r7, #120	@ 0x78
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	0800a854 	.word	0x0800a854
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	20000004 	.word	0x20000004

08003ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003f02:	4b1f      	ldr	r3, [pc, #124]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d002      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x30>
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x36>
 8003f16:	e029      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f18:	4b1a      	ldr	r3, [pc, #104]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f1a:	613b      	str	r3, [r7, #16]
      break;
 8003f1c:	e029      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	0c9b      	lsrs	r3, r3, #18
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	4a18      	ldr	r2, [pc, #96]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f28:	5cd3      	ldrb	r3, [r2, r3]
 8003f2a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003f2c:	4b14      	ldr	r3, [pc, #80]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	4a15      	ldr	r2, [pc, #84]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f36:	5cd3      	ldrb	r3, [r2, r3]
 8003f38:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f44:	4a0f      	ldr	r2, [pc, #60]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e007      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f56:	4a0b      	ldr	r2, [pc, #44]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	fb02 f303 	mul.w	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	613b      	str	r3, [r7, #16]
      break;
 8003f6a:	e002      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f6e:	613b      	str	r3, [r7, #16]
      break;
 8003f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f72:	693b      	ldr	r3, [r7, #16]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	40021000 	.word	0x40021000
 8003f84:	007a1200 	.word	0x007a1200
 8003f88:	0800a86c 	.word	0x0800a86c
 8003f8c:	0800a87c 	.word	0x0800a87c

08003f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f94:	4b03      	ldr	r3, [pc, #12]	@ (8003fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20000000 	.word	0x20000000

08003fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003fae:	f7ff ffef 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fb2:	4601      	mov	r1, r0
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fbc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003fc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	fa92 f2a2 	rbit	r2, r2
 8003fc8:	603a      	str	r2, [r7, #0]
  return result;
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	fab2 f282 	clz	r2, r2
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	40d3      	lsrs	r3, r2
 8003fd4:	4a04      	ldr	r2, [pc, #16]	@ (8003fe8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003fd6:	5cd3      	ldrb	r3, [r2, r3]
 8003fd8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	0800a864 	.word	0x0800a864

08003fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ff2:	f7ff ffcd 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003ff6:	4601      	mov	r1, r0
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004000:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004004:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	fa92 f2a2 	rbit	r2, r2
 800400c:	603a      	str	r2, [r7, #0]
  return result;
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	fab2 f282 	clz	r2, r2
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	40d3      	lsrs	r3, r2
 8004018:	4a04      	ldr	r2, [pc, #16]	@ (800402c <HAL_RCC_GetPCLK2Freq+0x40>)
 800401a:	5cd3      	ldrb	r3, [r2, r3]
 800401c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40021000 	.word	0x40021000
 800402c:	0800a864 	.word	0x0800a864

08004030 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b092      	sub	sp, #72	@ 0x48
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004040:	2300      	movs	r3, #0
 8004042:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80d4 	beq.w	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004054:	4b4e      	ldr	r3, [pc, #312]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10e      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004060:	4b4b      	ldr	r3, [pc, #300]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	4a4a      	ldr	r2, [pc, #296]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800406a:	61d3      	str	r3, [r2, #28]
 800406c:	4b48      	ldr	r3, [pc, #288]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004078:	2301      	movs	r3, #1
 800407a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b45      	ldr	r3, [pc, #276]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d118      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408a:	4b42      	ldr	r3, [pc, #264]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a41      	ldr	r2, [pc, #260]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004094:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004096:	f7fc fd7f 	bl	8000b98 <HAL_GetTick>
 800409a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	e008      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409e:	f7fc fd7b 	bl	8000b98 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b64      	cmp	r3, #100	@ 0x64
 80040aa:	d901      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e1d6      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	4b38      	ldr	r3, [pc, #224]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040bc:	4b34      	ldr	r3, [pc, #208]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8084 	beq.w	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040d8:	429a      	cmp	r2, r3
 80040da:	d07c      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80040ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80040f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040f6:	fab3 f383 	clz	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b26      	ldr	r3, [pc, #152]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	461a      	mov	r2, r3
 8004106:	2301      	movs	r3, #1
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800410e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800411a:	fab3 f383 	clz	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	461a      	mov	r2, r3
 800412a:	2300      	movs	r3, #0
 800412c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800412e:	4a18      	ldr	r2, [pc, #96]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004132:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d04b      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413e:	f7fc fd2b 	bl	8000b98 <HAL_GetTick>
 8004142:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004144:	e00a      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fc fd27 	bl	8000b98 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004154:	4293      	cmp	r3, r2
 8004156:	d901      	bls.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e180      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800415c:	2302      	movs	r3, #2
 800415e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
 8004168:	2302      	movs	r3, #2
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	fa93 f3a3 	rbit	r3, r3
 8004172:	61fb      	str	r3, [r7, #28]
  return result;
 8004174:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	b2db      	uxtb	r3, r3
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d108      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800418a:	4b01      	ldr	r3, [pc, #4]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	e00d      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004190:	40021000 	.word	0x40021000
 8004194:	40007000 	.word	0x40007000
 8004198:	10908100 	.word	0x10908100
 800419c:	2302      	movs	r3, #2
 800419e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	4b9a      	ldr	r3, [pc, #616]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	2202      	movs	r2, #2
 80041ae:	613a      	str	r2, [r7, #16]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	fa92 f2a2 	rbit	r2, r2
 80041b6:	60fa      	str	r2, [r7, #12]
  return result;
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	fab2 f282 	clz	r2, r2
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	f002 021f 	and.w	r2, r2, #31
 80041ca:	2101      	movs	r1, #1
 80041cc:	fa01 f202 	lsl.w	r2, r1, r2
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0b7      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041d6:	4b8f      	ldr	r3, [pc, #572]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	498c      	ldr	r1, [pc, #560]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d105      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f0:	4b88      	ldr	r3, [pc, #544]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	4a87      	ldr	r2, [pc, #540]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004208:	4b82      	ldr	r3, [pc, #520]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420c:	f023 0203 	bic.w	r2, r3, #3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	497f      	ldr	r1, [pc, #508]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004216:	4313      	orrs	r3, r2
 8004218:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004226:	4b7b      	ldr	r3, [pc, #492]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	4978      	ldr	r1, [pc, #480]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004234:	4313      	orrs	r3, r2
 8004236:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004244:	4b73      	ldr	r3, [pc, #460]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004248:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	4970      	ldr	r1, [pc, #448]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d008      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004262:	4b6c      	ldr	r3, [pc, #432]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004266:	f023 0210 	bic.w	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	4969      	ldr	r1, [pc, #420]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004270:	4313      	orrs	r3, r2
 8004272:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004280:	4b64      	ldr	r3, [pc, #400]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428c:	4961      	ldr	r1, [pc, #388]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800429e:	4b5d      	ldr	r3, [pc, #372]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	f023 0220 	bic.w	r2, r3, #32
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	495a      	ldr	r1, [pc, #360]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042bc:	4b55      	ldr	r3, [pc, #340]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	4952      	ldr	r1, [pc, #328]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042da:	4b4e      	ldr	r3, [pc, #312]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	494b      	ldr	r1, [pc, #300]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042f8:	4b46      	ldr	r3, [pc, #280]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80042fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	4943      	ldr	r1, [pc, #268]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004306:	4313      	orrs	r3, r2
 8004308:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004312:	2b00      	cmp	r3, #0
 8004314:	d008      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004316:	4b3f      	ldr	r3, [pc, #252]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004322:	493c      	ldr	r1, [pc, #240]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004324:	4313      	orrs	r3, r2
 8004326:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004334:	4b37      	ldr	r3, [pc, #220]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004338:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004340:	4934      	ldr	r1, [pc, #208]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004352:	4b30      	ldr	r3, [pc, #192]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004356:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435e:	492d      	ldr	r1, [pc, #180]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004370:	4b28      	ldr	r3, [pc, #160]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437c:	4925      	ldr	r1, [pc, #148]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800437e:	4313      	orrs	r3, r2
 8004380:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800438e:	4b21      	ldr	r3, [pc, #132]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004392:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	491e      	ldr	r1, [pc, #120]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800439c:	4313      	orrs	r3, r2
 800439e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80043ac:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b8:	4916      	ldr	r1, [pc, #88]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80043ca:	4b12      	ldr	r3, [pc, #72]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d6:	490f      	ldr	r1, [pc, #60]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80043e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f4:	4907      	ldr	r1, [pc, #28]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004406:	4b03      	ldr	r3, [pc, #12]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	e002      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800441a:	4913      	ldr	r1, [pc, #76]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800441c:	4313      	orrs	r3, r2
 800441e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800442c:	4b0e      	ldr	r3, [pc, #56]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004438:	490b      	ldr	r1, [pc, #44]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800443a:	4313      	orrs	r3, r2
 800443c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800444a:	4b07      	ldr	r3, [pc, #28]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004456:	4904      	ldr	r1, [pc, #16]	@ (8004468 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004458:	4313      	orrs	r3, r2
 800445a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3748      	adds	r7, #72	@ 0x48
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000

0800446c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e09d      	b.n	80045ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	2b00      	cmp	r3, #0
 8004484:	d108      	bne.n	8004498 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800448e:	d009      	beq.n	80044a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	61da      	str	r2, [r3, #28]
 8004496:	e005      	b.n	80044a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fb ff84 	bl	80003cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044e4:	d902      	bls.n	80044ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e002      	b.n	80044f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80044fa:	d007      	beq.n	800450c <HAL_SPI_Init+0xa0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004504:	d002      	beq.n	800450c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454e:	ea42 0103 	orr.w	r1, r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004556:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	0c1b      	lsrs	r3, r3, #16
 8004568:	f003 0204 	and.w	r2, r3, #4
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004588:	ea42 0103 	orr.w	r1, r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e049      	b.n	8004668 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fc f90d 	bl	8000808 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f000 f949 	bl	8004898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800468a:	2302      	movs	r3, #2
 800468c:	e0ff      	b.n	800488e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b14      	cmp	r3, #20
 800469a:	f200 80f0 	bhi.w	800487e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800469e:	a201      	add	r2, pc, #4	@ (adr r2, 80046a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	0800487f 	.word	0x0800487f
 80046ac:	0800487f 	.word	0x0800487f
 80046b0:	0800487f 	.word	0x0800487f
 80046b4:	08004739 	.word	0x08004739
 80046b8:	0800487f 	.word	0x0800487f
 80046bc:	0800487f 	.word	0x0800487f
 80046c0:	0800487f 	.word	0x0800487f
 80046c4:	0800477b 	.word	0x0800477b
 80046c8:	0800487f 	.word	0x0800487f
 80046cc:	0800487f 	.word	0x0800487f
 80046d0:	0800487f 	.word	0x0800487f
 80046d4:	080047bb 	.word	0x080047bb
 80046d8:	0800487f 	.word	0x0800487f
 80046dc:	0800487f 	.word	0x0800487f
 80046e0:	0800487f 	.word	0x0800487f
 80046e4:	080047fd 	.word	0x080047fd
 80046e8:	0800487f 	.word	0x0800487f
 80046ec:	0800487f 	.word	0x0800487f
 80046f0:	0800487f 	.word	0x0800487f
 80046f4:	0800483d 	.word	0x0800483d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 f974 	bl	80049ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0208 	orr.w	r2, r2, #8
 8004712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0204 	bic.w	r2, r2, #4
 8004722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6999      	ldr	r1, [r3, #24]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	619a      	str	r2, [r3, #24]
      break;
 8004736:	e0a5      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f9ee 	bl	8004b20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6999      	ldr	r1, [r3, #24]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	021a      	lsls	r2, r3, #8
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	619a      	str	r2, [r3, #24]
      break;
 8004778:	e084      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fa61 	bl	8004c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0208 	orr.w	r2, r2, #8
 8004794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0204 	bic.w	r2, r2, #4
 80047a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69d9      	ldr	r1, [r3, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	61da      	str	r2, [r3, #28]
      break;
 80047b8:	e064      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fad3 	bl	8004d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69d9      	ldr	r1, [r3, #28]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	021a      	lsls	r2, r3, #8
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	61da      	str	r2, [r3, #28]
      break;
 80047fa:	e043      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fb22 	bl	8004e4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0208 	orr.w	r2, r2, #8
 8004816:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0204 	bic.w	r2, r2, #4
 8004826:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800483a:	e023      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fb6c 	bl	8004f20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004856:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004866:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	021a      	lsls	r2, r3, #8
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800487c:	e002      	b.n	8004884 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	75fb      	strb	r3, [r7, #23]
      break;
 8004882:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800488c:	7dfb      	ldrb	r3, [r7, #23]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop

08004898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a48      	ldr	r2, [pc, #288]	@ (80049cc <TIM_Base_SetConfig+0x134>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d013      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b6:	d00f      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a45      	ldr	r2, [pc, #276]	@ (80049d0 <TIM_Base_SetConfig+0x138>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00b      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a44      	ldr	r2, [pc, #272]	@ (80049d4 <TIM_Base_SetConfig+0x13c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d007      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a43      	ldr	r2, [pc, #268]	@ (80049d8 <TIM_Base_SetConfig+0x140>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a42      	ldr	r2, [pc, #264]	@ (80049dc <TIM_Base_SetConfig+0x144>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d108      	bne.n	80048ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a37      	ldr	r2, [pc, #220]	@ (80049cc <TIM_Base_SetConfig+0x134>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01f      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f8:	d01b      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a34      	ldr	r2, [pc, #208]	@ (80049d0 <TIM_Base_SetConfig+0x138>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d017      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a33      	ldr	r2, [pc, #204]	@ (80049d4 <TIM_Base_SetConfig+0x13c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a32      	ldr	r2, [pc, #200]	@ (80049d8 <TIM_Base_SetConfig+0x140>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00f      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a32      	ldr	r2, [pc, #200]	@ (80049e0 <TIM_Base_SetConfig+0x148>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00b      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a31      	ldr	r2, [pc, #196]	@ (80049e4 <TIM_Base_SetConfig+0x14c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d007      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a30      	ldr	r2, [pc, #192]	@ (80049e8 <TIM_Base_SetConfig+0x150>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a2b      	ldr	r2, [pc, #172]	@ (80049dc <TIM_Base_SetConfig+0x144>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a18      	ldr	r2, [pc, #96]	@ (80049cc <TIM_Base_SetConfig+0x134>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d013      	beq.n	8004998 <TIM_Base_SetConfig+0x100>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a19      	ldr	r2, [pc, #100]	@ (80049d8 <TIM_Base_SetConfig+0x140>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00f      	beq.n	8004998 <TIM_Base_SetConfig+0x100>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a19      	ldr	r2, [pc, #100]	@ (80049e0 <TIM_Base_SetConfig+0x148>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00b      	beq.n	8004998 <TIM_Base_SetConfig+0x100>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a18      	ldr	r2, [pc, #96]	@ (80049e4 <TIM_Base_SetConfig+0x14c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d007      	beq.n	8004998 <TIM_Base_SetConfig+0x100>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a17      	ldr	r2, [pc, #92]	@ (80049e8 <TIM_Base_SetConfig+0x150>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_Base_SetConfig+0x100>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a12      	ldr	r2, [pc, #72]	@ (80049dc <TIM_Base_SetConfig+0x144>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d103      	bne.n	80049a0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d105      	bne.n	80049be <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f023 0201 	bic.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	611a      	str	r2, [r3, #16]
  }
}
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40012c00 	.word	0x40012c00
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40000800 	.word	0x40000800
 80049d8:	40013400 	.word	0x40013400
 80049dc:	40015000 	.word	0x40015000
 80049e0:	40014000 	.word	0x40014000
 80049e4:	40014400 	.word	0x40014400
 80049e8:	40014800 	.word	0x40014800

080049ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f023 0201 	bic.w	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f023 0302 	bic.w	r3, r3, #2
 8004a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a30      	ldr	r2, [pc, #192]	@ (8004b08 <TIM_OC1_SetConfig+0x11c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d013      	beq.n	8004a74 <TIM_OC1_SetConfig+0x88>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b0c <TIM_OC1_SetConfig+0x120>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00f      	beq.n	8004a74 <TIM_OC1_SetConfig+0x88>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a2e      	ldr	r2, [pc, #184]	@ (8004b10 <TIM_OC1_SetConfig+0x124>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00b      	beq.n	8004a74 <TIM_OC1_SetConfig+0x88>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004b14 <TIM_OC1_SetConfig+0x128>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d007      	beq.n	8004a74 <TIM_OC1_SetConfig+0x88>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a2c      	ldr	r2, [pc, #176]	@ (8004b18 <TIM_OC1_SetConfig+0x12c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <TIM_OC1_SetConfig+0x88>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b1c <TIM_OC1_SetConfig+0x130>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d10c      	bne.n	8004a8e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 0308 	bic.w	r3, r3, #8
 8004a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f023 0304 	bic.w	r3, r3, #4
 8004a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a1d      	ldr	r2, [pc, #116]	@ (8004b08 <TIM_OC1_SetConfig+0x11c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <TIM_OC1_SetConfig+0xd2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a1c      	ldr	r2, [pc, #112]	@ (8004b0c <TIM_OC1_SetConfig+0x120>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00f      	beq.n	8004abe <TIM_OC1_SetConfig+0xd2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b10 <TIM_OC1_SetConfig+0x124>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <TIM_OC1_SetConfig+0xd2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b14 <TIM_OC1_SetConfig+0x128>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d007      	beq.n	8004abe <TIM_OC1_SetConfig+0xd2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a19      	ldr	r2, [pc, #100]	@ (8004b18 <TIM_OC1_SetConfig+0x12c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_OC1_SetConfig+0xd2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a18      	ldr	r2, [pc, #96]	@ (8004b1c <TIM_OC1_SetConfig+0x130>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d111      	bne.n	8004ae2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	621a      	str	r2, [r3, #32]
}
 8004afc:	bf00      	nop
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	40012c00 	.word	0x40012c00
 8004b0c:	40013400 	.word	0x40013400
 8004b10:	40014000 	.word	0x40014000
 8004b14:	40014400 	.word	0x40014400
 8004b18:	40014800 	.word	0x40014800
 8004b1c:	40015000 	.word	0x40015000

08004b20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	f023 0210 	bic.w	r2, r3, #16
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f023 0320 	bic.w	r3, r3, #32
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004c30 <TIM_OC2_SetConfig+0x110>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <TIM_OC2_SetConfig+0x74>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a2b      	ldr	r2, [pc, #172]	@ (8004c34 <TIM_OC2_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_OC2_SetConfig+0x74>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8004c38 <TIM_OC2_SetConfig+0x118>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d10d      	bne.n	8004bb0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8004c30 <TIM_OC2_SetConfig+0x110>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d013      	beq.n	8004be0 <TIM_OC2_SetConfig+0xc0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a1e      	ldr	r2, [pc, #120]	@ (8004c34 <TIM_OC2_SetConfig+0x114>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00f      	beq.n	8004be0 <TIM_OC2_SetConfig+0xc0>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c3c <TIM_OC2_SetConfig+0x11c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00b      	beq.n	8004be0 <TIM_OC2_SetConfig+0xc0>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a1d      	ldr	r2, [pc, #116]	@ (8004c40 <TIM_OC2_SetConfig+0x120>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d007      	beq.n	8004be0 <TIM_OC2_SetConfig+0xc0>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c44 <TIM_OC2_SetConfig+0x124>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_OC2_SetConfig+0xc0>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a17      	ldr	r2, [pc, #92]	@ (8004c38 <TIM_OC2_SetConfig+0x118>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d113      	bne.n	8004c08 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004be6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bee:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	bf00      	nop
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40013400 	.word	0x40013400
 8004c38:	40015000 	.word	0x40015000
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40014400 	.word	0x40014400
 8004c44:	40014800 	.word	0x40014800

08004c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0303 	bic.w	r3, r3, #3
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8004d54 <TIM_OC3_SetConfig+0x10c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <TIM_OC3_SetConfig+0x72>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a2a      	ldr	r2, [pc, #168]	@ (8004d58 <TIM_OC3_SetConfig+0x110>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_OC3_SetConfig+0x72>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a29      	ldr	r2, [pc, #164]	@ (8004d5c <TIM_OC3_SetConfig+0x114>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d10d      	bne.n	8004cd6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cd4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d54 <TIM_OC3_SetConfig+0x10c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <TIM_OC3_SetConfig+0xbe>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d58 <TIM_OC3_SetConfig+0x110>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00f      	beq.n	8004d06 <TIM_OC3_SetConfig+0xbe>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d60 <TIM_OC3_SetConfig+0x118>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00b      	beq.n	8004d06 <TIM_OC3_SetConfig+0xbe>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8004d64 <TIM_OC3_SetConfig+0x11c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d007      	beq.n	8004d06 <TIM_OC3_SetConfig+0xbe>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d68 <TIM_OC3_SetConfig+0x120>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d003      	beq.n	8004d06 <TIM_OC3_SetConfig+0xbe>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a16      	ldr	r2, [pc, #88]	@ (8004d5c <TIM_OC3_SetConfig+0x114>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d113      	bne.n	8004d2e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	621a      	str	r2, [r3, #32]
}
 8004d48:	bf00      	nop
 8004d4a:	371c      	adds	r7, #28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40013400 	.word	0x40013400
 8004d5c:	40015000 	.word	0x40015000
 8004d60:	40014000 	.word	0x40014000
 8004d64:	40014400 	.word	0x40014400
 8004d68:	40014800 	.word	0x40014800

08004d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	031b      	lsls	r3, r3, #12
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a1a      	ldr	r2, [pc, #104]	@ (8004e34 <TIM_OC4_SetConfig+0xc8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d013      	beq.n	8004df8 <TIM_OC4_SetConfig+0x8c>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a19      	ldr	r2, [pc, #100]	@ (8004e38 <TIM_OC4_SetConfig+0xcc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00f      	beq.n	8004df8 <TIM_OC4_SetConfig+0x8c>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a18      	ldr	r2, [pc, #96]	@ (8004e3c <TIM_OC4_SetConfig+0xd0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00b      	beq.n	8004df8 <TIM_OC4_SetConfig+0x8c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a17      	ldr	r2, [pc, #92]	@ (8004e40 <TIM_OC4_SetConfig+0xd4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d007      	beq.n	8004df8 <TIM_OC4_SetConfig+0x8c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a16      	ldr	r2, [pc, #88]	@ (8004e44 <TIM_OC4_SetConfig+0xd8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <TIM_OC4_SetConfig+0x8c>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a15      	ldr	r2, [pc, #84]	@ (8004e48 <TIM_OC4_SetConfig+0xdc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d109      	bne.n	8004e0c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	019b      	lsls	r3, r3, #6
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40012c00 	.word	0x40012c00
 8004e38:	40013400 	.word	0x40013400
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	40014400 	.word	0x40014400
 8004e44:	40014800 	.word	0x40014800
 8004e48:	40015000 	.word	0x40015000

08004e4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004e90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	041b      	lsls	r3, r3, #16
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a19      	ldr	r2, [pc, #100]	@ (8004f08 <TIM_OC5_SetConfig+0xbc>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <TIM_OC5_SetConfig+0x82>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a18      	ldr	r2, [pc, #96]	@ (8004f0c <TIM_OC5_SetConfig+0xc0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00f      	beq.n	8004ece <TIM_OC5_SetConfig+0x82>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a17      	ldr	r2, [pc, #92]	@ (8004f10 <TIM_OC5_SetConfig+0xc4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <TIM_OC5_SetConfig+0x82>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a16      	ldr	r2, [pc, #88]	@ (8004f14 <TIM_OC5_SetConfig+0xc8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <TIM_OC5_SetConfig+0x82>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a15      	ldr	r2, [pc, #84]	@ (8004f18 <TIM_OC5_SetConfig+0xcc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_OC5_SetConfig+0x82>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a14      	ldr	r2, [pc, #80]	@ (8004f1c <TIM_OC5_SetConfig+0xd0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d109      	bne.n	8004ee2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	621a      	str	r2, [r3, #32]
}
 8004efc:	bf00      	nop
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40013400 	.word	0x40013400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40014400 	.word	0x40014400
 8004f18:	40014800 	.word	0x40014800
 8004f1c:	40015000 	.word	0x40015000

08004f20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	051b      	lsls	r3, r3, #20
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe0 <TIM_OC6_SetConfig+0xc0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d013      	beq.n	8004fa4 <TIM_OC6_SetConfig+0x84>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a19      	ldr	r2, [pc, #100]	@ (8004fe4 <TIM_OC6_SetConfig+0xc4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00f      	beq.n	8004fa4 <TIM_OC6_SetConfig+0x84>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a18      	ldr	r2, [pc, #96]	@ (8004fe8 <TIM_OC6_SetConfig+0xc8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00b      	beq.n	8004fa4 <TIM_OC6_SetConfig+0x84>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a17      	ldr	r2, [pc, #92]	@ (8004fec <TIM_OC6_SetConfig+0xcc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d007      	beq.n	8004fa4 <TIM_OC6_SetConfig+0x84>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a16      	ldr	r2, [pc, #88]	@ (8004ff0 <TIM_OC6_SetConfig+0xd0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d003      	beq.n	8004fa4 <TIM_OC6_SetConfig+0x84>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a15      	ldr	r2, [pc, #84]	@ (8004ff4 <TIM_OC6_SetConfig+0xd4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d109      	bne.n	8004fb8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004faa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	029b      	lsls	r3, r3, #10
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40013400 	.word	0x40013400
 8004fe8:	40014000 	.word	0x40014000
 8004fec:	40014400 	.word	0x40014400
 8004ff0:	40014800 	.word	0x40014800
 8004ff4:	40015000 	.word	0x40015000

08004ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800500c:	2302      	movs	r3, #2
 800500e:	e06d      	b.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a30      	ldr	r2, [pc, #192]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a2f      	ldr	r2, [pc, #188]	@ (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a2d      	ldr	r2, [pc, #180]	@ (8005100 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d108      	bne.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005054:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1e      	ldr	r2, [pc, #120]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d01d      	beq.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800508c:	d018      	beq.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1c      	ldr	r2, [pc, #112]	@ (8005104 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1a      	ldr	r2, [pc, #104]	@ (8005108 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a15      	ldr	r2, [pc, #84]	@ (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a16      	ldr	r2, [pc, #88]	@ (800510c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a11      	ldr	r2, [pc, #68]	@ (8005100 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d10c      	bne.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40012c00 	.word	0x40012c00
 80050fc:	40013400 	.word	0x40013400
 8005100:	40015000 	.word	0x40015000
 8005104:	40000400 	.word	0x40000400
 8005108:	40000800 	.word	0x40000800
 800510c:	40014000 	.word	0x40014000

08005110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005128:	2302      	movs	r3, #2
 800512a:	e06a      	b.n	8005202 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a19      	ldr	r2, [pc, #100]	@ (8005210 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d009      	beq.n	80051c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a17      	ldr	r2, [pc, #92]	@ (8005214 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a16      	ldr	r2, [pc, #88]	@ (8005218 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d115      	bne.n	80051f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ce:	051b      	lsls	r3, r3, #20
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40013400 	.word	0x40013400
 8005218:	40015000 	.word	0x40015000

0800521c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e040      	b.n	80052b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fb fbdc 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2224      	movs	r2, #36	@ 0x24
 8005248:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0201 	bic.w	r2, r2, #1
 8005258:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fd02 	bl	8005c6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fb2b 	bl	80058c4 <UART_SetConfig>
 800526e:	4603      	mov	r3, r0
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e01b      	b.n	80052b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005286:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005296:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fd81 	bl	8005db0 <UART_CheckIdleState>
 80052ae:	4603      	mov	r3, r0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b0ba      	sub	sp, #232	@ 0xe8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80052e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80052e6:	4013      	ands	r3, r2
 80052e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80052ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d115      	bne.n	8005320 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80052f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00f      	beq.n	8005320 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 82ab 	beq.w	800586c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	4798      	blx	r3
      }
      return;
 800531e:	e2a5      	b.n	800586c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005320:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8117 	beq.w	8005558 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800532a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005336:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800533a:	4b85      	ldr	r3, [pc, #532]	@ (8005550 <HAL_UART_IRQHandler+0x298>)
 800533c:	4013      	ands	r3, r2
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 810a 	beq.w	8005558 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d011      	beq.n	8005374 <HAL_UART_IRQHandler+0xbc>
 8005350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00b      	beq.n	8005374 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2201      	movs	r2, #1
 8005362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800536a:	f043 0201 	orr.w	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d011      	beq.n	80053a4 <HAL_UART_IRQHandler+0xec>
 8005380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00b      	beq.n	80053a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2202      	movs	r2, #2
 8005392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800539a:	f043 0204 	orr.w	r2, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d011      	beq.n	80053d4 <HAL_UART_IRQHandler+0x11c>
 80053b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00b      	beq.n	80053d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2204      	movs	r2, #4
 80053c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ca:	f043 0202 	orr.w	r2, r3, #2
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d017      	beq.n	8005410 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d105      	bne.n	80053f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00b      	beq.n	8005410 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2208      	movs	r2, #8
 80053fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005406:	f043 0208 	orr.w	r2, r3, #8
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005418:	2b00      	cmp	r3, #0
 800541a:	d012      	beq.n	8005442 <HAL_UART_IRQHandler+0x18a>
 800541c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005420:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00c      	beq.n	8005442 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005430:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8211 	beq.w	8005870 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800545a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800547c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548a:	2b40      	cmp	r3, #64	@ 0x40
 800548c:	d005      	beq.n	800549a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800548e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005492:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005496:	2b00      	cmp	r3, #0
 8005498:	d04f      	beq.n	800553a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fd9d 	bl	8005fda <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054aa:	2b40      	cmp	r3, #64	@ 0x40
 80054ac:	d141      	bne.n	8005532 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80054e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1d9      	bne.n	80054ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d013      	beq.n	800552a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005506:	4a13      	ldr	r2, [pc, #76]	@ (8005554 <HAL_UART_IRQHandler+0x29c>)
 8005508:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800550e:	4618      	mov	r0, r3
 8005510:	f7fb fc9d 	bl	8000e4e <HAL_DMA_Abort_IT>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d017      	beq.n	800554a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005524:	4610      	mov	r0, r2
 8005526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	e00f      	b.n	800554a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f9b4 	bl	8005898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	e00b      	b.n	800554a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f9b0 	bl	8005898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005538:	e007      	b.n	800554a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f9ac 	bl	8005898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005548:	e192      	b.n	8005870 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554a:	bf00      	nop
    return;
 800554c:	e190      	b.n	8005870 <HAL_UART_IRQHandler+0x5b8>
 800554e:	bf00      	nop
 8005550:	04000120 	.word	0x04000120
 8005554:	080060a3 	.word	0x080060a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800555c:	2b01      	cmp	r3, #1
 800555e:	f040 814b 	bne.w	80057f8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8144 	beq.w	80057f8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 813d 	beq.w	80057f8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2210      	movs	r2, #16
 8005584:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005590:	2b40      	cmp	r3, #64	@ 0x40
 8005592:	f040 80b5 	bne.w	8005700 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 8164 	beq.w	8005874 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80055b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055b6:	429a      	cmp	r2, r3
 80055b8:	f080 815c 	bcs.w	8005874 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	f000 8086 	beq.w	80056de <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005600:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005608:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005614:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1da      	bne.n	80055d2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800562c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3308      	adds	r3, #8
 800563c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005640:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005644:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005648:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005652:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e1      	bne.n	800561c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3308      	adds	r3, #8
 800565e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800566a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800566e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3308      	adds	r3, #8
 8005678:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800567c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800567e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005682:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800568a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e3      	bne.n	8005658 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056ae:	f023 0310 	bic.w	r3, r3, #16
 80056b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056c2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056c8:	e841 2300 	strex	r3, r2, [r1]
 80056cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e4      	bne.n	800569e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fb fb7a 	bl	8000dd2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f8d7 	bl	80058ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056fe:	e0b9      	b.n	8005874 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800570c:	b29b      	uxth	r3, r3
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80ab 	beq.w	8005878 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 80a6 	beq.w	8005878 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800573a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800573c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005740:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800574e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005750:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005754:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800575c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e4      	bne.n	800572c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3308      	adds	r3, #8
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	623b      	str	r3, [r7, #32]
   return(result);
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3308      	adds	r3, #8
 8005782:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005786:	633a      	str	r2, [r7, #48]	@ 0x30
 8005788:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800578c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e3      	bne.n	8005762 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0310 	bic.w	r3, r3, #16
 80057c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057d0:	61fb      	str	r3, [r7, #28]
 80057d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	69b9      	ldr	r1, [r7, #24]
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	617b      	str	r3, [r7, #20]
   return(result);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e4      	bne.n	80057ae <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f85b 	bl	80058ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057f6:	e03f      	b.n	8005878 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00e      	beq.n	8005822 <HAL_UART_IRQHandler+0x56a>
 8005804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fc81 	bl	8006122 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005820:	e02d      	b.n	800587e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00e      	beq.n	800584c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800582e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d01c      	beq.n	800587c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4798      	blx	r3
    }
    return;
 800584a:	e017      	b.n	800587c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800584c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d012      	beq.n	800587e <HAL_UART_IRQHandler+0x5c6>
 8005858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800585c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00c      	beq.n	800587e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fc32 	bl	80060ce <UART_EndTransmit_IT>
    return;
 800586a:	e008      	b.n	800587e <HAL_UART_IRQHandler+0x5c6>
      return;
 800586c:	bf00      	nop
 800586e:	e006      	b.n	800587e <HAL_UART_IRQHandler+0x5c6>
    return;
 8005870:	bf00      	nop
 8005872:	e004      	b.n	800587e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005874:	bf00      	nop
 8005876:	e002      	b.n	800587e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005878:	bf00      	nop
 800587a:	e000      	b.n	800587e <HAL_UART_IRQHandler+0x5c6>
    return;
 800587c:	bf00      	nop
  }

}
 800587e:	37e8      	adds	r7, #232	@ 0xe8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	460b      	mov	r3, r1
 80058b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4b92      	ldr	r3, [pc, #584]	@ (8005b38 <UART_SetConfig+0x274>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	6979      	ldr	r1, [r7, #20]
 80058f8:	430b      	orrs	r3, r1
 80058fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	430a      	orrs	r2, r1
 8005934:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a80      	ldr	r2, [pc, #512]	@ (8005b3c <UART_SetConfig+0x278>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d120      	bne.n	8005982 <UART_SetConfig+0xbe>
 8005940:	4b7f      	ldr	r3, [pc, #508]	@ (8005b40 <UART_SetConfig+0x27c>)
 8005942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	2b03      	cmp	r3, #3
 800594a:	d817      	bhi.n	800597c <UART_SetConfig+0xb8>
 800594c:	a201      	add	r2, pc, #4	@ (adr r2, 8005954 <UART_SetConfig+0x90>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	08005965 	.word	0x08005965
 8005958:	08005971 	.word	0x08005971
 800595c:	08005977 	.word	0x08005977
 8005960:	0800596b 	.word	0x0800596b
 8005964:	2301      	movs	r3, #1
 8005966:	77fb      	strb	r3, [r7, #31]
 8005968:	e0b5      	b.n	8005ad6 <UART_SetConfig+0x212>
 800596a:	2302      	movs	r3, #2
 800596c:	77fb      	strb	r3, [r7, #31]
 800596e:	e0b2      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005970:	2304      	movs	r3, #4
 8005972:	77fb      	strb	r3, [r7, #31]
 8005974:	e0af      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005976:	2308      	movs	r3, #8
 8005978:	77fb      	strb	r3, [r7, #31]
 800597a:	e0ac      	b.n	8005ad6 <UART_SetConfig+0x212>
 800597c:	2310      	movs	r3, #16
 800597e:	77fb      	strb	r3, [r7, #31]
 8005980:	e0a9      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a6f      	ldr	r2, [pc, #444]	@ (8005b44 <UART_SetConfig+0x280>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d124      	bne.n	80059d6 <UART_SetConfig+0x112>
 800598c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b40 <UART_SetConfig+0x27c>)
 800598e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005990:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005994:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005998:	d011      	beq.n	80059be <UART_SetConfig+0xfa>
 800599a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800599e:	d817      	bhi.n	80059d0 <UART_SetConfig+0x10c>
 80059a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059a4:	d011      	beq.n	80059ca <UART_SetConfig+0x106>
 80059a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059aa:	d811      	bhi.n	80059d0 <UART_SetConfig+0x10c>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <UART_SetConfig+0xf4>
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b4:	d006      	beq.n	80059c4 <UART_SetConfig+0x100>
 80059b6:	e00b      	b.n	80059d0 <UART_SetConfig+0x10c>
 80059b8:	2300      	movs	r3, #0
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e08b      	b.n	8005ad6 <UART_SetConfig+0x212>
 80059be:	2302      	movs	r3, #2
 80059c0:	77fb      	strb	r3, [r7, #31]
 80059c2:	e088      	b.n	8005ad6 <UART_SetConfig+0x212>
 80059c4:	2304      	movs	r3, #4
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	e085      	b.n	8005ad6 <UART_SetConfig+0x212>
 80059ca:	2308      	movs	r3, #8
 80059cc:	77fb      	strb	r3, [r7, #31]
 80059ce:	e082      	b.n	8005ad6 <UART_SetConfig+0x212>
 80059d0:	2310      	movs	r3, #16
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e07f      	b.n	8005ad6 <UART_SetConfig+0x212>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a5b      	ldr	r2, [pc, #364]	@ (8005b48 <UART_SetConfig+0x284>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d124      	bne.n	8005a2a <UART_SetConfig+0x166>
 80059e0:	4b57      	ldr	r3, [pc, #348]	@ (8005b40 <UART_SetConfig+0x27c>)
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80059e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80059ec:	d011      	beq.n	8005a12 <UART_SetConfig+0x14e>
 80059ee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80059f2:	d817      	bhi.n	8005a24 <UART_SetConfig+0x160>
 80059f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059f8:	d011      	beq.n	8005a1e <UART_SetConfig+0x15a>
 80059fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059fe:	d811      	bhi.n	8005a24 <UART_SetConfig+0x160>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <UART_SetConfig+0x148>
 8005a04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a08:	d006      	beq.n	8005a18 <UART_SetConfig+0x154>
 8005a0a:	e00b      	b.n	8005a24 <UART_SetConfig+0x160>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e061      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005a12:	2302      	movs	r3, #2
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e05e      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e05b      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005a1e:	2308      	movs	r3, #8
 8005a20:	77fb      	strb	r3, [r7, #31]
 8005a22:	e058      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005a24:	2310      	movs	r3, #16
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e055      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a47      	ldr	r2, [pc, #284]	@ (8005b4c <UART_SetConfig+0x288>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d124      	bne.n	8005a7e <UART_SetConfig+0x1ba>
 8005a34:	4b42      	ldr	r3, [pc, #264]	@ (8005b40 <UART_SetConfig+0x27c>)
 8005a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a38:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005a3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a40:	d011      	beq.n	8005a66 <UART_SetConfig+0x1a2>
 8005a42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a46:	d817      	bhi.n	8005a78 <UART_SetConfig+0x1b4>
 8005a48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a4c:	d011      	beq.n	8005a72 <UART_SetConfig+0x1ae>
 8005a4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a52:	d811      	bhi.n	8005a78 <UART_SetConfig+0x1b4>
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <UART_SetConfig+0x19c>
 8005a58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a5c:	d006      	beq.n	8005a6c <UART_SetConfig+0x1a8>
 8005a5e:	e00b      	b.n	8005a78 <UART_SetConfig+0x1b4>
 8005a60:	2300      	movs	r3, #0
 8005a62:	77fb      	strb	r3, [r7, #31]
 8005a64:	e037      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005a66:	2302      	movs	r3, #2
 8005a68:	77fb      	strb	r3, [r7, #31]
 8005a6a:	e034      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	77fb      	strb	r3, [r7, #31]
 8005a70:	e031      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005a72:	2308      	movs	r3, #8
 8005a74:	77fb      	strb	r3, [r7, #31]
 8005a76:	e02e      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	77fb      	strb	r3, [r7, #31]
 8005a7c:	e02b      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a33      	ldr	r2, [pc, #204]	@ (8005b50 <UART_SetConfig+0x28c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d124      	bne.n	8005ad2 <UART_SetConfig+0x20e>
 8005a88:	4b2d      	ldr	r3, [pc, #180]	@ (8005b40 <UART_SetConfig+0x27c>)
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005a90:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005a94:	d011      	beq.n	8005aba <UART_SetConfig+0x1f6>
 8005a96:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005a9a:	d817      	bhi.n	8005acc <UART_SetConfig+0x208>
 8005a9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005aa0:	d011      	beq.n	8005ac6 <UART_SetConfig+0x202>
 8005aa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005aa6:	d811      	bhi.n	8005acc <UART_SetConfig+0x208>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <UART_SetConfig+0x1f0>
 8005aac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ab0:	d006      	beq.n	8005ac0 <UART_SetConfig+0x1fc>
 8005ab2:	e00b      	b.n	8005acc <UART_SetConfig+0x208>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e00d      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005aba:	2302      	movs	r3, #2
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e00a      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e007      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e004      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005acc:	2310      	movs	r3, #16
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e001      	b.n	8005ad6 <UART_SetConfig+0x212>
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ade:	d16b      	bne.n	8005bb8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005ae0:	7ffb      	ldrb	r3, [r7, #31]
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d838      	bhi.n	8005b58 <UART_SetConfig+0x294>
 8005ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8005aec <UART_SetConfig+0x228>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	08005b59 	.word	0x08005b59
 8005afc:	08005b27 	.word	0x08005b27
 8005b00:	08005b59 	.word	0x08005b59
 8005b04:	08005b59 	.word	0x08005b59
 8005b08:	08005b59 	.word	0x08005b59
 8005b0c:	08005b2f 	.word	0x08005b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b10:	f7fe fa4a 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 8005b14:	61b8      	str	r0, [r7, #24]
        break;
 8005b16:	e024      	b.n	8005b62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b18:	f7fe fa68 	bl	8003fec <HAL_RCC_GetPCLK2Freq>
 8005b1c:	61b8      	str	r0, [r7, #24]
        break;
 8005b1e:	e020      	b.n	8005b62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b20:	4b0c      	ldr	r3, [pc, #48]	@ (8005b54 <UART_SetConfig+0x290>)
 8005b22:	61bb      	str	r3, [r7, #24]
        break;
 8005b24:	e01d      	b.n	8005b62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b26:	f7fe f9df 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8005b2a:	61b8      	str	r0, [r7, #24]
        break;
 8005b2c:	e019      	b.n	8005b62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b32:	61bb      	str	r3, [r7, #24]
        break;
 8005b34:	e015      	b.n	8005b62 <UART_SetConfig+0x29e>
 8005b36:	bf00      	nop
 8005b38:	efff69f3 	.word	0xefff69f3
 8005b3c:	40013800 	.word	0x40013800
 8005b40:	40021000 	.word	0x40021000
 8005b44:	40004400 	.word	0x40004400
 8005b48:	40004800 	.word	0x40004800
 8005b4c:	40004c00 	.word	0x40004c00
 8005b50:	40005000 	.word	0x40005000
 8005b54:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	77bb      	strb	r3, [r7, #30]
        break;
 8005b60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d073      	beq.n	8005c50 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	005a      	lsls	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	441a      	add	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2b0f      	cmp	r3, #15
 8005b82:	d916      	bls.n	8005bb2 <UART_SetConfig+0x2ee>
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b8a:	d212      	bcs.n	8005bb2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f023 030f 	bic.w	r3, r3, #15
 8005b94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	085b      	lsrs	r3, r3, #1
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	89fb      	ldrh	r3, [r7, #14]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	89fa      	ldrh	r2, [r7, #14]
 8005bae:	60da      	str	r2, [r3, #12]
 8005bb0:	e04e      	b.n	8005c50 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	77bb      	strb	r3, [r7, #30]
 8005bb6:	e04b      	b.n	8005c50 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bb8:	7ffb      	ldrb	r3, [r7, #31]
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d827      	bhi.n	8005c0e <UART_SetConfig+0x34a>
 8005bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc4 <UART_SetConfig+0x300>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005c0f 	.word	0x08005c0f
 8005bd4:	08005bff 	.word	0x08005bff
 8005bd8:	08005c0f 	.word	0x08005c0f
 8005bdc:	08005c0f 	.word	0x08005c0f
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c07 	.word	0x08005c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be8:	f7fe f9de 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 8005bec:	61b8      	str	r0, [r7, #24]
        break;
 8005bee:	e013      	b.n	8005c18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7fe f9fc 	bl	8003fec <HAL_RCC_GetPCLK2Freq>
 8005bf4:	61b8      	str	r0, [r7, #24]
        break;
 8005bf6:	e00f      	b.n	8005c18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c68 <UART_SetConfig+0x3a4>)
 8005bfa:	61bb      	str	r3, [r7, #24]
        break;
 8005bfc:	e00c      	b.n	8005c18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7fe f973 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8005c02:	61b8      	str	r0, [r7, #24]
        break;
 8005c04:	e008      	b.n	8005c18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c0a:	61bb      	str	r3, [r7, #24]
        break;
 8005c0c:	e004      	b.n	8005c18 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	77bb      	strb	r3, [r7, #30]
        break;
 8005c16:	bf00      	nop
    }

    if (pclk != 0U)
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d018      	beq.n	8005c50 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	085a      	lsrs	r2, r3, #1
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	441a      	add	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b0f      	cmp	r3, #15
 8005c36:	d909      	bls.n	8005c4c <UART_SetConfig+0x388>
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c3e:	d205      	bcs.n	8005c4c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	e001      	b.n	8005c50 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3720      	adds	r7, #32
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	007a1200 	.word	0x007a1200

08005c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01a      	beq.n	8005d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d6a:	d10a      	bne.n	8005d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	605a      	str	r2, [r3, #4]
  }
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b098      	sub	sp, #96	@ 0x60
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dc0:	f7fa feea 	bl	8000b98 <HAL_GetTick>
 8005dc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d12e      	bne.n	8005e32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f88c 	bl	8005f00 <UART_WaitOnFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d021      	beq.n	8005e32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e6      	bne.n	8005dee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2220      	movs	r2, #32
 8005e24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e062      	b.n	8005ef8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d149      	bne.n	8005ed4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f856 	bl	8005f00 <UART_WaitOnFlagUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d03c      	beq.n	8005ed4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	623b      	str	r3, [r7, #32]
   return(result);
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e6      	bne.n	8005e5a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3308      	adds	r3, #8
 8005e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	e853 3f00 	ldrex	r3, [r3]
 8005e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0301 	bic.w	r3, r3, #1
 8005ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eac:	61fa      	str	r2, [r7, #28]
 8005eae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb0:	69b9      	ldr	r1, [r7, #24]
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	e841 2300 	strex	r3, r2, [r1]
 8005eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1e5      	bne.n	8005e8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e011      	b.n	8005ef8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3758      	adds	r7, #88	@ 0x58
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f10:	e04f      	b.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f18:	d04b      	beq.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1a:	f7fa fe3d 	bl	8000b98 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d302      	bcc.n	8005f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e04e      	b.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d037      	beq.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b80      	cmp	r3, #128	@ 0x80
 8005f46:	d034      	beq.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b40      	cmp	r3, #64	@ 0x40
 8005f4c:	d031      	beq.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d110      	bne.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2208      	movs	r2, #8
 8005f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f838 	bl	8005fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e029      	b.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f8c:	d111      	bne.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f81e 	bl	8005fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e00f      	b.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	bf0c      	ite	eq
 8005fc2:	2301      	moveq	r3, #1
 8005fc4:	2300      	movne	r3, #0
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d0a0      	beq.n	8005f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b095      	sub	sp, #84	@ 0x54
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006000:	643b      	str	r3, [r7, #64]	@ 0x40
 8006002:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006006:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800600e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e6      	bne.n	8005fe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3308      	adds	r3, #8
 800601a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	61fb      	str	r3, [r7, #28]
   return(result);
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f023 0301 	bic.w	r3, r3, #1
 800602a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3308      	adds	r3, #8
 8006032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006034:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006036:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800603a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800604c:	2b01      	cmp	r3, #1
 800604e:	d118      	bne.n	8006082 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	60bb      	str	r3, [r7, #8]
   return(result);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f023 0310 	bic.w	r3, r3, #16
 8006064:	647b      	str	r3, [r7, #68]	@ 0x44
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	6979      	ldr	r1, [r7, #20]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	613b      	str	r3, [r7, #16]
   return(result);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e6      	bne.n	8006050 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006096:	bf00      	nop
 8006098:	3754      	adds	r7, #84	@ 0x54
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b084      	sub	sp, #16
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7ff fbe9 	bl	8005898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b088      	sub	sp, #32
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6979      	ldr	r1, [r7, #20]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	613b      	str	r3, [r7, #16]
   return(result);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e6      	bne.n	80060d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff fbb5 	bl	8005884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800611a:	bf00      	nop
 800611c:	3720      	adds	r7, #32
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006136:	b480      	push	{r7}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006146:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800614a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800616c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006170:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	b29b      	uxth	r3, r3
 800617e:	43db      	mvns	r3, r3
 8006180:	b29b      	uxth	r3, r3
 8006182:	4013      	ands	r3, r2
 8006184:	b29a      	uxth	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	1d3b      	adds	r3, r7, #4
 80061a4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061d8:	b480      	push	{r7}
 80061da:	b09d      	sub	sp, #116	@ 0x74
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80061fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	78db      	ldrb	r3, [r3, #3]
 8006206:	2b03      	cmp	r3, #3
 8006208:	d81f      	bhi.n	800624a <USB_ActivateEndpoint+0x72>
 800620a:	a201      	add	r2, pc, #4	@ (adr r2, 8006210 <USB_ActivateEndpoint+0x38>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006221 	.word	0x08006221
 8006214:	0800623d 	.word	0x0800623d
 8006218:	08006253 	.word	0x08006253
 800621c:	0800622f 	.word	0x0800622f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006220:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006224:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006228:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800622c:	e012      	b.n	8006254 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800622e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006232:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006236:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800623a:	e00b      	b.n	8006254 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800623c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006240:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006244:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006248:	e004      	b.n	8006254 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006250:	e000      	b.n	8006254 <USB_ActivateEndpoint+0x7c>
      break;
 8006252:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800626a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800626e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	b21b      	sxth	r3, r3
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800628a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800628e:	b21a      	sxth	r2, r3
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	b21b      	sxth	r3, r3
 8006296:	4313      	orrs	r3, r2
 8006298:	b21b      	sxth	r3, r3
 800629a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	441a      	add	r2, r3
 80062a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80062ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062bc:	b29b      	uxth	r3, r3
 80062be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	7b1b      	ldrb	r3, [r3, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f040 8178 	bne.w	80065ba <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	785b      	ldrb	r3, [r3, #1]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 8084 	beq.w	80063dc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	61bb      	str	r3, [r7, #24]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062de:	b29b      	uxth	r3, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	4413      	add	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	00da      	lsls	r2, r3, #3
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	88db      	ldrh	r3, [r3, #6]
 80062fc:	085b      	lsrs	r3, r3, #1
 80062fe:	b29b      	uxth	r3, r3
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	827b      	strh	r3, [r7, #18]
 8006316:	8a7b      	ldrh	r3, [r7, #18]
 8006318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01b      	beq.n	8006358 <USB_ActivateEndpoint+0x180>
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006336:	823b      	strh	r3, [r7, #16]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	441a      	add	r2, r3
 8006342:	8a3b      	ldrh	r3, [r7, #16]
 8006344:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006348:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800634c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006350:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006354:	b29b      	uxth	r3, r3
 8006356:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	78db      	ldrb	r3, [r3, #3]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d020      	beq.n	80063a2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006372:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006376:	81bb      	strh	r3, [r7, #12]
 8006378:	89bb      	ldrh	r3, [r7, #12]
 800637a:	f083 0320 	eor.w	r3, r3, #32
 800637e:	81bb      	strh	r3, [r7, #12]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	441a      	add	r2, r3
 800638a:	89bb      	ldrh	r3, [r7, #12]
 800638c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006394:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800639c:	b29b      	uxth	r3, r3
 800639e:	8013      	strh	r3, [r2, #0]
 80063a0:	e2d5      	b.n	800694e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063b8:	81fb      	strh	r3, [r7, #14]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	441a      	add	r2, r3
 80063c4:	89fb      	ldrh	r3, [r7, #14]
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]
 80063da:	e2b8      	b.n	800694e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	633b      	str	r3, [r7, #48]	@ 0x30
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	461a      	mov	r2, r3
 80063ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ec:	4413      	add	r3, r2
 80063ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	00da      	lsls	r2, r3, #3
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	4413      	add	r3, r2
 80063fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	88db      	ldrh	r3, [r3, #6]
 8006404:	085b      	lsrs	r3, r3, #1
 8006406:	b29b      	uxth	r3, r3
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800641a:	b29b      	uxth	r3, r3
 800641c:	461a      	mov	r2, r3
 800641e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006420:	4413      	add	r3, r2
 8006422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	00da      	lsls	r2, r3, #3
 800642a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642c:	4413      	add	r3, r2
 800642e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006432:	627b      	str	r3, [r7, #36]	@ 0x24
 8006434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800643e:	b29a      	uxth	r2, r3
 8006440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <USB_ActivateEndpoint+0x28a>
 800644c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645a:	b29a      	uxth	r2, r3
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645e:	801a      	strh	r2, [r3, #0]
 8006460:	e039      	b.n	80064d6 <USB_ActivateEndpoint+0x2fe>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b3e      	cmp	r3, #62	@ 0x3e
 8006468:	d818      	bhi.n	800649c <USB_ActivateEndpoint+0x2c4>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	085b      	lsrs	r3, r3, #1
 8006470:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <USB_ActivateEndpoint+0x2ac>
 800647e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006480:	3301      	adds	r3, #1
 8006482:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29a      	uxth	r2, r3
 800648a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800648c:	b29b      	uxth	r3, r3
 800648e:	029b      	lsls	r3, r3, #10
 8006490:	b29b      	uxth	r3, r3
 8006492:	4313      	orrs	r3, r2
 8006494:	b29a      	uxth	r2, r3
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	801a      	strh	r2, [r3, #0]
 800649a:	e01c      	b.n	80064d6 <USB_ActivateEndpoint+0x2fe>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f003 031f 	and.w	r3, r3, #31
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d102      	bne.n	80064b6 <USB_ActivateEndpoint+0x2de>
 80064b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064b2:	3b01      	subs	r3, #1
 80064b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064be:	b29b      	uxth	r3, r3
 80064c0:	029b      	lsls	r3, r3, #10
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	4313      	orrs	r3, r2
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80064e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80064e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d01b      	beq.n	8006526 <USB_ActivateEndpoint+0x34e>
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006504:	843b      	strh	r3, [r7, #32]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	441a      	add	r2, r3
 8006510:	8c3b      	ldrh	r3, [r7, #32]
 8006512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800651a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800651e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006522:	b29b      	uxth	r3, r3
 8006524:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d124      	bne.n	8006578 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29b      	uxth	r3, r3
 800653c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006544:	83bb      	strh	r3, [r7, #28]
 8006546:	8bbb      	ldrh	r3, [r7, #28]
 8006548:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800654c:	83bb      	strh	r3, [r7, #28]
 800654e:	8bbb      	ldrh	r3, [r7, #28]
 8006550:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006554:	83bb      	strh	r3, [r7, #28]
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	441a      	add	r2, r3
 8006560:	8bbb      	ldrh	r3, [r7, #28]
 8006562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800656a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800656e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006572:	b29b      	uxth	r3, r3
 8006574:	8013      	strh	r3, [r2, #0]
 8006576:	e1ea      	b.n	800694e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	b29b      	uxth	r3, r3
 8006586:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800658a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658e:	83fb      	strh	r3, [r7, #30]
 8006590:	8bfb      	ldrh	r3, [r7, #30]
 8006592:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006596:	83fb      	strh	r3, [r7, #30]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	441a      	add	r2, r3
 80065a2:	8bfb      	ldrh	r3, [r7, #30]
 80065a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	8013      	strh	r3, [r2, #0]
 80065b8:	e1c9      	b.n	800694e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	78db      	ldrb	r3, [r3, #3]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d11e      	bne.n	8006600 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	441a      	add	r2, r3
 80065e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80065ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80065f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	8013      	strh	r3, [r2, #0]
 80065fe:	e01d      	b.n	800663c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006616:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	441a      	add	r2, r3
 8006624:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800662c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006638:	b29b      	uxth	r3, r3
 800663a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006646:	b29b      	uxth	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800664c:	4413      	add	r3, r2
 800664e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	00da      	lsls	r2, r3, #3
 8006656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006658:	4413      	add	r3, r2
 800665a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800665e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	891b      	ldrh	r3, [r3, #8]
 8006664:	085b      	lsrs	r3, r3, #1
 8006666:	b29b      	uxth	r3, r3
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	657b      	str	r3, [r7, #84]	@ 0x54
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800667a:	b29b      	uxth	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006680:	4413      	add	r3, r2
 8006682:	657b      	str	r3, [r7, #84]	@ 0x54
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	00da      	lsls	r2, r3, #3
 800668a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668c:	4413      	add	r3, r2
 800668e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006692:	653b      	str	r3, [r7, #80]	@ 0x50
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	895b      	ldrh	r3, [r3, #10]
 8006698:	085b      	lsrs	r3, r3, #1
 800669a:	b29b      	uxth	r3, r3
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066a2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	785b      	ldrb	r3, [r3, #1]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f040 8093 	bne.w	80067d4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80066be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80066c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d01b      	beq.n	8006702 <USB_ActivateEndpoint+0x52a>
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	441a      	add	r2, r3
 80066ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80066ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fe:	b29b      	uxth	r3, r3
 8006700:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006710:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	d01b      	beq.n	8006752 <USB_ActivateEndpoint+0x57a>
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29b      	uxth	r3, r3
 8006728:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800672c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006730:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	441a      	add	r2, r3
 800673c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800673e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006742:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800674a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800674e:	b29b      	uxth	r3, r3
 8006750:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006768:	873b      	strh	r3, [r7, #56]	@ 0x38
 800676a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800676c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006770:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006772:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006774:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006778:	873b      	strh	r3, [r7, #56]	@ 0x38
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	441a      	add	r2, r3
 8006784:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800678a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800678e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006796:	b29b      	uxth	r3, r3
 8006798:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	441a      	add	r2, r3
 80067bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	8013      	strh	r3, [r2, #0]
 80067d2:	e0bc      	b.n	800694e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80067e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80067e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01d      	beq.n	800682c <USB_ActivateEndpoint+0x654>
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006806:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800681c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006820:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006828:	b29b      	uxth	r3, r3
 800682a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800683c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01d      	beq.n	8006884 <USB_ActivateEndpoint+0x6ac>
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800685a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006870:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006874:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006878:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800687c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006880:	b29b      	uxth	r3, r3
 8006882:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	78db      	ldrb	r3, [r3, #3]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d024      	beq.n	80068d6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	b29b      	uxth	r3, r3
 800689a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800689e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068a2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80068a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80068aa:	f083 0320 	eor.w	r3, r3, #32
 80068ae:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	441a      	add	r2, r3
 80068bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80068c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	8013      	strh	r3, [r2, #0]
 80068d4:	e01d      	b.n	8006912 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4413      	add	r3, r2
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	441a      	add	r2, r3
 80068fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80068fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800690a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800690e:	b29b      	uxth	r3, r3
 8006910:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006928:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	441a      	add	r2, r3
 8006936:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800693a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800693e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800694e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006952:	4618      	mov	r0, r3
 8006954:	3774      	adds	r7, #116	@ 0x74
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop

08006960 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006960:	b480      	push	{r7}
 8006962:	b08d      	sub	sp, #52	@ 0x34
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	7b1b      	ldrb	r3, [r3, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 808e 	bne.w	8006a90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d044      	beq.n	8006a06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	81bb      	strh	r3, [r7, #12]
 800698a:	89bb      	ldrh	r3, [r7, #12]
 800698c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01b      	beq.n	80069cc <USB_DeactivateEndpoint+0x6c>
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069aa:	817b      	strh	r3, [r7, #10]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	897b      	ldrh	r3, [r7, #10]
 80069b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069e2:	813b      	strh	r3, [r7, #8]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	441a      	add	r2, r3
 80069ee:	893b      	ldrh	r3, [r7, #8]
 80069f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	8013      	strh	r3, [r2, #0]
 8006a04:	e192      	b.n	8006d2c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	827b      	strh	r3, [r7, #18]
 8006a14:	8a7b      	ldrh	r3, [r7, #18]
 8006a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01b      	beq.n	8006a56 <USB_DeactivateEndpoint+0xf6>
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a34:	823b      	strh	r3, [r7, #16]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	441a      	add	r2, r3
 8006a40:	8a3b      	ldrh	r3, [r7, #16]
 8006a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6c:	81fb      	strh	r3, [r7, #14]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	89fb      	ldrh	r3, [r7, #14]
 8006a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	8013      	strh	r3, [r2, #0]
 8006a8e:	e14d      	b.n	8006d2c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f040 80a5 	bne.w	8006be4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	843b      	strh	r3, [r7, #32]
 8006aa8:	8c3b      	ldrh	r3, [r7, #32]
 8006aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01b      	beq.n	8006aea <USB_DeactivateEndpoint+0x18a>
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac8:	83fb      	strh	r3, [r7, #30]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	441a      	add	r2, r3
 8006ad4:	8bfb      	ldrh	r3, [r7, #30]
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ade:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	83bb      	strh	r3, [r7, #28]
 8006af8:	8bbb      	ldrh	r3, [r7, #28]
 8006afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01b      	beq.n	8006b3a <USB_DeactivateEndpoint+0x1da>
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b18:	837b      	strh	r3, [r7, #26]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	441a      	add	r2, r3
 8006b24:	8b7b      	ldrh	r3, [r7, #26]
 8006b26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b50:	833b      	strh	r3, [r7, #24]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	441a      	add	r2, r3
 8006b5c:	8b3b      	ldrh	r3, [r7, #24]
 8006b5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b88:	82fb      	strh	r3, [r7, #22]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	441a      	add	r2, r3
 8006b94:	8afb      	ldrh	r3, [r7, #22]
 8006b96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc0:	82bb      	strh	r3, [r7, #20]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	8abb      	ldrh	r3, [r7, #20]
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]
 8006be2:	e0a3      	b.n	8006d2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006bf2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01b      	beq.n	8006c34 <USB_DeactivateEndpoint+0x2d4>
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c12:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006c42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01b      	beq.n	8006c84 <USB_DeactivateEndpoint+0x324>
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c62:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	441a      	add	r2, r3
 8006c6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c9a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	441a      	add	r2, r3
 8006cde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	441a      	add	r2, r3
 8006d16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3734      	adds	r7, #52	@ 0x34
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b0c2      	sub	sp, #264	@ 0x108
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d48:	6018      	str	r0, [r3, #0]
 8006d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d52:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	f040 86b7 	bne.w	8007ad4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699a      	ldr	r2, [r3, #24]
 8006d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d908      	bls.n	8006d94 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006d92:	e007      	b.n	8006da4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	7b1b      	ldrb	r3, [r3, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d13a      	bne.n	8006e2a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6959      	ldr	r1, [r3, #20]
 8006dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	88da      	ldrh	r2, [r3, #6]
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006dd6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006dda:	6800      	ldr	r0, [r0, #0]
 8006ddc:	f001 fc8d 	bl	80086fa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	613b      	str	r3, [r7, #16]
 8006dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	4413      	add	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	00da      	lsls	r2, r3, #3
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	4413      	add	r3, r2
 8006e16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	f000 be1f 	b.w	8007a68 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	78db      	ldrb	r3, [r3, #3]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	f040 8462 	bne.w	8007700 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6a1a      	ldr	r2, [r3, #32]
 8006e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	f240 83df 	bls.w	8007618 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e80:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	441a      	add	r2, r3
 8006e9e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eaa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a1a      	ldr	r2, [r3, #32]
 8006ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec6:	1ad2      	subs	r2, r2, r3
 8006ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 81c7 	beq.w	800728a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	785b      	ldrb	r3, [r3, #1]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d177      	bne.n	8007008 <USB_EPStartXfer+0x2ce>
 8006f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	461a      	mov	r2, r3
 8006f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f38:	4413      	add	r3, r2
 8006f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	00da      	lsls	r2, r3, #3
 8006f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <USB_EPStartXfer+0x248>
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	e067      	b.n	8007052 <USB_EPStartXfer+0x318>
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f86:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f88:	d81c      	bhi.n	8006fc4 <USB_EPStartXfer+0x28a>
 8006f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <USB_EPStartXfer+0x270>
 8006fa0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	029b      	lsls	r3, r3, #10
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	801a      	strh	r2, [r3, #0]
 8006fc2:	e046      	b.n	8007052 <USB_EPStartXfer+0x318>
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd2:	f003 031f 	and.w	r3, r3, #31
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d104      	bne.n	8006fe4 <USB_EPStartXfer+0x2aa>
 8006fda:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	029b      	lsls	r3, r3, #10
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007000:	b29a      	uxth	r2, r3
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	e024      	b.n	8007052 <USB_EPStartXfer+0x318>
 8007008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d11c      	bne.n	8007052 <USB_EPStartXfer+0x318>
 8007018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007026:	b29b      	uxth	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702c:	4413      	add	r3, r2
 800702e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	00da      	lsls	r2, r3, #3
 800703e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007040:	4413      	add	r3, r2
 8007042:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007046:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704c:	b29a      	uxth	r2, r3
 800704e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007050:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	895b      	ldrh	r3, [r3, #10]
 800705e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6959      	ldr	r1, [r3, #20]
 800706e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007072:	b29b      	uxth	r3, r3
 8007074:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007078:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800707c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007080:	6800      	ldr	r0, [r0, #0]
 8007082:	f001 fb3a 	bl	80086fa <USB_WritePMA>
            ep->xfer_buff += len;
 8007086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695a      	ldr	r2, [r3, #20]
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007096:	441a      	add	r2, r3
 8007098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6a1a      	ldr	r2, [r3, #32]
 80070b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d90f      	bls.n	80070e0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80070c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6a1a      	ldr	r2, [r3, #32]
 80070cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d0:	1ad2      	subs	r2, r2, r3
 80070d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	621a      	str	r2, [r3, #32]
 80070de:	e00e      	b.n	80070fe <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80070e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80070f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2200      	movs	r2, #0
 80070fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	785b      	ldrb	r3, [r3, #1]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d177      	bne.n	80071fe <USB_EPStartXfer+0x4c4>
 800710e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007128:	b29b      	uxth	r3, r3
 800712a:	461a      	mov	r2, r3
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	4413      	add	r3, r2
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	00da      	lsls	r2, r3, #3
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	4413      	add	r3, r2
 8007144:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007154:	b29a      	uxth	r2, r3
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	801a      	strh	r2, [r3, #0]
 800715a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <USB_EPStartXfer+0x43e>
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	b29b      	uxth	r3, r3
 8007168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007170:	b29a      	uxth	r2, r3
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	801a      	strh	r2, [r3, #0]
 8007176:	e06d      	b.n	8007254 <USB_EPStartXfer+0x51a>
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717c:	2b3e      	cmp	r3, #62	@ 0x3e
 800717e:	d81c      	bhi.n	80071ba <USB_EPStartXfer+0x480>
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007184:	085b      	lsrs	r3, r3, #1
 8007186:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <USB_EPStartXfer+0x466>
 8007196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800719a:	3301      	adds	r3, #1
 800719c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	029b      	lsls	r3, r3, #10
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	4313      	orrs	r3, r2
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	801a      	strh	r2, [r3, #0]
 80071b8:	e04c      	b.n	8007254 <USB_EPStartXfer+0x51a>
 80071ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071be:	095b      	lsrs	r3, r3, #5
 80071c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <USB_EPStartXfer+0x4a0>
 80071d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071d4:	3b01      	subs	r3, #1
 80071d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29a      	uxth	r2, r3
 80071e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	029b      	lsls	r3, r3, #10
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4313      	orrs	r3, r2
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	801a      	strh	r2, [r3, #0]
 80071fc:	e02a      	b.n	8007254 <USB_EPStartXfer+0x51a>
 80071fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d122      	bne.n	8007254 <USB_EPStartXfer+0x51a>
 800720e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007212:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	623b      	str	r3, [r7, #32]
 800721a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007228:	b29b      	uxth	r3, r3
 800722a:	461a      	mov	r2, r3
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	4413      	add	r3, r2
 8007230:	623b      	str	r3, [r7, #32]
 8007232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	00da      	lsls	r2, r3, #3
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	4413      	add	r3, r2
 8007244:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724e:	b29a      	uxth	r2, r3
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	891b      	ldrh	r3, [r3, #8]
 8007260:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6959      	ldr	r1, [r3, #20]
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007274:	b29b      	uxth	r3, r3
 8007276:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800727a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800727e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007282:	6800      	ldr	r0, [r0, #0]
 8007284:	f001 fa39 	bl	80086fa <USB_WritePMA>
 8007288:	e3ee      	b.n	8007a68 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800728a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	785b      	ldrb	r3, [r3, #1]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d177      	bne.n	800738a <USB_EPStartXfer+0x650>
 800729a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072ba:	4413      	add	r3, r2
 80072bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	00da      	lsls	r2, r3, #3
 80072cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072ce:	4413      	add	r3, r2
 80072d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <USB_EPStartXfer+0x5ca>
 80072ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007300:	801a      	strh	r2, [r3, #0]
 8007302:	e06d      	b.n	80073e0 <USB_EPStartXfer+0x6a6>
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007308:	2b3e      	cmp	r3, #62	@ 0x3e
 800730a:	d81c      	bhi.n	8007346 <USB_EPStartXfer+0x60c>
 800730c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007310:	085b      	lsrs	r3, r3, #1
 8007312:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d004      	beq.n	800732c <USB_EPStartXfer+0x5f2>
 8007322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007326:	3301      	adds	r3, #1
 8007328:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800732c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	b29a      	uxth	r2, r3
 8007332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007336:	b29b      	uxth	r3, r3
 8007338:	029b      	lsls	r3, r3, #10
 800733a:	b29b      	uxth	r3, r3
 800733c:	4313      	orrs	r3, r2
 800733e:	b29a      	uxth	r2, r3
 8007340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007342:	801a      	strh	r2, [r3, #0]
 8007344:	e04c      	b.n	80073e0 <USB_EPStartXfer+0x6a6>
 8007346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <USB_EPStartXfer+0x62c>
 800735c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007360:	3b01      	subs	r3, #1
 8007362:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29a      	uxth	r2, r3
 800736c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007370:	b29b      	uxth	r3, r3
 8007372:	029b      	lsls	r3, r3, #10
 8007374:	b29b      	uxth	r3, r3
 8007376:	4313      	orrs	r3, r2
 8007378:	b29b      	uxth	r3, r3
 800737a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007382:	b29a      	uxth	r2, r3
 8007384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	e02a      	b.n	80073e0 <USB_EPStartXfer+0x6a6>
 800738a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d122      	bne.n	80073e0 <USB_EPStartXfer+0x6a6>
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80073a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ba:	4413      	add	r3, r2
 80073bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80073be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	00da      	lsls	r2, r3, #3
 80073cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ce:	4413      	add	r3, r2
 80073d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80073d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073da:	b29a      	uxth	r2, r3
 80073dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80073e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	891b      	ldrh	r3, [r3, #8]
 80073ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6959      	ldr	r1, [r3, #20]
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007400:	b29b      	uxth	r3, r3
 8007402:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007406:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800740a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800740e:	6800      	ldr	r0, [r0, #0]
 8007410:	f001 f973 	bl	80086fa <USB_WritePMA>
            ep->xfer_buff += len;
 8007414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	695a      	ldr	r2, [r3, #20]
 8007420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007424:	441a      	add	r2, r3
 8007426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800742a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6a1a      	ldr	r2, [r3, #32]
 800743e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	429a      	cmp	r2, r3
 800744c:	d90f      	bls.n	800746e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800744e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6a1a      	ldr	r2, [r3, #32]
 800745a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	621a      	str	r2, [r3, #32]
 800746c:	e00e      	b.n	800748c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800746e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800747e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2200      	movs	r2, #0
 800748a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800748c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007490:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	643b      	str	r3, [r7, #64]	@ 0x40
 8007498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	785b      	ldrb	r3, [r3, #1]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d177      	bne.n	8007598 <USB_EPStartXfer+0x85e>
 80074a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c8:	4413      	add	r3, r2
 80074ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	00da      	lsls	r2, r3, #3
 80074da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074dc:	4413      	add	r3, r2
 80074de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f2:	801a      	strh	r2, [r3, #0]
 80074f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10a      	bne.n	8007512 <USB_EPStartXfer+0x7d8>
 80074fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800750a:	b29a      	uxth	r2, r3
 800750c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800750e:	801a      	strh	r2, [r3, #0]
 8007510:	e067      	b.n	80075e2 <USB_EPStartXfer+0x8a8>
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007516:	2b3e      	cmp	r3, #62	@ 0x3e
 8007518:	d81c      	bhi.n	8007554 <USB_EPStartXfer+0x81a>
 800751a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751e:	085b      	lsrs	r3, r3, #1
 8007520:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d004      	beq.n	800753a <USB_EPStartXfer+0x800>
 8007530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007534:	3301      	adds	r3, #1
 8007536:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800753a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29a      	uxth	r2, r3
 8007540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007544:	b29b      	uxth	r3, r3
 8007546:	029b      	lsls	r3, r3, #10
 8007548:	b29b      	uxth	r3, r3
 800754a:	4313      	orrs	r3, r2
 800754c:	b29a      	uxth	r2, r3
 800754e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007550:	801a      	strh	r2, [r3, #0]
 8007552:	e046      	b.n	80075e2 <USB_EPStartXfer+0x8a8>
 8007554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800755e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	2b00      	cmp	r3, #0
 8007568:	d104      	bne.n	8007574 <USB_EPStartXfer+0x83a>
 800756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800756e:	3b01      	subs	r3, #1
 8007570:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29a      	uxth	r2, r3
 800757a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800757e:	b29b      	uxth	r3, r3
 8007580:	029b      	lsls	r3, r3, #10
 8007582:	b29b      	uxth	r3, r3
 8007584:	4313      	orrs	r3, r2
 8007586:	b29b      	uxth	r3, r3
 8007588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800758c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007590:	b29a      	uxth	r2, r3
 8007592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007594:	801a      	strh	r2, [r3, #0]
 8007596:	e024      	b.n	80075e2 <USB_EPStartXfer+0x8a8>
 8007598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d11c      	bne.n	80075e2 <USB_EPStartXfer+0x8a8>
 80075a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	461a      	mov	r2, r3
 80075ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075bc:	4413      	add	r3, r2
 80075be:	643b      	str	r3, [r7, #64]	@ 0x40
 80075c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	00da      	lsls	r2, r3, #3
 80075ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075d0:	4413      	add	r3, r2
 80075d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075dc:	b29a      	uxth	r2, r3
 80075de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	895b      	ldrh	r3, [r3, #10]
 80075ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6959      	ldr	r1, [r3, #20]
 80075fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007602:	b29b      	uxth	r3, r3
 8007604:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007608:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800760c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007610:	6800      	ldr	r0, [r0, #0]
 8007612:	f001 f872 	bl	80086fa <USB_WritePMA>
 8007616:	e227      	b.n	8007a68 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800761c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800764a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	441a      	add	r2, r3
 800766c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800767c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007680:	b29b      	uxth	r3, r3
 8007682:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007694:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800769e:	b29b      	uxth	r3, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076a4:	4413      	add	r3, r2
 80076a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	00da      	lsls	r2, r3, #3
 80076b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076b8:	4413      	add	r3, r2
 80076ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80076ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	891b      	ldrh	r3, [r3, #8]
 80076d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6959      	ldr	r1, [r3, #20]
 80076e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076f8:	6800      	ldr	r0, [r0, #0]
 80076fa:	f000 fffe 	bl	80086fa <USB_WritePMA>
 80076fe:	e1b3      	b.n	8007a68 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6a1a      	ldr	r2, [r3, #32]
 800770c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007710:	1ad2      	subs	r2, r2, r3
 8007712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800771e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007722:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 80c6 	beq.w	80078d2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	673b      	str	r3, [r7, #112]	@ 0x70
 8007752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d177      	bne.n	8007852 <USB_EPStartXfer+0xb18>
 8007762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800776e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007772:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800777c:	b29b      	uxth	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007782:	4413      	add	r3, r2
 8007784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	00da      	lsls	r2, r3, #3
 8007794:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007796:	4413      	add	r3, r2
 8007798:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800779c:	667b      	str	r3, [r7, #100]	@ 0x64
 800779e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077ac:	801a      	strh	r2, [r3, #0]
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <USB_EPStartXfer+0xa92>
 80077b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077c8:	801a      	strh	r2, [r3, #0]
 80077ca:	e067      	b.n	800789c <USB_EPStartXfer+0xb62>
 80077cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80077d2:	d81c      	bhi.n	800780e <USB_EPStartXfer+0xad4>
 80077d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d8:	085b      	lsrs	r3, r3, #1
 80077da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d004      	beq.n	80077f4 <USB_EPStartXfer+0xaba>
 80077ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80077ee:	3301      	adds	r3, #1
 80077f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80077f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80077fe:	b29b      	uxth	r3, r3
 8007800:	029b      	lsls	r3, r3, #10
 8007802:	b29b      	uxth	r3, r3
 8007804:	4313      	orrs	r3, r2
 8007806:	b29a      	uxth	r2, r3
 8007808:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800780a:	801a      	strh	r2, [r3, #0]
 800780c:	e046      	b.n	800789c <USB_EPStartXfer+0xb62>
 800780e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <USB_EPStartXfer+0xaf4>
 8007824:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007828:	3b01      	subs	r3, #1
 800782a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800782e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	b29a      	uxth	r2, r3
 8007834:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007838:	b29b      	uxth	r3, r3
 800783a:	029b      	lsls	r3, r3, #10
 800783c:	b29b      	uxth	r3, r3
 800783e:	4313      	orrs	r3, r2
 8007840:	b29b      	uxth	r3, r3
 8007842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784a:	b29a      	uxth	r2, r3
 800784c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	e024      	b.n	800789c <USB_EPStartXfer+0xb62>
 8007852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	785b      	ldrb	r3, [r3, #1]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d11c      	bne.n	800789c <USB_EPStartXfer+0xb62>
 8007862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007870:	b29b      	uxth	r3, r3
 8007872:	461a      	mov	r2, r3
 8007874:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007876:	4413      	add	r3, r2
 8007878:	673b      	str	r3, [r7, #112]	@ 0x70
 800787a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	00da      	lsls	r2, r3, #3
 8007888:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800788a:	4413      	add	r3, r2
 800788c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007890:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007896:	b29a      	uxth	r2, r3
 8007898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800789a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800789c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	895b      	ldrh	r3, [r3, #10]
 80078a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6959      	ldr	r1, [r3, #20]
 80078b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078bc:	b29b      	uxth	r3, r3
 80078be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078c2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80078c6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80078ca:	6800      	ldr	r0, [r0, #0]
 80078cc:	f000 ff15 	bl	80086fa <USB_WritePMA>
 80078d0:	e0ca      	b.n	8007a68 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d177      	bne.n	80079d2 <USB_EPStartXfer+0xc98>
 80078e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	461a      	mov	r2, r3
 8007900:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007902:	4413      	add	r3, r2
 8007904:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	00da      	lsls	r2, r3, #3
 8007914:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007916:	4413      	add	r3, r2
 8007918:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800791c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800791e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007928:	b29a      	uxth	r2, r3
 800792a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800792c:	801a      	strh	r2, [r3, #0]
 800792e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10a      	bne.n	800794c <USB_EPStartXfer+0xc12>
 8007936:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007944:	b29a      	uxth	r2, r3
 8007946:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	e073      	b.n	8007a34 <USB_EPStartXfer+0xcfa>
 800794c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007950:	2b3e      	cmp	r3, #62	@ 0x3e
 8007952:	d81c      	bhi.n	800798e <USB_EPStartXfer+0xc54>
 8007954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007958:	085b      	lsrs	r3, r3, #1
 800795a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800795e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d004      	beq.n	8007974 <USB_EPStartXfer+0xc3a>
 800796a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800796e:	3301      	adds	r3, #1
 8007970:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	b29a      	uxth	r2, r3
 800797a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800797e:	b29b      	uxth	r3, r3
 8007980:	029b      	lsls	r3, r3, #10
 8007982:	b29b      	uxth	r3, r3
 8007984:	4313      	orrs	r3, r2
 8007986:	b29a      	uxth	r2, r3
 8007988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800798a:	801a      	strh	r2, [r3, #0]
 800798c:	e052      	b.n	8007a34 <USB_EPStartXfer+0xcfa>
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800799c:	f003 031f 	and.w	r3, r3, #31
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d104      	bne.n	80079ae <USB_EPStartXfer+0xc74>
 80079a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079a8:	3b01      	subs	r3, #1
 80079aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80079ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	029b      	lsls	r3, r3, #10
 80079bc:	b29b      	uxth	r3, r3
 80079be:	4313      	orrs	r3, r2
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ce:	801a      	strh	r2, [r3, #0]
 80079d0:	e030      	b.n	8007a34 <USB_EPStartXfer+0xcfa>
 80079d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d128      	bne.n	8007a34 <USB_EPStartXfer+0xcfa>
 80079e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a06:	4413      	add	r3, r2
 8007a08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	00da      	lsls	r2, r3, #3
 8007a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a1e:	4413      	add	r3, r2
 8007a20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	891b      	ldrh	r3, [r3, #8]
 8007a40:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6959      	ldr	r1, [r3, #20]
 8007a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a5a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a5e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a62:	6800      	ldr	r0, [r0, #0]
 8007a64:	f000 fe49 	bl	80086fa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a8e:	817b      	strh	r3, [r7, #10]
 8007a90:	897b      	ldrh	r3, [r7, #10]
 8007a92:	f083 0310 	eor.w	r3, r3, #16
 8007a96:	817b      	strh	r3, [r7, #10]
 8007a98:	897b      	ldrh	r3, [r7, #10]
 8007a9a:	f083 0320 	eor.w	r3, r3, #32
 8007a9e:	817b      	strh	r3, [r7, #10]
 8007aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	441a      	add	r2, r3
 8007aba:	897b      	ldrh	r3, [r7, #10]
 8007abc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	8013      	strh	r3, [r2, #0]
 8007ad0:	f000 bcdf 	b.w	8008492 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	7b1b      	ldrb	r3, [r3, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f040 80bc 	bne.w	8007c5e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	699a      	ldr	r2, [r3, #24]
 8007af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d917      	bls.n	8007b32 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b22:	1ad2      	subs	r2, r2, r3
 8007b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	619a      	str	r2, [r3, #24]
 8007b30:	e00e      	b.n	8007b50 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b74:	4413      	add	r3, r2
 8007b76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	00da      	lsls	r2, r3, #3
 8007b88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ba8:	801a      	strh	r2, [r3, #0]
 8007baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10d      	bne.n	8007bce <USB_EPStartXfer+0xe94>
 8007bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bc8:	801a      	strh	r2, [r3, #0]
 8007bca:	f000 bc28 	b.w	800841e <USB_EPStartXfer+0x16e4>
 8007bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bd4:	d81f      	bhi.n	8007c16 <USB_EPStartXfer+0xedc>
 8007bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bda:	085b      	lsrs	r3, r3, #1
 8007bdc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d004      	beq.n	8007bf6 <USB_EPStartXfer+0xebc>
 8007bec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	029b      	lsls	r3, r3, #10
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c10:	801a      	strh	r2, [r3, #0]
 8007c12:	f000 bc04 	b.w	800841e <USB_EPStartXfer+0x16e4>
 8007c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1a:	095b      	lsrs	r3, r3, #5
 8007c1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c24:	f003 031f 	and.w	r3, r3, #31
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d104      	bne.n	8007c36 <USB_EPStartXfer+0xefc>
 8007c2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c30:	3b01      	subs	r3, #1
 8007c32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	029b      	lsls	r3, r3, #10
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c5a:	801a      	strh	r2, [r3, #0]
 8007c5c:	e3df      	b.n	800841e <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	78db      	ldrb	r3, [r3, #3]
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	f040 8218 	bne.w	80080a0 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	785b      	ldrb	r3, [r3, #1]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f040 809d 	bne.w	8007dbc <USB_EPStartXfer+0x1082>
 8007c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	00da      	lsls	r2, r3, #3
 8007cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007cda:	801a      	strh	r2, [r3, #0]
 8007cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10c      	bne.n	8007d06 <USB_EPStartXfer+0xfcc>
 8007cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d02:	801a      	strh	r2, [r3, #0]
 8007d04:	e08f      	b.n	8007e26 <USB_EPStartXfer+0x10ec>
 8007d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d14:	d826      	bhi.n	8007d64 <USB_EPStartXfer+0x102a>
 8007d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	085b      	lsrs	r3, r3, #1
 8007d24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d004      	beq.n	8007d46 <USB_EPStartXfer+0x100c>
 8007d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d40:	3301      	adds	r3, #1
 8007d42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	029b      	lsls	r3, r3, #10
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d60:	801a      	strh	r2, [r3, #0]
 8007d62:	e060      	b.n	8007e26 <USB_EPStartXfer+0x10ec>
 8007d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	095b      	lsrs	r3, r3, #5
 8007d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f003 031f 	and.w	r3, r3, #31
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d104      	bne.n	8007d94 <USB_EPStartXfer+0x105a>
 8007d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	029b      	lsls	r3, r3, #10
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	4313      	orrs	r3, r2
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007db8:	801a      	strh	r2, [r3, #0]
 8007dba:	e034      	b.n	8007e26 <USB_EPStartXfer+0x10ec>
 8007dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	785b      	ldrb	r3, [r3, #1]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d12c      	bne.n	8007e26 <USB_EPStartXfer+0x10ec>
 8007dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	461a      	mov	r2, r3
 8007dec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007df0:	4413      	add	r3, r2
 8007df2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	00da      	lsls	r2, r3, #3
 8007e04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e08:	4413      	add	r3, r2
 8007e0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007e24:	801a      	strh	r2, [r3, #0]
 8007e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	785b      	ldrb	r3, [r3, #1]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f040 809d 	bne.w	8007f80 <USB_EPStartXfer+0x1246>
 8007e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	461a      	mov	r2, r3
 8007e66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	00da      	lsls	r2, r3, #3
 8007e7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e82:	4413      	add	r3, r2
 8007e84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e9e:	801a      	strh	r2, [r3, #0]
 8007ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10c      	bne.n	8007eca <USB_EPStartXfer+0x1190>
 8007eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ec6:	801a      	strh	r2, [r3, #0]
 8007ec8:	e088      	b.n	8007fdc <USB_EPStartXfer+0x12a2>
 8007eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ed8:	d826      	bhi.n	8007f28 <USB_EPStartXfer+0x11ee>
 8007eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	085b      	lsrs	r3, r3, #1
 8007ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d004      	beq.n	8007f0a <USB_EPStartXfer+0x11d0>
 8007f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f04:	3301      	adds	r3, #1
 8007f06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	029b      	lsls	r3, r3, #10
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f24:	801a      	strh	r2, [r3, #0]
 8007f26:	e059      	b.n	8007fdc <USB_EPStartXfer+0x12a2>
 8007f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 031f 	and.w	r3, r3, #31
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <USB_EPStartXfer+0x121e>
 8007f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f52:	3b01      	subs	r3, #1
 8007f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	029b      	lsls	r3, r3, #10
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f7c:	801a      	strh	r2, [r3, #0]
 8007f7e:	e02d      	b.n	8007fdc <USB_EPStartXfer+0x12a2>
 8007f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d125      	bne.n	8007fdc <USB_EPStartXfer+0x12a2>
 8007f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	00da      	lsls	r2, r3, #3
 8007fba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fda:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 8218 	beq.w	800841e <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800800e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <USB_EPStartXfer+0x12ec>
 800801a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800801e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10d      	bne.n	8008042 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008026:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800802a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800802e:	2b00      	cmp	r3, #0
 8008030:	f040 81f5 	bne.w	800841e <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008034:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800803c:	2b00      	cmp	r3, #0
 800803e:	f040 81ee 	bne.w	800841e <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008068:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800806c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008070:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800807a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	441a      	add	r2, r3
 8008086:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800808a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800808e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008096:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800809a:	b29b      	uxth	r3, r3
 800809c:	8013      	strh	r3, [r2, #0]
 800809e:	e1be      	b.n	800841e <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80080a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	78db      	ldrb	r3, [r3, #3]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	f040 81b4 	bne.w	800841a <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80080b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699a      	ldr	r2, [r3, #24]
 80080be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d917      	bls.n	80080fe <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 80080ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80080de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	699a      	ldr	r2, [r3, #24]
 80080ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ee:	1ad2      	subs	r2, r2, r3
 80080f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	619a      	str	r2, [r3, #24]
 80080fc:	e00e      	b.n	800811c <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80080fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800810e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2200      	movs	r2, #0
 800811a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800811c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	785b      	ldrb	r3, [r3, #1]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f040 8085 	bne.w	8008238 <USB_EPStartXfer+0x14fe>
 800812e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800813c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800814a:	b29b      	uxth	r3, r3
 800814c:	461a      	mov	r2, r3
 800814e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008152:	4413      	add	r3, r2
 8008154:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800815c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	00da      	lsls	r2, r3, #3
 8008166:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800816a:	4413      	add	r3, r2
 800816c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008170:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008180:	b29a      	uxth	r2, r3
 8008182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008186:	801a      	strh	r2, [r3, #0]
 8008188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10c      	bne.n	80081aa <USB_EPStartXfer+0x1470>
 8008190:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	b29b      	uxth	r3, r3
 8008198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800819c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081a6:	801a      	strh	r2, [r3, #0]
 80081a8:	e077      	b.n	800829a <USB_EPStartXfer+0x1560>
 80081aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80081b0:	d81e      	bhi.n	80081f0 <USB_EPStartXfer+0x14b6>
 80081b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b6:	085b      	lsrs	r3, r3, #1
 80081b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d004      	beq.n	80081d2 <USB_EPStartXfer+0x1498>
 80081c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081cc:	3301      	adds	r3, #1
 80081ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	b29a      	uxth	r2, r3
 80081da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081de:	b29b      	uxth	r3, r3
 80081e0:	029b      	lsls	r3, r3, #10
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	4313      	orrs	r3, r2
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	e054      	b.n	800829a <USB_EPStartXfer+0x1560>
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081fe:	f003 031f 	and.w	r3, r3, #31
 8008202:	2b00      	cmp	r3, #0
 8008204:	d104      	bne.n	8008210 <USB_EPStartXfer+0x14d6>
 8008206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800820a:	3b01      	subs	r3, #1
 800820c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	b29a      	uxth	r2, r3
 8008218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800821c:	b29b      	uxth	r3, r3
 800821e:	029b      	lsls	r3, r3, #10
 8008220:	b29b      	uxth	r3, r3
 8008222:	4313      	orrs	r3, r2
 8008224:	b29b      	uxth	r3, r3
 8008226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800822a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800822e:	b29a      	uxth	r2, r3
 8008230:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	e030      	b.n	800829a <USB_EPStartXfer+0x1560>
 8008238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d128      	bne.n	800829a <USB_EPStartXfer+0x1560>
 8008248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008264:	b29b      	uxth	r3, r3
 8008266:	461a      	mov	r2, r3
 8008268:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800826c:	4413      	add	r3, r2
 800826e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	00da      	lsls	r2, r3, #3
 8008280:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008284:	4413      	add	r3, r2
 8008286:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800828a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800828e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008292:	b29a      	uxth	r2, r3
 8008294:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008298:	801a      	strh	r2, [r3, #0]
 800829a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800829e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f040 8085 	bne.w	80083c4 <USB_EPStartXfer+0x168a>
 80082ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	461a      	mov	r2, r3
 80082da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082de:	4413      	add	r3, r2
 80082e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	00da      	lsls	r2, r3, #3
 80082f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082f6:	4413      	add	r3, r2
 80082f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008300:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800830c:	b29a      	uxth	r2, r3
 800830e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008312:	801a      	strh	r2, [r3, #0]
 8008314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10c      	bne.n	8008336 <USB_EPStartXfer+0x15fc>
 800831c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	b29b      	uxth	r3, r3
 8008324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800832c:	b29a      	uxth	r2, r3
 800832e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008332:	801a      	strh	r2, [r3, #0]
 8008334:	e073      	b.n	800841e <USB_EPStartXfer+0x16e4>
 8008336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800833a:	2b3e      	cmp	r3, #62	@ 0x3e
 800833c:	d81e      	bhi.n	800837c <USB_EPStartXfer+0x1642>
 800833e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008342:	085b      	lsrs	r3, r3, #1
 8008344:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d004      	beq.n	800835e <USB_EPStartXfer+0x1624>
 8008354:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008358:	3301      	adds	r3, #1
 800835a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800835e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	b29a      	uxth	r2, r3
 8008366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800836a:	b29b      	uxth	r3, r3
 800836c:	029b      	lsls	r3, r3, #10
 800836e:	b29b      	uxth	r3, r3
 8008370:	4313      	orrs	r3, r2
 8008372:	b29a      	uxth	r2, r3
 8008374:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	e050      	b.n	800841e <USB_EPStartXfer+0x16e4>
 800837c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008380:	095b      	lsrs	r3, r3, #5
 8008382:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800838a:	f003 031f 	and.w	r3, r3, #31
 800838e:	2b00      	cmp	r3, #0
 8008390:	d104      	bne.n	800839c <USB_EPStartXfer+0x1662>
 8008392:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008396:	3b01      	subs	r3, #1
 8008398:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800839c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	029b      	lsls	r3, r3, #10
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	4313      	orrs	r3, r2
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80083c0:	801a      	strh	r2, [r3, #0]
 80083c2:	e02c      	b.n	800841e <USB_EPStartXfer+0x16e4>
 80083c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	785b      	ldrb	r3, [r3, #1]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d124      	bne.n	800841e <USB_EPStartXfer+0x16e4>
 80083d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083ea:	4413      	add	r3, r2
 80083ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	00da      	lsls	r2, r3, #3
 80083fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008402:	4413      	add	r3, r2
 8008404:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008408:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800840c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008410:	b29a      	uxth	r2, r3
 8008412:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008416:	801a      	strh	r2, [r3, #0]
 8008418:	e001      	b.n	800841e <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e03a      	b.n	8008494 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800841e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800842c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	b29b      	uxth	r3, r3
 800843c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008444:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008448:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800844c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008450:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008454:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008458:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800845c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008464:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	441a      	add	r2, r3
 800847a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800847e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800848a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800848e:	b29b      	uxth	r3, r3
 8008490:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800849e:	b480      	push	{r7}
 80084a0:	b085      	sub	sp, #20
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	785b      	ldrb	r3, [r3, #1]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d020      	beq.n	80084f2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	881b      	ldrh	r3, [r3, #0]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084c6:	81bb      	strh	r3, [r7, #12]
 80084c8:	89bb      	ldrh	r3, [r7, #12]
 80084ca:	f083 0310 	eor.w	r3, r3, #16
 80084ce:	81bb      	strh	r3, [r7, #12]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	441a      	add	r2, r3
 80084da:	89bb      	ldrh	r3, [r7, #12]
 80084dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	8013      	strh	r3, [r2, #0]
 80084f0:	e01f      	b.n	8008532 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008508:	81fb      	strh	r3, [r7, #14]
 800850a:	89fb      	ldrh	r3, [r7, #14]
 800850c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008510:	81fb      	strh	r3, [r7, #14]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	441a      	add	r2, r3
 800851c:	89fb      	ldrh	r3, [r7, #14]
 800851e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800852a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800852e:	b29b      	uxth	r3, r3
 8008530:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	7b1b      	ldrb	r3, [r3, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	f040 809d 	bne.w	800868e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	785b      	ldrb	r3, [r3, #1]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d04c      	beq.n	80085f6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	823b      	strh	r3, [r7, #16]
 800856a:	8a3b      	ldrh	r3, [r7, #16]
 800856c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008570:	2b00      	cmp	r3, #0
 8008572:	d01b      	beq.n	80085ac <USB_EPClearStall+0x6c>
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	b29b      	uxth	r3, r3
 8008582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800858a:	81fb      	strh	r3, [r7, #14]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	441a      	add	r2, r3
 8008596:	89fb      	ldrh	r3, [r7, #14]
 8008598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800859c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	78db      	ldrb	r3, [r3, #3]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d06c      	beq.n	800868e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085ca:	81bb      	strh	r3, [r7, #12]
 80085cc:	89bb      	ldrh	r3, [r7, #12]
 80085ce:	f083 0320 	eor.w	r3, r3, #32
 80085d2:	81bb      	strh	r3, [r7, #12]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	441a      	add	r2, r3
 80085de:	89bb      	ldrh	r3, [r7, #12]
 80085e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	8013      	strh	r3, [r2, #0]
 80085f4:	e04b      	b.n	800868e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	82fb      	strh	r3, [r7, #22]
 8008604:	8afb      	ldrh	r3, [r7, #22]
 8008606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d01b      	beq.n	8008646 <USB_EPClearStall+0x106>
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	b29b      	uxth	r3, r3
 800861c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008624:	82bb      	strh	r3, [r7, #20]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	441a      	add	r2, r3
 8008630:	8abb      	ldrh	r3, [r7, #20]
 8008632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800863a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800863e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008642:	b29b      	uxth	r3, r3
 8008644:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	b29b      	uxth	r3, r3
 8008654:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800865c:	827b      	strh	r3, [r7, #18]
 800865e:	8a7b      	ldrh	r3, [r7, #18]
 8008660:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008664:	827b      	strh	r3, [r7, #18]
 8008666:	8a7b      	ldrh	r3, [r7, #18]
 8008668:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800866c:	827b      	strh	r3, [r7, #18]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	441a      	add	r2, r3
 8008678:	8a7b      	ldrh	r3, [r7, #18]
 800867a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800867e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800868a:	b29b      	uxth	r3, r3
 800868c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	371c      	adds	r7, #28
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	460b      	mov	r3, r1
 80086a6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d103      	bne.n	80086b6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2280      	movs	r2, #128	@ 0x80
 80086b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80086da:	b480      	push	{r7}
 80086dc:	b085      	sub	sp, #20
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80086ec:	68fb      	ldr	r3, [r7, #12]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b08b      	sub	sp, #44	@ 0x2c
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	4611      	mov	r1, r2
 8008706:	461a      	mov	r2, r3
 8008708:	460b      	mov	r3, r1
 800870a:	80fb      	strh	r3, [r7, #6]
 800870c:	4613      	mov	r3, r2
 800870e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008710:	88bb      	ldrh	r3, [r7, #4]
 8008712:	3301      	adds	r3, #1
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008720:	88fa      	ldrh	r2, [r7, #6]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	4413      	add	r3, r2
 8008726:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800872a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008730:	e01b      	b.n	800876a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	3301      	adds	r3, #1
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	021b      	lsls	r3, r3, #8
 8008740:	b21a      	sxth	r2, r3
 8008742:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008746:	4313      	orrs	r3, r2
 8008748:	b21b      	sxth	r3, r3
 800874a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	8a7a      	ldrh	r2, [r7, #18]
 8008750:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	3302      	adds	r3, #2
 8008756:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	3301      	adds	r3, #1
 800875c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	3301      	adds	r3, #1
 8008762:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008766:	3b01      	subs	r3, #1
 8008768:	627b      	str	r3, [r7, #36]	@ 0x24
 800876a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1e0      	bne.n	8008732 <USB_WritePMA+0x38>
  }
}
 8008770:	bf00      	nop
 8008772:	bf00      	nop
 8008774:	372c      	adds	r7, #44	@ 0x2c
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800877e:	b480      	push	{r7}
 8008780:	b08b      	sub	sp, #44	@ 0x2c
 8008782:	af00      	add	r7, sp, #0
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	4611      	mov	r1, r2
 800878a:	461a      	mov	r2, r3
 800878c:	460b      	mov	r3, r1
 800878e:	80fb      	strh	r3, [r7, #6]
 8008790:	4613      	mov	r3, r2
 8008792:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008794:	88bb      	ldrh	r3, [r7, #4]
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	b29b      	uxth	r3, r3
 800879a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087a4:	88fa      	ldrh	r2, [r7, #6]
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80087b4:	e018      	b.n	80087e8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	3302      	adds	r3, #2
 80087c2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	3301      	adds	r3, #1
 80087d0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	0a1b      	lsrs	r3, r3, #8
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	3301      	adds	r3, #1
 80087e0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e4:	3b01      	subs	r3, #1
 80087e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80087e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1e3      	bne.n	80087b6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80087ee:	88bb      	ldrh	r3, [r7, #4]
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d007      	beq.n	800880a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	b2da      	uxtb	r2, r3
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	701a      	strb	r2, [r3, #0]
  }
}
 800880a:	bf00      	nop
 800880c:	372c      	adds	r7, #44	@ 0x2c
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	7c1b      	ldrb	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d115      	bne.n	800885a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800882e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008832:	2202      	movs	r2, #2
 8008834:	2181      	movs	r1, #129	@ 0x81
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f001 fe39 	bl	800a4ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008842:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008846:	2202      	movs	r2, #2
 8008848:	2101      	movs	r1, #1
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 fe2f 	bl	800a4ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008858:	e012      	b.n	8008880 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800885a:	2340      	movs	r3, #64	@ 0x40
 800885c:	2202      	movs	r2, #2
 800885e:	2181      	movs	r1, #129	@ 0x81
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 fe24 	bl	800a4ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800886c:	2340      	movs	r3, #64	@ 0x40
 800886e:	2202      	movs	r2, #2
 8008870:	2101      	movs	r1, #1
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f001 fe1b 	bl	800a4ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008880:	2308      	movs	r3, #8
 8008882:	2203      	movs	r2, #3
 8008884:	2182      	movs	r1, #130	@ 0x82
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 fe11 	bl	800a4ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008892:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008896:	f001 ff31 	bl	800a6fc <USBD_static_malloc>
 800889a:	4602      	mov	r2, r0
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d102      	bne.n	80088b2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80088ac:	2301      	movs	r3, #1
 80088ae:	73fb      	strb	r3, [r7, #15]
 80088b0:	e026      	b.n	8008900 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088b8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	7c1b      	ldrb	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d109      	bne.n	80088f0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088e6:	2101      	movs	r1, #1
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 fed1 	bl	800a690 <USBD_LL_PrepareReceive>
 80088ee:	e007      	b.n	8008900 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088f6:	2340      	movs	r3, #64	@ 0x40
 80088f8:	2101      	movs	r1, #1
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 fec8 	bl	800a690 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008900:	7bfb      	ldrb	r3, [r7, #15]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	460b      	mov	r3, r1
 8008914:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800891a:	2181      	movs	r1, #129	@ 0x81
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 fdec 	bl	800a4fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008928:	2101      	movs	r1, #1
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 fde5 	bl	800a4fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008938:	2182      	movs	r1, #130	@ 0x82
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 fddd 	bl	800a4fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00e      	beq.n	800896e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008960:	4618      	mov	r0, r3
 8008962:	f001 fed9 	bl	800a718 <USBD_static_free>
    pdev->pClassData = NULL;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008988:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d039      	beq.n	8008a16 <USBD_CDC_Setup+0x9e>
 80089a2:	2b20      	cmp	r3, #32
 80089a4:	d17f      	bne.n	8008aa6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	88db      	ldrh	r3, [r3, #6]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d029      	beq.n	8008a02 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	b25b      	sxtb	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da11      	bge.n	80089dc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80089c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	88d2      	ldrh	r2, [r2, #6]
 80089ca:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80089cc:	6939      	ldr	r1, [r7, #16]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	88db      	ldrh	r3, [r3, #6]
 80089d2:	461a      	mov	r2, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f001 f9df 	bl	8009d98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80089da:	e06b      	b.n	8008ab4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	785a      	ldrb	r2, [r3, #1]
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	88db      	ldrh	r3, [r3, #6]
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80089f2:	6939      	ldr	r1, [r7, #16]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	88db      	ldrh	r3, [r3, #6]
 80089f8:	461a      	mov	r2, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 f9fa 	bl	8009df4 <USBD_CtlPrepareRx>
      break;
 8008a00:	e058      	b.n	8008ab4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	7850      	ldrb	r0, [r2, #1]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	4798      	blx	r3
      break;
 8008a14:	e04e      	b.n	8008ab4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	785b      	ldrb	r3, [r3, #1]
 8008a1a:	2b0b      	cmp	r3, #11
 8008a1c:	d02e      	beq.n	8008a7c <USBD_CDC_Setup+0x104>
 8008a1e:	2b0b      	cmp	r3, #11
 8008a20:	dc38      	bgt.n	8008a94 <USBD_CDC_Setup+0x11c>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <USBD_CDC_Setup+0xb4>
 8008a26:	2b0a      	cmp	r3, #10
 8008a28:	d014      	beq.n	8008a54 <USBD_CDC_Setup+0xdc>
 8008a2a:	e033      	b.n	8008a94 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d107      	bne.n	8008a46 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008a36:	f107 030c 	add.w	r3, r7, #12
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 f9aa 	bl	8009d98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a44:	e02e      	b.n	8008aa4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 f93a 	bl	8009cc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a4e:	2302      	movs	r3, #2
 8008a50:	75fb      	strb	r3, [r7, #23]
          break;
 8008a52:	e027      	b.n	8008aa4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d107      	bne.n	8008a6e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a5e:	f107 030f 	add.w	r3, r7, #15
 8008a62:	2201      	movs	r2, #1
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 f996 	bl	8009d98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a6c:	e01a      	b.n	8008aa4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 f926 	bl	8009cc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a76:	2302      	movs	r3, #2
 8008a78:	75fb      	strb	r3, [r7, #23]
          break;
 8008a7a:	e013      	b.n	8008aa4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d00d      	beq.n	8008aa2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 f91a 	bl	8009cc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a92:	e006      	b.n	8008aa2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f001 f913 	bl	8009cc2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	75fb      	strb	r3, [r7, #23]
          break;
 8008aa0:	e000      	b.n	8008aa4 <USBD_CDC_Setup+0x12c>
          break;
 8008aa2:	bf00      	nop
      }
      break;
 8008aa4:	e006      	b.n	8008ab4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f001 f90a 	bl	8009cc2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ab2:	bf00      	nop
  }

  return ret;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ad0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ad8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d03a      	beq.n	8008b5a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ae4:	78fa      	ldrb	r2, [r7, #3]
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	440b      	add	r3, r1
 8008af2:	331c      	adds	r3, #28
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d029      	beq.n	8008b4e <USBD_CDC_DataIn+0x90>
 8008afa:	78fa      	ldrb	r2, [r7, #3]
 8008afc:	6879      	ldr	r1, [r7, #4]
 8008afe:	4613      	mov	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	440b      	add	r3, r1
 8008b08:	331c      	adds	r3, #28
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	78f9      	ldrb	r1, [r7, #3]
 8008b0e:	68b8      	ldr	r0, [r7, #8]
 8008b10:	460b      	mov	r3, r1
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	440b      	add	r3, r1
 8008b16:	00db      	lsls	r3, r3, #3
 8008b18:	4403      	add	r3, r0
 8008b1a:	3320      	adds	r3, #32
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b22:	fb01 f303 	mul.w	r3, r1, r3
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d110      	bne.n	8008b4e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008b2c:	78fa      	ldrb	r2, [r7, #3]
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	4613      	mov	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4413      	add	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	440b      	add	r3, r1
 8008b3a:	331c      	adds	r3, #28
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b40:	78f9      	ldrb	r1, [r7, #3]
 8008b42:	2300      	movs	r3, #0
 8008b44:	2200      	movs	r2, #0
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f001 fd7f 	bl	800a64a <USBD_LL_Transmit>
 8008b4c:	e003      	b.n	8008b56 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	e000      	b.n	8008b5c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008b5a:	2302      	movs	r3, #2
  }
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b78:	78fb      	ldrb	r3, [r7, #3]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 fdaa 	bl	800a6d6 <USBD_LL_GetRxDataSize>
 8008b82:	4602      	mov	r2, r0
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00d      	beq.n	8008bb0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4798      	blx	r3

    return USBD_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	e000      	b.n	8008bb2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008bb0:	2302      	movs	r3, #2
  }
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bc8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d014      	beq.n	8008bfe <USBD_CDC_EP0_RxReady+0x44>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008bda:	2bff      	cmp	r3, #255	@ 0xff
 8008bdc:	d00f      	beq.n	8008bfe <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008bec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008bf4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	22ff      	movs	r2, #255	@ 0xff
 8008bfa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2243      	movs	r2, #67	@ 0x43
 8008c14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008c16:	4b03      	ldr	r3, [pc, #12]	@ (8008c24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	20000094 	.word	0x20000094

08008c28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2243      	movs	r2, #67	@ 0x43
 8008c34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008c36:	4b03      	ldr	r3, [pc, #12]	@ (8008c44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	20000050 	.word	0x20000050

08008c48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2243      	movs	r2, #67	@ 0x43
 8008c54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008c56:	4b03      	ldr	r3, [pc, #12]	@ (8008c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	200000d8 	.word	0x200000d8

08008c68 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	220a      	movs	r2, #10
 8008c74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008c76:	4b03      	ldr	r3, [pc, #12]	@ (8008c84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	2000000c 	.word	0x2000000c

08008c88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008c92:	2302      	movs	r3, #2
 8008c94:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d005      	beq.n	8008ca8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b087      	sub	sp, #28
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cca:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008cd4:	88fa      	ldrh	r2, [r7, #6]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	371c      	adds	r7, #28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cfa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d017      	beq.n	8008d5c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	7c1b      	ldrb	r3, [r3, #16]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d109      	bne.n	8008d48 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d3e:	2101      	movs	r1, #1
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 fca5 	bl	800a690 <USBD_LL_PrepareReceive>
 8008d46:	e007      	b.n	8008d58 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d4e:	2340      	movs	r3, #64	@ 0x40
 8008d50:	2101      	movs	r1, #1
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f001 fc9c 	bl	800a690 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e000      	b.n	8008d5e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008d5c:	2302      	movs	r3, #2
  }
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	4613      	mov	r3, r2
 8008d72:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	e01a      	b.n	8008db4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	79fa      	ldrb	r2, [r7, #7]
 8008daa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f001 fb07 	bl	800a3c0 <USBD_LL_Init>

  return USBD_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d006      	beq.n	8008dde <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
 8008ddc:	e001      	b.n	8008de2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008dde:	2302      	movs	r3, #2
 8008de0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f001 fb3d 	bl	800a478 <USBD_LL_Start>

  return USBD_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00c      	beq.n	8008e52 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	78fa      	ldrb	r2, [r7, #3]
 8008e42:	4611      	mov	r1, r2
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	4798      	blx	r3
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	78fa      	ldrb	r2, [r7, #3]
 8008e72:	4611      	mov	r1, r2
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	4798      	blx	r3

  return USBD_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 feda 	bl	8009c4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008eb6:	f003 031f 	and.w	r3, r3, #31
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d016      	beq.n	8008eec <USBD_LL_SetupStage+0x6a>
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d81c      	bhi.n	8008efc <USBD_LL_SetupStage+0x7a>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <USBD_LL_SetupStage+0x4a>
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d008      	beq.n	8008edc <USBD_LL_SetupStage+0x5a>
 8008eca:	e017      	b.n	8008efc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f9cd 	bl	8009274 <USBD_StdDevReq>
      break;
 8008eda:	e01a      	b.n	8008f12 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fa2f 	bl	8009348 <USBD_StdItfReq>
      break;
 8008eea:	e012      	b.n	8008f12 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fa6f 	bl	80093d8 <USBD_StdEPReq>
      break;
 8008efa:	e00a      	b.n	8008f12 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008f02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f001 fb14 	bl	800a538 <USBD_LL_StallEP>
      break;
 8008f10:	bf00      	nop
  }

  return USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	460b      	mov	r3, r1
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f2a:	7afb      	ldrb	r3, [r7, #11]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d14b      	bne.n	8008fc8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008f36:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d134      	bne.n	8008fac <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	68da      	ldr	r2, [r3, #12]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d919      	bls.n	8008f82 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d203      	bcs.n	8008f70 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	e002      	b.n	8008f76 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	461a      	mov	r2, r3
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 ff58 	bl	8009e30 <USBD_CtlContinueRx>
 8008f80:	e038      	b.n	8008ff4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00a      	beq.n	8008fa4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d105      	bne.n	8008fa4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 ff55 	bl	8009e54 <USBD_CtlSendStatus>
 8008faa:	e023      	b.n	8008ff4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	d11e      	bne.n	8008ff4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f001 fab9 	bl	800a538 <USBD_LL_StallEP>
 8008fc6:	e015      	b.n	8008ff4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00d      	beq.n	8008ff0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d108      	bne.n	8008ff0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	7afa      	ldrb	r2, [r7, #11]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	4798      	blx	r3
 8008fee:	e001      	b.n	8008ff4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e000      	b.n	8008ff6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3718      	adds	r7, #24
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b086      	sub	sp, #24
 8009002:	af00      	add	r7, sp, #0
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	460b      	mov	r3, r1
 8009008:	607a      	str	r2, [r7, #4]
 800900a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800900c:	7afb      	ldrb	r3, [r7, #11]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d17f      	bne.n	8009112 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3314      	adds	r3, #20
 8009016:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800901e:	2b02      	cmp	r3, #2
 8009020:	d15c      	bne.n	80090dc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	429a      	cmp	r2, r3
 800902c:	d915      	bls.n	800905a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	1ad2      	subs	r2, r2, r3
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	b29b      	uxth	r3, r3
 8009042:	461a      	mov	r2, r3
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 fec2 	bl	8009dd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800904c:	2300      	movs	r3, #0
 800904e:	2200      	movs	r2, #0
 8009050:	2100      	movs	r1, #0
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f001 fb1c 	bl	800a690 <USBD_LL_PrepareReceive>
 8009058:	e04e      	b.n	80090f8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	6912      	ldr	r2, [r2, #16]
 8009062:	fbb3 f1f2 	udiv	r1, r3, r2
 8009066:	fb01 f202 	mul.w	r2, r1, r2
 800906a:	1a9b      	subs	r3, r3, r2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d11c      	bne.n	80090aa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	689a      	ldr	r2, [r3, #8]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009078:	429a      	cmp	r2, r3
 800907a:	d316      	bcc.n	80090aa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009086:	429a      	cmp	r2, r3
 8009088:	d20f      	bcs.n	80090aa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800908a:	2200      	movs	r2, #0
 800908c:	2100      	movs	r1, #0
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 fe9e 	bl	8009dd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800909c:	2300      	movs	r3, #0
 800909e:	2200      	movs	r2, #0
 80090a0:	2100      	movs	r1, #0
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f001 faf4 	bl	800a690 <USBD_LL_PrepareReceive>
 80090a8:	e026      	b.n	80090f8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00a      	beq.n	80090cc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d105      	bne.n	80090cc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80090cc:	2180      	movs	r1, #128	@ 0x80
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f001 fa32 	bl	800a538 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 fed0 	bl	8009e7a <USBD_CtlReceiveStatus>
 80090da:	e00d      	b.n	80090f8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d004      	beq.n	80090f0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d103      	bne.n	80090f8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80090f0:	2180      	movs	r1, #128	@ 0x80
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f001 fa20 	bl	800a538 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d11d      	bne.n	800913e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f7ff fe80 	bl	8008e08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009110:	e015      	b.n	800913e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00d      	beq.n	800913a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009124:	2b03      	cmp	r3, #3
 8009126:	d108      	bne.n	800913a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	7afa      	ldrb	r2, [r7, #11]
 8009132:	4611      	mov	r1, r2
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	4798      	blx	r3
 8009138:	e001      	b.n	800913e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800913a:	2302      	movs	r3, #2
 800913c:	e000      	b.n	8009140 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009150:	2340      	movs	r3, #64	@ 0x40
 8009152:	2200      	movs	r2, #0
 8009154:	2100      	movs	r1, #0
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f001 f9a9 	bl	800a4ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2240      	movs	r2, #64	@ 0x40
 8009168:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800916c:	2340      	movs	r3, #64	@ 0x40
 800916e:	2200      	movs	r2, #0
 8009170:	2180      	movs	r1, #128	@ 0x80
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 f99b 	bl	800a4ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2240      	movs	r2, #64	@ 0x40
 8009182:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d009      	beq.n	80091c0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	6852      	ldr	r2, [r2, #4]
 80091b8:	b2d2      	uxtb	r2, r2
 80091ba:	4611      	mov	r1, r2
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	4798      	blx	r3
  }

  return USBD_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b083      	sub	sp, #12
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	460b      	mov	r3, r1
 80091d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	78fa      	ldrb	r2, [r7, #3]
 80091da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2204      	movs	r2, #4
 8009202:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009222:	2b04      	cmp	r3, #4
 8009224:	d105      	bne.n	8009232 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800924e:	2b03      	cmp	r3, #3
 8009250:	d10b      	bne.n	800926a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d005      	beq.n	800926a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800928a:	2b40      	cmp	r3, #64	@ 0x40
 800928c:	d005      	beq.n	800929a <USBD_StdDevReq+0x26>
 800928e:	2b40      	cmp	r3, #64	@ 0x40
 8009290:	d84f      	bhi.n	8009332 <USBD_StdDevReq+0xbe>
 8009292:	2b00      	cmp	r3, #0
 8009294:	d009      	beq.n	80092aa <USBD_StdDevReq+0x36>
 8009296:	2b20      	cmp	r3, #32
 8009298:	d14b      	bne.n	8009332 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	4798      	blx	r3
      break;
 80092a8:	e048      	b.n	800933c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	785b      	ldrb	r3, [r3, #1]
 80092ae:	2b09      	cmp	r3, #9
 80092b0:	d839      	bhi.n	8009326 <USBD_StdDevReq+0xb2>
 80092b2:	a201      	add	r2, pc, #4	@ (adr r2, 80092b8 <USBD_StdDevReq+0x44>)
 80092b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b8:	08009309 	.word	0x08009309
 80092bc:	0800931d 	.word	0x0800931d
 80092c0:	08009327 	.word	0x08009327
 80092c4:	08009313 	.word	0x08009313
 80092c8:	08009327 	.word	0x08009327
 80092cc:	080092eb 	.word	0x080092eb
 80092d0:	080092e1 	.word	0x080092e1
 80092d4:	08009327 	.word	0x08009327
 80092d8:	080092ff 	.word	0x080092ff
 80092dc:	080092f5 	.word	0x080092f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f9dc 	bl	80096a0 <USBD_GetDescriptor>
          break;
 80092e8:	e022      	b.n	8009330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fb3f 	bl	8009970 <USBD_SetAddress>
          break;
 80092f2:	e01d      	b.n	8009330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fb7e 	bl	80099f8 <USBD_SetConfig>
          break;
 80092fc:	e018      	b.n	8009330 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fc07 	bl	8009b14 <USBD_GetConfig>
          break;
 8009306:	e013      	b.n	8009330 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fc37 	bl	8009b7e <USBD_GetStatus>
          break;
 8009310:	e00e      	b.n	8009330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009312:	6839      	ldr	r1, [r7, #0]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fc65 	bl	8009be4 <USBD_SetFeature>
          break;
 800931a:	e009      	b.n	8009330 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fc74 	bl	8009c0c <USBD_ClrFeature>
          break;
 8009324:	e004      	b.n	8009330 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fcca 	bl	8009cc2 <USBD_CtlError>
          break;
 800932e:	bf00      	nop
      }
      break;
 8009330:	e004      	b.n	800933c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fcc4 	bl	8009cc2 <USBD_CtlError>
      break;
 800933a:	bf00      	nop
  }

  return ret;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop

08009348 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800935e:	2b40      	cmp	r3, #64	@ 0x40
 8009360:	d005      	beq.n	800936e <USBD_StdItfReq+0x26>
 8009362:	2b40      	cmp	r3, #64	@ 0x40
 8009364:	d82e      	bhi.n	80093c4 <USBD_StdItfReq+0x7c>
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <USBD_StdItfReq+0x26>
 800936a:	2b20      	cmp	r3, #32
 800936c:	d12a      	bne.n	80093c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009374:	3b01      	subs	r3, #1
 8009376:	2b02      	cmp	r3, #2
 8009378:	d81d      	bhi.n	80093b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	889b      	ldrh	r3, [r3, #4]
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b01      	cmp	r3, #1
 8009382:	d813      	bhi.n	80093ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
 8009392:	4603      	mov	r3, r0
 8009394:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	88db      	ldrh	r3, [r3, #6]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d110      	bne.n	80093c0 <USBD_StdItfReq+0x78>
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10d      	bne.n	80093c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fd55 	bl	8009e54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80093aa:	e009      	b.n	80093c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fc87 	bl	8009cc2 <USBD_CtlError>
          break;
 80093b4:	e004      	b.n	80093c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fc82 	bl	8009cc2 <USBD_CtlError>
          break;
 80093be:	e000      	b.n	80093c2 <USBD_StdItfReq+0x7a>
          break;
 80093c0:	bf00      	nop
      }
      break;
 80093c2:	e004      	b.n	80093ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fc7b 	bl	8009cc2 <USBD_CtlError>
      break;
 80093cc:	bf00      	nop
  }

  return USBD_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	889b      	ldrh	r3, [r3, #4]
 80093ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093f4:	2b40      	cmp	r3, #64	@ 0x40
 80093f6:	d007      	beq.n	8009408 <USBD_StdEPReq+0x30>
 80093f8:	2b40      	cmp	r3, #64	@ 0x40
 80093fa:	f200 8146 	bhi.w	800968a <USBD_StdEPReq+0x2b2>
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <USBD_StdEPReq+0x40>
 8009402:	2b20      	cmp	r3, #32
 8009404:	f040 8141 	bne.w	800968a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	4798      	blx	r3
      break;
 8009416:	e13d      	b.n	8009694 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009420:	2b20      	cmp	r3, #32
 8009422:	d10a      	bne.n	800943a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	4798      	blx	r3
 8009432:	4603      	mov	r3, r0
 8009434:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	e12d      	b.n	8009696 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	785b      	ldrb	r3, [r3, #1]
 800943e:	2b03      	cmp	r3, #3
 8009440:	d007      	beq.n	8009452 <USBD_StdEPReq+0x7a>
 8009442:	2b03      	cmp	r3, #3
 8009444:	f300 811b 	bgt.w	800967e <USBD_StdEPReq+0x2a6>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d072      	beq.n	8009532 <USBD_StdEPReq+0x15a>
 800944c:	2b01      	cmp	r3, #1
 800944e:	d03a      	beq.n	80094c6 <USBD_StdEPReq+0xee>
 8009450:	e115      	b.n	800967e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009458:	2b02      	cmp	r3, #2
 800945a:	d002      	beq.n	8009462 <USBD_StdEPReq+0x8a>
 800945c:	2b03      	cmp	r3, #3
 800945e:	d015      	beq.n	800948c <USBD_StdEPReq+0xb4>
 8009460:	e02b      	b.n	80094ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00c      	beq.n	8009482 <USBD_StdEPReq+0xaa>
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	2b80      	cmp	r3, #128	@ 0x80
 800946c:	d009      	beq.n	8009482 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f001 f860 	bl	800a538 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009478:	2180      	movs	r1, #128	@ 0x80
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f001 f85c 	bl	800a538 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009480:	e020      	b.n	80094c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fc1c 	bl	8009cc2 <USBD_CtlError>
              break;
 800948a:	e01b      	b.n	80094c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	885b      	ldrh	r3, [r3, #2]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10e      	bne.n	80094b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009494:	7bbb      	ldrb	r3, [r7, #14]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00b      	beq.n	80094b2 <USBD_StdEPReq+0xda>
 800949a:	7bbb      	ldrb	r3, [r7, #14]
 800949c:	2b80      	cmp	r3, #128	@ 0x80
 800949e:	d008      	beq.n	80094b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	88db      	ldrh	r3, [r3, #6]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d104      	bne.n	80094b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80094a8:	7bbb      	ldrb	r3, [r7, #14]
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f001 f843 	bl	800a538 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fcce 	bl	8009e54 <USBD_CtlSendStatus>

              break;
 80094b8:	e004      	b.n	80094c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80094ba:	6839      	ldr	r1, [r7, #0]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fc00 	bl	8009cc2 <USBD_CtlError>
              break;
 80094c2:	bf00      	nop
          }
          break;
 80094c4:	e0e0      	b.n	8009688 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d002      	beq.n	80094d6 <USBD_StdEPReq+0xfe>
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d015      	beq.n	8009500 <USBD_StdEPReq+0x128>
 80094d4:	e026      	b.n	8009524 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <USBD_StdEPReq+0x11e>
 80094dc:	7bbb      	ldrb	r3, [r7, #14]
 80094de:	2b80      	cmp	r3, #128	@ 0x80
 80094e0:	d009      	beq.n	80094f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f001 f826 	bl	800a538 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094ec:	2180      	movs	r1, #128	@ 0x80
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f001 f822 	bl	800a538 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094f4:	e01c      	b.n	8009530 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fbe2 	bl	8009cc2 <USBD_CtlError>
              break;
 80094fe:	e017      	b.n	8009530 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	885b      	ldrh	r3, [r3, #2]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d112      	bne.n	800952e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800950e:	2b00      	cmp	r3, #0
 8009510:	d004      	beq.n	800951c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009512:	7bbb      	ldrb	r3, [r7, #14]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 f82d 	bl	800a576 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fc99 	bl	8009e54 <USBD_CtlSendStatus>
              }
              break;
 8009522:	e004      	b.n	800952e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fbcb 	bl	8009cc2 <USBD_CtlError>
              break;
 800952c:	e000      	b.n	8009530 <USBD_StdEPReq+0x158>
              break;
 800952e:	bf00      	nop
          }
          break;
 8009530:	e0aa      	b.n	8009688 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009538:	2b02      	cmp	r3, #2
 800953a:	d002      	beq.n	8009542 <USBD_StdEPReq+0x16a>
 800953c:	2b03      	cmp	r3, #3
 800953e:	d032      	beq.n	80095a6 <USBD_StdEPReq+0x1ce>
 8009540:	e097      	b.n	8009672 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d007      	beq.n	8009558 <USBD_StdEPReq+0x180>
 8009548:	7bbb      	ldrb	r3, [r7, #14]
 800954a:	2b80      	cmp	r3, #128	@ 0x80
 800954c:	d004      	beq.n	8009558 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fbb6 	bl	8009cc2 <USBD_CtlError>
                break;
 8009556:	e091      	b.n	800967c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800955c:	2b00      	cmp	r3, #0
 800955e:	da0b      	bge.n	8009578 <USBD_StdEPReq+0x1a0>
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	3310      	adds	r3, #16
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	4413      	add	r3, r2
 8009574:	3304      	adds	r3, #4
 8009576:	e00b      	b.n	8009590 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800957e:	4613      	mov	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	4413      	add	r3, r2
 800958e:	3304      	adds	r3, #4
 8009590:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2200      	movs	r2, #0
 8009596:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2202      	movs	r2, #2
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fbfa 	bl	8009d98 <USBD_CtlSendData>
              break;
 80095a4:	e06a      	b.n	800967c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	da11      	bge.n	80095d2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	f003 020f 	and.w	r2, r3, #15
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	3318      	adds	r3, #24
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d117      	bne.n	80095f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fb79 	bl	8009cc2 <USBD_CtlError>
                  break;
 80095d0:	e054      	b.n	800967c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095d2:	7bbb      	ldrb	r3, [r7, #14]
 80095d4:	f003 020f 	and.w	r2, r3, #15
 80095d8:	6879      	ldr	r1, [r7, #4]
 80095da:	4613      	mov	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	440b      	add	r3, r1
 80095e4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d104      	bne.n	80095f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fb66 	bl	8009cc2 <USBD_CtlError>
                  break;
 80095f6:	e041      	b.n	800967c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	da0b      	bge.n	8009618 <USBD_StdEPReq+0x240>
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	3310      	adds	r3, #16
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	4413      	add	r3, r2
 8009614:	3304      	adds	r3, #4
 8009616:	e00b      	b.n	8009630 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009618:	7bbb      	ldrb	r3, [r7, #14]
 800961a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	4413      	add	r3, r2
 800962e:	3304      	adds	r3, #4
 8009630:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <USBD_StdEPReq+0x266>
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	2b80      	cmp	r3, #128	@ 0x80
 800963c:	d103      	bne.n	8009646 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	e00e      	b.n	8009664 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 ffb2 	bl	800a5b4 <USBD_LL_IsStallEP>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2201      	movs	r2, #1
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	e002      	b.n	8009664 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	2200      	movs	r2, #0
 8009662:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2202      	movs	r2, #2
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fb94 	bl	8009d98 <USBD_CtlSendData>
              break;
 8009670:	e004      	b.n	800967c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fb24 	bl	8009cc2 <USBD_CtlError>
              break;
 800967a:	bf00      	nop
          }
          break;
 800967c:	e004      	b.n	8009688 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fb1e 	bl	8009cc2 <USBD_CtlError>
          break;
 8009686:	bf00      	nop
      }
      break;
 8009688:	e004      	b.n	8009694 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fb18 	bl	8009cc2 <USBD_CtlError>
      break;
 8009692:	bf00      	nop
  }

  return ret;
 8009694:	7bfb      	ldrb	r3, [r7, #15]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096aa:	2300      	movs	r3, #0
 80096ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096b2:	2300      	movs	r3, #0
 80096b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	885b      	ldrh	r3, [r3, #2]
 80096ba:	0a1b      	lsrs	r3, r3, #8
 80096bc:	b29b      	uxth	r3, r3
 80096be:	3b01      	subs	r3, #1
 80096c0:	2b06      	cmp	r3, #6
 80096c2:	f200 8128 	bhi.w	8009916 <USBD_GetDescriptor+0x276>
 80096c6:	a201      	add	r2, pc, #4	@ (adr r2, 80096cc <USBD_GetDescriptor+0x2c>)
 80096c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096cc:	080096e9 	.word	0x080096e9
 80096d0:	08009701 	.word	0x08009701
 80096d4:	08009741 	.word	0x08009741
 80096d8:	08009917 	.word	0x08009917
 80096dc:	08009917 	.word	0x08009917
 80096e0:	080098b7 	.word	0x080098b7
 80096e4:	080098e3 	.word	0x080098e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	7c12      	ldrb	r2, [r2, #16]
 80096f4:	f107 0108 	add.w	r1, r7, #8
 80096f8:	4610      	mov	r0, r2
 80096fa:	4798      	blx	r3
 80096fc:	60f8      	str	r0, [r7, #12]
      break;
 80096fe:	e112      	b.n	8009926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	7c1b      	ldrb	r3, [r3, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10d      	bne.n	8009724 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800970e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009710:	f107 0208 	add.w	r2, r7, #8
 8009714:	4610      	mov	r0, r2
 8009716:	4798      	blx	r3
 8009718:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3301      	adds	r3, #1
 800971e:	2202      	movs	r2, #2
 8009720:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009722:	e100      	b.n	8009926 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800972a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800972c:	f107 0208 	add.w	r2, r7, #8
 8009730:	4610      	mov	r0, r2
 8009732:	4798      	blx	r3
 8009734:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	3301      	adds	r3, #1
 800973a:	2202      	movs	r2, #2
 800973c:	701a      	strb	r2, [r3, #0]
      break;
 800973e:	e0f2      	b.n	8009926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	885b      	ldrh	r3, [r3, #2]
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b05      	cmp	r3, #5
 8009748:	f200 80ac 	bhi.w	80098a4 <USBD_GetDescriptor+0x204>
 800974c:	a201      	add	r2, pc, #4	@ (adr r2, 8009754 <USBD_GetDescriptor+0xb4>)
 800974e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009752:	bf00      	nop
 8009754:	0800976d 	.word	0x0800976d
 8009758:	080097a1 	.word	0x080097a1
 800975c:	080097d5 	.word	0x080097d5
 8009760:	08009809 	.word	0x08009809
 8009764:	0800983d 	.word	0x0800983d
 8009768:	08009871 	.word	0x08009871
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	7c12      	ldrb	r2, [r2, #16]
 8009784:	f107 0108 	add.w	r1, r7, #8
 8009788:	4610      	mov	r0, r2
 800978a:	4798      	blx	r3
 800978c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800978e:	e091      	b.n	80098b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fa95 	bl	8009cc2 <USBD_CtlError>
            err++;
 8009798:	7afb      	ldrb	r3, [r7, #11]
 800979a:	3301      	adds	r3, #1
 800979c:	72fb      	strb	r3, [r7, #11]
          break;
 800979e:	e089      	b.n	80098b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	7c12      	ldrb	r2, [r2, #16]
 80097b8:	f107 0108 	add.w	r1, r7, #8
 80097bc:	4610      	mov	r0, r2
 80097be:	4798      	blx	r3
 80097c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097c2:	e077      	b.n	80098b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fa7b 	bl	8009cc2 <USBD_CtlError>
            err++;
 80097cc:	7afb      	ldrb	r3, [r7, #11]
 80097ce:	3301      	adds	r3, #1
 80097d0:	72fb      	strb	r3, [r7, #11]
          break;
 80097d2:	e06f      	b.n	80098b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00b      	beq.n	80097f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	7c12      	ldrb	r2, [r2, #16]
 80097ec:	f107 0108 	add.w	r1, r7, #8
 80097f0:	4610      	mov	r0, r2
 80097f2:	4798      	blx	r3
 80097f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097f6:	e05d      	b.n	80098b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fa61 	bl	8009cc2 <USBD_CtlError>
            err++;
 8009800:	7afb      	ldrb	r3, [r7, #11]
 8009802:	3301      	adds	r3, #1
 8009804:	72fb      	strb	r3, [r7, #11]
          break;
 8009806:	e055      	b.n	80098b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00b      	beq.n	800982c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	7c12      	ldrb	r2, [r2, #16]
 8009820:	f107 0108 	add.w	r1, r7, #8
 8009824:	4610      	mov	r0, r2
 8009826:	4798      	blx	r3
 8009828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800982a:	e043      	b.n	80098b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fa47 	bl	8009cc2 <USBD_CtlError>
            err++;
 8009834:	7afb      	ldrb	r3, [r7, #11]
 8009836:	3301      	adds	r3, #1
 8009838:	72fb      	strb	r3, [r7, #11]
          break;
 800983a:	e03b      	b.n	80098b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	7c12      	ldrb	r2, [r2, #16]
 8009854:	f107 0108 	add.w	r1, r7, #8
 8009858:	4610      	mov	r0, r2
 800985a:	4798      	blx	r3
 800985c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800985e:	e029      	b.n	80098b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fa2d 	bl	8009cc2 <USBD_CtlError>
            err++;
 8009868:	7afb      	ldrb	r3, [r7, #11]
 800986a:	3301      	adds	r3, #1
 800986c:	72fb      	strb	r3, [r7, #11]
          break;
 800986e:	e021      	b.n	80098b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00b      	beq.n	8009894 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	7c12      	ldrb	r2, [r2, #16]
 8009888:	f107 0108 	add.w	r1, r7, #8
 800988c:	4610      	mov	r0, r2
 800988e:	4798      	blx	r3
 8009890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009892:	e00f      	b.n	80098b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fa13 	bl	8009cc2 <USBD_CtlError>
            err++;
 800989c:	7afb      	ldrb	r3, [r7, #11]
 800989e:	3301      	adds	r3, #1
 80098a0:	72fb      	strb	r3, [r7, #11]
          break;
 80098a2:	e007      	b.n	80098b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa0b 	bl	8009cc2 <USBD_CtlError>
          err++;
 80098ac:	7afb      	ldrb	r3, [r7, #11]
 80098ae:	3301      	adds	r3, #1
 80098b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80098b2:	e038      	b.n	8009926 <USBD_GetDescriptor+0x286>
 80098b4:	e037      	b.n	8009926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	7c1b      	ldrb	r3, [r3, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d109      	bne.n	80098d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098c6:	f107 0208 	add.w	r2, r7, #8
 80098ca:	4610      	mov	r0, r2
 80098cc:	4798      	blx	r3
 80098ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098d0:	e029      	b.n	8009926 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f9f4 	bl	8009cc2 <USBD_CtlError>
        err++;
 80098da:	7afb      	ldrb	r3, [r7, #11]
 80098dc:	3301      	adds	r3, #1
 80098de:	72fb      	strb	r3, [r7, #11]
      break;
 80098e0:	e021      	b.n	8009926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	7c1b      	ldrb	r3, [r3, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10d      	bne.n	8009906 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f2:	f107 0208 	add.w	r2, r7, #8
 80098f6:	4610      	mov	r0, r2
 80098f8:	4798      	blx	r3
 80098fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	2207      	movs	r2, #7
 8009902:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009904:	e00f      	b.n	8009926 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f9da 	bl	8009cc2 <USBD_CtlError>
        err++;
 800990e:	7afb      	ldrb	r3, [r7, #11]
 8009910:	3301      	adds	r3, #1
 8009912:	72fb      	strb	r3, [r7, #11]
      break;
 8009914:	e007      	b.n	8009926 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009916:	6839      	ldr	r1, [r7, #0]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f9d2 	bl	8009cc2 <USBD_CtlError>
      err++;
 800991e:	7afb      	ldrb	r3, [r7, #11]
 8009920:	3301      	adds	r3, #1
 8009922:	72fb      	strb	r3, [r7, #11]
      break;
 8009924:	bf00      	nop
  }

  if (err != 0U)
 8009926:	7afb      	ldrb	r3, [r7, #11]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d11c      	bne.n	8009966 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800992c:	893b      	ldrh	r3, [r7, #8]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d011      	beq.n	8009956 <USBD_GetDescriptor+0x2b6>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	88db      	ldrh	r3, [r3, #6]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00d      	beq.n	8009956 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	88da      	ldrh	r2, [r3, #6]
 800993e:	893b      	ldrh	r3, [r7, #8]
 8009940:	4293      	cmp	r3, r2
 8009942:	bf28      	it	cs
 8009944:	4613      	movcs	r3, r2
 8009946:	b29b      	uxth	r3, r3
 8009948:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800994a:	893b      	ldrh	r3, [r7, #8]
 800994c:	461a      	mov	r2, r3
 800994e:	68f9      	ldr	r1, [r7, #12]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fa21 	bl	8009d98 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	88db      	ldrh	r3, [r3, #6]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d104      	bne.n	8009968 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fa78 	bl	8009e54 <USBD_CtlSendStatus>
 8009964:	e000      	b.n	8009968 <USBD_GetDescriptor+0x2c8>
    return;
 8009966:	bf00      	nop
    }
  }
}
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop

08009970 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	889b      	ldrh	r3, [r3, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d130      	bne.n	80099e4 <USBD_SetAddress+0x74>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	88db      	ldrh	r3, [r3, #6]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d12c      	bne.n	80099e4 <USBD_SetAddress+0x74>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	885b      	ldrh	r3, [r3, #2]
 800998e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009990:	d828      	bhi.n	80099e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	885b      	ldrh	r3, [r3, #2]
 8009996:	b2db      	uxtb	r3, r3
 8009998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800999c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d104      	bne.n	80099b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f989 	bl	8009cc2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b0:	e01d      	b.n	80099ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	7bfa      	ldrb	r2, [r7, #15]
 80099b6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80099ba:	7bfb      	ldrb	r3, [r7, #15]
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fe24 	bl	800a60c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fa45 	bl	8009e54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d004      	beq.n	80099da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2202      	movs	r2, #2
 80099d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099d8:	e009      	b.n	80099ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e2:	e004      	b.n	80099ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f96b 	bl	8009cc2 <USBD_CtlError>
  }
}
 80099ec:	bf00      	nop
 80099ee:	bf00      	nop
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	885b      	ldrh	r3, [r3, #2]
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	4b41      	ldr	r3, [pc, #260]	@ (8009b10 <USBD_SetConfig+0x118>)
 8009a0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a0c:	4b40      	ldr	r3, [pc, #256]	@ (8009b10 <USBD_SetConfig+0x118>)
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d904      	bls.n	8009a1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f953 	bl	8009cc2 <USBD_CtlError>
 8009a1c:	e075      	b.n	8009b0a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d002      	beq.n	8009a2e <USBD_SetConfig+0x36>
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d023      	beq.n	8009a74 <USBD_SetConfig+0x7c>
 8009a2c:	e062      	b.n	8009af4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009a2e:	4b38      	ldr	r3, [pc, #224]	@ (8009b10 <USBD_SetConfig+0x118>)
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d01a      	beq.n	8009a6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009a36:	4b36      	ldr	r3, [pc, #216]	@ (8009b10 <USBD_SetConfig+0x118>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2203      	movs	r2, #3
 8009a44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a48:	4b31      	ldr	r3, [pc, #196]	@ (8009b10 <USBD_SetConfig+0x118>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7ff f9e5 	bl	8008e1e <USBD_SetClassConfig>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d104      	bne.n	8009a64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f930 	bl	8009cc2 <USBD_CtlError>
            return;
 8009a62:	e052      	b.n	8009b0a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f9f5 	bl	8009e54 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009a6a:	e04e      	b.n	8009b0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f9f1 	bl	8009e54 <USBD_CtlSendStatus>
        break;
 8009a72:	e04a      	b.n	8009b0a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009a74:	4b26      	ldr	r3, [pc, #152]	@ (8009b10 <USBD_SetConfig+0x118>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d112      	bne.n	8009aa2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009a84:	4b22      	ldr	r3, [pc, #136]	@ (8009b10 <USBD_SetConfig+0x118>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009a8e:	4b20      	ldr	r3, [pc, #128]	@ (8009b10 <USBD_SetConfig+0x118>)
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7ff f9e1 	bl	8008e5c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f9da 	bl	8009e54 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009aa0:	e033      	b.n	8009b0a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8009b10 <USBD_SetConfig+0x118>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d01d      	beq.n	8009aec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff f9cf 	bl	8008e5c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009abe:	4b14      	ldr	r3, [pc, #80]	@ (8009b10 <USBD_SetConfig+0x118>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ac8:	4b11      	ldr	r3, [pc, #68]	@ (8009b10 <USBD_SetConfig+0x118>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff f9a5 	bl	8008e1e <USBD_SetClassConfig>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d104      	bne.n	8009ae4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f8f0 	bl	8009cc2 <USBD_CtlError>
            return;
 8009ae2:	e012      	b.n	8009b0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f9b5 	bl	8009e54 <USBD_CtlSendStatus>
        break;
 8009aea:	e00e      	b.n	8009b0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f9b1 	bl	8009e54 <USBD_CtlSendStatus>
        break;
 8009af2:	e00a      	b.n	8009b0a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 f8e3 	bl	8009cc2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009afc:	4b04      	ldr	r3, [pc, #16]	@ (8009b10 <USBD_SetConfig+0x118>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	4619      	mov	r1, r3
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7ff f9aa 	bl	8008e5c <USBD_ClrClassConfig>
        break;
 8009b08:	bf00      	nop
    }
  }
}
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	2000036c 	.word	0x2000036c

08009b14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	88db      	ldrh	r3, [r3, #6]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d004      	beq.n	8009b30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f8ca 	bl	8009cc2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b2e:	e022      	b.n	8009b76 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	dc02      	bgt.n	8009b40 <USBD_GetConfig+0x2c>
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	dc03      	bgt.n	8009b46 <USBD_GetConfig+0x32>
 8009b3e:	e015      	b.n	8009b6c <USBD_GetConfig+0x58>
 8009b40:	2b03      	cmp	r3, #3
 8009b42:	d00b      	beq.n	8009b5c <USBD_GetConfig+0x48>
 8009b44:	e012      	b.n	8009b6c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	3308      	adds	r3, #8
 8009b50:	2201      	movs	r2, #1
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f91f 	bl	8009d98 <USBD_CtlSendData>
        break;
 8009b5a:	e00c      	b.n	8009b76 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	2201      	movs	r2, #1
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f917 	bl	8009d98 <USBD_CtlSendData>
        break;
 8009b6a:	e004      	b.n	8009b76 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f8a7 	bl	8009cc2 <USBD_CtlError>
        break;
 8009b74:	bf00      	nop
}
 8009b76:	bf00      	nop
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d81e      	bhi.n	8009bd2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	88db      	ldrh	r3, [r3, #6]
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d004      	beq.n	8009ba6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f88f 	bl	8009cc2 <USBD_CtlError>
        break;
 8009ba4:	e01a      	b.n	8009bdc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d005      	beq.n	8009bc2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	f043 0202 	orr.w	r2, r3, #2
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	330c      	adds	r3, #12
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f8e4 	bl	8009d98 <USBD_CtlSendData>
      break;
 8009bd0:	e004      	b.n	8009bdc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f874 	bl	8009cc2 <USBD_CtlError>
      break;
 8009bda:	bf00      	nop
  }
}
 8009bdc:	bf00      	nop
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	885b      	ldrh	r3, [r3, #2]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d106      	bne.n	8009c04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f928 	bl	8009e54 <USBD_CtlSendStatus>
  }
}
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d80b      	bhi.n	8009c3a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	885b      	ldrh	r3, [r3, #2]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d10c      	bne.n	8009c44 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f90e 	bl	8009e54 <USBD_CtlSendStatus>
      }
      break;
 8009c38:	e004      	b.n	8009c44 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f840 	bl	8009cc2 <USBD_CtlError>
      break;
 8009c42:	e000      	b.n	8009c46 <USBD_ClrFeature+0x3a>
      break;
 8009c44:	bf00      	nop
  }
}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b083      	sub	sp, #12
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781a      	ldrb	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	785a      	ldrb	r2, [r3, #1]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	3302      	adds	r3, #2
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	3303      	adds	r3, #3
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	021b      	lsls	r3, r3, #8
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	4413      	add	r3, r2
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	3304      	adds	r3, #4
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	3305      	adds	r3, #5
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	021b      	lsls	r3, r3, #8
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	4413      	add	r3, r2
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	3306      	adds	r3, #6
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	3307      	adds	r3, #7
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	021b      	lsls	r3, r3, #8
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	4413      	add	r3, r2
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	80da      	strh	r2, [r3, #6]

}
 8009cb6:	bf00      	nop
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009ccc:	2180      	movs	r1, #128	@ 0x80
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fc32 	bl	800a538 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fc2e 	bl	800a538 <USBD_LL_StallEP>
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d032      	beq.n	8009d60 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 f834 	bl	8009d68 <USBD_GetLen>
 8009d00:	4603      	mov	r3, r0
 8009d02:	3301      	adds	r3, #1
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	1c5a      	adds	r2, r3, #1
 8009d12:	75fa      	strb	r2, [r7, #23]
 8009d14:	461a      	mov	r2, r3
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4413      	add	r3, r2
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	7812      	ldrb	r2, [r2, #0]
 8009d1e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	75fa      	strb	r2, [r7, #23]
 8009d26:	461a      	mov	r2, r3
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	2203      	movs	r2, #3
 8009d2e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009d30:	e012      	b.n	8009d58 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	60fa      	str	r2, [r7, #12]
 8009d38:	7dfa      	ldrb	r2, [r7, #23]
 8009d3a:	1c51      	adds	r1, r2, #1
 8009d3c:	75f9      	strb	r1, [r7, #23]
 8009d3e:	4611      	mov	r1, r2
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	440a      	add	r2, r1
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009d48:	7dfb      	ldrb	r3, [r7, #23]
 8009d4a:	1c5a      	adds	r2, r3, #1
 8009d4c:	75fa      	strb	r2, [r7, #23]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	4413      	add	r3, r2
 8009d54:	2200      	movs	r2, #0
 8009d56:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e8      	bne.n	8009d32 <USBD_GetString+0x4e>
    }
  }
}
 8009d60:	bf00      	nop
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009d74:	e005      	b.n	8009d82 <USBD_GetLen+0x1a>
  {
    len++;
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1f5      	bne.n	8009d76 <USBD_GetLen+0xe>
  }

  return len;
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	4613      	mov	r3, r2
 8009da4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2202      	movs	r2, #2
 8009daa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009dae:	88fa      	ldrh	r2, [r7, #6]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009db4:	88fa      	ldrh	r2, [r7, #6]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dba:	88fb      	ldrh	r3, [r7, #6]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 fc42 	bl	800a64a <USBD_LL_Transmit>

  return USBD_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dde:	88fb      	ldrh	r3, [r7, #6]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	2100      	movs	r1, #0
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f000 fc30 	bl	800a64a <USBD_LL_Transmit>

  return USBD_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2203      	movs	r2, #3
 8009e06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e0a:	88fa      	ldrh	r2, [r7, #6]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009e12:	88fa      	ldrh	r2, [r7, #6]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e1a:	88fb      	ldrh	r3, [r7, #6]
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	2100      	movs	r1, #0
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 fc35 	bl	800a690 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e3e:	88fb      	ldrh	r3, [r7, #6]
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	2100      	movs	r1, #0
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f000 fc23 	bl	800a690 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2204      	movs	r2, #4
 8009e60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e64:	2300      	movs	r3, #0
 8009e66:	2200      	movs	r2, #0
 8009e68:	2100      	movs	r1, #0
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fbed 	bl	800a64a <USBD_LL_Transmit>

  return USBD_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2205      	movs	r2, #5
 8009e86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2100      	movs	r1, #0
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fbfd 	bl	800a690 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	4912      	ldr	r1, [pc, #72]	@ (8009ef0 <MX_USB_DEVICE_Init+0x50>)
 8009ea8:	4812      	ldr	r0, [pc, #72]	@ (8009ef4 <MX_USB_DEVICE_Init+0x54>)
 8009eaa:	f7fe ff5c 	bl	8008d66 <USBD_Init>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009eb4:	f7f6 fa46 	bl	8000344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009eb8:	490f      	ldr	r1, [pc, #60]	@ (8009ef8 <MX_USB_DEVICE_Init+0x58>)
 8009eba:	480e      	ldr	r0, [pc, #56]	@ (8009ef4 <MX_USB_DEVICE_Init+0x54>)
 8009ebc:	f7fe ff7e 	bl	8008dbc <USBD_RegisterClass>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009ec6:	f7f6 fa3d 	bl	8000344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009eca:	490c      	ldr	r1, [pc, #48]	@ (8009efc <MX_USB_DEVICE_Init+0x5c>)
 8009ecc:	4809      	ldr	r0, [pc, #36]	@ (8009ef4 <MX_USB_DEVICE_Init+0x54>)
 8009ece:	f7fe fedb 	bl	8008c88 <USBD_CDC_RegisterInterface>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ed8:	f7f6 fa34 	bl	8000344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009edc:	4805      	ldr	r0, [pc, #20]	@ (8009ef4 <MX_USB_DEVICE_Init+0x54>)
 8009ede:	f7fe ff87 	bl	8008df0 <USBD_Start>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ee8:	f7f6 fa2c 	bl	8000344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009eec:	bf00      	nop
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	2000012c 	.word	0x2000012c
 8009ef4:	20000370 	.word	0x20000370
 8009ef8:	20000018 	.word	0x20000018
 8009efc:	2000011c 	.word	0x2000011c

08009f00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f04:	2200      	movs	r2, #0
 8009f06:	4905      	ldr	r1, [pc, #20]	@ (8009f1c <CDC_Init_FS+0x1c>)
 8009f08:	4805      	ldr	r0, [pc, #20]	@ (8009f20 <CDC_Init_FS+0x20>)
 8009f0a:	f7fe fed4 	bl	8008cb6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f0e:	4905      	ldr	r1, [pc, #20]	@ (8009f24 <CDC_Init_FS+0x24>)
 8009f10:	4803      	ldr	r0, [pc, #12]	@ (8009f20 <CDC_Init_FS+0x20>)
 8009f12:	f7fe feea 	bl	8008cea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	20000a34 	.word	0x20000a34
 8009f20:	20000370 	.word	0x20000370
 8009f24:	20000634 	.word	0x20000634

08009f28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	6039      	str	r1, [r7, #0]
 8009f42:	71fb      	strb	r3, [r7, #7]
 8009f44:	4613      	mov	r3, r2
 8009f46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f48:	79fb      	ldrb	r3, [r7, #7]
 8009f4a:	2b23      	cmp	r3, #35	@ 0x23
 8009f4c:	d84a      	bhi.n	8009fe4 <CDC_Control_FS+0xac>
 8009f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f54 <CDC_Control_FS+0x1c>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009fe5 	.word	0x08009fe5
 8009f58:	08009fe5 	.word	0x08009fe5
 8009f5c:	08009fe5 	.word	0x08009fe5
 8009f60:	08009fe5 	.word	0x08009fe5
 8009f64:	08009fe5 	.word	0x08009fe5
 8009f68:	08009fe5 	.word	0x08009fe5
 8009f6c:	08009fe5 	.word	0x08009fe5
 8009f70:	08009fe5 	.word	0x08009fe5
 8009f74:	08009fe5 	.word	0x08009fe5
 8009f78:	08009fe5 	.word	0x08009fe5
 8009f7c:	08009fe5 	.word	0x08009fe5
 8009f80:	08009fe5 	.word	0x08009fe5
 8009f84:	08009fe5 	.word	0x08009fe5
 8009f88:	08009fe5 	.word	0x08009fe5
 8009f8c:	08009fe5 	.word	0x08009fe5
 8009f90:	08009fe5 	.word	0x08009fe5
 8009f94:	08009fe5 	.word	0x08009fe5
 8009f98:	08009fe5 	.word	0x08009fe5
 8009f9c:	08009fe5 	.word	0x08009fe5
 8009fa0:	08009fe5 	.word	0x08009fe5
 8009fa4:	08009fe5 	.word	0x08009fe5
 8009fa8:	08009fe5 	.word	0x08009fe5
 8009fac:	08009fe5 	.word	0x08009fe5
 8009fb0:	08009fe5 	.word	0x08009fe5
 8009fb4:	08009fe5 	.word	0x08009fe5
 8009fb8:	08009fe5 	.word	0x08009fe5
 8009fbc:	08009fe5 	.word	0x08009fe5
 8009fc0:	08009fe5 	.word	0x08009fe5
 8009fc4:	08009fe5 	.word	0x08009fe5
 8009fc8:	08009fe5 	.word	0x08009fe5
 8009fcc:	08009fe5 	.word	0x08009fe5
 8009fd0:	08009fe5 	.word	0x08009fe5
 8009fd4:	08009fe5 	.word	0x08009fe5
 8009fd8:	08009fe5 	.word	0x08009fe5
 8009fdc:	08009fe5 	.word	0x08009fe5
 8009fe0:	08009fe5 	.word	0x08009fe5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009fe4:	bf00      	nop
  }

  return (USBD_OK);
 8009fe6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	4805      	ldr	r0, [pc, #20]	@ (800a018 <CDC_Receive_FS+0x24>)
 800a002:	f7fe fe72 	bl	8008cea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a006:	4804      	ldr	r0, [pc, #16]	@ (800a018 <CDC_Receive_FS+0x24>)
 800a008:	f7fe fe83 	bl	8008d12 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a00c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20000370 	.word	0x20000370

0800a01c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	4603      	mov	r3, r0
 800a024:	6039      	str	r1, [r7, #0]
 800a026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	2212      	movs	r2, #18
 800a02c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a02e:	4b03      	ldr	r3, [pc, #12]	@ (800a03c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a030:	4618      	mov	r0, r3
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	20000148 	.word	0x20000148

0800a040 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	4603      	mov	r3, r0
 800a048:	6039      	str	r1, [r7, #0]
 800a04a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2204      	movs	r2, #4
 800a050:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a052:	4b03      	ldr	r3, [pc, #12]	@ (800a060 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a054:	4618      	mov	r0, r3
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	2000015c 	.word	0x2000015c

0800a064 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	6039      	str	r1, [r7, #0]
 800a06e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a070:	79fb      	ldrb	r3, [r7, #7]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d105      	bne.n	800a082 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	4907      	ldr	r1, [pc, #28]	@ (800a098 <USBD_FS_ProductStrDescriptor+0x34>)
 800a07a:	4808      	ldr	r0, [pc, #32]	@ (800a09c <USBD_FS_ProductStrDescriptor+0x38>)
 800a07c:	f7ff fe32 	bl	8009ce4 <USBD_GetString>
 800a080:	e004      	b.n	800a08c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	4904      	ldr	r1, [pc, #16]	@ (800a098 <USBD_FS_ProductStrDescriptor+0x34>)
 800a086:	4805      	ldr	r0, [pc, #20]	@ (800a09c <USBD_FS_ProductStrDescriptor+0x38>)
 800a088:	f7ff fe2c 	bl	8009ce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a08c:	4b02      	ldr	r3, [pc, #8]	@ (800a098 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20000e34 	.word	0x20000e34
 800a09c:	0800a80c 	.word	0x0800a80c

0800a0a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	6039      	str	r1, [r7, #0]
 800a0aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	4904      	ldr	r1, [pc, #16]	@ (800a0c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a0b0:	4804      	ldr	r0, [pc, #16]	@ (800a0c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a0b2:	f7ff fe17 	bl	8009ce4 <USBD_GetString>
  return USBD_StrDesc;
 800a0b6:	4b02      	ldr	r3, [pc, #8]	@ (800a0c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	20000e34 	.word	0x20000e34
 800a0c4:	0800a824 	.word	0x0800a824

0800a0c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	6039      	str	r1, [r7, #0]
 800a0d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	221a      	movs	r2, #26
 800a0d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0da:	f000 f843 	bl	800a164 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a0de:	4b02      	ldr	r3, [pc, #8]	@ (800a0e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	20000160 	.word	0x20000160

0800a0ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	6039      	str	r1, [r7, #0]
 800a0f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0f8:	79fb      	ldrb	r3, [r7, #7]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d105      	bne.n	800a10a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	4907      	ldr	r1, [pc, #28]	@ (800a120 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a102:	4808      	ldr	r0, [pc, #32]	@ (800a124 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a104:	f7ff fdee 	bl	8009ce4 <USBD_GetString>
 800a108:	e004      	b.n	800a114 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	4904      	ldr	r1, [pc, #16]	@ (800a120 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a10e:	4805      	ldr	r0, [pc, #20]	@ (800a124 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a110:	f7ff fde8 	bl	8009ce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a114:	4b02      	ldr	r3, [pc, #8]	@ (800a120 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	20000e34 	.word	0x20000e34
 800a124:	0800a838 	.word	0x0800a838

0800a128 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	6039      	str	r1, [r7, #0]
 800a132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d105      	bne.n	800a146 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	4907      	ldr	r1, [pc, #28]	@ (800a15c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a13e:	4808      	ldr	r0, [pc, #32]	@ (800a160 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a140:	f7ff fdd0 	bl	8009ce4 <USBD_GetString>
 800a144:	e004      	b.n	800a150 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	4904      	ldr	r1, [pc, #16]	@ (800a15c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a14a:	4805      	ldr	r0, [pc, #20]	@ (800a160 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a14c:	f7ff fdca 	bl	8009ce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a150:	4b02      	ldr	r3, [pc, #8]	@ (800a15c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a152:	4618      	mov	r0, r3
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20000e34 	.word	0x20000e34
 800a160:	0800a844 	.word	0x0800a844

0800a164 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a16a:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a8 <Get_SerialNum+0x44>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a170:	4b0e      	ldr	r3, [pc, #56]	@ (800a1ac <Get_SerialNum+0x48>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a176:	4b0e      	ldr	r3, [pc, #56]	@ (800a1b0 <Get_SerialNum+0x4c>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4413      	add	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d009      	beq.n	800a19e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a18a:	2208      	movs	r2, #8
 800a18c:	4909      	ldr	r1, [pc, #36]	@ (800a1b4 <Get_SerialNum+0x50>)
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 f814 	bl	800a1bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a194:	2204      	movs	r2, #4
 800a196:	4908      	ldr	r1, [pc, #32]	@ (800a1b8 <Get_SerialNum+0x54>)
 800a198:	68b8      	ldr	r0, [r7, #8]
 800a19a:	f000 f80f 	bl	800a1bc <IntToUnicode>
  }
}
 800a19e:	bf00      	nop
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	1ffff7ac 	.word	0x1ffff7ac
 800a1ac:	1ffff7b0 	.word	0x1ffff7b0
 800a1b0:	1ffff7b4 	.word	0x1ffff7b4
 800a1b4:	20000162 	.word	0x20000162
 800a1b8:	20000172 	.word	0x20000172

0800a1bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b087      	sub	sp, #28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	75fb      	strb	r3, [r7, #23]
 800a1d2:	e027      	b.n	800a224 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	0f1b      	lsrs	r3, r3, #28
 800a1d8:	2b09      	cmp	r3, #9
 800a1da:	d80b      	bhi.n	800a1f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	0f1b      	lsrs	r3, r3, #28
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	7dfb      	ldrb	r3, [r7, #23]
 800a1e4:	005b      	lsls	r3, r3, #1
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	440b      	add	r3, r1
 800a1ec:	3230      	adds	r2, #48	@ 0x30
 800a1ee:	b2d2      	uxtb	r2, r2
 800a1f0:	701a      	strb	r2, [r3, #0]
 800a1f2:	e00a      	b.n	800a20a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	0f1b      	lsrs	r3, r3, #28
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	005b      	lsls	r3, r3, #1
 800a1fe:	4619      	mov	r1, r3
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	440b      	add	r3, r1
 800a204:	3237      	adds	r2, #55	@ 0x37
 800a206:	b2d2      	uxtb	r2, r2
 800a208:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	011b      	lsls	r3, r3, #4
 800a20e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a210:	7dfb      	ldrb	r3, [r7, #23]
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	3301      	adds	r3, #1
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	4413      	add	r3, r2
 800a21a:	2200      	movs	r2, #0
 800a21c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	3301      	adds	r3, #1
 800a222:	75fb      	strb	r3, [r7, #23]
 800a224:	7dfa      	ldrb	r2, [r7, #23]
 800a226:	79fb      	ldrb	r3, [r7, #7]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d3d3      	bcc.n	800a1d4 <IntToUnicode+0x18>
  }
}
 800a22c:	bf00      	nop
 800a22e:	bf00      	nop
 800a230:	371c      	adds	r7, #28
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
	...

0800a23c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a0d      	ldr	r2, [pc, #52]	@ (800a280 <HAL_PCD_MspInit+0x44>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d113      	bne.n	800a276 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a24e:	4b0d      	ldr	r3, [pc, #52]	@ (800a284 <HAL_PCD_MspInit+0x48>)
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	4a0c      	ldr	r2, [pc, #48]	@ (800a284 <HAL_PCD_MspInit+0x48>)
 800a254:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a258:	61d3      	str	r3, [r2, #28]
 800a25a:	4b0a      	ldr	r3, [pc, #40]	@ (800a284 <HAL_PCD_MspInit+0x48>)
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a262:	60fb      	str	r3, [r7, #12]
 800a264:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800a266:	2200      	movs	r2, #0
 800a268:	2100      	movs	r1, #0
 800a26a:	2014      	movs	r0, #20
 800a26c:	f7f6 fd7b 	bl	8000d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800a270:	2014      	movs	r0, #20
 800a272:	f7f6 fd94 	bl	8000d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a276:	bf00      	nop
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	40005c00 	.word	0x40005c00
 800a284:	40021000 	.word	0x40021000

0800a288 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f7fe fdef 	bl	8008e82 <USBD_LL_SetupStage>
}
 800a2a4:	bf00      	nop
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800a2be:	78fa      	ldrb	r2, [r7, #3]
 800a2c0:	6879      	ldr	r1, [r7, #4]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	00db      	lsls	r3, r3, #3
 800a2ca:	440b      	add	r3, r1
 800a2cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	78fb      	ldrb	r3, [r7, #3]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	f7fe fe21 	bl	8008f1c <USBD_LL_DataOutStage>
}
 800a2da:	bf00      	nop
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b082      	sub	sp, #8
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800a2f4:	78fa      	ldrb	r2, [r7, #3]
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	00db      	lsls	r3, r3, #3
 800a300:	440b      	add	r3, r1
 800a302:	3324      	adds	r3, #36	@ 0x24
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	78fb      	ldrb	r3, [r7, #3]
 800a308:	4619      	mov	r1, r3
 800a30a:	f7fe fe78 	bl	8008ffe <USBD_LL_DataInStage>
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b082      	sub	sp, #8
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a324:	4618      	mov	r0, r3
 800a326:	f7fe ff8b 	bl	8009240 <USBD_LL_SOF>
}
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b084      	sub	sp, #16
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a33a:	2301      	movs	r3, #1
 800a33c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	795b      	ldrb	r3, [r3, #5]
 800a342:	2b02      	cmp	r3, #2
 800a344:	d001      	beq.n	800a34a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a346:	f7f5 fffd 	bl	8000344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a350:	7bfa      	ldrb	r2, [r7, #15]
 800a352:	4611      	mov	r1, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f7fe ff38 	bl	80091ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a360:	4618      	mov	r0, r3
 800a362:	f7fe fef1 	bl	8009148 <USBD_LL_Reset>
}
 800a366:	bf00      	nop
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
	...

0800a370 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fe ff33 	bl	80091ea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	7a5b      	ldrb	r3, [r3, #9]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d005      	beq.n	800a398 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a38c:	4b04      	ldr	r3, [pc, #16]	@ (800a3a0 <HAL_PCD_SuspendCallback+0x30>)
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	4a03      	ldr	r2, [pc, #12]	@ (800a3a0 <HAL_PCD_SuspendCallback+0x30>)
 800a392:	f043 0306 	orr.w	r3, r3, #6
 800a396:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a398:	bf00      	nop
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	e000ed00 	.word	0xe000ed00

0800a3a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fe ff2e 	bl	8009214 <USBD_LL_Resume>
}
 800a3b8:	bf00      	nop
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a3c8:	4a29      	ldr	r2, [pc, #164]	@ (800a470 <USBD_LL_Init+0xb0>)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a27      	ldr	r2, [pc, #156]	@ (800a470 <USBD_LL_Init+0xb0>)
 800a3d4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a3d8:	4b25      	ldr	r3, [pc, #148]	@ (800a470 <USBD_LL_Init+0xb0>)
 800a3da:	4a26      	ldr	r2, [pc, #152]	@ (800a474 <USBD_LL_Init+0xb4>)
 800a3dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a3de:	4b24      	ldr	r3, [pc, #144]	@ (800a470 <USBD_LL_Init+0xb0>)
 800a3e0:	2208      	movs	r2, #8
 800a3e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a3e4:	4b22      	ldr	r3, [pc, #136]	@ (800a470 <USBD_LL_Init+0xb0>)
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a3ea:	4b21      	ldr	r3, [pc, #132]	@ (800a470 <USBD_LL_Init+0xb0>)
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a3f0:	4b1f      	ldr	r3, [pc, #124]	@ (800a470 <USBD_LL_Init+0xb0>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a3f6:	4b1e      	ldr	r3, [pc, #120]	@ (800a470 <USBD_LL_Init+0xb0>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a3fc:	4b1c      	ldr	r3, [pc, #112]	@ (800a470 <USBD_LL_Init+0xb0>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a402:	481b      	ldr	r0, [pc, #108]	@ (800a470 <USBD_LL_Init+0xb0>)
 800a404:	f7f6 feec 	bl	80011e0 <HAL_PCD_Init>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 800a40e:	f7f5 ff99 	bl	8000344 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a418:	2318      	movs	r3, #24
 800a41a:	2200      	movs	r2, #0
 800a41c:	2100      	movs	r1, #0
 800a41e:	f7f8 fb4f 	bl	8002ac0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a428:	2358      	movs	r3, #88	@ 0x58
 800a42a:	2200      	movs	r2, #0
 800a42c:	2180      	movs	r1, #128	@ 0x80
 800a42e:	f7f8 fb47 	bl	8002ac0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a438:	23c0      	movs	r3, #192	@ 0xc0
 800a43a:	2200      	movs	r2, #0
 800a43c:	2181      	movs	r1, #129	@ 0x81
 800a43e:	f7f8 fb3f 	bl	8002ac0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a448:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a44c:	2200      	movs	r2, #0
 800a44e:	2101      	movs	r1, #1
 800a450:	f7f8 fb36 	bl	8002ac0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a45a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a45e:	2200      	movs	r2, #0
 800a460:	2182      	movs	r1, #130	@ 0x82
 800a462:	f7f8 fb2d 	bl	8002ac0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	20001034 	.word	0x20001034
 800a474:	40005c00 	.word	0x40005c00

0800a478 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a48e:	4618      	mov	r0, r3
 800a490:	f7f6 ff6d 	bl	800136e <HAL_PCD_Start>
 800a494:	4603      	mov	r3, r0
 800a496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 f952 	bl	800a744 <USBD_Get_USB_Status>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	4608      	mov	r0, r1
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	4603      	mov	r3, r0
 800a4be:	70fb      	strb	r3, [r7, #3]
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	70bb      	strb	r3, [r7, #2]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4d6:	78bb      	ldrb	r3, [r7, #2]
 800a4d8:	883a      	ldrh	r2, [r7, #0]
 800a4da:	78f9      	ldrb	r1, [r7, #3]
 800a4dc:	f7f7 f865 	bl	80015aa <HAL_PCD_EP_Open>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 f92c 	bl	800a744 <USBD_Get_USB_Status>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	460b      	mov	r3, r1
 800a504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a514:	78fa      	ldrb	r2, [r7, #3]
 800a516:	4611      	mov	r1, r2
 800a518:	4618      	mov	r0, r3
 800a51a:	f7f7 f8a3 	bl	8001664 <HAL_PCD_EP_Close>
 800a51e:	4603      	mov	r3, r0
 800a520:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a522:	7bfb      	ldrb	r3, [r7, #15]
 800a524:	4618      	mov	r0, r3
 800a526:	f000 f90d 	bl	800a744 <USBD_Get_USB_Status>
 800a52a:	4603      	mov	r3, r0
 800a52c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a52e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a552:	78fa      	ldrb	r2, [r7, #3]
 800a554:	4611      	mov	r1, r2
 800a556:	4618      	mov	r0, r3
 800a558:	f7f7 f94c 	bl	80017f4 <HAL_PCD_EP_SetStall>
 800a55c:	4603      	mov	r3, r0
 800a55e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	4618      	mov	r0, r3
 800a564:	f000 f8ee 	bl	800a744 <USBD_Get_USB_Status>
 800a568:	4603      	mov	r3, r0
 800a56a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b084      	sub	sp, #16
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	460b      	mov	r3, r1
 800a580:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a590:	78fa      	ldrb	r2, [r7, #3]
 800a592:	4611      	mov	r1, r2
 800a594:	4618      	mov	r0, r3
 800a596:	f7f7 f97f 	bl	8001898 <HAL_PCD_EP_ClrStall>
 800a59a:	4603      	mov	r3, r0
 800a59c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a59e:	7bfb      	ldrb	r3, [r7, #15]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 f8cf 	bl	800a744 <USBD_Get_USB_Status>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a5c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a5c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	da0b      	bge.n	800a5e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a5d0:	78fb      	ldrb	r3, [r7, #3]
 800a5d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5d6:	68f9      	ldr	r1, [r7, #12]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	00db      	lsls	r3, r3, #3
 800a5e0:	440b      	add	r3, r1
 800a5e2:	3312      	adds	r3, #18
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	e00b      	b.n	800a600 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a5e8:	78fb      	ldrb	r3, [r7, #3]
 800a5ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5ee:	68f9      	ldr	r1, [r7, #12]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	00db      	lsls	r3, r3, #3
 800a5f8:	440b      	add	r3, r1
 800a5fa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a5fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a600:	4618      	mov	r0, r3
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a626:	78fa      	ldrb	r2, [r7, #3]
 800a628:	4611      	mov	r1, r2
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7f6 ff99 	bl	8001562 <HAL_PCD_SetAddress>
 800a630:	4603      	mov	r3, r0
 800a632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a634:	7bfb      	ldrb	r3, [r7, #15]
 800a636:	4618      	mov	r0, r3
 800a638:	f000 f884 	bl	800a744 <USBD_Get_USB_Status>
 800a63c:	4603      	mov	r3, r0
 800a63e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a640:	7bbb      	ldrb	r3, [r7, #14]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b086      	sub	sp, #24
 800a64e:	af00      	add	r7, sp, #0
 800a650:	60f8      	str	r0, [r7, #12]
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	461a      	mov	r2, r3
 800a656:	460b      	mov	r3, r1
 800a658:	72fb      	strb	r3, [r7, #11]
 800a65a:	4613      	mov	r3, r2
 800a65c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a66c:	893b      	ldrh	r3, [r7, #8]
 800a66e:	7af9      	ldrb	r1, [r7, #11]
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	f7f7 f888 	bl	8001786 <HAL_PCD_EP_Transmit>
 800a676:	4603      	mov	r3, r0
 800a678:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 f861 	bl	800a744 <USBD_Get_USB_Status>
 800a682:	4603      	mov	r3, r0
 800a684:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a686:	7dbb      	ldrb	r3, [r7, #22]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3718      	adds	r7, #24
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	607a      	str	r2, [r7, #4]
 800a69a:	461a      	mov	r2, r3
 800a69c:	460b      	mov	r3, r1
 800a69e:	72fb      	strb	r3, [r7, #11]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a6b2:	893b      	ldrh	r3, [r7, #8]
 800a6b4:	7af9      	ldrb	r1, [r7, #11]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	f7f7 f81c 	bl	80016f4 <HAL_PCD_EP_Receive>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6c0:	7dfb      	ldrb	r3, [r7, #23]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 f83e 	bl	800a744 <USBD_Get_USB_Status>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3718      	adds	r7, #24
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6e8:	78fa      	ldrb	r2, [r7, #3]
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7f7 f832 	bl	8001756 <HAL_PCD_EP_GetRxCount>
 800a6f2:	4603      	mov	r3, r0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a704:	4b03      	ldr	r3, [pc, #12]	@ (800a714 <USBD_static_malloc+0x18>)
}
 800a706:	4618      	mov	r0, r3
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	20001308 	.word	0x20001308

0800a718 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]

}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	460b      	mov	r3, r1
 800a736:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a752:	79fb      	ldrb	r3, [r7, #7]
 800a754:	2b03      	cmp	r3, #3
 800a756:	d817      	bhi.n	800a788 <USBD_Get_USB_Status+0x44>
 800a758:	a201      	add	r2, pc, #4	@ (adr r2, 800a760 <USBD_Get_USB_Status+0x1c>)
 800a75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75e:	bf00      	nop
 800a760:	0800a771 	.word	0x0800a771
 800a764:	0800a777 	.word	0x0800a777
 800a768:	0800a77d 	.word	0x0800a77d
 800a76c:	0800a783 	.word	0x0800a783
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	73fb      	strb	r3, [r7, #15]
    break;
 800a774:	e00b      	b.n	800a78e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a776:	2302      	movs	r3, #2
 800a778:	73fb      	strb	r3, [r7, #15]
    break;
 800a77a:	e008      	b.n	800a78e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a77c:	2301      	movs	r3, #1
 800a77e:	73fb      	strb	r3, [r7, #15]
    break;
 800a780:	e005      	b.n	800a78e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a782:	2302      	movs	r3, #2
 800a784:	73fb      	strb	r3, [r7, #15]
    break;
 800a786:	e002      	b.n	800a78e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a788:	2302      	movs	r3, #2
 800a78a:	73fb      	strb	r3, [r7, #15]
    break;
 800a78c:	bf00      	nop
  }
  return usb_status;
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <memset>:
 800a79c:	4402      	add	r2, r0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d100      	bne.n	800a7a6 <memset+0xa>
 800a7a4:	4770      	bx	lr
 800a7a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7aa:	e7f9      	b.n	800a7a0 <memset+0x4>

0800a7ac <__libc_init_array>:
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	4d0d      	ldr	r5, [pc, #52]	@ (800a7e4 <__libc_init_array+0x38>)
 800a7b0:	4c0d      	ldr	r4, [pc, #52]	@ (800a7e8 <__libc_init_array+0x3c>)
 800a7b2:	1b64      	subs	r4, r4, r5
 800a7b4:	10a4      	asrs	r4, r4, #2
 800a7b6:	2600      	movs	r6, #0
 800a7b8:	42a6      	cmp	r6, r4
 800a7ba:	d109      	bne.n	800a7d0 <__libc_init_array+0x24>
 800a7bc:	4d0b      	ldr	r5, [pc, #44]	@ (800a7ec <__libc_init_array+0x40>)
 800a7be:	4c0c      	ldr	r4, [pc, #48]	@ (800a7f0 <__libc_init_array+0x44>)
 800a7c0:	f000 f818 	bl	800a7f4 <_init>
 800a7c4:	1b64      	subs	r4, r4, r5
 800a7c6:	10a4      	asrs	r4, r4, #2
 800a7c8:	2600      	movs	r6, #0
 800a7ca:	42a6      	cmp	r6, r4
 800a7cc:	d105      	bne.n	800a7da <__libc_init_array+0x2e>
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
 800a7d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7d4:	4798      	blx	r3
 800a7d6:	3601      	adds	r6, #1
 800a7d8:	e7ee      	b.n	800a7b8 <__libc_init_array+0xc>
 800a7da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7de:	4798      	blx	r3
 800a7e0:	3601      	adds	r6, #1
 800a7e2:	e7f2      	b.n	800a7ca <__libc_init_array+0x1e>
 800a7e4:	0800a88c 	.word	0x0800a88c
 800a7e8:	0800a88c 	.word	0x0800a88c
 800a7ec:	0800a88c 	.word	0x0800a88c
 800a7f0:	0800a890 	.word	0x0800a890

0800a7f4 <_init>:
 800a7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f6:	bf00      	nop
 800a7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fa:	bc08      	pop	{r3}
 800a7fc:	469e      	mov	lr, r3
 800a7fe:	4770      	bx	lr

0800a800 <_fini>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	bf00      	nop
 800a804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a806:	bc08      	pop	{r3}
 800a808:	469e      	mov	lr, r3
 800a80a:	4770      	bx	lr
