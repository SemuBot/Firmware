/*
 * motor.c
 *
 *  Created on: Nov 18, 2024
 *      Author: medved
 */


#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <motor.h>

#include "stm32l4xx_hal.h"
#include "usart.h"

#define DUTY_CYCLE_LIMIT_DEFAULT 100
#define MAX_PWM_VALUE 1000
#define MAX_LINEAR_VELOCITY 1.0f
#define MIN_LINEAR_VELOCITY -1.0f

static uint8_t duty_cycle_limit;



motor_data motor1 = {
	.dir_port = GPIOC,
	.dir_pin = GPIO_PIN_9
    .pwm_timer = &htim1,
    .pwm_port = GPIOA,
    .pwm_pin = GPIO_PIN_8,
    .duty_cycle = 0.0
};

motor_data motor2 = {
	.dir_port = GPIOC,
	.dir_pin = GPIO_PIN_9
    .pwm_timer = &htim1,
    .pwm_port = GPIOA,
    .pwm_pin = GPIO_PIN_8,
    .duty_cycle = 0.0
};

motor_data motor3 = {
	.dir_port = GPIOC,
	.dir_pin = GPIO_PIN_9
    .pwm_timer = &htim1,
    .pwm_port = GPIOA,
    .pwm_pin = GPIO_PIN_8,
    .duty_cycle = 0.0
};



void motor_init(Motor_data *motor_handler, TIM_HandleTypeDef *pwm_timer)
{
    motor_handler->pinout = pinout;
    motor_handler->pwm_timer = pwm_timer;
    motor_handler->duty_cycle = 0.0f;

    duty_cycle_limit = DUTY_CYCLE_LIMIT_DEFAULT;

    motor_disable(motor_handler);
}



void motor_update(Motor_data *motor_handler)
{
    uint16_t scaled_duty_cycle;
    uint16_t arr_value = __HAL_TIM_GET_AUTORELOAD(motor_handler->pwm_timer);

    // Check if the motor is enabled
    if (motor_handler->duty_cycle >= 0)
    {
        motor_enable(motor_handler);
        HAL_GPIO_WritePin(motor_handler->pinout->dir_port, motor_handler->pinout->dir_pin, GPIO_PIN_SET);
    }
    else if (motor_handler->duty_cycle < 0)
    {
        HAL_GPIO_WritePin(motor_handler->pinout->dir_port, motor_handler->pinout->dir_pin, GPIO_PIN_RESET);
        motor_enable(motor_handler);
    }
    else
    {
        motor_disable(motor_handler);
        return;
    }

    // Scale the duty cycle based on the motor's duty cycle
    scaled_duty_cycle = (uint16_t)((fabs(motor_handler->duty_cycle) / 100.0f) * arr_value);
    if (scaled_duty_cycle > arr_value)
    {
        scaled_duty_cycle = arr_value;
    }

    // Update the PWM compare value
    __HAL_TIM_SET_COMPARE(motor_handler->pwm_timer, TIM_CHANNEL_1, scaled_duty_cycle);
    char duty_cycle_str[50];
    int len = snprintf(duty_cycle_str, sizeof(duty_cycle_str), "Duty Cycle: %.2f\n", motor_handler->duty_cycle);
    HAL_UART_Transmit(&huart2, (uint8_t *)duty_cycle_str, len, HAL_MAX_DELAY);
}

void set_motor_speed(Motor_data *motor_handler, float linear_x)
{
    // Map the linear velocity to PWM range
    motor_handler->duty_cycle = (linear_x / MAX_LINEAR_VELOCITY) * 100.0f;

    // Ensure the duty cycle stays within valid limits
    if (motor_handler->duty_cycle > duty_cycle_limit)
        motor_handler->duty_cycle = duty_cycle_limit;

    if (motor_handler->duty_cycle < -duty_cycle_limit)
        motor_handler->duty_cycle = -duty_cycle_limit;

    // Call motor update to apply changes to the motor
    motor_update(motor_handler);
}


void motor_enable(Motor_data *motor_handler)
{

    HAL_TIM_PWM_Start(motor_handler->pwm_timer, TIM_CHANNEL_1);
}


void motor_disable(Motor_data *motor_handler)
{
    HAL_TIM_PWM_Stop(motor_handler->pwm_timer, TIM_CHANNEL_1);
}

void motor_setDutyCycleLimit(Motor_data *motor_handler, uint8_t limit)
{
    duty_cycle_limit = limit;
}
